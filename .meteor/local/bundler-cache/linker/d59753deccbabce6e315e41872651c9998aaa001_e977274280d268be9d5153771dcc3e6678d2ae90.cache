[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Reload = Package.reload.Reload;\nvar DDP = Package['ddp-client'].DDP;\nvar Random = Package.random.Random;\nvar Mongo = Package.mongo.Mongo;\nvar Autoupdate = Package.autoupdate.Autoupdate;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Template = Package['templating-runtime'].Template;\nvar Spacebars = Package.spacebars.Spacebars;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar HTML = Package.htmljs.HTML;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar exports, __coffeescriptShare, runTests;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"practicalmeteor:mocha\":{\"meteor\":{\"src\":{\"client\":{\"template.mocha.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/client/template.mocha.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.body.addContent((function() {                                                                                 // 2\n  var view = this;                                                                                                     // 3\n  return \"\";                                                                                                           // 4\n}));                                                                                                                   // 5\nMeteor.startup(Template.body.renderToDocument);                                                                        // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/index.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  runTests: function () {                                                                                              // 1\n    return runTests;                                                                                                   // 1\n  },                                                                                                                   // 1\n  MochaRunner: function () {                                                                                           // 1\n    return MochaRunner;                                                                                                // 1\n  },                                                                                                                   // 1\n  BaseReporter: function () {                                                                                          // 1\n    return BaseReporter;                                                                                               // 1\n  },                                                                                                                   // 1\n  ClientServerBaseReporter: function () {                                                                              // 1\n    return ClientServerBaseReporter;                                                                                   // 1\n  },                                                                                                                   // 1\n  HtmlReporter: function () {                                                                                          // 1\n    return HtmlReporter;                                                                                               // 1\n  },                                                                                                                   // 1\n  before: function () {                                                                                                // 1\n    return before;                                                                                                     // 1\n  },                                                                                                                   // 1\n  after: function () {                                                                                                 // 1\n    return after;                                                                                                      // 1\n  },                                                                                                                   // 1\n  beforeEach: function () {                                                                                            // 1\n    return beforeEach;                                                                                                 // 1\n  },                                                                                                                   // 1\n  afterEach: function () {                                                                                             // 1\n    return afterEach;                                                                                                  // 1\n  },                                                                                                                   // 1\n  describe: function () {                                                                                              // 1\n    return describe;                                                                                                   // 1\n  },                                                                                                                   // 1\n  xdescribe: function () {                                                                                             // 1\n    return xdescribe;                                                                                                  // 1\n  },                                                                                                                   // 1\n  it: function () {                                                                                                    // 1\n    return it;                                                                                                         // 1\n  },                                                                                                                   // 1\n  xit: function () {                                                                                                   // 1\n    return xit;                                                                                                        // 1\n  },                                                                                                                   // 1\n  specify: function () {                                                                                               // 1\n    return specify;                                                                                                    // 1\n  },                                                                                                                   // 1\n  xspecify: function () {                                                                                              // 1\n    return xspecify;                                                                                                   // 1\n  },                                                                                                                   // 1\n  xcontext: function () {                                                                                              // 1\n    return xcontext;                                                                                                   // 1\n  },                                                                                                                   // 1\n  context: function () {                                                                                               // 1\n    return context;                                                                                                    // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nmodule.watch(require(\"./setup\"));                                                                                      // 1\nvar MochaRunner = void 0;                                                                                              // 1\nmodule.watch(require(\"./lib/MochaRunner\"), {                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    MochaRunner = v;                                                                                                   // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar BaseReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./reporters/BaseReporter\"), {                                                                    // 1\n  \"default\": function (v) {                                                                                            // 1\n    BaseReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ClientServerBaseReporter = void 0;                                                                                 // 1\nmodule.watch(require(\"./reporters/ClientServerBaseReporter\"), {                                                        // 1\n  \"default\": function (v) {                                                                                            // 1\n    ClientServerBaseReporter = v;                                                                                      // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar HtmlReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./reporters/HtmlReporter\"), {                                                                    // 1\n  \"default\": function (v) {                                                                                            // 1\n    HtmlReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar hideOtherCSS = void 0,                                                                                             // 1\n    hideApp = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/tmeasday:test-reporter-helpers\"), {                                                       // 1\n  hideOtherCSS: function (v) {                                                                                         // 1\n    hideOtherCSS = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  hideApp: function (v) {                                                                                              // 1\n    hideApp = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n                                                                                                                       //\nvar runTests = function () {                                                                                           // 8\n  hideApp('.mocha-wrapper');                                                                                           // 9\n  hideOtherCSS();                                                                                                      // 10\n  MochaRunner.runEverywhere();                                                                                         // 11\n};                                                                                                                     // 12\n                                                                                                                       //\nvar _global = global,                                                                                                  //\n    before = _global.before,                                                                                           //\n    after = _global.after,                                                                                             //\n    beforeEach = _global.beforeEach,                                                                                   //\n    afterEach = _global.afterEach,                                                                                     //\n    describe = _global.describe,                                                                                       //\n    xdescribe = _global.xdescribe,                                                                                     //\n    it = _global.it,                                                                                                   //\n    xit = _global.xit,                                                                                                 //\n    specify = _global.specify,                                                                                         //\n    xspecify = _global.xspecify,                                                                                       //\n    xcontext = _global.xcontext,                                                                                       //\n    context = _global.context;                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"MochaRunner.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MochaRunner.coffee.js\");                                                                   // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MochaRunner.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar EventEmitter, MeteorPublishReporter, Mocha, MochaRunner, Mongo, ObjectLogger, Suite, Test, _, log, utils,          // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nTest = require(\"mocha/lib/test\");                                                                                      // 1\n                                                                                                                       //\nSuite = require(\"mocha/lib/suite\");                                                                                    // 1\n                                                                                                                       //\nutils = require(\"mocha/lib/utils\");                                                                                    // 1\n                                                                                                                       //\nMongo = require(\"meteor/mongo\").Mongo;                                                                                 // 1\n                                                                                                                       //\nMocha = require(\"meteor/practicalmeteor:mocha-core\").Mocha;                                                            // 1\n                                                                                                                       //\nEventEmitter = require(\"events\").EventEmitter;                                                                         // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\");                                               // 1\n                                                                                                                       //\nlog = new ObjectLogger('MochaRunner', 'info');                                                                         // 1\n                                                                                                                       //\nMochaRunner = (function(superClass) {                                                                                  // 1\n  extend(MochaRunner, superClass);                                                                                     // 14\n                                                                                                                       //\n  MochaRunner.instance = null;                                                                                         // 14\n                                                                                                                       //\n  MochaRunner.get = function() {                                                                                       // 14\n    return MochaRunner.instance != null ? MochaRunner.instance : MochaRunner.instance = new MochaRunner();             //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.VERSION = \"2.4.5_6\";                                                                           // 14\n                                                                                                                       //\n  MochaRunner.prototype.serverRunEvents = null;                                                                        // 14\n                                                                                                                       //\n  MochaRunner.prototype.publishers = {};                                                                               // 14\n                                                                                                                       //\n  function MochaRunner() {                                                                                             // 24\n    this.onServerRunSubscriptionReady = bind(this.onServerRunSubscriptionReady, this);                                 // 25\n    this.runServerTests = bind(this.runServerTests, this);                                                             // 25\n    try {                                                                                                              // 25\n      log.enter('constructor');                                                                                        // 26\n      this.utils = utils;                                                                                              // 26\n      this.serverRunEvents = new Mongo.Collection('mochaServerRunEvents');                                             // 26\n      if (Meteor.isServer) {                                                                                           // 29\n        Meteor.methods({                                                                                               // 30\n          \"mocha/runServerTests\": this.runServerTests.bind(this)                                                       // 30\n        });                                                                                                            //\n        this.publish();                                                                                                // 30\n      }                                                                                                                //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 36\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  MochaRunner.prototype.publish = function() {                                                                         // 14\n    var self;                                                                                                          // 40\n    try {                                                                                                              // 40\n      log.enter(\"publish\");                                                                                            // 41\n      self = this;                                                                                                     // 41\n      return Meteor.publish('mochaServerRunEvents', function(runId) {                                                  //\n        var base, ex;                                                                                                  // 44\n        try {                                                                                                          // 44\n          log.enter('publish.mochaServerRunEvents');                                                                   // 45\n          check(runId, String);                                                                                        // 45\n          expect(this.ready).to.be.a('function');                                                                      // 45\n          if ((base = self.publishers)[runId] == null) {                                                               //\n            base[runId] = this;                                                                                        //\n          }                                                                                                            //\n          this.ready();                                                                                                // 45\n          return void 0;                                                                                               // 51\n        } catch (_error) {                                                                                             //\n          ex = _error;                                                                                                 // 53\n          if (ex.stack != null) {                                                                                      // 53\n            log.error(ex.stack);                                                                                       // 53\n          }                                                                                                            //\n          throw new Meteor.Error('unknown-error', (ex.message != null ? ex.message : void 0), (ex.stack != null ? ex.stack : void 0));\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 56\n        }                                                                                                              //\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 58\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.runServerTests = function(runId, grep) {                                                       // 14\n    var mochaRunner;                                                                                                   // 62\n    try {                                                                                                              // 62\n      log.enter(\"runServerTests\", runId);                                                                              // 63\n      check(runId, String);                                                                                            // 63\n      check(grep, Match.Optional(Match.OneOf(null, String)));                                                          // 63\n      expect(runId).to.be.a(\"string\");                                                                                 // 63\n      expect(this.publishers[runId], \"publisher\").to.be.an(\"object\");                                                  // 63\n      expect(Meteor.isServer).to.be[\"true\"];                                                                           // 63\n      mochaRunner = new Mocha();                                                                                       // 63\n      this._addTestsToMochaRunner(mocha.suite, mochaRunner.suite);                                                     // 63\n      mochaRunner.reporter(MeteorPublishReporter, {                                                                    // 63\n        grep: this.escapeGrep(grep),                                                                                   // 72\n        publisher: this.publishers[runId]                                                                              // 72\n      });                                                                                                              //\n      log.info(\"Starting server side tests with run id \" + runId);                                                     // 63\n      return mochaRunner.run(function(failures) {                                                                      //\n        return log.warn('failures:', failures);                                                                        //\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 82\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype._addTestsToMochaRunner = function(fromSuite, toSuite) {                                        // 14\n    var addHooks, i, j, len, len1, newSuite, ref, ref1, results, suite, test;                                          // 87\n    try {                                                                                                              // 87\n      log.enter(\"_addTestToMochaRunner\");                                                                              // 88\n      addHooks = function(hookName) {                                                                                  // 88\n        var hook, i, len, ref;                                                                                         // 91\n        ref = fromSuite[\"_\" + hookName];                                                                               // 91\n        for (i = 0, len = ref.length; i < len; i++) {                                                                  // 91\n          hook = ref[i];                                                                                               //\n          toSuite[hookName](hook.title, hook.fn);                                                                      // 92\n        }                                                                                                              // 91\n        return log.debug(\"Hook \" + hookName + \" for '\" + (fromSuite.fullTitle()) + \"' added.\");                        //\n      };                                                                                                               //\n      addHooks(\"beforeAll\");                                                                                           // 88\n      addHooks(\"afterAll\");                                                                                            // 88\n      addHooks(\"beforeEach\");                                                                                          // 88\n      addHooks(\"afterEach\");                                                                                           // 88\n      ref = fromSuite.tests;                                                                                           // 100\n      for (i = 0, len = ref.length; i < len; i++) {                                                                    // 100\n        test = ref[i];                                                                                                 //\n        test = new Test(test.title, test.fn);                                                                          // 101\n        toSuite.addTest(test);                                                                                         // 101\n        log.debug(\"Tests for '\" + (fromSuite.fullTitle()) + \"' added.\");                                               // 101\n      }                                                                                                                // 100\n      ref1 = fromSuite.suites;                                                                                         // 105\n      results = [];                                                                                                    // 105\n      for (j = 0, len1 = ref1.length; j < len1; j++) {                                                                 //\n        suite = ref1[j];                                                                                               //\n        newSuite = Suite.create(toSuite, suite.title);                                                                 // 106\n        newSuite.timeout(suite.timeout());                                                                             // 106\n        log.debug(\"Suite \" + (newSuite.fullTitle()) + \"  added to '\" + (fromSuite.fullTitle()) + \"'.\");                // 106\n        results.push(this._addTestsToMochaRunner(suite, newSuite));                                                    // 106\n      }                                                                                                                // 105\n      return results;                                                                                                  //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 112\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.runEverywhere = function() {                                                                   // 14\n    try {                                                                                                              // 116\n      log.enter('runEverywhere');                                                                                      // 117\n      expect(Meteor.isClient).to.be[\"true\"];                                                                           // 117\n      this.runId = Random.id();                                                                                        // 117\n      return this.serverRunSubscriptionHandle = Meteor.subscribe('mochaServerRunEvents', this.runId, {                 //\n        onReady: _.bind(this.onServerRunSubscriptionReady, this),                                                      // 121\n        onError: _.bind(this.onServerRunSubscriptionError, this)                                                       // 121\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 127\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.setReporter = function(reporter1) {                                                            // 14\n    this.reporter = reporter1;                                                                                         // 130\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.escapeGrep = function(grep) {                                                                  // 14\n    var matchOperatorsRe;                                                                                              // 133\n    if (grep == null) {                                                                                                //\n      grep = '';                                                                                                       //\n    }                                                                                                                  //\n    try {                                                                                                              // 133\n      log.enter(\"escapeGrep\", grep);                                                                                   // 134\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;                                                                        // 134\n      grep.replace(matchOperatorsRe, '\\\\$&');                                                                          // 134\n      return new RegExp(grep);                                                                                         // 137\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 139\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.onServerRunSubscriptionReady = function() {                                                    // 14\n    var ClientServerReporter, REPORTERS, query, ref, reporters;                                                        // 143\n    try {                                                                                                              // 143\n      log.enter('onServerRunSubscriptionReady');                                                                       // 144\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\");                                           // 144\n      ref = require(\"../reporters\"), REPORTERS = ref.REPORTERS, reporters = ref.reporters;                             // 144\n      query = utils.parseQuery(location.search || '');                                                                 // 144\n      Meteor.call(\"mocha/runServerTests\", this.runId, query.grep, function(err) {                                      // 144\n        log.debug(\"tests started\");                                                                                    // 150\n        if (err) {                                                                                                     // 151\n          return log.error(err);                                                                                       //\n        }                                                                                                              //\n      });                                                                                                              //\n      return Tracker.autorun((function(_this) {                                                                        //\n        return function() {                                                                                            //\n          var event, reporter;                                                                                         // 154\n          event = _this.serverRunEvents.findOne({                                                                      // 154\n            event: \"run mocha\"                                                                                         // 154\n          });                                                                                                          //\n          if (((event != null ? event.data.reporter : void 0) != null) && _.contains(REPORTERS, event.data.reporter)) {\n            reporter = reporters[event.data.reporter];                                                                 // 156\n            _this.setReporter(reporter);                                                                               // 156\n          }                                                                                                            //\n          if ((event != null ? event.data.runOrder : void 0) === \"serial\") {                                           // 159\n            return reporter = new ClientServerReporter(null, {                                                         //\n              runOrder: \"serial\"                                                                                       // 160\n            });                                                                                                        //\n          } else if ((event != null ? event.data.runOrder : void 0) === \"parallel\") {                                  //\n            mocha.reporter(ClientServerReporter);                                                                      // 162\n            return mocha.run(function() {});                                                                           //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 168\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.onServerRunSubscriptionError = function(meteorError) {                                         // 14\n    try {                                                                                                              // 172\n      log.enter('onServerRunSubscriptionError');                                                                       // 173\n      return log.error(meteorError);                                                                                   //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 176\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return MochaRunner;                                                                                                  //\n                                                                                                                       //\n})(EventEmitter);                                                                                                      //\n                                                                                                                       //\nmodule.exports = MochaRunner.get();                                                                                    // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reporters\":{\"BaseReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./BaseReporter.coffee.js\");                                                                  // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"BaseReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar BaseReporter;                                                                                                      // 13\n                                                                                                                       //\nBaseReporter = (function() {                                                                                           // 13\n  function BaseReporter(runner, options) {                                                                             // 15\n    this.runner = runner;                                                                                              // 16\n    this.options = options;                                                                                            // 16\n    expect(this.runner).to.be.an('object');                                                                            // 16\n    expect(this.options).to.be.an('object');                                                                           // 16\n    this.stats = {                                                                                                     // 16\n      total: this.runner.total,                                                                                        // 18\n      suites: 0,                                                                                                       // 18\n      tests: 0,                                                                                                        // 18\n      passes: 0,                                                                                                       // 18\n      pending: 0,                                                                                                      // 18\n      failures: 0                                                                                                      // 18\n    };                                                                                                                 //\n    this.failures = [];                                                                                                // 16\n    this.runner.stats = this.stats;                                                                                    // 16\n    this.runner.on('start', (function(_this) {                                                                         // 16\n      return function() {                                                                                              //\n        return _this.stats.start = new Date;                                                                           //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('suite', (function(_this) {                                                                         // 16\n      return function(suite) {                                                                                         //\n        if (!suite.root) {                                                                                             // 27\n          return _this.stats.suites++;                                                                                 //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('test end', (function(_this) {                                                                      // 16\n      return function(test) {                                                                                          //\n        return _this.stats.tests++;                                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('pass', (function(_this) {                                                                          // 16\n      return function(test) {                                                                                          //\n        var medium;                                                                                                    // 33\n        medium = test.slow() / 2;                                                                                      // 33\n        if (test.duration > test.slow()) {                                                                             // 34\n          test.speed = 'slow';                                                                                         // 35\n        } else if (test.duration > medium) {                                                                           //\n          test.speed = 'medium';                                                                                       // 37\n        } else {                                                                                                       //\n          test.speed = 'fast';                                                                                         // 39\n        }                                                                                                              //\n        return _this.stats.passes++;                                                                                   //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('fail', (function(_this) {                                                                          // 16\n      return function(test, err) {                                                                                     //\n        _this.stats.failures++;                                                                                        // 43\n        test.err = err;                                                                                                // 43\n        return _this.failures.push(test);                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('end', (function(_this) {                                                                           // 16\n      return function() {                                                                                              //\n        _this.stats.end = new Date;                                                                                    // 48\n        return _this.stats.duration = _this.stats.end - _this.stats.start;                                             //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('pending', (function(_this) {                                                                       // 16\n      return function() {                                                                                              //\n        return _this.stats.pending++;                                                                                  //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  return BaseReporter;                                                                                                 //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = BaseReporter;                                                                                         // 13\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerBaseReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ClientServerBaseReporter.coffee.js\");                                                      // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerBaseReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, MochaRunner;                                                                             // 1\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nClientServerBaseReporter = (function() {                                                                               // 1\n  function ClientServerBaseReporter(clientRunner, serverRunner, options) {                                             // 16\n    this.clientRunner = clientRunner;                                                                                  // 17\n    this.serverRunner = serverRunner;                                                                                  // 17\n    this.options = options;                                                                                            // 17\n    expect(this.clientRunner).to.be.an('object');                                                                      // 17\n    expect(this.serverRunner).to.be.an('object');                                                                      // 17\n    expect(this.options).to.be.an('object');                                                                           // 17\n    this.clientStats = {                                                                                               // 17\n      total: this.clientRunner.total,                                                                                  // 21\n      suites: 0,                                                                                                       // 21\n      tests: 0,                                                                                                        // 21\n      passes: 0,                                                                                                       // 21\n      pending: 0,                                                                                                      // 21\n      failures: 0                                                                                                      // 21\n    };                                                                                                                 //\n    this.serverStats = {                                                                                               // 17\n      total: this.serverRunner.total,                                                                                  // 22\n      suites: 0,                                                                                                       // 22\n      tests: 0,                                                                                                        // 22\n      passes: 0,                                                                                                       // 22\n      pending: 0,                                                                                                      // 22\n      failures: 0                                                                                                      // 22\n    };                                                                                                                 //\n    this.stats = {                                                                                                     // 17\n      total: this.serverRunner.total + this.clientRunner.total,                                                        // 23\n      suites: 0,                                                                                                       // 23\n      tests: 0,                                                                                                        // 23\n      passes: 0,                                                                                                       // 23\n      pending: 0,                                                                                                      // 23\n      failures: 0                                                                                                      // 23\n    };                                                                                                                 //\n    this.failures = [];                                                                                                // 17\n    this.clientRunner.stats = this.clientStats;                                                                        // 17\n    this.serverRunner.stats = this.serverStats;                                                                        // 17\n    this.registerRunnerEvents(\"server\");                                                                               // 17\n    this.registerRunnerEvents(\"client\");                                                                               // 17\n    MochaRunner.on(\"end all\", (function(_this) {                                                                       // 17\n      return function() {                                                                                              //\n        window.TEST_STATUS = {                                                                                         // 34\n          FAILURES: _this.stats.failures,                                                                              // 34\n          DONE: true                                                                                                   // 34\n        };                                                                                                             //\n        window.DONE = true;                                                                                            // 34\n        return window.FAILURES = _this.stats.failures;                                                                 //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  ClientServerBaseReporter.prototype.registerRunnerEvents = function(where) {                                          // 16\n    this[where + \"Runner\"].on('start', (function(_this) {                                                              // 40\n      return function() {                                                                                              //\n        var base, start;                                                                                               // 41\n        start = new Date();                                                                                            // 41\n        _this[where + \"Stats\"].start = start;                                                                          // 41\n        if ((base = _this.stats).start == null) {                                                                      //\n          base.start = start;                                                                                          //\n        }                                                                                                              //\n                                                                                                                       // 45\n        /*                                                                                                             // 45\n          The total and other stats of the server runner are sent with the 'start' event,                              //\n          so we need to update the total of the stats.                                                                 //\n          Also when running in 'serial' mode (server test first and then client tests),                                //\n          clientRunner.total is undefined because client starts running after server tests end.                        //\n         */                                                                                                            //\n        _this.clientStats.total = _this.clientRunner.total;                                                            // 41\n        _this.serverStats.total = _this.serverRunner.total;                                                            // 41\n        return _this.stats.total = _this.clientStats.total + _this.serverStats.total;                                  //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('suite', (function(_this) {                                                              // 40\n      return function(suite) {                                                                                         //\n        if (!suite.root) {                                                                                             // 57\n          _this.stats.suites++;                                                                                        // 58\n          return _this[where + \"Stats\"].suites++;                                                                      //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('test end', (function(_this) {                                                           // 40\n      return function(test) {                                                                                          //\n        return _this.stats.tests++;                                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('pass', (function(_this) {                                                               // 40\n      return function(test) {                                                                                          //\n        var medium;                                                                                                    // 65\n        medium = test.slow() / 2;                                                                                      // 65\n        if (test.duration > test.slow()) {                                                                             // 67\n          test.speed = 'slow';                                                                                         // 68\n        } else if (test.duration > medium) {                                                                           //\n          test.speed = 'medium';                                                                                       // 70\n        } else {                                                                                                       //\n          test.speed = 'fast';                                                                                         // 72\n        }                                                                                                              //\n        _this[where + \"Stats\"].passes++;                                                                               // 65\n        return _this.stats.passes++;                                                                                   //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('fail', (function(_this) {                                                               // 40\n      return function(test, err) {                                                                                     //\n        if (test.err == null) {                                                                                        //\n          test.err = err;                                                                                              //\n        }                                                                                                              //\n        _this.failures.push(test);                                                                                     // 78\n        _this.stats.failures++;                                                                                        // 78\n        return _this[where + \"Stats\"].failures++;                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('end', (function(_this) {                                                                // 40\n      return function() {                                                                                              //\n        var end;                                                                                                       // 86\n        end = new Date();                                                                                              // 86\n        _this.stats.end = end;                                                                                         // 86\n        _this[where + \"Stats\"].end = end;                                                                              // 86\n        _this.stats.duration = _this.stats.end - _this.stats.start;                                                    // 86\n        return _this[where + \"Stats\"].duration = _this[where + \"Stats\"].end - _this[where + \"Stats\"].start;            //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this[where + \"Runner\"].on('pending', (function(_this) {                                                     //\n      return function() {                                                                                              //\n        _this.stats.pending++;                                                                                         // 95\n        return _this[where + \"Stats\"].pending++;                                                                       //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ClientServerBaseReporter;                                                                                     //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = ClientServerBaseReporter;                                                                             // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ClientServerReporter.coffee.js\");                                                          // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerReporter, EventEmitter, MirrorReporter, MochaRunner, ObjectLogger, _, log,                             // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };                                    //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nMochaRunner = require(\"./../lib/MochaRunner\");                                                                         // 1\n                                                                                                                       //\nMirrorReporter = require('./MirrorReporter');                                                                          // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nEventEmitter = require(\"events\").EventEmitter;                                                                         // 1\n                                                                                                                       //\nlog = new ObjectLogger('ClientServerReporter', 'info');                                                                // 1\n                                                                                                                       //\nClientServerReporter = (function() {                                                                                   // 1\n  function ClientServerReporter(clientRunner1, options) {                                                              // 12\n    this.clientRunner = clientRunner1;                                                                                 // 13\n    this.options = options != null ? options : {};                                                                     // 13\n    this.runTestsSerially = bind(this.runTestsSerially, this);                                                         // 13\n    try {                                                                                                              // 13\n      log.enter('constructor');                                                                                        // 14\n      this.serverRunnerProxy = new EventEmitter();                                                                     // 14\n      if (this.options.runOrder === \"serial\") {                                                                        // 17\n        this.clientRunner = new EventEmitter();                                                                        // 18\n        this.runTestsSerially(this.clientRunner, this.serverRunnerProxy);                                              // 18\n      }                                                                                                                //\n      if (!MochaRunner.reporter) {                                                                                     // 21\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\");                  // 22\n        return;                                                                                                        // 23\n      }                                                                                                                //\n      this.reporter = new MochaRunner.reporter(this.clientRunner, this.serverRunnerProxy, this.options);               // 14\n      this.clientRunner.on(\"start\", function() {                                                                       // 14\n        return window.mochaIsRunning = true;                                                                           //\n      });                                                                                                              //\n      this.clientRunner.on(\"end\", (function(_this) {                                                                   // 14\n        return function() {                                                                                            //\n          window.mochaIsRunning = false;                                                                               // 32\n          window.mochaIsDone = true;                                                                                   // 32\n          MochaRunner.emit(\"end client\");                                                                              // 32\n          _this.clientTestsEnded = true;                                                                               // 32\n          if (_this.serverTestsEnded) {                                                                                // 37\n            return MochaRunner.emit(\"end all\");                                                                        //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.serverRunnerProxy.on('end', (function(_this) {                                                              // 14\n        return function() {                                                                                            //\n          _this.serverTestsEnded = true;                                                                               // 41\n          MochaRunner.emit(\"end server\");                                                                              // 41\n          if (_this.clientTestsEnded) {                                                                                // 43\n            return MochaRunner.emit(\"end all\");                                                                        //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      MochaRunner.serverRunEvents.find().observe({                                                                     // 14\n        added: _.bind(this.onServerRunnerEvent, this)                                                                  // 46\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 51\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  ClientServerReporter.prototype.runTestsSerially = function(clientRunner, serverRunnerProxy) {                        // 12\n    try {                                                                                                              // 55\n      log.enter(\"runTestsSerially\");                                                                                   // 56\n      return serverRunnerProxy.on(\"end\", (function(_this) {                                                            //\n        return function() {                                                                                            //\n          mocha.reporter(MirrorReporter, {                                                                             // 58\n            clientRunner: clientRunner                                                                                 // 58\n          });                                                                                                          //\n          return mocha.run(function() {});                                                                             //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 64\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ClientServerReporter.prototype.onServerRunnerEvent = function(doc) {                                                 // 12\n    var ex, ref;                                                                                                       // 68\n    try {                                                                                                              // 68\n      log.enter('onServerRunnerEvent');                                                                                // 69\n      expect(doc).to.be.an('object');                                                                                  // 69\n      expect(doc.event).to.be.a('string');                                                                             // 69\n      if (doc.event === \"run mocha\") {                                                                                 // 72\n        return;                                                                                                        // 73\n      }                                                                                                                //\n      expect(doc.data).to.be.an('object');                                                                             // 69\n      doc.data.fullTitle = function() {                                                                                // 69\n        return doc.data._fullTitle;                                                                                    // 77\n      };                                                                                                               //\n      doc.data.slow = function() {                                                                                     // 69\n        return doc.data._slow;                                                                                         // 78\n      };                                                                                                               //\n      if ((ref = doc.data.err) != null) {                                                                              //\n        ref.toString = function() {                                                                                    //\n          return \"Error: \" + this.message;                                                                             //\n        };                                                                                                             //\n      }                                                                                                                //\n      if (doc.data.parent) {                                                                                           // 81\n        doc.data.parent.fullTitle = function() {                                                                       // 82\n          return doc.data.parent._fullTitle;                                                                           // 82\n        };                                                                                                             //\n        doc.data.parent.slow = function() {                                                                            // 82\n          return doc.data.parent._slow;                                                                                // 83\n        };                                                                                                             //\n      }                                                                                                                //\n      if (doc.event === 'start') {                                                                                     // 86\n        this.serverRunnerProxy.stats = doc.data;                                                                       // 87\n        this.serverRunnerProxy.total = doc.data.total;                                                                 // 87\n      }                                                                                                                //\n      return this.serverRunnerProxy.emit(doc.event, doc.data, doc.data.err);                                           //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 93\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 95\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ClientServerReporter;                                                                                         //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = ClientServerReporter;                                                                                 // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ConsoleReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ConsoleReporter.coffee.js\");                                                               // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ConsoleReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, ConsoleReporter, MochaRunner, ObjectLogger, log,                                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");                                                      // 1\n                                                                                                                       //\nlog = new ObjectLogger('ConsoleReporter', 'info');                                                                     // 1\n                                                                                                                       //\nConsoleReporter = (function(superClass) {                                                                              // 1\n  extend(ConsoleReporter, superClass);                                                                                 // 11\n                                                                                                                       //\n  function ConsoleReporter(clientRunner, serverRunner, options) {                                                      // 11\n    this.clientRunner = clientRunner;                                                                                  // 12\n    this.serverRunner = serverRunner;                                                                                  // 12\n    this.options = options;                                                                                            // 12\n    this.finishAndPrintTestsSummary = bind(this.finishAndPrintTestsSummary, this);                                     // 12\n    this.printReporterHeader = bind(this.printReporterHeader, this);                                                   // 12\n    try {                                                                                                              // 12\n      log.enter('constructor');                                                                                        // 13\n      ConsoleReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);            // 13\n      MochaRunner.on(\"end all\", (function(_this) {                                                                     // 13\n        return function() {                                                                                            //\n          return _this.finishAndPrintTestsSummary();                                                                   //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 18\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 20\n  /*                                                                                                                   // 20\n    Overwriting from ClientServerBaseReporter                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n  ConsoleReporter.prototype.registerRunnerEvents = function(where) {                                                   // 11\n    try {                                                                                                              // 24\n      log.enter(\"registerRunnerEvents\");                                                                               // 25\n      ConsoleReporter.__super__.registerRunnerEvents.call(this, where);                                                // 25\n      this[where + \"Runner\"].on(\"start\", (function(_this) {                                                            // 25\n        return function() {                                                                                            //\n          return _this.printReporterHeader(where);                                                                     //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this[where + \"Runner\"].on('test end', (function(_this) {                                                         // 25\n        return function(test) {                                                                                        //\n          return _this.printTest(test, where);                                                                         //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      return this[where + \"Runner\"].on(\"fail\", (function(_this) {                                                      //\n        return function(hook) {                                                                                        //\n          if (hook.type === 'hook') {                                                                                  // 33\n            return _this.printTest(hook, where);                                                                       //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 36\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.printReporterHeader = function(where) {                                                    // 11\n    try {                                                                                                              // 40\n      log.enter(\"printReporterHeader\", where);                                                                         // 41\n      if (this.options.runOrder !== 'serial') {                                                                        // 42\n        return;                                                                                                        // 42\n      }                                                                                                                //\n      where = where[0].toUpperCase() + where.substr(1);                                                                // 41\n      console.log(\"\\n--------------------------------------------------\");                                             // 41\n      console.log(\"------------------ \" + where + \" tests ------------------\");                                        // 41\n      return console.log(\"--------------------------------------------------\\n\");                                      //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 49\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.printTest = function(test, where) {                                                        // 11\n    var state;                                                                                                         // 53\n    try {                                                                                                              // 53\n      log.enter(\"prinTest\", test);                                                                                     // 54\n      state = test.state || (test.pending ? \"pending\" : void 0);                                                       // 54\n      if (this.options.runOrder === 'serial') {                                                                        // 59\n        where = \"\";                                                                                                    // 60\n      } else {                                                                                                         //\n        where = where[0].toUpperCase() + \": \";                                                                         // 63\n      }                                                                                                                //\n      console.log(\"\" + where + (test.fullTitle()) + \" : \" + state);                                                    // 54\n      if (test.state === \"failed\") {                                                                                   // 67\n        console.log(\"  \" + (test.err.stack || test.err));                                                              // 68\n      }                                                                                                                //\n      return console.log(\"\");                                                                                          //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 72\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.finishAndPrintTestsSummary = function() {                                                  // 11\n    var ref, ref1;                                                                                                     // 76\n    try {                                                                                                              // 76\n      log.enter(\"finishAndPrintTestsSummary\");                                                                         // 77\n      if ((((ref = this.clientStats) != null ? ref.total : void 0) == null) || (((ref1 = this.serverStats) != null ? ref1.total : void 0) == null)) {\n        return;                                                                                                        // 78\n      }                                                                                                                //\n      console.log(\"\\n--------------------------------------------------\");                                             // 77\n      console.log(\"---------------------RESULTS----------------------\");                                               // 77\n      console.log(\"PASSED:\", this.stats.passes);                                                                       // 77\n      console.log(\"FAILED:\", this.stats.failures);                                                                     // 77\n      console.log(\"SKIPPED:\", this.stats.pending);                                                                     // 77\n      console.log(\"TOTAL:\", this.stats.total);                                                                         // 77\n      console.log(\"--------------------------------------------------\");                                               // 77\n      return console.log(\"--------------------------------------------------\\n\");                                      //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 89\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ConsoleReporter;                                                                                              //\n                                                                                                                       //\n})(ClientServerBaseReporter);                                                                                          //\n                                                                                                                       //\nmodule.exports = ConsoleReporter;                                                                                      // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HtmlReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./HtmlReporter.coffee.js\");                                                                  // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HtmlReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, HtmlReporter, MochaHtmlReporter, MochaRunner, ObjectLogger, log,                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nMochaHtmlReporter = require(\"./html\");                                                                                 // 1\n                                                                                                                       //\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");                                                      // 1\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nlog = new ObjectLogger('HtmlReporter', 'info');                                                                        // 1\n                                                                                                                       //\nHtmlReporter = (function(superClass) {                                                                                 // 1\n  extend(HtmlReporter, superClass);                                                                                    // 10\n                                                                                                                       //\n  function HtmlReporter(clientRunner, serverRunner, options) {                                                         // 10\n    this.clientRunner = clientRunner;                                                                                  // 11\n    this.serverRunner = serverRunner;                                                                                  // 11\n    this.options = options != null ? options : {};                                                                     // 11\n    this.addReporterHtml = bind(this.addReporterHtml, this);                                                           // 11\n    try {                                                                                                              // 11\n      log.enter('constructor');                                                                                        // 12\n      this.addReporterHtml();                                                                                          // 12\n      this.reporter = new MochaHtmlReporter(this.clientRunner);                                                        // 12\n      this.serverReporter = new MochaHtmlReporter(this.serverRunner, {                                                 // 12\n        elementIdPrefix: 'server-'                                                                                     // 16\n      });                                                                                                              //\n      HtmlReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);               // 12\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 21\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 23\n  /*                                                                                                                   // 23\n    Adds the html required by the mocha HTML reporter to the body of the html                                          //\n    document. We modified the mocha HTML reporter to be able to display 2 reporters                                    //\n    at the same time, one for client tests and one for server tests.                                                   //\n    TODO: Create a single meteor reactive reporter.                                                                    //\n   */                                                                                                                  //\n                                                                                                                       //\n  HtmlReporter.prototype.addReporterHtml = function() {                                                                // 10\n    var div;                                                                                                           // 30\n    try {                                                                                                              // 30\n      log.enter(\"addReporterHtml\");                                                                                    // 31\n      div = document.createElement('div');                                                                             // 31\n      div.className = 'mocha-wrapper';                                                                                 // 31\n      div.innerHTML = '<div class=\"content\"> <div class=\"test-wrapper\"> <h1 class=\"title\">Client tests</h1> <div id=\"mocha\" class=\"mocha\"></div> </div> <div class=\"divider\"></div> <div class=\"test-wrapper\"> <h1 class=\"title\">Server tests</h1> <div id=\"server-mocha\" class=\"mocha\"></div> </div> </div>';\n      return document.body.appendChild(div);                                                                           //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 53\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return HtmlReporter;                                                                                                 //\n                                                                                                                       //\n})(ClientServerBaseReporter);                                                                                          //\n                                                                                                                       //\nmodule.exports = HtmlReporter;                                                                                         // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MeteorPublishReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MeteorPublishReporter.coffee.js\");                                                         // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MeteorPublishReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar BaseReporter, MeteorPublishReporter, ObjectLogger, _, log,                                                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nBaseReporter = require(\"./BaseReporter\");                                                                              // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nlog = new ObjectLogger('MeteorPublishReporter', 'info');                                                               // 1\n                                                                                                                       //\nMeteorPublishReporter = (function(superClass) {                                                                        // 1\n  extend(MeteorPublishReporter, superClass);                                                                           // 9\n                                                                                                                       //\n  MeteorPublishReporter.publisher = null;                                                                              // 9\n                                                                                                                       //\n  function MeteorPublishReporter(runner, options) {                                                                    // 11\n    this.errorJSON = bind(this.errorJSON, this);                                                                       // 12\n    this.added = bind(this.added, this);                                                                               // 12\n    var HTML_REPORTER, REPORTERS, mochaReporter, ref;                                                                  // 12\n    try {                                                                                                              // 12\n      log.enter('constructor', arguments);                                                                             // 13\n      expect(options.reporterOptions, 'options.reporterOptions').to.be.an('object');                                   // 13\n      runner.grep(options.reporterOptions.grep);                                                                       // 13\n      MeteorPublishReporter.__super__.constructor.call(this, runner, options);                                         // 13\n      this.publisher = options.reporterOptions.publisher;                                                              // 13\n      expect(this.publisher, '@publisher').to.be.an('object');                                                         // 13\n      expect(this.publisher.ready, '@publisher.ready').to.be.a('function');                                            // 13\n      expect(this.publisher.added, '@publisher.added').to.be.a('function');                                            // 13\n      expect(this.publisher.onStop, '@publisher.onStop').to.be.a('function');                                          // 13\n      this.publisher.onStop((function(_this) {                                                                         // 13\n        return function() {                                                                                            //\n          return _this.stopped = true;                                                                                 //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.stopped = false;                                                                                            // 13\n      this.sequence = 0;                                                                                               // 13\n      this.added = Meteor.bindEnvironment(this.added, null, this);                                                     // 13\n      ref = require(\"./index\"), REPORTERS = ref.REPORTERS, HTML_REPORTER = ref.HTML_REPORTER;                          // 13\n      mochaReporter = process.env.MOCHA_REPORTER || HTML_REPORTER;                                                     // 13\n      if (mochaReporter && !_.contains(REPORTERS, mochaReporter)) {                                                    // 39\n        log.info(\"Can't find '\" + mochaReporter + \"' reporter. Using '\" + HTML_REPORTER + \"' instead.\");               // 40\n        mochaReporter = HTML_REPORTER;                                                                                 // 40\n      }                                                                                                                //\n      this.added('run mocha', {                                                                                        // 13\n        reporter: mochaReporter,                                                                                       // 45\n        runOrder: process.env.MOCHA_RUN_ORDER || 'parallel'                                                            // 45\n      });                                                                                                              //\n      this.runner.on('start', (function(_this) {                                                                       // 13\n        return function() {                                                                                            //\n          try {                                                                                                        // 48\n            log.enter('onStart', arguments);                                                                           // 49\n            return _this.added('start', _this.stats);                                                                  //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 53\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('suite', (function(_this) {                                                                       // 13\n        return function(suite) {                                                                                       //\n          try {                                                                                                        // 56\n            log.enter('onSuite', arguments);                                                                           // 57\n            return _this.added('suite', _this.cleanSuite(suite));                                                      //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 63\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('suite end', (function(_this) {                                                                   // 13\n        return function(suite) {                                                                                       //\n          try {                                                                                                        // 66\n            log.enter('onSuiteEnd', arguments);                                                                        // 67\n            return _this.added('suite end', _this.cleanSuite(suite));                                                  //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 70\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('test end', (function(_this) {                                                                    // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 73\n            log.enter('onTestEnd', arguments);                                                                         // 74\n            return _this.added('test end', _this.cleanTest(test));                                                     //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 77\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('pass', (function(_this) {                                                                        // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 80\n            log.enter('onPass', arguments);                                                                            // 81\n            return _this.added('pass', _this.cleanTest(test));                                                         //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 84\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('fail', (function(_this) {                                                                        // 13\n        return function(test, error) {                                                                                 //\n          try {                                                                                                        // 87\n            log.enter('onFail', arguments);                                                                            // 88\n            return _this.added('fail', _this.cleanTest(test));                                                         //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 91\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('end', (function(_this) {                                                                         // 13\n        return function() {                                                                                            //\n          try {                                                                                                        // 94\n            log.enter('onEnd', arguments);                                                                             // 95\n            return _this.added('end', _this.stats);                                                                    //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 98\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('pending', (function(_this) {                                                                     // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 101\n            log.enter('onPending', arguments);                                                                         // 102\n            log.debug(\"test\", test);                                                                                   // 102\n            return _this.added('pending', _this.cleanTest(test));                                                      //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 106\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 108\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.added = function(event, data) {                                                      // 9\n    var doc, ex;                                                                                                       // 112\n    try {                                                                                                              // 112\n      log.enter('added', arguments);                                                                                   // 113\n      if (this.stopped === true) {                                                                                     // 115\n        return;                                                                                                        // 115\n      }                                                                                                                //\n      this.sequence++;                                                                                                 // 113\n      doc = {                                                                                                          // 113\n        _id: \"\" + this.sequence,                                                                                       // 118\n        event: event,                                                                                                  // 118\n        data: data                                                                                                     // 118\n      };                                                                                                               //\n      return this.publisher.added('mochaServerRunEvents', doc._id, doc);                                               //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 123\n      log.error(\"Can't send report data to client.\");                                                                  // 123\n      log.error(\"Error:\", ex.stack || ex.message);                                                                     // 123\n      return log.error(\"Document:\", doc);                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 127\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 130\n  /**                                                                                                                  // 130\n   * Return a plain-object representation of `test`                                                                    //\n   * free of cyclic properties etc.                                                                                    //\n  #                                                                                                                    //\n   * @param {Object} test                                                                                              //\n   * @return {Object}                                                                                                  //\n   * @api private                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.cleanTest = function(test) {                                                         // 9\n    var ex, properties, ref;                                                                                           // 139\n    try {                                                                                                              // 139\n      log.enter(\"cleanTest\", arguments);                                                                               // 140\n      properties = [\"title\", \"type\", \"state\", \"speed\", \"pending\", \"duration\", \"async\", \"sync\", \"_timeout\", \"_slow\", \"body\"];\n      return _.extend(_.pick(test, properties), {                                                                      // 144\n        _fullTitle: test.fullTitle(),                                                                                  // 144\n        parent: this.cleanSuite(test.parent),                                                                          // 144\n        fn: (ref = test.fn) != null ? ref.toString() : void 0,                                                         // 144\n        err: this.errorJSON(test.err),                                                                                 // 144\n        isServer: true                                                                                                 // 144\n      });                                                                                                              //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 153\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 156\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.cleanSuite = function(suite) {                                                       // 9\n    var ex;                                                                                                            // 160\n    try {                                                                                                              // 160\n      log.enter(\"cleanSuite\", arguments);                                                                              // 161\n      return _.extend(_.pick(suite, [\"title\", \"root\", \"pending\"]), {                                                   // 162\n        _fullTitle: suite.fullTitle(),                                                                                 // 162\n        isServer: true                                                                                                 // 162\n      });                                                                                                              //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 167\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 169\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 171\n  /**                                                                                                                  // 171\n   * Transform `error` into a JSON object.                                                                             //\n   * @param {Error} err                                                                                                //\n   * @return {Object}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.errorJSON = function(err) {                                                          // 9\n    if (!err) {                                                                                                        // 178\n      return;                                                                                                          // 178\n    }                                                                                                                  //\n                                                                                                                       // 179\n    /*                                                                                                                 // 179\n      Only picking the defaults properties define by ECMAScript to avoid problems                                      //\n      with custom error that may have properties that can't be stringify such as functions.                            //\n      See https://goo.gl/bsZh3B and https://goo.gl/AFp6KB                                                              //\n     */                                                                                                                //\n    return _.pick(err, [\"name\", \"message\", \"stack\"]);                                                                  // 184\n  };                                                                                                                   //\n                                                                                                                       //\n  return MeteorPublishReporter;                                                                                        //\n                                                                                                                       //\n})(BaseReporter);                                                                                                      //\n                                                                                                                       //\nmodule.exports = MeteorPublishReporter;                                                                                // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MirrorReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MirrorReporter.coffee.js\");                                                                // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MirrorReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar MirrorReporter, ObjectLogger, log;                                                                                 // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nlog = new ObjectLogger('MirrorReporter', 'info');                                                                      // 1\n                                                                                                                       //\nMirrorReporter = (function() {                                                                                         // 1\n  function MirrorReporter(mochaReporter, options) {                                                                    // 6\n    var clientRunner, ref;                                                                                             // 8\n    this.mochaReporter = mochaReporter;                                                                                // 8\n    clientRunner = (ref = options.reporterOptions) != null ? ref.clientRunner : void 0;                                // 8\n    expect(clientRunner, \"clientRunner\").to.be.ok;                                                                     // 8\n    clientRunner.total = this.mochaReporter.total;                                                                     // 8\n    this.mochaReporter.on('start', (function(_this) {                                                                  // 8\n      return function() {                                                                                              //\n        try {                                                                                                          // 15\n          log.enter('onStart', arguments);                                                                             // 16\n          return clientRunner.emit.call(clientRunner, 'start');                                                        //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 19\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('suite', (function(_this) {                                                                  // 8\n      return function(suite) {                                                                                         //\n        try {                                                                                                          // 22\n          log.enter('onSuite', arguments);                                                                             // 23\n          return clientRunner.emit.call(clientRunner, 'suite', suite);                                                 //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 26\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('suite end', (function(_this) {                                                              // 8\n      return function(suite) {                                                                                         //\n        try {                                                                                                          // 29\n          log.enter('onSuiteEnd', arguments);                                                                          // 30\n          return clientRunner.emit.call(clientRunner, 'suite end', suite);                                             //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 33\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('test end', (function(_this) {                                                               // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 36\n          log.enter('onTestEnd', arguments);                                                                           // 37\n          return clientRunner.emit.call(clientRunner, 'test end', test);                                               //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 40\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('pass', (function(_this) {                                                                   // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 43\n          log.enter('onPass', arguments);                                                                              // 44\n          return clientRunner.emit.call(clientRunner, 'pass', test);                                                   //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 47\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('fail', (function(_this) {                                                                   // 8\n      return function(test, error) {                                                                                   //\n        try {                                                                                                          // 50\n          log.enter('onFail', arguments);                                                                              // 51\n          return clientRunner.emit.call(clientRunner, 'fail', test, error);                                            //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 54\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('end', (function(_this) {                                                                    // 8\n      return function() {                                                                                              //\n        try {                                                                                                          // 57\n          log.enter('onEnd', arguments);                                                                               // 58\n          return clientRunner.emit.call(clientRunner, 'end');                                                          //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 61\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('pending', (function(_this) {                                                                // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 64\n          log.enter('onPending', arguments);                                                                           // 65\n          return clientRunner.emit.call(clientRunner, 'pending', test);                                                //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 69\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  return MirrorReporter;                                                                                               //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = MirrorReporter;                                                                                       // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"XunitReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./XunitReporter.coffee.js\");                                                                 // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"XunitReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ConsoleReporter, MochaRunner, XUnitReporter,                                                                       // 1\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nConsoleReporter = require(\"./ConsoleReporter\");                                                                        // 1\n                                                                                                                       //\nXUnitReporter = (function(superClass) {                                                                                // 1\n  extend(XUnitReporter, superClass);                                                                                   // 6\n                                                                                                                       //\n  XUnitReporter.VERSION = \"0.1.0\";                                                                                     // 6\n                                                                                                                       //\n  XUnitReporter.prototype.xUnitPrefix = \"##_meteor_magic##xunit: \";                                                    // 6\n                                                                                                                       //\n  function XUnitReporter(clientRunner, serverRunner, options) {                                                        // 9\n    this.clientRunner = clientRunner;                                                                                  // 11\n    this.serverRunner = serverRunner;                                                                                  // 11\n    this.options = options;                                                                                            // 11\n    this.clientTests = [];                                                                                             // 11\n    this.serverTests = [];                                                                                             // 11\n    MochaRunner.on(\"end all\", (function(_this) {                                                                       // 11\n      return function() {                                                                                              //\n        return _this.printTestSuite();                                                                                 //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    XUnitReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);                // 11\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 21\n  /*                                                                                                                   // 21\n    Overwrite from ConsoleReporter                                                                                     //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.registerRunnerEvents = function(where) {                                                     // 6\n    XUnitReporter.__super__.registerRunnerEvents.call(this, where);                                                    // 26\n    this[where + \"Runner\"].on('pending', (function(_this) {                                                            // 26\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('pass', (function(_this) {                                                               // 26\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this[where + \"Runner\"].on('fail', (function(_this) {                                                        //\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  XUnitReporter.prototype.printTestSuite = function() {                                                                // 6\n    var testSuite;                                                                                                     // 40\n    testSuite = {                                                                                                      // 40\n      name: 'Mocha Tests',                                                                                             // 40\n      tests: this.stats.total,                                                                                         // 40\n      failures: this.stats.failures,                                                                                   // 40\n      errors: this.stats.failures,                                                                                     // 40\n      timestamp: (new Date).toUTCString(),                                                                             // 40\n      time: this.stats.duration / 1000 || 0,                                                                           // 40\n      skipped: this.stats.pending                                                                                      // 40\n    };                                                                                                                 //\n    this.write(this.createTag('testsuite', testSuite, false));                                                         // 40\n    this.clientTests.forEach((function(_this) {                                                                        // 40\n      return function(test) {                                                                                          //\n        return _this.printTestCase(test, \"Client\");                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.serverTests.forEach((function(_this) {                                                                        // 40\n      return function(test) {                                                                                          //\n        return _this.printTestCase(test, \"Server\");                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this.write('</testsuite>');                                                                                 //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 61\n  /**                                                                                                                  // 61\n   * HTML tag helper.                                                                                                  //\n  #                                                                                                                    //\n   * @param name                                                                                                       //\n   * @param attrs                                                                                                      //\n   * @param close                                                                                                      //\n   * @param content                                                                                                    //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.createTag = function(name, attrs, close, content) {                                          // 6\n    var end, key, pairs, tag;                                                                                          // 71\n    if (attrs == null) {                                                                                               //\n      attrs = {};                                                                                                      //\n    }                                                                                                                  //\n    end = close ? '/>' : '>';                                                                                          // 71\n    pairs = [];                                                                                                        // 71\n    tag = void 0;                                                                                                      // 71\n    for (key in attrs) {                                                                                               // 75\n      if (Object.prototype.hasOwnProperty.call(attrs, key)) {                                                          // 76\n        pairs.push(key + '=\"' + this.escape(attrs[key]) + '\"');                                                        // 77\n      }                                                                                                                //\n    }                                                                                                                  // 75\n    tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;                                              // 71\n    if (content) {                                                                                                     // 81\n      tag += content + '</' + name + end;                                                                              // 82\n    }                                                                                                                  //\n    return tag;                                                                                                        // 84\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 86\n  /**                                                                                                                  // 86\n   * Return cdata escaped CDATA `str`.                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.cdata = function(str) {                                                                      // 6\n    return '<![CDATA[' + this.escape(str) + ']]>';                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 93\n  /**                                                                                                                  // 93\n   * Override done to close the stream (if it's a file).                                                               //\n  #                                                                                                                    //\n   * @param failures                                                                                                   //\n   * @param {Function} fn                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.done = function(failures, fn) {                                                              // 6\n    return fn(failures);                                                                                               //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 103\n  /**                                                                                                                  // 103\n   * Write out the given line.                                                                                         //\n  #                                                                                                                    //\n   * @param {string} line                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.write = function(line) {                                                                     // 6\n    return console.log(this.xUnitPrefix + line);                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 112\n  /**                                                                                                                  // 112\n   * Output tag for the given `test.`                                                                                  //\n  #                                                                                                                    //\n   * @param {Test} test                                                                                                //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.printTestCase = function(test, where) {                                                      // 6\n    var attrs, err, stack;                                                                                             // 119\n    attrs = {                                                                                                          // 119\n      classname: where + \" \" + (test.parent.fullTitle()),                                                              // 120\n      name: test.title,                                                                                                // 120\n      time: test.duration / 1000 || 0                                                                                  // 120\n    };                                                                                                                 //\n    if (test.state === 'failed') {                                                                                     // 124\n      err = test.err;                                                                                                  // 125\n      stack = this.escapeStack(err.stack);                                                                             // 125\n      this.write(this.createTag('testcase', attrs, false, this.createTag('failure', {}, false, this.cdata(this.escape(err.message) + '\\n' + stack))));\n    } else if (test.pending) {                                                                                         //\n      this.write(this.createTag('testcase', attrs, false, this.createTag('skipped', {}, true)));                       // 129\n    } else {                                                                                                           //\n      this.write(this.createTag('testcase', attrs, true));                                                             // 131\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 135\n  /**                                                                                                                  // 135\n   * Escape special characters in the given string of html.                                                            //\n  #                                                                                                                    //\n   * @api private                                                                                                      //\n   * @param  {string} html                                                                                             //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.escape = function(html) {                                                                    // 6\n    return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');    //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 151\n  /**                                                                                                                  // 151\n   * For each line add the @xUnitPrefix and escape special characters in the given string of html.                     //\n  #                                                                                                                    //\n   * @api private                                                                                                      //\n   * @param  {string} stack                                                                                            //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.escapeStack = function(stack) {                                                              // 6\n    if (stack == null) {                                                                                               //\n      stack = \"\";                                                                                                      //\n    }                                                                                                                  //\n    return stack.split(\"\\n\").map((function(_this) {                                                                    // 160\n      return function(s) {                                                                                             //\n        return _this.xUnitPrefix + _this.escape(s);                                                                    //\n      };                                                                                                               //\n    })(this)).join(\"\\n\");                                                                                              //\n  };                                                                                                                   //\n                                                                                                                       //\n  return XUnitReporter;                                                                                                //\n                                                                                                                       //\n})(ConsoleReporter);                                                                                                   //\n                                                                                                                       //\nmodule.exports = XUnitReporter;                                                                                        // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"html.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/html.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */ /**                                                                                           // 1\n                          * Module dependencies.                                                                       //\n                          */var Base = require('../../../lib/reporters/base');                                         //\n                                                                                                                       //\nvar utils = require('../../../lib/utils');                                                                             // 7\n                                                                                                                       //\nvar Progress = require('../../../lib/browser/progress');                                                               // 8\n                                                                                                                       //\nvar escapeRe = require('escape-string-regexp');                                                                        // 9\n                                                                                                                       //\nvar escape = utils.escape; /**                                                                                         // 10\n                            * Save timer references to avoid Sinon interfering (see GH-237).                           //\n                            */ /* eslint-disable no-unused-vars, no-native-reassign */                                 //\nvar Date = global.Date;                                                                                                // 16\nvar setTimeout = global.setTimeout;                                                                                    // 17\nvar setInterval = global.setInterval;                                                                                  // 18\nvar clearTimeout = global.clearTimeout;                                                                                // 19\nvar clearInterval = global.clearInterval; /* eslint-enable no-unused-vars, no-native-reassign */ /**                   // 20\n                                                                                                  * Expose `HTML`.     //\n                                                                                                  */                   //\nexports = module.exports = HTML; /**                                                                                   // 27\n                                  * Initialize a new `HTML` reporter.                                                  //\n                                  *                                                                                    //\n                                  * @param {Runner} runner                                                             //\n                                  * @api public                                                                        //\n                                  */                                                                                   //\n                                                                                                                       //\nfunction HTML(runner, options) {                                                                                       // 36\n  Base.call(this, runner);                                                                                             // 37\n  options = options || {};                                                                                             // 38\n  options.elementIdPrefix = options.elementIdPrefix || \"\"; /**                                                         // 39\n                                                            * Stats template.                                          //\n                                                            */                                                         //\n  var statsTemplate = '<ul id=\"' + options.elementIdPrefix + 'mocha-stats\"' + ' class=\"mocha-stats\">' + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>' + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>' + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>' + '<li class=\"duration\">duration: <em>0</em>s</li>' + '</ul>';\n  var self = this,                                                                                                     // 53\n      stats = this.stats,                                                                                              // 53\n      stat = fragment(statsTemplate),                                                                                  // 53\n      items = stat.getElementsByTagName('li'),                                                                         // 53\n      passes = items[1].getElementsByTagName('em')[0],                                                                 // 53\n      passesLink = items[1].getElementsByTagName('a')[0],                                                              // 53\n      failures = items[2].getElementsByTagName('em')[0],                                                               // 53\n      failuresLink = items[2].getElementsByTagName('a')[0],                                                            // 53\n      duration = items[3].getElementsByTagName('em')[0],                                                               // 53\n      canvas = stat.getElementsByTagName('canvas')[0],                                                                 // 53\n      report = fragment('<ul id=\"' + options.elementIdPrefix + 'mocha-report\"' + ' class=\"mocha-report\"></ul>'),       // 53\n      stack = [report],                                                                                                // 53\n      progress,                                                                                                        // 53\n      ctx,                                                                                                             // 53\n      root = document.getElementById(options.elementIdPrefix + 'mocha');                                               // 53\n                                                                                                                       //\n  if (canvas.getContext) {                                                                                             // 70\n    var ratio = window.devicePixelRatio || 1;                                                                          // 71\n    canvas.style.width = canvas.width;                                                                                 // 72\n    canvas.style.height = canvas.height;                                                                               // 73\n    canvas.width *= ratio;                                                                                             // 74\n    canvas.height *= ratio;                                                                                            // 75\n    ctx = canvas.getContext('2d');                                                                                     // 76\n    ctx.scale(ratio, ratio);                                                                                           // 77\n    progress = new Progress();                                                                                         // 78\n  }                                                                                                                    // 79\n                                                                                                                       //\n  if (!root) {                                                                                                         // 81\n    return error(options.elementIdPrefix + 'mocha div missing, add it to your document');                              // 82\n  } // pass toggle                                                                                                     // 83\n                                                                                                                       //\n                                                                                                                       //\n  on(passesLink, 'click', function () {                                                                                // 86\n    unhide();                                                                                                          // 87\n    var name = /pass/.test(report.className) ? '' : ' pass';                                                           // 88\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 89\n                                                                                                                       //\n    if (report.className.trim()) {                                                                                     // 90\n      hideSuitesWithout('test pass');                                                                                  // 91\n    }                                                                                                                  // 92\n  }); // failure toggle                                                                                                // 93\n                                                                                                                       //\n  on(failuresLink, 'click', function () {                                                                              // 96\n    unhide();                                                                                                          // 97\n    var name = /fail/.test(report.className) ? '' : ' fail';                                                           // 98\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 99\n                                                                                                                       //\n    if (report.className.trim()) {                                                                                     // 100\n      hideSuitesWithout('test fail');                                                                                  // 101\n    }                                                                                                                  // 102\n  });                                                                                                                  // 103\n  root.appendChild(stat);                                                                                              // 105\n  root.appendChild(report);                                                                                            // 106\n                                                                                                                       //\n  if (progress) {                                                                                                      // 108\n    progress.size(40);                                                                                                 // 109\n  }                                                                                                                    // 110\n                                                                                                                       //\n  runner.on('suite', function (suite) {                                                                                // 112\n    if (suite.root) {                                                                                                  // 113\n      return;                                                                                                          // 114\n    } // suite                                                                                                         // 115\n                                                                                                                       //\n                                                                                                                       //\n    var url = self.suiteURL(suite);                                                                                    // 118\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title)); // container   // 119\n                                                                                                                       //\n    stack[0].appendChild(el);                                                                                          // 122\n    stack.unshift(document.createElement('ul'));                                                                       // 123\n    el.appendChild(stack[0]);                                                                                          // 124\n  });                                                                                                                  // 125\n  runner.on('suite end', function (suite) {                                                                            // 127\n    if (suite.root) {                                                                                                  // 128\n      return;                                                                                                          // 129\n    }                                                                                                                  // 130\n                                                                                                                       //\n    stack.shift();                                                                                                     // 131\n  });                                                                                                                  // 132\n  runner.on('fail', function (test) {                                                                                  // 134\n    test.body = test.body || test.fn.toString(); // For type = 'test' its possible that the test failed due to multiple\n    // done() calls. So report the issue here.                                                                         // 137\n                                                                                                                       //\n    if (test.type === 'hook') {                                                                                        // 138\n      runner.emit('test end', test);                                                                                   // 139\n    }                                                                                                                  // 140\n  });                                                                                                                  // 141\n  runner.on('test end', function (test) {                                                                              // 143\n    // TODO: add to stats                                                                                              // 144\n    var percent = stats.tests / this.total * 100 | 0;                                                                  // 145\n                                                                                                                       //\n    if (progress) {                                                                                                    // 146\n      progress.update(percent).draw(ctx);                                                                              // 147\n    } // update stats                                                                                                  // 148\n                                                                                                                       //\n                                                                                                                       //\n    var ms = new Date() - stats.start;                                                                                 // 151\n    text(passes, stats.passes);                                                                                        // 152\n    text(failures, stats.failures);                                                                                    // 153\n    text(duration, (ms / 1000).toFixed(2)); // test                                                                    // 154\n                                                                                                                       //\n    var el;                                                                                                            // 157\n                                                                                                                       //\n    if (test.state === 'passed') {                                                                                     // 158\n      var url = self.testURL(test);                                                                                    // 159\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {                                                                                         // 161\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);                                     // 162\n    } else {                                                                                                           // 163\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline                                                               // 165\n                                                                                                                       //\n      var message = test.err.toString(); // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we        // 166\n      // check for the result of the stringifying.                                                                     // 169\n                                                                                                                       //\n      if (message === '[object Error]') {                                                                              // 170\n        message = test.err.message;                                                                                    // 171\n      }                                                                                                                // 172\n                                                                                                                       //\n      if (test.err.stack) {                                                                                            // 174\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);                                                 // 175\n                                                                                                                       //\n        if (indexOfMessage === -1) {                                                                                   // 176\n          stackString = test.err.stack;                                                                                // 177\n        } else {                                                                                                       // 178\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);                               // 179\n        }                                                                                                              // 180\n      } else if (test.err.sourceURL && test.err.line !== undefined) {                                                  // 181\n        // Safari doesn't give you a stack. Let's at least provide a source line.                                      // 182\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';                                          // 183\n      }                                                                                                                // 184\n                                                                                                                       //\n      stackString = stackString || '';                                                                                 // 186\n                                                                                                                       //\n      if (test.err.htmlMessage && stackString) {                                                                       // 188\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {                                                                               // 190\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));                            // 191\n      } else {                                                                                                         // 192\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));                               // 193\n      }                                                                                                                // 194\n    } // toggle code                                                                                                   // 195\n    // TODO: defer                                                                                                     // 198\n                                                                                                                       //\n                                                                                                                       //\n    if (!test.pending) {                                                                                               // 199\n      var h2 = el.getElementsByTagName('h2')[0];                                                                       // 200\n      on(h2, 'click', function () {                                                                                    // 202\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';                                           // 203\n      });                                                                                                              // 204\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));                                        // 206\n      el.appendChild(pre);                                                                                             // 207\n      pre.style.display = 'none';                                                                                      // 208\n    } // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.                               // 209\n                                                                                                                       //\n                                                                                                                       //\n    if (stack[0]) {                                                                                                    // 212\n      stack[0].appendChild(el);                                                                                        // 213\n    }                                                                                                                  // 214\n  });                                                                                                                  // 215\n} /**                                                                                                                  // 216\n   * Makes a URL, preserving querystring (\"search\") parameters.                                                        //\n   *                                                                                                                   //\n   * @param {string} s                                                                                                 //\n   * @return {string} A new URL.                                                                                       //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction makeUrl(s) {                                                                                                  // 224\n  var search = window.location.search; // Remove previous grep query parameter if present                              // 225\n                                                                                                                       //\n  if (search) {                                                                                                        // 228\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');                                               // 229\n  }                                                                                                                    // 230\n                                                                                                                       //\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));         // 232\n} /**                                                                                                                  // 233\n   * Provide suite URL.                                                                                                //\n   *                                                                                                                   //\n   * @param {Object} [suite]                                                                                           //\n   */                                                                                                                  //\n                                                                                                                       //\nHTML.prototype.suiteURL = function (suite) {                                                                           // 240\n  return makeUrl(suite.fullTitle());                                                                                   // 241\n}; /**                                                                                                                 // 242\n    * Provide test URL.                                                                                                //\n    *                                                                                                                  //\n    * @param {Object} [test]                                                                                           //\n    */                                                                                                                 //\n                                                                                                                       //\nHTML.prototype.testURL = function (test) {                                                                             // 249\n  return makeUrl(test.fullTitle());                                                                                    // 250\n}; /**                                                                                                                 // 251\n    * Display error `msg`.                                                                                             //\n    *                                                                                                                  //\n    * @param {string} msg                                                                                              //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction error(msg) {                                                                                                  // 258\n  document.body.appendChild(fragment('<div class=\"mocha-error\">%s</div>', msg));                                       // 259\n} /**                                                                                                                  // 260\n   * Return a DOM fragment from `html`.                                                                                //\n   *                                                                                                                   //\n   * @param {string} html                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction fragment(html) {                                                                                              // 267\n  var args = arguments;                                                                                                // 268\n  var div = document.createElement('div');                                                                             // 269\n  var i = 1;                                                                                                           // 270\n  div.innerHTML = html.replace(/%([se])/g, function (_, type) {                                                        // 272\n    switch (type) {                                                                                                    // 273\n      case 's':                                                                                                        // 274\n        return String(args[i++]);                                                                                      // 274\n                                                                                                                       //\n      case 'e':                                                                                                        // 275\n        return escape(args[i++]);                                                                                      // 275\n      // no default                                                                                                    // 276\n    }                                                                                                                  // 273\n  });                                                                                                                  // 278\n  return div.firstChild;                                                                                               // 280\n} /**                                                                                                                  // 281\n   * Check for suites that do not have elements                                                                        //\n   * with `classname`, and hide them.                                                                                  //\n   *                                                                                                                   //\n   * @param {text} classname                                                                                           //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction hideSuitesWithout(classname) {                                                                                // 289\n  var suites = document.getElementsByClassName('suite');                                                               // 290\n                                                                                                                       //\n  for (var i = 0; i < suites.length; i++) {                                                                            // 291\n    var els = suites[i].getElementsByClassName(classname);                                                             // 292\n                                                                                                                       //\n    if (!els.length) {                                                                                                 // 293\n      suites[i].className += ' hidden';                                                                                // 294\n    }                                                                                                                  // 295\n  }                                                                                                                    // 296\n} /**                                                                                                                  // 297\n   * Unhide .hidden suites.                                                                                            //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction unhide() {                                                                                                    // 302\n  var els = document.getElementsByClassName('suite hidden');                                                           // 303\n                                                                                                                       //\n  for (var i = 0; i < els.length; ++i) {                                                                               // 304\n    els[i].className = els[i].className.replace('suite hidden', 'suite');                                              // 305\n  }                                                                                                                    // 306\n} /**                                                                                                                  // 307\n   * Set an element's text contents.                                                                                   //\n   *                                                                                                                   //\n   * @param {HTMLElement} el                                                                                           //\n   * @param {string} contents                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction text(el, contents) {                                                                                          // 315\n  if (el.textContent) {                                                                                                // 316\n    el.textContent = contents;                                                                                         // 317\n  } else {                                                                                                             // 318\n    el.innerText = contents;                                                                                           // 319\n  }                                                                                                                    // 320\n} /**                                                                                                                  // 321\n   * Listen on `event` with callback `fn`.                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction on(el, event, fn) {                                                                                           // 326\n  if (el.addEventListener) {                                                                                           // 327\n    el.addEventListener(event, fn, false);                                                                             // 328\n  } else {                                                                                                             // 329\n    el.attachEvent('on' + event, fn);                                                                                  // 330\n  }                                                                                                                    // 331\n}                                                                                                                      // 332\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/index.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  HTML_REPORTER: function () {                                                                                         // 1\n    return HTML_REPORTER;                                                                                              // 1\n  },                                                                                                                   // 1\n  CONSOLE_REPORTER: function () {                                                                                      // 1\n    return CONSOLE_REPORTER;                                                                                           // 1\n  },                                                                                                                   // 1\n  XUNIT_REPORTER: function () {                                                                                        // 1\n    return XUNIT_REPORTER;                                                                                             // 1\n  },                                                                                                                   // 1\n  REPORTERS: function () {                                                                                             // 1\n    return REPORTERS;                                                                                                  // 1\n  },                                                                                                                   // 1\n  reporters: function () {                                                                                             // 1\n    return reporters;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar ConsoleReporter = void 0;                                                                                          // 1\nmodule.watch(require(\"./ConsoleReporter\"), {                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    ConsoleReporter = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar XunitReporter = void 0;                                                                                            // 1\nmodule.watch(require(\"./XunitReporter\"), {                                                                             // 1\n  \"default\": function (v) {                                                                                            // 1\n    XunitReporter = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar HtmlReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./HtmlReporter\"), {                                                                              // 1\n  \"default\": function (v) {                                                                                            // 1\n    HtmlReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar HTML_REPORTER = 'html';                                                                                            // 6\nvar CONSOLE_REPORTER = 'console';                                                                                      // 7\nvar XUNIT_REPORTER = 'xunit';                                                                                          // 8\nvar REPORTERS = [HTML_REPORTER, CONSOLE_REPORTER, XUNIT_REPORTER];                                                     // 9\nvar reporters = {};                                                                                                    // 10\nreporters[HTML_REPORTER] = HtmlReporter;                                                                               // 11\nreporters[CONSOLE_REPORTER] = ConsoleReporter;                                                                         // 12\nreporters[XUNIT_REPORTER] = XunitReporter;                                                                             // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"setup\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/setup/index.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar mochaInstance = void 0;                                                                                            // 1\nmodule.watch(require(\"meteor/practicalmeteor:mocha-core\"), {                                                           // 1\n  mochaInstance: function (v) {                                                                                        // 1\n    mochaInstance = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar setupMochaClient = void 0;                                                                                         // 1\nmodule.watch(require(\"./setupMochaClient\"), {                                                                          // 1\n  \"default\": function (v) {                                                                                            // 1\n    setupMochaClient = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nif (Meteor.isClient) {                                                                                                 // 4\n  setupMochaClient();                                                                                                  // 5\n}                                                                                                                      // 6\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 7\n  global.mocha = mochaInstance;                                                                                        // 8\n}                                                                                                                      // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupMochaClient.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/setup/setupMochaClient.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar module1 = module;                                                                                                  // 1\nvar meteorInstall = void 0;                                                                                            // 1\nmodule1.watch(require(\"meteor/modules\"), {                                                                             // 1\n  meteorInstall: function (v) {                                                                                        // 1\n    meteorInstall = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nmodule1.exportDefault(function () {                                                                                    // 1\n  process.browser = true;                                                                                              // 9\n                                                                                                                       //\n  require(\"meteor-node-stubs\");                                                                                        // 11\n                                                                                                                       //\n  meteorInstall({                                                                                                      // 13\n    node_modules: {                                                                                                    // 14\n      \"tty.js\": function (r, e, module) {                                                                              // 15\n        module.exports = {                                                                                             // 16\n          isatty: function () {                                                                                        // 16\n            return false;                                                                                              // 16\n          }                                                                                                            // 16\n        };                                                                                                             // 16\n      }                                                                                                                // 17\n    }                                                                                                                  // 14\n  });                                                                                                                  // 13\n  meteorInstall({                                                                                                      // 21\n    node_modules: {                                                                                                    // 22\n      \"constants.js\": function (r, e, module) {                                                                        // 23\n        module.exports = {                                                                                             // 24\n          test: {                                                                                                      // 25\n            'test': 'test'                                                                                             // 25\n          }                                                                                                            // 25\n        };                                                                                                             // 24\n      }                                                                                                                // 27\n    }                                                                                                                  // 22\n  });                                                                                                                  // 21\n});                                                                                                                    // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"lib\":{\"ms.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/ms.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            //\n */var s = 1000;                                                                                                       //\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25; /**                                                                                                // 9\n                     * Parse or format the given `val`.                                                                //\n                     *                                                                                                 //\n                     * Options:                                                                                        //\n                     *                                                                                                 //\n                     *  - `long` verbose formatting [false]                                                            //\n                     *                                                                                                 //\n                     * @api public                                                                                     //\n                     * @param {string|number} val                                                                      //\n                     * @param {Object} options                                                                         //\n                     * @return {string|number}                                                                         //\n                     */                                                                                                //\n                                                                                                                       //\nmodule.exports = function (val, options) {                                                                             // 23\n  options = options || {};                                                                                             // 24\n                                                                                                                       //\n  if (typeof val === 'string') {                                                                                       // 25\n    return parse(val);                                                                                                 // 26\n  } // https://github.com/mochajs/mocha/pull/1035                                                                      // 27\n                                                                                                                       //\n                                                                                                                       //\n  return options['long'] ? longFormat(val) : shortFormat(val);                                                         // 29\n}; /**                                                                                                                 // 30\n    * Parse the given `str` and return milliseconds.                                                                   //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {number}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction parse(str) {                                                                                                  // 39\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);                  // 40\n                                                                                                                       //\n  if (!match) {                                                                                                        // 41\n    return;                                                                                                            // 42\n  }                                                                                                                    // 43\n                                                                                                                       //\n  var n = parseFloat(match[1]);                                                                                        // 44\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 45\n                                                                                                                       //\n  switch (type) {                                                                                                      // 46\n    case 'years':                                                                                                      // 47\n    case 'year':                                                                                                       // 48\n    case 'y':                                                                                                          // 49\n      return n * y;                                                                                                    // 50\n                                                                                                                       //\n    case 'days':                                                                                                       // 51\n    case 'day':                                                                                                        // 52\n    case 'd':                                                                                                          // 53\n      return n * d;                                                                                                    // 54\n                                                                                                                       //\n    case 'hours':                                                                                                      // 55\n    case 'hour':                                                                                                       // 56\n    case 'h':                                                                                                          // 57\n      return n * h;                                                                                                    // 58\n                                                                                                                       //\n    case 'minutes':                                                                                                    // 59\n    case 'minute':                                                                                                     // 60\n    case 'm':                                                                                                          // 61\n      return n * m;                                                                                                    // 62\n                                                                                                                       //\n    case 'seconds':                                                                                                    // 63\n    case 'second':                                                                                                     // 64\n    case 's':                                                                                                          // 65\n      return n * s;                                                                                                    // 66\n                                                                                                                       //\n    case 'ms':                                                                                                         // 67\n      return n;                                                                                                        // 68\n                                                                                                                       //\n    default: // No default case                                                                                        // 69\n  }                                                                                                                    // 46\n} /**                                                                                                                  // 72\n   * Short format for `ms`.                                                                                            //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction shortFormat(ms) {                                                                                             // 81\n  if (ms >= d) {                                                                                                       // 82\n    return Math.round(ms / d) + 'd';                                                                                   // 83\n  }                                                                                                                    // 84\n                                                                                                                       //\n  if (ms >= h) {                                                                                                       // 85\n    return Math.round(ms / h) + 'h';                                                                                   // 86\n  }                                                                                                                    // 87\n                                                                                                                       //\n  if (ms >= m) {                                                                                                       // 88\n    return Math.round(ms / m) + 'm';                                                                                   // 89\n  }                                                                                                                    // 90\n                                                                                                                       //\n  if (ms >= s) {                                                                                                       // 91\n    return Math.round(ms / s) + 's';                                                                                   // 92\n  }                                                                                                                    // 93\n                                                                                                                       //\n  return ms + 'ms';                                                                                                    // 94\n} /**                                                                                                                  // 95\n   * Long format for `ms`.                                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction longFormat(ms) {                                                                                              // 104\n  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\n} /**                                                                                                                  // 110\n   * Pluralization helper.                                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @param {number} n                                                                                                 //\n   * @param {string} name                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction plural(ms, n, name) {                                                                                         // 120\n  if (ms < n) {                                                                                                        // 121\n    return;                                                                                                            // 122\n  }                                                                                                                    // 123\n                                                                                                                       //\n  if (ms < n * 1.5) {                                                                                                  // 124\n    return Math.floor(ms / n) + ' ' + name;                                                                            // 125\n  }                                                                                                                    // 126\n                                                                                                                       //\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 127\n}                                                                                                                      // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/utils.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */ /**                                                                                           // 1\n                          * Module dependencies.                                                                       //\n                          */var basename = require('path').basename;                                                   //\n                                                                                                                       //\nvar debug = require('debug')('mocha:watch');                                                                           // 8\n                                                                                                                       //\nvar exists = require('fs').existsSync || require('path').existsSync;                                                   // 9\n                                                                                                                       //\nvar glob = require('glob');                                                                                            // 10\n                                                                                                                       //\nvar join = require('path').join;                                                                                       // 11\n                                                                                                                       //\nvar readdirSync = require('fs').readdirSync;                                                                           // 12\n                                                                                                                       //\nvar statSync = require('fs').statSync;                                                                                 // 13\n                                                                                                                       //\nvar watchFile = require('fs').watchFile; /**                                                                           // 14\n                                          * Ignored directories.                                                       //\n                                          */                                                                           //\n                                                                                                                       //\nvar ignore = ['node_modules', '.git'];                                                                                 // 20\nexports.inherits = require('util').inherits; /**                                                                       // 22\n                                              * Escape special characters in the given string of html.                 //\n                                              *                                                                        //\n                                              * @api private                                                           //\n                                              * @param  {string} html                                                  //\n                                              * @return {string}                                                       //\n                                              */                                                                       //\n                                                                                                                       //\nexports.escape = function (html) {                                                                                     // 31\n  return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');      // 32\n}; /**                                                                                                                 // 37\n    * Array#forEach (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} scope                                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.forEach = function (arr, fn, scope) {                                                                          // 47\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 48\n    fn.call(scope, arr[i], i);                                                                                         // 49\n  }                                                                                                                    // 50\n}; /**                                                                                                                 // 51\n    * Test if the given obj is type of string.                                                                         //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {boolean}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.isString = function (obj) {                                                                                    // 60\n  return typeof obj === 'string';                                                                                      // 61\n}; /**                                                                                                                 // 62\n    * Array#map (<=IE8)                                                                                                //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} scope                                                                                            //\n    * @return {Array}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.map = function (arr, fn, scope) {                                                                              // 73\n  var result = [];                                                                                                     // 74\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 75\n    result.push(fn.call(scope, arr[i], i, arr));                                                                       // 76\n  }                                                                                                                    // 77\n                                                                                                                       //\n  return result;                                                                                                       // 78\n}; /**                                                                                                                 // 79\n    * Array#indexOf (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Object} obj to find index of                                                                             //\n    * @param {number} start                                                                                            //\n    * @return {number}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.indexOf = function (arr, obj, start) {                                                                         // 90\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                               // 91\n    if (arr[i] === obj) {                                                                                              // 92\n      return i;                                                                                                        // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n                                                                                                                       //\n  return -1;                                                                                                           // 96\n}; /**                                                                                                                 // 97\n    * Array#reduce (<=IE8)                                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} val Initial value.                                                                               //\n    * @return {*}                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.reduce = function (arr, fn, val) {                                                                             // 108\n  var rval = val;                                                                                                      // 109\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 111\n    rval = fn(rval, arr[i], i, arr);                                                                                   // 112\n  }                                                                                                                    // 113\n                                                                                                                       //\n  return rval;                                                                                                         // 115\n}; /**                                                                                                                 // 116\n    * Array#filter (<=IE8)                                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @return {Array}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.filter = function (arr, fn) {                                                                                  // 126\n  var ret = [];                                                                                                        // 127\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 129\n    var val = arr[i];                                                                                                  // 130\n                                                                                                                       //\n    if (fn(val, i, arr)) {                                                                                             // 131\n      ret.push(val);                                                                                                   // 132\n    }                                                                                                                  // 133\n  }                                                                                                                    // 134\n                                                                                                                       //\n  return ret;                                                                                                          // 136\n}; /**                                                                                                                 // 137\n    * Object.keys (<=IE8)                                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {Array} keys                                                                                             //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function (obj) {                                      // 146\n  var keys = [];                                                                                                       // 147\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8                                                  // 148\n                                                                                                                       //\n  for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                       // 150\n    if (has.call(obj, key)) {                                                                                          // 151\n      keys.push(key);                                                                                                  // 152\n    }                                                                                                                  // 153\n  }                                                                                                                    // 154\n                                                                                                                       //\n  return keys;                                                                                                         // 156\n}; /**                                                                                                                 // 157\n    * Watch the given `files` for changes                                                                              //\n    * and invoke `fn(file)` on modification.                                                                           //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} files                                                                                             //\n    * @param {Function} fn                                                                                             //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.watch = function (files, fn) {                                                                                 // 167\n  var options = {                                                                                                      // 168\n    interval: 100                                                                                                      // 168\n  };                                                                                                                   // 168\n  files.forEach(function (file) {                                                                                      // 169\n    debug('file %s', file);                                                                                            // 170\n    watchFile(file, options, function (curr, prev) {                                                                   // 171\n      if (prev.mtime < curr.mtime) {                                                                                   // 172\n        fn(file);                                                                                                      // 173\n      }                                                                                                                // 174\n    });                                                                                                                // 175\n  });                                                                                                                  // 176\n}; /**                                                                                                                 // 177\n    * Array.isArray (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {Boolean}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function (obj) {                                   // 186\n  return Object.prototype.toString.call(obj) === '[object Array]';                                                     // 187\n};                                                                                                                     // 188\nexports.isArray = isArray; /**                                                                                         // 190\n                            * Buffer.prototype.toJSON polyfill.                                                        //\n                            *                                                                                          //\n                            * @type {Function}                                                                         //\n                            */                                                                                         //\n                                                                                                                       //\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {                                                               // 197\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function () {                                                   // 198\n    return Array.prototype.slice.call(this, 0);                                                                        // 199\n  };                                                                                                                   // 200\n} /**                                                                                                                  // 201\n   * Ignored files.                                                                                                    //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} path                                                                                              //\n   * @return {boolean}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction ignored(path) {                                                                                               // 210\n  return !~ignore.indexOf(path);                                                                                       // 211\n} /**                                                                                                                  // 212\n   * Lookup files in the given `dir`.                                                                                  //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} dir                                                                                               //\n   * @param {string[]} [ext=['.js']]                                                                                   //\n   * @param {Array} [ret=[]]                                                                                           //\n   * @return {Array}                                                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.files = function (dir, ext, ret) {                                                                             // 223\n  ret = ret || [];                                                                                                     // 224\n  ext = ext || ['js'];                                                                                                 // 225\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');                                                                  // 227\n  readdirSync(dir).filter(ignored).forEach(function (path) {                                                           // 229\n    path = join(dir, path);                                                                                            // 232\n                                                                                                                       //\n    if (statSync(path).isDirectory()) {                                                                                // 233\n      exports.files(path, ext, ret);                                                                                   // 234\n    } else if (path.match(re)) {                                                                                       // 235\n      ret.push(path);                                                                                                  // 236\n    }                                                                                                                  // 237\n  });                                                                                                                  // 238\n  return ret;                                                                                                          // 240\n}; /**                                                                                                                 // 241\n    * Compute a slug from the given `str`.                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.slug = function (str) {                                                                                        // 250\n  return str.toLowerCase().replace(/ +/g, '-').replace(/[^-\\w]/g, '');                                                 // 251\n}; /**                                                                                                                 // 255\n    * Strip the function definition from `str`, and re-indent for pre whitespace.                                      //\n    *                                                                                                                  //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.clean = function (str) {                                                                                       // 263\n  str = str.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '').replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '').replace(/\\s+\\}$/, '');\n  var spaces = str.match(/^\\n?( *)/)[1].length;                                                                        // 269\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;                                                                         // 270\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                        // 271\n  str = str.replace(re, '');                                                                                           // 273\n  return exports.trim(str);                                                                                            // 275\n}; /**                                                                                                                 // 276\n    * Trim the given `str`.                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.trim = function (str) {                                                                                        // 285\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                                // 286\n}; /**                                                                                                                 // 287\n    * Parse the given `qs`.                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} qs                                                                                               //\n    * @return {Object}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.parseQuery = function (qs) {                                                                                   // 296\n  return exports.reduce(qs.replace('?', '').split('&'), function (obj, pair) {                                         // 297\n    var i = pair.indexOf('=');                                                                                         // 298\n    var key = pair.slice(0, i);                                                                                        // 299\n    var val = pair.slice(++i);                                                                                         // 300\n    obj[key] = decodeURIComponent(val);                                                                                // 302\n    return obj;                                                                                                        // 303\n  }, {});                                                                                                              // 304\n}; /**                                                                                                                 // 305\n    * Highlight the given string of `js`.                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} js                                                                                               //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction highlight(js) {                                                                                               // 314\n  return js.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>').replace(/('.*?')/gm, '<span class=\"string\">$1</span>').replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>').replace(/(\\d+)/gm, '<span class=\"number\">$1</span>').replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>').replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n} /**                                                                                                                  // 324\n   * Highlight the contents of tag `name`.                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} name                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.highlightTags = function (name) {                                                                              // 332\n  var code = document.getElementById('mocha').getElementsByTagName(name);                                              // 333\n                                                                                                                       //\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 334\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                  // 335\n  }                                                                                                                    // 336\n}; /**                                                                                                                 // 337\n    * If a value could have properties, and has none, this function is called,                                         //\n    * which returns a string representation of the empty value.                                                        //\n    *                                                                                                                  //\n    * Functions w/ no properties return `'[Function]'`                                                                 //\n    * Arrays w/ length === 0 return `'[]'`                                                                             //\n    * Objects w/ no properties return `'{}'`                                                                           //\n    * All else: return result of `value.toString()`                                                                    //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {*} value The value to inspect.                                                                           //\n    * @param {string} [type] The type of the value, if known.                                                          //\n    * @returns {string}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction emptyRepresentation(value, type) {                                                                            // 353\n  type = type || exports.type(value);                                                                                  // 354\n                                                                                                                       //\n  switch (type) {                                                                                                      // 356\n    case 'function':                                                                                                   // 357\n      return '[Function]';                                                                                             // 358\n                                                                                                                       //\n    case 'object':                                                                                                     // 359\n      return '{}';                                                                                                     // 360\n                                                                                                                       //\n    case 'array':                                                                                                      // 361\n      return '[]';                                                                                                     // 362\n                                                                                                                       //\n    default:                                                                                                           // 363\n      return value.toString();                                                                                         // 364\n  }                                                                                                                    // 356\n} /**                                                                                                                  // 366\n   * Takes some variable and asks `Object.prototype.toString()` what it thinks it                                      //\n   * is.                                                                                                               //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString             //\n   * @param {*} value The value to test.                                                                               //\n   * @returns {string}                                                                                                 //\n   * @example                                                                                                          //\n   * type({}) // 'object'                                                                                              //\n   * type([]) // 'array'                                                                                               //\n   * type(1) // 'number'                                                                                               //\n   * type(false) // 'boolean'                                                                                          //\n   * type(Infinity) // 'number'                                                                                        //\n   * type(null) // 'null'                                                                                              //\n   * type(new Date()) // 'date'                                                                                        //\n   * type(/foo/) // 'regexp'                                                                                           //\n   * type('type') // 'string'                                                                                          //\n   * type(global) // 'global'                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.type = function () {                                                                                           // 388\n  function type(value) {                                                                                               // 388\n    if (value === undefined) {                                                                                         // 389\n      return 'undefined';                                                                                              // 390\n    } else if (value === null) {                                                                                       // 391\n      return 'null';                                                                                                   // 392\n    } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {                                              // 393\n      return 'buffer';                                                                                                 // 394\n    }                                                                                                                  // 395\n                                                                                                                       //\n    return Object.prototype.toString.call(value).replace(/^\\[.+\\s(.+?)\\]$/, '$1').toLowerCase();                       // 396\n  }                                                                                                                    // 399\n                                                                                                                       //\n  return type;                                                                                                         // 388\n}(); /**                                                                                                               // 388\n      * Stringify `value`. Different behavior depending on type of value:                                              //\n      *                                                                                                                //\n      * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.                         //\n      * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n      * - If `value` is an *empty* object, function, or array, return result of function                               //\n      *   {@link emptyRepresentation}.                                                                                 //\n      * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of                    //\n      *   JSON.stringify().                                                                                            //\n      *                                                                                                                //\n      * @api private                                                                                                   //\n      * @see exports.type                                                                                              //\n      * @param {*} value                                                                                               //\n      * @return {string}                                                                                               //\n      */                                                                                                               //\n                                                                                                                       //\nexports.stringify = function (value) {                                                                                 // 416\n  var type = exports.type(value);                                                                                      // 417\n                                                                                                                       //\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {                                                      // 419\n    if (type !== 'buffer') {                                                                                           // 420\n      return jsonStringify(value);                                                                                     // 421\n    }                                                                                                                  // 422\n                                                                                                                       //\n    var json = value.toJSON(); // Based on the toJSON result                                                           // 423\n                                                                                                                       //\n    return jsonStringify(json.data && json.type ? json.data : json, 2).replace(/,(\\n|$)/g, '$1');                      // 425\n  }                                                                                                                    // 427\n                                                                                                                       //\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(value)) {                                                    // 429\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {                                                           // 430\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');                                  // 431\n    }                                                                                                                  // 432\n  }                                                                                                                    // 433\n                                                                                                                       //\n  return emptyRepresentation(value, type);                                                                             // 435\n}; /**                                                                                                                 // 436\n    * like JSON.stringify but more sense.                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object}  object                                                                                          //\n    * @param {number=} spaces                                                                                          //\n    * @param {number=} depth                                                                                           //\n    * @returns {*}                                                                                                     //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction jsonStringify(object, spaces, depth) {                                                                        // 447\n  if (typeof spaces === 'undefined') {                                                                                 // 448\n    // primitive types                                                                                                 // 449\n    return _stringify(object);                                                                                         // 450\n  }                                                                                                                    // 451\n                                                                                                                       //\n  depth = depth || 1;                                                                                                  // 453\n  var space = spaces * depth;                                                                                          // 454\n  var str = isArray(object) ? '[' : '{';                                                                               // 455\n  var end = isArray(object) ? ']' : '}';                                                                               // 456\n  var length = object.length || exports.keys(object).length; // `.repeat()` polyfill                                   // 457\n                                                                                                                       //\n  function repeat(s, n) {                                                                                              // 459\n    return new Array(n).join(s);                                                                                       // 460\n  }                                                                                                                    // 461\n                                                                                                                       //\n  function _stringify(val) {                                                                                           // 463\n    switch (exports.type(val)) {                                                                                       // 464\n      case 'null':                                                                                                     // 465\n      case 'undefined':                                                                                                // 466\n        val = '[' + val + ']';                                                                                         // 467\n        break;                                                                                                         // 468\n                                                                                                                       //\n      case 'array':                                                                                                    // 469\n      case 'object':                                                                                                   // 470\n        val = jsonStringify(val, spaces, depth + 1);                                                                   // 471\n        break;                                                                                                         // 472\n                                                                                                                       //\n      case 'boolean':                                                                                                  // 473\n      case 'regexp':                                                                                                   // 474\n      case 'number':                                                                                                   // 475\n        val = val === 0 && 1 / val === -Infinity // `-0`                                                               // 476\n        ? '-0' : val.toString();                                                                                       // 476\n        break;                                                                                                         // 479\n                                                                                                                       //\n      case 'date':                                                                                                     // 480\n        var sDate = isNaN(val.getTime()) // Invalid date                                                               // 481\n        ? val.toString() : val.toISOString();                                                                          // 481\n        val = '[Date: ' + sDate + ']';                                                                                 // 484\n        break;                                                                                                         // 485\n                                                                                                                       //\n      case 'buffer':                                                                                                   // 486\n        var json = val.toJSON(); // Based on the toJSON result                                                         // 487\n                                                                                                                       //\n        json = json.data && json.type ? json.data : json;                                                              // 489\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';                                                   // 490\n        break;                                                                                                         // 491\n                                                                                                                       //\n      default:                                                                                                         // 492\n        val = val === '[Function]' || val === '[Circular]' ? val : JSON.stringify(val);                                // 493\n      // string                                                                                                        // 495\n    }                                                                                                                  // 464\n                                                                                                                       //\n    return val;                                                                                                        // 497\n  }                                                                                                                    // 498\n                                                                                                                       //\n  for (var i in meteorBabelHelpers.sanitizeForInObject(object)) {                                                      // 500\n    if (!object.hasOwnProperty(i)) {                                                                                   // 501\n      continue; // not my business                                                                                     // 502\n    }                                                                                                                  // 503\n                                                                                                                       //\n    --length;                                                                                                          // 504\n    str += '\\n ' + repeat(' ', space) + (isArray(object) ? '' : '\"' + i + '\": ') // key                                // 505\n    + _stringify(object[i]) // value                                                                                   // 505\n    + (length ? ',' : ''); // comma                                                                                    // 505\n  }                                                                                                                    // 509\n                                                                                                                       //\n  return str // [], {}                                                                                                 // 511\n  + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);                                                      // 511\n} /**                                                                                                                  // 514\n   * Test if a value is a buffer.                                                                                      //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {*} value The value to test.                                                                               //\n   * @return {boolean} True if `value` is a buffer, otherwise false                                                    //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.isBuffer = function (value) {                                                                                  // 523\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);                                                      // 524\n}; /**                                                                                                                 // 525\n    * Return a new Thing that has the keys in sorted order. Recursive.                                                 //\n    *                                                                                                                  //\n    * If the Thing...                                                                                                  //\n    * - has already been seen, return string `'[Circular]'`                                                            //\n    * - is `undefined`, return string `'[undefined]'`                                                                  //\n    * - is `null`, return value `null`                                                                                 //\n    * - is some other primitive, return the value                                                                      //\n    * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n    * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.             //\n    * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @see {@link exports.stringify}                                                                                   //\n    * @param {*} value Thing to inspect.  May or may not have properties.                                              //\n    * @param {Array} [stack=[]] Stack of seen values                                                                   //\n    * @return {(Object|Array|Function|string|undefined)}                                                               //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.canonicalize = function (value, stack) {                                                                       // 545\n  var canonicalizedObj; /* eslint-disable no-unused-vars */                                                            // 546\n  var prop; /* eslint-enable no-unused-vars */                                                                         // 548\n  var type = exports.type(value);                                                                                      // 550\n                                                                                                                       //\n  function withStack(value, fn) {                                                                                      // 551\n    stack.push(value);                                                                                                 // 552\n    fn();                                                                                                              // 553\n    stack.pop();                                                                                                       // 554\n  }                                                                                                                    // 555\n                                                                                                                       //\n  stack = stack || [];                                                                                                 // 557\n                                                                                                                       //\n  if (exports.indexOf(stack, value) !== -1) {                                                                          // 559\n    return '[Circular]';                                                                                               // 560\n  }                                                                                                                    // 561\n                                                                                                                       //\n  switch (type) {                                                                                                      // 563\n    case 'undefined':                                                                                                  // 564\n    case 'buffer':                                                                                                     // 565\n    case 'null':                                                                                                       // 566\n      canonicalizedObj = value;                                                                                        // 567\n      break;                                                                                                           // 568\n                                                                                                                       //\n    case 'array':                                                                                                      // 569\n      withStack(value, function () {                                                                                   // 570\n        canonicalizedObj = exports.map(value, function (item) {                                                        // 571\n          return exports.canonicalize(item, stack);                                                                    // 572\n        });                                                                                                            // 573\n      });                                                                                                              // 574\n      break;                                                                                                           // 575\n                                                                                                                       //\n    case 'function':                                                                                                   // 576\n      /* eslint-disable guard-for-in */for (prop in meteorBabelHelpers.sanitizeForInObject(value)) {                   // 577\n        canonicalizedObj = {};                                                                                         // 579\n        break;                                                                                                         // 580\n      } /* eslint-enable guard-for-in */                                                                               // 581\n                                                                                                                       //\n      if (!canonicalizedObj) {                                                                                         // 583\n        canonicalizedObj = emptyRepresentation(value, type);                                                           // 584\n        break;                                                                                                         // 585\n      }                                                                                                                // 586\n                                                                                                                       //\n    /* falls through */                                                                                                // 587\n                                                                                                                       //\n    case 'object':                                                                                                     // 588\n      canonicalizedObj = canonicalizedObj || {};                                                                       // 589\n      withStack(value, function () {                                                                                   // 590\n        exports.forEach(exports.keys(value).sort(), function (key) {                                                   // 591\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);                                             // 592\n        });                                                                                                            // 593\n      });                                                                                                              // 594\n      break;                                                                                                           // 595\n                                                                                                                       //\n    case 'date':                                                                                                       // 596\n    case 'number':                                                                                                     // 597\n    case 'regexp':                                                                                                     // 598\n    case 'boolean':                                                                                                    // 599\n      canonicalizedObj = value;                                                                                        // 600\n      break;                                                                                                           // 601\n                                                                                                                       //\n    default:                                                                                                           // 602\n      canonicalizedObj = value + '';                                                                                   // 603\n  }                                                                                                                    // 563\n                                                                                                                       //\n  return canonicalizedObj;                                                                                             // 606\n}; /**                                                                                                                 // 607\n    * Lookup file names at the given `path`.                                                                           //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {string} path Base path to start searching from.                                                          //\n    * @param {string[]} extensions File extensions to look for.                                                        //\n    * @param {boolean} recursive Whether or not to recurse into subdirectories.                                        //\n    * @return {string[]} An array of paths.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.lookupFiles = function () {                                                                                    // 618\n  function lookupFiles(path, extensions, recursive) {                                                                  // 618\n    var files = [];                                                                                                    // 619\n    var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');                                                         // 620\n                                                                                                                       //\n    if (!exists(path)) {                                                                                               // 622\n      if (exists(path + '.js')) {                                                                                      // 623\n        path += '.js';                                                                                                 // 624\n      } else {                                                                                                         // 625\n        files = glob.sync(path);                                                                                       // 626\n                                                                                                                       //\n        if (!files.length) {                                                                                           // 627\n          throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");                                          // 628\n        }                                                                                                              // 629\n                                                                                                                       //\n        return files;                                                                                                  // 630\n      }                                                                                                                // 631\n    }                                                                                                                  // 632\n                                                                                                                       //\n    try {                                                                                                              // 634\n      var stat = statSync(path);                                                                                       // 635\n                                                                                                                       //\n      if (stat.isFile()) {                                                                                             // 636\n        return path;                                                                                                   // 637\n      }                                                                                                                // 638\n    } catch (err) {                                                                                                    // 639\n      // ignore error                                                                                                  // 640\n      return;                                                                                                          // 641\n    }                                                                                                                  // 642\n                                                                                                                       //\n    readdirSync(path).forEach(function (file) {                                                                        // 644\n      file = join(path, file);                                                                                         // 645\n                                                                                                                       //\n      try {                                                                                                            // 646\n        var stat = statSync(file);                                                                                     // 647\n                                                                                                                       //\n        if (stat.isDirectory()) {                                                                                      // 648\n          if (recursive) {                                                                                             // 649\n            files = files.concat(lookupFiles(file, extensions, recursive));                                            // 650\n          }                                                                                                            // 651\n                                                                                                                       //\n          return;                                                                                                      // 652\n        }                                                                                                              // 653\n      } catch (err) {                                                                                                  // 654\n        // ignore error                                                                                                // 655\n        return;                                                                                                        // 656\n      }                                                                                                                // 657\n                                                                                                                       //\n      if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {                                             // 658\n        return;                                                                                                        // 659\n      }                                                                                                                // 660\n                                                                                                                       //\n      files.push(file);                                                                                                // 661\n    });                                                                                                                // 662\n    return files;                                                                                                      // 664\n  }                                                                                                                    // 665\n                                                                                                                       //\n  return lookupFiles;                                                                                                  // 618\n}(); /**                                                                                                               // 618\n      * Generate an undefined error with a message warning the user.                                                   //\n      *                                                                                                                //\n      * @return {Error}                                                                                                //\n      */                                                                                                               //\n                                                                                                                       //\nexports.undefinedError = function () {                                                                                 // 673\n  return new Error('Caught undefined error, did you throw without specifying what?');                                  // 674\n}; /**                                                                                                                 // 675\n    * Generate an undefined error if `err` is not defined.                                                             //\n    *                                                                                                                  //\n    * @param {Error} err                                                                                               //\n    * @return {Error}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.getError = function (err) {                                                                                    // 684\n  return err || exports.undefinedError();                                                                              // 685\n}; /**                                                                                                                 // 686\n    * @summary                                                                                                         //\n    * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)                               //\n    * @description                                                                                                     //\n    * When invoking this function you get a filter function that get the Error.stack as an input,                      //\n    * and return a prettify output.                                                                                    //\n    * (i.e: strip Mocha and internal node functions from stack trace).                                                 //\n    * @returns {Function}                                                                                              //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.stackTraceFilter = function () {                                                                               // 697\n  // TODO: Replace with `process.browser`                                                                              // 698\n  var slash = '/';                                                                                                     // 699\n  var is = typeof document === 'undefined' ? {                                                                         // 700\n    node: true                                                                                                         // 700\n  } : {                                                                                                                // 700\n    browser: true                                                                                                      // 700\n  };                                                                                                                   // 700\n  var cwd = is.node ? process.cwd() + slash : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n                                                                                                                       //\n  function isMochaInternal(line) {                                                                                     // 705\n    return ~line.indexOf('node_modules' + slash + 'mocha' + slash) || ~line.indexOf('components' + slash + 'mochajs' + slash) || ~line.indexOf('components' + slash + 'mocha' + slash) || ~line.indexOf(slash + 'mocha.js');\n  }                                                                                                                    // 710\n                                                                                                                       //\n  function isNodeInternal(line) {                                                                                      // 712\n    return ~line.indexOf('(timers.js:') || ~line.indexOf('(events.js:') || ~line.indexOf('(node.js:') || ~line.indexOf('(module.js:') || ~line.indexOf('GeneratorFunctionPrototype.next (native)') || false;\n  }                                                                                                                    // 719\n                                                                                                                       //\n  return function (stack) {                                                                                            // 721\n    stack = stack.split('\\n');                                                                                         // 722\n    stack = exports.reduce(stack, function (list, line) {                                                              // 724\n      if (isMochaInternal(line)) {                                                                                     // 725\n        return list;                                                                                                   // 726\n      }                                                                                                                // 727\n                                                                                                                       //\n      if (is.node && isNodeInternal(line)) {                                                                           // 729\n        return list;                                                                                                   // 730\n      } // Clean up cwd(absolute)                                                                                      // 731\n                                                                                                                       //\n                                                                                                                       //\n      list.push(line.replace(cwd, ''));                                                                                // 734\n      return list;                                                                                                     // 735\n    }, []);                                                                                                            // 736\n    return stack.join('\\n');                                                                                           // 738\n  };                                                                                                                   // 739\n};                                                                                                                     // 740\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser\":{\"progress.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/browser/progress.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Expose `Progress`.                                                                                                  //\n */module.exports = Progress; /**                                                                                      //\n                               * Initialize a new `Progress` indicator.                                                //\n                               */                                                                                      //\n                                                                                                                       //\nfunction Progress() {                                                                                                  // 10\n  this.percent = 0;                                                                                                    // 11\n  this.size(0);                                                                                                        // 12\n  this.fontSize(11);                                                                                                   // 13\n  this.font('helvetica, arial, sans-serif');                                                                           // 14\n} /**                                                                                                                  // 15\n   * Set progress size to `size`.                                                                                      //\n   *                                                                                                                   //\n   * @api public                                                                                                       //\n   * @param {number} size                                                                                              //\n   * @return {Progress} Progress instance.                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nProgress.prototype.size = function (size) {                                                                            // 24\n  this._size = size;                                                                                                   // 25\n  return this;                                                                                                         // 26\n}; /**                                                                                                                 // 27\n    * Set text to `text`.                                                                                              //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {string} text                                                                                             //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.text = function (text) {                                                                            // 36\n  this._text = text;                                                                                                   // 37\n  return this;                                                                                                         // 38\n}; /**                                                                                                                 // 39\n    * Set font size to `size`.                                                                                         //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {number} size                                                                                             //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.fontSize = function (size) {                                                                        // 48\n  this._fontSize = size;                                                                                               // 49\n  return this;                                                                                                         // 50\n}; /**                                                                                                                 // 51\n    * Set font to `family`.                                                                                            //\n    *                                                                                                                  //\n    * @param {string} family                                                                                           //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.font = function (family) {                                                                          // 59\n  this._font = family;                                                                                                 // 60\n  return this;                                                                                                         // 61\n}; /**                                                                                                                 // 62\n    * Update percentage to `n`.                                                                                        //\n    *                                                                                                                  //\n    * @param {number} n                                                                                                //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.update = function (n) {                                                                             // 70\n  this.percent = n;                                                                                                    // 71\n  return this;                                                                                                         // 72\n}; /**                                                                                                                 // 73\n    * Draw on `ctx`.                                                                                                   //\n    *                                                                                                                  //\n    * @param {CanvasRenderingContext2d} ctx                                                                            //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.draw = function (ctx) {                                                                             // 81\n  try {                                                                                                                // 82\n    var percent = Math.min(this.percent, 100);                                                                         // 83\n    var size = this._size;                                                                                             // 84\n    var half = size / 2;                                                                                               // 85\n    var x = half;                                                                                                      // 86\n    var y = half;                                                                                                      // 87\n    var rad = half - 1;                                                                                                // 88\n    var fontSize = this._fontSize;                                                                                     // 89\n    ctx.font = fontSize + 'px ' + this._font;                                                                          // 91\n    var angle = Math.PI * 2 * (percent / 100);                                                                         // 93\n    ctx.clearRect(0, 0, size, size); // outer circle                                                                   // 94\n                                                                                                                       //\n    ctx.strokeStyle = '#9f9f9f';                                                                                       // 97\n    ctx.beginPath();                                                                                                   // 98\n    ctx.arc(x, y, rad, 0, angle, false);                                                                               // 99\n    ctx.stroke(); // inner circle                                                                                      // 100\n                                                                                                                       //\n    ctx.strokeStyle = '#eee';                                                                                          // 103\n    ctx.beginPath();                                                                                                   // 104\n    ctx.arc(x, y, rad - 1, 0, angle, true);                                                                            // 105\n    ctx.stroke(); // text                                                                                              // 106\n                                                                                                                       //\n    var text = this._text || (percent | 0) + '%';                                                                      // 109\n    var w = ctx.measureText(text).width;                                                                               // 110\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);                                                           // 112\n  } catch (err) {// don't fail if we can't render progress                                                             // 113\n  }                                                                                                                    // 115\n                                                                                                                       //\n  return this;                                                                                                         // 116\n};                                                                                                                     // 117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reporters\":{\"base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/reporters/base.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                //\n */var tty = require('tty');                                                                                           //\n                                                                                                                       //\nvar diff = require('diff');                                                                                            // 6\n                                                                                                                       //\nvar ms = require('../ms');                                                                                             // 7\n                                                                                                                       //\nvar utils = require('../utils');                                                                                       // 8\n                                                                                                                       //\nvar supportsColor = process.browser ? null : require('supports-color'); /**                                            // 9\n                                                                         * Expose `Base`.                              //\n                                                                         */                                            //\nexports = module.exports = Base; /**                                                                                   // 15\n                                  * Save timer references to avoid Sinon interfering.                                  //\n                                  * See: https://github.com/mochajs/mocha/issues/237                                   //\n                                  */ /* eslint-disable no-unused-vars, no-native-reassign */                           //\nvar Date = global.Date;                                                                                                // 23\nvar setTimeout = global.setTimeout;                                                                                    // 24\nvar setInterval = global.setInterval;                                                                                  // 25\nvar clearTimeout = global.clearTimeout;                                                                                // 26\nvar clearInterval = global.clearInterval; /* eslint-enable no-unused-vars, no-native-reassign */ /**                   // 27\n                                                                                                  * Check if both stdio streams are associated with a tty.\n                                                                                                  */                   //\nvar isatty = tty.isatty(1) && tty.isatty(2); /**                                                                       // 34\n                                              * Enable coloring by default, except in the browser interface.           //\n                                              */                                                                       //\nexports.useColors = !process.browser && (supportsColor || process.env.MOCHA_COLORS !== undefined); /**                 // 40\n                                                                                                    * Inline diffs instead of +/-\n                                                                                                    */                 //\nexports.inlineDiffs = false; /**                                                                                       // 46\n                              * Default color map.                                                                     //\n                              */                                                                                       //\nexports.colors = {                                                                                                     // 52\n  pass: 90,                                                                                                            // 53\n  fail: 31,                                                                                                            // 54\n  'bright pass': 92,                                                                                                   // 55\n  'bright fail': 91,                                                                                                   // 56\n  'bright yellow': 93,                                                                                                 // 57\n  pending: 36,                                                                                                         // 58\n  suite: 0,                                                                                                            // 59\n  'error title': 0,                                                                                                    // 60\n  'error message': 31,                                                                                                 // 61\n  'error stack': 90,                                                                                                   // 62\n  checkmark: 32,                                                                                                       // 63\n  fast: 90,                                                                                                            // 64\n  medium: 33,                                                                                                          // 65\n  slow: 31,                                                                                                            // 66\n  green: 32,                                                                                                           // 67\n  light: 90,                                                                                                           // 68\n  'diff gutter': 90,                                                                                                   // 69\n  'diff added': 32,                                                                                                    // 70\n  'diff removed': 31                                                                                                   // 71\n}; /**                                                                                                                 // 52\n    * Default symbol map.                                                                                              //\n    */                                                                                                                 //\nexports.symbols = {                                                                                                    // 78\n  ok: '✓',                                                                                                             // 79\n  err: '✖',                                                                                                            // 80\n  dot: '․'                                                                                                             // 81\n}; // With node.js on Windows: use symbols available in terminal default fonts                                         // 78\n                                                                                                                       //\nif (process.platform === 'win32') {                                                                                    // 85\n  exports.symbols.ok = \"\\u221A\";                                                                                       // 86\n  exports.symbols.err = \"\\xD7\";                                                                                        // 87\n  exports.symbols.dot = '.';                                                                                           // 88\n} /**                                                                                                                  // 89\n   * Color `str` with the given `type`,                                                                                //\n   * allowing colors to be disabled,                                                                                   //\n   * as well as user-defined color                                                                                     //\n   * schemes.                                                                                                          //\n   *                                                                                                                   //\n   * @param {string} type                                                                                              //\n   * @param {string} str                                                                                               //\n   * @return {string}                                                                                                  //\n   * @api private                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\nvar color = exports.color = function (type, str) {                                                                     // 102\n  if (!exports.useColors) {                                                                                            // 103\n    return String(str);                                                                                                // 104\n  }                                                                                                                    // 105\n                                                                                                                       //\n  return \"\\x1B[\" + exports.colors[type] + 'm' + str + \"\\x1B[0m\";                                                       // 106\n}; /**                                                                                                                 // 107\n    * Expose term window size, with some defaults for when stderr is not a tty.                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.window = {                                                                                                     // 113\n  width: 75                                                                                                            // 114\n};                                                                                                                     // 113\n                                                                                                                       //\nif (isatty) {                                                                                                          // 117\n  exports.window.width = process.stdout.getWindowSize ? process.stdout.getWindowSize(1)[0] : tty.getWindowSize()[1];   // 118\n} /**                                                                                                                  // 121\n   * Expose some basic cursor interactions that are common among reporters.                                            //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.cursor = {                                                                                                     // 127\n  hide: function () {                                                                                                  // 128\n    isatty && process.stdout.write(\"\\x1B[?25l\");                                                                       // 129\n  },                                                                                                                   // 130\n  show: function () {                                                                                                  // 132\n    isatty && process.stdout.write(\"\\x1B[?25h\");                                                                       // 133\n  },                                                                                                                   // 134\n  deleteLine: function () {                                                                                            // 136\n    isatty && process.stdout.write(\"\\x1B[2K\");                                                                         // 137\n  },                                                                                                                   // 138\n  beginningOfLine: function () {                                                                                       // 140\n    isatty && process.stdout.write(\"\\x1B[0G\");                                                                         // 141\n  },                                                                                                                   // 142\n  CR: function () {                                                                                                    // 144\n    if (isatty) {                                                                                                      // 145\n      exports.cursor.deleteLine();                                                                                     // 146\n      exports.cursor.beginningOfLine();                                                                                // 147\n    } else {                                                                                                           // 148\n      process.stdout.write('\\r');                                                                                      // 149\n    }                                                                                                                  // 150\n  }                                                                                                                    // 151\n}; /**                                                                                                                 // 127\n    * Outut the given `failures` as a list.                                                                            //\n    *                                                                                                                  //\n    * @param {Array} failures                                                                                          //\n    * @api public                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.list = function (failures) {                                                                                   // 161\n  console.log();                                                                                                       // 162\n  failures.forEach(function (test, i) {                                                                                // 163\n    // format                                                                                                          // 164\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n'); // msg\n                                                                                                                       //\n    var msg;                                                                                                           // 170\n    var err = test.err;                                                                                                // 171\n    var message;                                                                                                       // 172\n                                                                                                                       //\n    if (err.message) {                                                                                                 // 173\n      message = err.message;                                                                                           // 174\n    } else if (typeof err.inspect === 'function') {                                                                    // 175\n      message = err.inspect() + '';                                                                                    // 176\n    } else {                                                                                                           // 177\n      message = '';                                                                                                    // 178\n    }                                                                                                                  // 179\n                                                                                                                       //\n    var stack = err.stack || message;                                                                                  // 180\n    var index = stack.indexOf(message);                                                                                // 181\n    var actual = err.actual;                                                                                           // 182\n    var expected = err.expected;                                                                                       // 183\n    var escape = true;                                                                                                 // 184\n                                                                                                                       //\n    if (index === -1) {                                                                                                // 186\n      msg = message;                                                                                                   // 187\n    } else {                                                                                                           // 188\n      index += message.length;                                                                                         // 189\n      msg = stack.slice(0, index); // remove msg from stack                                                            // 190\n                                                                                                                       //\n      stack = stack.slice(index + 1);                                                                                  // 192\n    } // uncaught                                                                                                      // 193\n                                                                                                                       //\n                                                                                                                       //\n    if (err.uncaught) {                                                                                                // 196\n      msg = 'Uncaught ' + msg;                                                                                         // 197\n    } // explicitly show diff                                                                                          // 198\n                                                                                                                       //\n                                                                                                                       //\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {                              // 200\n      escape = false;                                                                                                  // 201\n                                                                                                                       //\n      if (!(utils.isString(actual) && utils.isString(expected))) {                                                     // 202\n        err.actual = actual = utils.stringify(actual);                                                                 // 203\n        err.expected = expected = utils.stringify(expected);                                                           // 204\n      }                                                                                                                // 205\n                                                                                                                       //\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');                                    // 207\n      var match = message.match(/^([^:]+): expected/);                                                                 // 208\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);                                               // 209\n                                                                                                                       //\n      if (exports.inlineDiffs) {                                                                                       // 211\n        msg += inlineDiff(err, escape);                                                                                // 212\n      } else {                                                                                                         // 213\n        msg += unifiedDiff(err, escape);                                                                               // 214\n      }                                                                                                                // 215\n    } // indent stack trace                                                                                            // 216\n                                                                                                                       //\n                                                                                                                       //\n    stack = stack.replace(/^/gm, '  ');                                                                                // 219\n    console.log(fmt, i + 1, test.fullTitle(), msg, stack);                                                             // 221\n  });                                                                                                                  // 222\n}; /**                                                                                                                 // 223\n    * Initialize a new `Base` reporter.                                                                                //\n    *                                                                                                                  //\n    * All other reporters generally                                                                                    //\n    * inherit from this reporter, providing                                                                            //\n    * stats such as test duration, number                                                                              //\n    * of tests passed / failed etc.                                                                                    //\n    *                                                                                                                  //\n    * @param {Runner} runner                                                                                           //\n    * @api public                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction Base(runner) {                                                                                                // 237\n  var stats = this.stats = {                                                                                           // 238\n    suites: 0,                                                                                                         // 238\n    tests: 0,                                                                                                          // 238\n    passes: 0,                                                                                                         // 238\n    pending: 0,                                                                                                        // 238\n    failures: 0                                                                                                        // 238\n  };                                                                                                                   // 238\n  var failures = this.failures = [];                                                                                   // 239\n                                                                                                                       //\n  if (!runner) {                                                                                                       // 241\n    return;                                                                                                            // 242\n  }                                                                                                                    // 243\n                                                                                                                       //\n  this.runner = runner;                                                                                                // 244\n  runner.stats = stats;                                                                                                // 246\n  runner.on('start', function () {                                                                                     // 248\n    stats.start = new Date();                                                                                          // 249\n  });                                                                                                                  // 250\n  runner.on('suite', function (suite) {                                                                                // 252\n    stats.suites = stats.suites || 0;                                                                                  // 253\n    suite.root || stats.suites++;                                                                                      // 254\n  });                                                                                                                  // 255\n  runner.on('test end', function () {                                                                                  // 257\n    stats.tests = stats.tests || 0;                                                                                    // 258\n    stats.tests++;                                                                                                     // 259\n  });                                                                                                                  // 260\n  runner.on('pass', function (test) {                                                                                  // 262\n    stats.passes = stats.passes || 0;                                                                                  // 263\n                                                                                                                       //\n    if (test.duration > test.slow()) {                                                                                 // 265\n      test.speed = 'slow';                                                                                             // 266\n    } else if (test.duration > test.slow() / 2) {                                                                      // 267\n      test.speed = 'medium';                                                                                           // 268\n    } else {                                                                                                           // 269\n      test.speed = 'fast';                                                                                             // 270\n    }                                                                                                                  // 271\n                                                                                                                       //\n    stats.passes++;                                                                                                    // 273\n  });                                                                                                                  // 274\n  runner.on('fail', function (test, err) {                                                                             // 276\n    stats.failures = stats.failures || 0;                                                                              // 277\n    stats.failures++;                                                                                                  // 278\n    test.err = err;                                                                                                    // 279\n    failures.push(test);                                                                                               // 280\n  });                                                                                                                  // 281\n  runner.on('end', function () {                                                                                       // 283\n    stats.end = new Date();                                                                                            // 284\n    stats.duration = new Date() - stats.start;                                                                         // 285\n  });                                                                                                                  // 286\n  runner.on('pending', function () {                                                                                   // 288\n    stats.pending++;                                                                                                   // 289\n  });                                                                                                                  // 290\n} /**                                                                                                                  // 291\n   * Output common epilogue used by many of                                                                            //\n   * the bundled reporters.                                                                                            //\n   *                                                                                                                   //\n   * @api public                                                                                                       //\n   */                                                                                                                  //\n                                                                                                                       //\nBase.prototype.epilogue = function () {                                                                                // 299\n  var stats = this.stats;                                                                                              // 300\n  var fmt;                                                                                                             // 301\n  console.log(); // passes                                                                                             // 303\n                                                                                                                       //\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');                           // 306\n  console.log(fmt, stats.passes || 0, ms(stats.duration)); // pending                                                  // 310\n                                                                                                                       //\n  if (stats.pending) {                                                                                                 // 315\n    fmt = color('pending', ' ') + color('pending', ' %d pending');                                                     // 316\n    console.log(fmt, stats.pending);                                                                                   // 319\n  } // failures                                                                                                        // 320\n                                                                                                                       //\n                                                                                                                       //\n  if (stats.failures) {                                                                                                // 323\n    fmt = color('fail', '  %d failing');                                                                               // 324\n    console.log(fmt, stats.failures);                                                                                  // 326\n    Base.list(this.failures);                                                                                          // 328\n    console.log();                                                                                                     // 329\n  }                                                                                                                    // 330\n                                                                                                                       //\n  console.log();                                                                                                       // 332\n}; /**                                                                                                                 // 333\n    * Pad the given `str` to `len`.                                                                                    //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @param {string} len                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction pad(str, len) {                                                                                               // 343\n  str = String(str);                                                                                                   // 344\n  return Array(len - str.length + 1).join(' ') + str;                                                                  // 345\n} /**                                                                                                                  // 346\n   * Returns an inline diff between 2 strings with coloured ANSI output                                                //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err with actual/expected                                                                           //\n   * @param {boolean} escape                                                                                           //\n   * @return {string} Diff                                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction inlineDiff(err, escape) {                                                                                     // 356\n  var msg = errorDiff(err, 'WordsWithSpace', escape); // linenos                                                       // 357\n                                                                                                                       //\n  var lines = msg.split('\\n');                                                                                         // 360\n                                                                                                                       //\n  if (lines.length > 4) {                                                                                              // 361\n    var width = String(lines.length).length;                                                                           // 362\n    msg = lines.map(function (str, i) {                                                                                // 363\n      return pad(++i, width) + ' |' + ' ' + str;                                                                       // 364\n    }).join('\\n');                                                                                                     // 365\n  } // legend                                                                                                          // 366\n                                                                                                                       //\n                                                                                                                       //\n  msg = '\\n' + color('diff removed', 'actual') + ' ' + color('diff added', 'expected') + '\\n\\n' + msg + '\\n'; // indent\n                                                                                                                       //\n  msg = msg.replace(/^/gm, '      ');                                                                                  // 378\n  return msg;                                                                                                          // 379\n} /**                                                                                                                  // 380\n   * Returns a unified diff between two strings.                                                                       //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err with actual/expected                                                                           //\n   * @param {boolean} escape                                                                                           //\n   * @return {string} The diff.                                                                                        //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction unifiedDiff(err, escape) {                                                                                    // 390\n  var indent = '      ';                                                                                               // 391\n                                                                                                                       //\n  function cleanUp(line) {                                                                                             // 392\n    if (escape) {                                                                                                      // 393\n      line = escapeInvisibles(line);                                                                                   // 394\n    }                                                                                                                  // 395\n                                                                                                                       //\n    if (line[0] === '+') {                                                                                             // 396\n      return indent + colorLines('diff added', line);                                                                  // 397\n    }                                                                                                                  // 398\n                                                                                                                       //\n    if (line[0] === '-') {                                                                                             // 399\n      return indent + colorLines('diff removed', line);                                                                // 400\n    }                                                                                                                  // 401\n                                                                                                                       //\n    if (line.match(/\\@\\@/)) {                                                                                          // 402\n      return null;                                                                                                     // 403\n    }                                                                                                                  // 404\n                                                                                                                       //\n    if (line.match(/\\\\ No newline/)) {                                                                                 // 405\n      return null;                                                                                                     // 406\n    }                                                                                                                  // 407\n                                                                                                                       //\n    return indent + line;                                                                                              // 408\n  }                                                                                                                    // 409\n                                                                                                                       //\n  function notBlank(line) {                                                                                            // 410\n    return typeof line !== 'undefined' && line !== null;                                                               // 411\n  }                                                                                                                    // 412\n                                                                                                                       //\n  var msg = diff.createPatch('string', err.actual, err.expected);                                                      // 413\n  var lines = msg.split('\\n').splice(4);                                                                               // 414\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n} /**                                                                                                                  // 420\n   * Return a character diff for `err`.                                                                                //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err                                                                                                //\n   * @param {string} type                                                                                              //\n   * @param {boolean} escape                                                                                           //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction errorDiff(err, type, escape) {                                                                                // 431\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;                                                     // 432\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;                                               // 433\n  return diff['diff' + type](actual, expected).map(function (str) {                                                    // 434\n    if (str.added) {                                                                                                   // 435\n      return colorLines('diff added', str.value);                                                                      // 436\n    }                                                                                                                  // 437\n                                                                                                                       //\n    if (str.removed) {                                                                                                 // 438\n      return colorLines('diff removed', str.value);                                                                    // 439\n    }                                                                                                                  // 440\n                                                                                                                       //\n    return str.value;                                                                                                  // 441\n  }).join('');                                                                                                         // 442\n} /**                                                                                                                  // 443\n   * Returns a string with all invisible characters in plain text                                                      //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} line                                                                                              //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction escapeInvisibles(line) {                                                                                      // 452\n  return line.replace(/\\t/g, '<tab>').replace(/\\r/g, '<CR>').replace(/\\n/g, '<LF>\\n');                                 // 453\n} /**                                                                                                                  // 456\n   * Color lines for `str`, using the color `name`.                                                                    //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} name                                                                                              //\n   * @param {string} str                                                                                               //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction colorLines(name, str) {                                                                                       // 466\n  return str.split('\\n').map(function (str) {                                                                          // 467\n    return color(name, str);                                                                                           // 468\n  }).join('\\n');                                                                                                       // 469\n} /**                                                                                                                  // 470\n   * Object#toString reference.                                                                                        //\n   */                                                                                                                  //\n                                                                                                                       //\nvar objToString = Object.prototype.toString; /**                                                                       // 475\n                                              * Check that a / b have the same type.                                   //\n                                              *                                                                        //\n                                              * @api private                                                           //\n                                              * @param {Object} a                                                      //\n                                              * @param {Object} b                                                      //\n                                              * @return {boolean}                                                      //\n                                              */                                                                       //\n                                                                                                                       //\nfunction sameType(a, b) {                                                                                              // 485\n  return objToString.call(a) === objToString.call(b);                                                                  // 486\n}                                                                                                                      // 487\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/meteor-node-stubs/package.json                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";                                                                                    // 1\nexports.version = \"0.2.1\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/meteor-node-stubs/index.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");                                                                                       // 1\nvar meteorAliases = {};                                                                                                // 2\n                                                                                                                       // 3\nObject.keys(map).forEach(function (id) {                                                                               // 4\n  if (typeof map[id] === \"string\") {                                                                                   // 5\n    try {                                                                                                              // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                                        // 7\n        require.resolve(map[id]);                                                                                      // 8\n    } catch (e) {                                                                                                      // 9\n      // Resolution can fail at runtime if the stub was not included in the                                            // 10\n      // bundle because nothing depended on it.                                                                        // 11\n    }                                                                                                                  // 12\n  } else {                                                                                                             // 13\n    exports[id] = map[id];                                                                                             // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                          // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\nif (typeof meteorInstall === \"function\") {                                                                             // 19\n  meteorInstall({                                                                                                      // 20\n    // Install the aliases into a node_modules directory one level up from                                             // 21\n    // the root directory, so that they do not clutter the namespace                                                   // 22\n    // available to apps and packages.                                                                                 // 23\n    \"..\": {                                                                                                            // 24\n      node_modules: meteorAliases                                                                                      // 25\n    }                                                                                                                  // 26\n  });                                                                                                                  // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"map.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/meteor-node-stubs/map.json                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"assert\": \"assert/\",                                                                                                 // 2\n  \"buffer\": \"buffer/\",                                                                                                 // 3\n  \"child_process\": null,                                                                                               // 4\n  \"cluster\": null,                                                                                                     // 5\n  \"console\": \"console-browserify\",                                                                                     // 6\n  \"constants\": \"constants-browserify\",                                                                                 // 7\n  \"crypto\": \"crypto-browserify\",                                                                                       // 8\n  \"dgram\": null,                                                                                                       // 9\n  \"dns\": null,                                                                                                         // 10\n  \"domain\": \"domain-browser\",                                                                                          // 11\n  \"events\": \"events/\",                                                                                                 // 12\n  \"fs\": null,                                                                                                          // 13\n  \"http\": \"http-browserify\",                                                                                           // 14\n  \"https\": \"https-browserify\",                                                                                         // 15\n  \"module\": null,                                                                                                      // 16\n  \"net\": null,                                                                                                         // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                    // 18\n  \"path\": \"path-browserify\",                                                                                           // 19\n  \"process\": \"process/browser.js\",                                                                                     // 20\n  \"punycode\": \"punycode/\",                                                                                             // 21\n  \"querystring\": \"querystring-es3/\",                                                                                   // 22\n  \"readline\": null,                                                                                                    // 23\n  \"repl\": null,                                                                                                        // 24\n  \"stream\": \"stream-browserify\",                                                                                       // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                       // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                             // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                   // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                                 // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                   // 30\n  \"string_decoder\": \"string_decoder/\",                                                                                 // 31\n  \"sys\": \"util/util.js\",                                                                                               // 32\n  \"timers\": \"timers-browserify\",                                                                                       // 33\n  \"tls\": null,                                                                                                         // 34\n  \"tty\": \"tty-browserify\",                                                                                             // 35\n  \"url\": \"url/\",                                                                                                       // 36\n  \"util\": \"util/util.js\",                                                                                              // 37\n  \"vm\": \"vm-browserify\",                                                                                               // 38\n  \"zlib\": \"browserify-zlib\"                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"underscore\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/underscore/package.json                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"underscore\";                                                                                           // 1\nexports.version = \"1.8.3\";                                                                                             // 2\nexports.main = \"underscore.js\";                                                                                        // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"underscore.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/underscore/underscore.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//     Underscore.js 1.8.3                                                                                             // 1\n//     http://underscorejs.org                                                                                         // 2\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                              // 3\n//     Underscore may be freely distributed under the MIT license.                                                     // 4\n                                                                                                                       // 5\n(function() {                                                                                                          // 6\n                                                                                                                       // 7\n  // Baseline setup                                                                                                    // 8\n  // --------------                                                                                                    // 9\n                                                                                                                       // 10\n  // Establish the root object, `window` in the browser, or `exports` on the server.                                   // 11\n  var root = this;                                                                                                     // 12\n                                                                                                                       // 13\n  // Save the previous value of the `_` variable.                                                                      // 14\n  var previousUnderscore = root._;                                                                                     // 15\n                                                                                                                       // 16\n  // Save bytes in the minified (but not gzipped) version:                                                             // 17\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;                       // 18\n                                                                                                                       // 19\n  // Create quick reference variables for speed access to core prototypes.                                             // 20\n  var                                                                                                                  // 21\n    push             = ArrayProto.push,                                                                                // 22\n    slice            = ArrayProto.slice,                                                                               // 23\n    toString         = ObjProto.toString,                                                                              // 24\n    hasOwnProperty   = ObjProto.hasOwnProperty;                                                                        // 25\n                                                                                                                       // 26\n  // All **ECMAScript 5** native function implementations that we hope to use                                          // 27\n  // are declared here.                                                                                                // 28\n  var                                                                                                                  // 29\n    nativeIsArray      = Array.isArray,                                                                                // 30\n    nativeKeys         = Object.keys,                                                                                  // 31\n    nativeBind         = FuncProto.bind,                                                                               // 32\n    nativeCreate       = Object.create;                                                                                // 33\n                                                                                                                       // 34\n  // Naked function reference for surrogate-prototype-swapping.                                                        // 35\n  var Ctor = function(){};                                                                                             // 36\n                                                                                                                       // 37\n  // Create a safe reference to the Underscore object for use below.                                                   // 38\n  var _ = function(obj) {                                                                                              // 39\n    if (obj instanceof _) return obj;                                                                                  // 40\n    if (!(this instanceof _)) return new _(obj);                                                                       // 41\n    this._wrapped = obj;                                                                                               // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  // Export the Underscore object for **Node.js**, with                                                                // 45\n  // backwards-compatibility for the old `require()` API. If we're in                                                  // 46\n  // the browser, add `_` as a global object.                                                                          // 47\n  if (typeof exports !== 'undefined') {                                                                                // 48\n    if (typeof module !== 'undefined' && module.exports) {                                                             // 49\n      exports = module.exports = _;                                                                                    // 50\n    }                                                                                                                  // 51\n    exports._ = _;                                                                                                     // 52\n  } else {                                                                                                             // 53\n    root._ = _;                                                                                                        // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Current version.                                                                                                  // 57\n  _.VERSION = '1.8.3';                                                                                                 // 58\n                                                                                                                       // 59\n  // Internal function that returns an efficient (for current engines) version                                         // 60\n  // of the passed-in callback, to be repeatedly applied in other Underscore                                           // 61\n  // functions.                                                                                                        // 62\n  var optimizeCb = function(func, context, argCount) {                                                                 // 63\n    if (context === void 0) return func;                                                                               // 64\n    switch (argCount == null ? 3 : argCount) {                                                                         // 65\n      case 1: return function(value) {                                                                                 // 66\n        return func.call(context, value);                                                                              // 67\n      };                                                                                                               // 68\n      case 2: return function(value, other) {                                                                          // 69\n        return func.call(context, value, other);                                                                       // 70\n      };                                                                                                               // 71\n      case 3: return function(value, index, collection) {                                                              // 72\n        return func.call(context, value, index, collection);                                                           // 73\n      };                                                                                                               // 74\n      case 4: return function(accumulator, value, index, collection) {                                                 // 75\n        return func.call(context, accumulator, value, index, collection);                                              // 76\n      };                                                                                                               // 77\n    }                                                                                                                  // 78\n    return function() {                                                                                                // 79\n      return func.apply(context, arguments);                                                                           // 80\n    };                                                                                                                 // 81\n  };                                                                                                                   // 82\n                                                                                                                       // 83\n  // A mostly-internal function to generate callbacks that can be applied                                              // 84\n  // to each element in a collection, returning the desired result — either                                            // 85\n  // identity, an arbitrary callback, a property matcher, or a property accessor.                                      // 86\n  var cb = function(value, context, argCount) {                                                                        // 87\n    if (value == null) return _.identity;                                                                              // 88\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);                                              // 89\n    if (_.isObject(value)) return _.matcher(value);                                                                    // 90\n    return _.property(value);                                                                                          // 91\n  };                                                                                                                   // 92\n  _.iteratee = function(value, context) {                                                                              // 93\n    return cb(value, context, Infinity);                                                                               // 94\n  };                                                                                                                   // 95\n                                                                                                                       // 96\n  // An internal function for creating assigner functions.                                                             // 97\n  var createAssigner = function(keysFunc, undefinedOnly) {                                                             // 98\n    return function(obj) {                                                                                             // 99\n      var length = arguments.length;                                                                                   // 100\n      if (length < 2 || obj == null) return obj;                                                                       // 101\n      for (var index = 1; index < length; index++) {                                                                   // 102\n        var source = arguments[index],                                                                                 // 103\n            keys = keysFunc(source),                                                                                   // 104\n            l = keys.length;                                                                                           // 105\n        for (var i = 0; i < l; i++) {                                                                                  // 106\n          var key = keys[i];                                                                                           // 107\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];                                           // 108\n        }                                                                                                              // 109\n      }                                                                                                                // 110\n      return obj;                                                                                                      // 111\n    };                                                                                                                 // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  // An internal function for creating a new object that inherits from another.                                        // 115\n  var baseCreate = function(prototype) {                                                                               // 116\n    if (!_.isObject(prototype)) return {};                                                                             // 117\n    if (nativeCreate) return nativeCreate(prototype);                                                                  // 118\n    Ctor.prototype = prototype;                                                                                        // 119\n    var result = new Ctor;                                                                                             // 120\n    Ctor.prototype = null;                                                                                             // 121\n    return result;                                                                                                     // 122\n  };                                                                                                                   // 123\n                                                                                                                       // 124\n  var property = function(key) {                                                                                       // 125\n    return function(obj) {                                                                                             // 126\n      return obj == null ? void 0 : obj[key];                                                                          // 127\n    };                                                                                                                 // 128\n  };                                                                                                                   // 129\n                                                                                                                       // 130\n  // Helper for collection methods to determine whether a collection                                                   // 131\n  // should be iterated as an array or as an object                                                                    // 132\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength                                        // 133\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094                                                                // 134\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;                                                                           // 135\n  var getLength = property('length');                                                                                  // 136\n  var isArrayLike = function(collection) {                                                                             // 137\n    var length = getLength(collection);                                                                                // 138\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;                                      // 139\n  };                                                                                                                   // 140\n                                                                                                                       // 141\n  // Collection Functions                                                                                              // 142\n  // --------------------                                                                                              // 143\n                                                                                                                       // 144\n  // The cornerstone, an `each` implementation, aka `forEach`.                                                         // 145\n  // Handles raw objects in addition to array-likes. Treats all                                                        // 146\n  // sparse array-likes as if they were dense.                                                                         // 147\n  _.each = _.forEach = function(obj, iteratee, context) {                                                              // 148\n    iteratee = optimizeCb(iteratee, context);                                                                          // 149\n    var i, length;                                                                                                     // 150\n    if (isArrayLike(obj)) {                                                                                            // 151\n      for (i = 0, length = obj.length; i < length; i++) {                                                              // 152\n        iteratee(obj[i], i, obj);                                                                                      // 153\n      }                                                                                                                // 154\n    } else {                                                                                                           // 155\n      var keys = _.keys(obj);                                                                                          // 156\n      for (i = 0, length = keys.length; i < length; i++) {                                                             // 157\n        iteratee(obj[keys[i]], keys[i], obj);                                                                          // 158\n      }                                                                                                                // 159\n    }                                                                                                                  // 160\n    return obj;                                                                                                        // 161\n  };                                                                                                                   // 162\n                                                                                                                       // 163\n  // Return the results of applying the iteratee to each element.                                                      // 164\n  _.map = _.collect = function(obj, iteratee, context) {                                                               // 165\n    iteratee = cb(iteratee, context);                                                                                  // 166\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 167\n        length = (keys || obj).length,                                                                                 // 168\n        results = Array(length);                                                                                       // 169\n    for (var index = 0; index < length; index++) {                                                                     // 170\n      var currentKey = keys ? keys[index] : index;                                                                     // 171\n      results[index] = iteratee(obj[currentKey], currentKey, obj);                                                     // 172\n    }                                                                                                                  // 173\n    return results;                                                                                                    // 174\n  };                                                                                                                   // 175\n                                                                                                                       // 176\n  // Create a reducing function iterating left or right.                                                               // 177\n  function createReduce(dir) {                                                                                         // 178\n    // Optimized iterator function as using arguments.length                                                           // 179\n    // in the main function will deoptimize the, see #1991.                                                            // 180\n    function iterator(obj, iteratee, memo, keys, index, length) {                                                      // 181\n      for (; index >= 0 && index < length; index += dir) {                                                             // 182\n        var currentKey = keys ? keys[index] : index;                                                                   // 183\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);                                                       // 184\n      }                                                                                                                // 185\n      return memo;                                                                                                     // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    return function(obj, iteratee, memo, context) {                                                                    // 189\n      iteratee = optimizeCb(iteratee, context, 4);                                                                     // 190\n      var keys = !isArrayLike(obj) && _.keys(obj),                                                                     // 191\n          length = (keys || obj).length,                                                                               // 192\n          index = dir > 0 ? 0 : length - 1;                                                                            // 193\n      // Determine the initial value if none is provided.                                                              // 194\n      if (arguments.length < 3) {                                                                                      // 195\n        memo = obj[keys ? keys[index] : index];                                                                        // 196\n        index += dir;                                                                                                  // 197\n      }                                                                                                                // 198\n      return iterator(obj, iteratee, memo, keys, index, length);                                                       // 199\n    };                                                                                                                 // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n  // **Reduce** builds up a single result from a list of values, aka `inject`,                                         // 203\n  // or `foldl`.                                                                                                       // 204\n  _.reduce = _.foldl = _.inject = createReduce(1);                                                                     // 205\n                                                                                                                       // 206\n  // The right-associative version of reduce, also known as `foldr`.                                                   // 207\n  _.reduceRight = _.foldr = createReduce(-1);                                                                          // 208\n                                                                                                                       // 209\n  // Return the first value which passes a truth test. Aliased as `detect`.                                            // 210\n  _.find = _.detect = function(obj, predicate, context) {                                                              // 211\n    var key;                                                                                                           // 212\n    if (isArrayLike(obj)) {                                                                                            // 213\n      key = _.findIndex(obj, predicate, context);                                                                      // 214\n    } else {                                                                                                           // 215\n      key = _.findKey(obj, predicate, context);                                                                        // 216\n    }                                                                                                                  // 217\n    if (key !== void 0 && key !== -1) return obj[key];                                                                 // 218\n  };                                                                                                                   // 219\n                                                                                                                       // 220\n  // Return all the elements that pass a truth test.                                                                   // 221\n  // Aliased as `select`.                                                                                              // 222\n  _.filter = _.select = function(obj, predicate, context) {                                                            // 223\n    var results = [];                                                                                                  // 224\n    predicate = cb(predicate, context);                                                                                // 225\n    _.each(obj, function(value, index, list) {                                                                         // 226\n      if (predicate(value, index, list)) results.push(value);                                                          // 227\n    });                                                                                                                // 228\n    return results;                                                                                                    // 229\n  };                                                                                                                   // 230\n                                                                                                                       // 231\n  // Return all the elements for which a truth test fails.                                                             // 232\n  _.reject = function(obj, predicate, context) {                                                                       // 233\n    return _.filter(obj, _.negate(cb(predicate)), context);                                                            // 234\n  };                                                                                                                   // 235\n                                                                                                                       // 236\n  // Determine whether all of the elements match a truth test.                                                         // 237\n  // Aliased as `all`.                                                                                                 // 238\n  _.every = _.all = function(obj, predicate, context) {                                                                // 239\n    predicate = cb(predicate, context);                                                                                // 240\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 241\n        length = (keys || obj).length;                                                                                 // 242\n    for (var index = 0; index < length; index++) {                                                                     // 243\n      var currentKey = keys ? keys[index] : index;                                                                     // 244\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;                                                  // 245\n    }                                                                                                                  // 246\n    return true;                                                                                                       // 247\n  };                                                                                                                   // 248\n                                                                                                                       // 249\n  // Determine if at least one element in the object matches a truth test.                                             // 250\n  // Aliased as `any`.                                                                                                 // 251\n  _.some = _.any = function(obj, predicate, context) {                                                                 // 252\n    predicate = cb(predicate, context);                                                                                // 253\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 254\n        length = (keys || obj).length;                                                                                 // 255\n    for (var index = 0; index < length; index++) {                                                                     // 256\n      var currentKey = keys ? keys[index] : index;                                                                     // 257\n      if (predicate(obj[currentKey], currentKey, obj)) return true;                                                    // 258\n    }                                                                                                                  // 259\n    return false;                                                                                                      // 260\n  };                                                                                                                   // 261\n                                                                                                                       // 262\n  // Determine if the array or object contains a given item (using `===`).                                             // 263\n  // Aliased as `includes` and `include`.                                                                              // 264\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {                                        // 265\n    if (!isArrayLike(obj)) obj = _.values(obj);                                                                        // 266\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;                                                          // 267\n    return _.indexOf(obj, item, fromIndex) >= 0;                                                                       // 268\n  };                                                                                                                   // 269\n                                                                                                                       // 270\n  // Invoke a method (with arguments) on every item in a collection.                                                   // 271\n  _.invoke = function(obj, method) {                                                                                   // 272\n    var args = slice.call(arguments, 2);                                                                               // 273\n    var isFunc = _.isFunction(method);                                                                                 // 274\n    return _.map(obj, function(value) {                                                                                // 275\n      var func = isFunc ? method : value[method];                                                                      // 276\n      return func == null ? func : func.apply(value, args);                                                            // 277\n    });                                                                                                                // 278\n  };                                                                                                                   // 279\n                                                                                                                       // 280\n  // Convenience version of a common use case of `map`: fetching a property.                                           // 281\n  _.pluck = function(obj, key) {                                                                                       // 282\n    return _.map(obj, _.property(key));                                                                                // 283\n  };                                                                                                                   // 284\n                                                                                                                       // 285\n  // Convenience version of a common use case of `filter`: selecting only objects                                      // 286\n  // containing specific `key:value` pairs.                                                                            // 287\n  _.where = function(obj, attrs) {                                                                                     // 288\n    return _.filter(obj, _.matcher(attrs));                                                                            // 289\n  };                                                                                                                   // 290\n                                                                                                                       // 291\n  // Convenience version of a common use case of `find`: getting the first object                                      // 292\n  // containing specific `key:value` pairs.                                                                            // 293\n  _.findWhere = function(obj, attrs) {                                                                                 // 294\n    return _.find(obj, _.matcher(attrs));                                                                              // 295\n  };                                                                                                                   // 296\n                                                                                                                       // 297\n  // Return the maximum element (or element-based computation).                                                        // 298\n  _.max = function(obj, iteratee, context) {                                                                           // 299\n    var result = -Infinity, lastComputed = -Infinity,                                                                  // 300\n        value, computed;                                                                                               // 301\n    if (iteratee == null && obj != null) {                                                                             // 302\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 303\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 304\n        value = obj[i];                                                                                                // 305\n        if (value > result) {                                                                                          // 306\n          result = value;                                                                                              // 307\n        }                                                                                                              // 308\n      }                                                                                                                // 309\n    } else {                                                                                                           // 310\n      iteratee = cb(iteratee, context);                                                                                // 311\n      _.each(obj, function(value, index, list) {                                                                       // 312\n        computed = iteratee(value, index, list);                                                                       // 313\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {                               // 314\n          result = value;                                                                                              // 315\n          lastComputed = computed;                                                                                     // 316\n        }                                                                                                              // 317\n      });                                                                                                              // 318\n    }                                                                                                                  // 319\n    return result;                                                                                                     // 320\n  };                                                                                                                   // 321\n                                                                                                                       // 322\n  // Return the minimum element (or element-based computation).                                                        // 323\n  _.min = function(obj, iteratee, context) {                                                                           // 324\n    var result = Infinity, lastComputed = Infinity,                                                                    // 325\n        value, computed;                                                                                               // 326\n    if (iteratee == null && obj != null) {                                                                             // 327\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 328\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 329\n        value = obj[i];                                                                                                // 330\n        if (value < result) {                                                                                          // 331\n          result = value;                                                                                              // 332\n        }                                                                                                              // 333\n      }                                                                                                                // 334\n    } else {                                                                                                           // 335\n      iteratee = cb(iteratee, context);                                                                                // 336\n      _.each(obj, function(value, index, list) {                                                                       // 337\n        computed = iteratee(value, index, list);                                                                       // 338\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {                                 // 339\n          result = value;                                                                                              // 340\n          lastComputed = computed;                                                                                     // 341\n        }                                                                                                              // 342\n      });                                                                                                              // 343\n    }                                                                                                                  // 344\n    return result;                                                                                                     // 345\n  };                                                                                                                   // 346\n                                                                                                                       // 347\n  // Shuffle a collection, using the modern version of the                                                             // 348\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                                        // 349\n  _.shuffle = function(obj) {                                                                                          // 350\n    var set = isArrayLike(obj) ? obj : _.values(obj);                                                                  // 351\n    var length = set.length;                                                                                           // 352\n    var shuffled = Array(length);                                                                                      // 353\n    for (var index = 0, rand; index < length; index++) {                                                               // 354\n      rand = _.random(0, index);                                                                                       // 355\n      if (rand !== index) shuffled[index] = shuffled[rand];                                                            // 356\n      shuffled[rand] = set[index];                                                                                     // 357\n    }                                                                                                                  // 358\n    return shuffled;                                                                                                   // 359\n  };                                                                                                                   // 360\n                                                                                                                       // 361\n  // Sample **n** random values from a collection.                                                                     // 362\n  // If **n** is not specified, returns a single random element.                                                       // 363\n  // The internal `guard` argument allows it to work with `map`.                                                       // 364\n  _.sample = function(obj, n, guard) {                                                                                 // 365\n    if (n == null || guard) {                                                                                          // 366\n      if (!isArrayLike(obj)) obj = _.values(obj);                                                                      // 367\n      return obj[_.random(obj.length - 1)];                                                                            // 368\n    }                                                                                                                  // 369\n    return _.shuffle(obj).slice(0, Math.max(0, n));                                                                    // 370\n  };                                                                                                                   // 371\n                                                                                                                       // 372\n  // Sort the object's values by a criterion produced by an iteratee.                                                  // 373\n  _.sortBy = function(obj, iteratee, context) {                                                                        // 374\n    iteratee = cb(iteratee, context);                                                                                  // 375\n    return _.pluck(_.map(obj, function(value, index, list) {                                                           // 376\n      return {                                                                                                         // 377\n        value: value,                                                                                                  // 378\n        index: index,                                                                                                  // 379\n        criteria: iteratee(value, index, list)                                                                         // 380\n      };                                                                                                               // 381\n    }).sort(function(left, right) {                                                                                    // 382\n      var a = left.criteria;                                                                                           // 383\n      var b = right.criteria;                                                                                          // 384\n      if (a !== b) {                                                                                                   // 385\n        if (a > b || a === void 0) return 1;                                                                           // 386\n        if (a < b || b === void 0) return -1;                                                                          // 387\n      }                                                                                                                // 388\n      return left.index - right.index;                                                                                 // 389\n    }), 'value');                                                                                                      // 390\n  };                                                                                                                   // 391\n                                                                                                                       // 392\n  // An internal function used for aggregate \"group by\" operations.                                                    // 393\n  var group = function(behavior) {                                                                                     // 394\n    return function(obj, iteratee, context) {                                                                          // 395\n      var result = {};                                                                                                 // 396\n      iteratee = cb(iteratee, context);                                                                                // 397\n      _.each(obj, function(value, index) {                                                                             // 398\n        var key = iteratee(value, index, obj);                                                                         // 399\n        behavior(result, value, key);                                                                                  // 400\n      });                                                                                                              // 401\n      return result;                                                                                                   // 402\n    };                                                                                                                 // 403\n  };                                                                                                                   // 404\n                                                                                                                       // 405\n  // Groups the object's values by a criterion. Pass either a string attribute                                         // 406\n  // to group by, or a function that returns the criterion.                                                            // 407\n  _.groupBy = group(function(result, value, key) {                                                                     // 408\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];                                       // 409\n  });                                                                                                                  // 410\n                                                                                                                       // 411\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for                                         // 412\n  // when you know that your index values will be unique.                                                              // 413\n  _.indexBy = group(function(result, value, key) {                                                                     // 414\n    result[key] = value;                                                                                               // 415\n  });                                                                                                                  // 416\n                                                                                                                       // 417\n  // Counts instances of an object that group by a certain criterion. Pass                                             // 418\n  // either a string attribute to count by, or a function that returns the                                             // 419\n  // criterion.                                                                                                        // 420\n  _.countBy = group(function(result, value, key) {                                                                     // 421\n    if (_.has(result, key)) result[key]++; else result[key] = 1;                                                       // 422\n  });                                                                                                                  // 423\n                                                                                                                       // 424\n  // Safely create a real, live array from anything iterable.                                                          // 425\n  _.toArray = function(obj) {                                                                                          // 426\n    if (!obj) return [];                                                                                               // 427\n    if (_.isArray(obj)) return slice.call(obj);                                                                        // 428\n    if (isArrayLike(obj)) return _.map(obj, _.identity);                                                               // 429\n    return _.values(obj);                                                                                              // 430\n  };                                                                                                                   // 431\n                                                                                                                       // 432\n  // Return the number of elements in an object.                                                                       // 433\n  _.size = function(obj) {                                                                                             // 434\n    if (obj == null) return 0;                                                                                         // 435\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;                                                         // 436\n  };                                                                                                                   // 437\n                                                                                                                       // 438\n  // Split a collection into two arrays: one whose elements all satisfy the given                                      // 439\n  // predicate, and one whose elements all do not satisfy the predicate.                                               // 440\n  _.partition = function(obj, predicate, context) {                                                                    // 441\n    predicate = cb(predicate, context);                                                                                // 442\n    var pass = [], fail = [];                                                                                          // 443\n    _.each(obj, function(value, key, obj) {                                                                            // 444\n      (predicate(value, key, obj) ? pass : fail).push(value);                                                          // 445\n    });                                                                                                                // 446\n    return [pass, fail];                                                                                               // 447\n  };                                                                                                                   // 448\n                                                                                                                       // 449\n  // Array Functions                                                                                                   // 450\n  // ---------------                                                                                                   // 451\n                                                                                                                       // 452\n  // Get the first element of an array. Passing **n** will return the first N                                          // 453\n  // values in the array. Aliased as `head` and `take`. The **guard** check                                            // 454\n  // allows it to work with `_.map`.                                                                                   // 455\n  _.first = _.head = _.take = function(array, n, guard) {                                                              // 456\n    if (array == null) return void 0;                                                                                  // 457\n    if (n == null || guard) return array[0];                                                                           // 458\n    return _.initial(array, array.length - n);                                                                         // 459\n  };                                                                                                                   // 460\n                                                                                                                       // 461\n  // Returns everything but the last entry of the array. Especially useful on                                          // 462\n  // the arguments object. Passing **n** will return all the values in                                                 // 463\n  // the array, excluding the last N.                                                                                  // 464\n  _.initial = function(array, n, guard) {                                                                              // 465\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));                             // 466\n  };                                                                                                                   // 467\n                                                                                                                       // 468\n  // Get the last element of an array. Passing **n** will return the last N                                            // 469\n  // values in the array.                                                                                              // 470\n  _.last = function(array, n, guard) {                                                                                 // 471\n    if (array == null) return void 0;                                                                                  // 472\n    if (n == null || guard) return array[array.length - 1];                                                            // 473\n    return _.rest(array, Math.max(0, array.length - n));                                                               // 474\n  };                                                                                                                   // 475\n                                                                                                                       // 476\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                                // 477\n  // Especially useful on the arguments object. Passing an **n** will return                                           // 478\n  // the rest N values in the array.                                                                                   // 479\n  _.rest = _.tail = _.drop = function(array, n, guard) {                                                               // 480\n    return slice.call(array, n == null || guard ? 1 : n);                                                              // 481\n  };                                                                                                                   // 482\n                                                                                                                       // 483\n  // Trim out all falsy values from an array.                                                                          // 484\n  _.compact = function(array) {                                                                                        // 485\n    return _.filter(array, _.identity);                                                                                // 486\n  };                                                                                                                   // 487\n                                                                                                                       // 488\n  // Internal implementation of a recursive `flatten` function.                                                        // 489\n  var flatten = function(input, shallow, strict, startIndex) {                                                         // 490\n    var output = [], idx = 0;                                                                                          // 491\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {                                        // 492\n      var value = input[i];                                                                                            // 493\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {                                          // 494\n        //flatten current level of array or arguments object                                                           // 495\n        if (!shallow) value = flatten(value, shallow, strict);                                                         // 496\n        var j = 0, len = value.length;                                                                                 // 497\n        output.length += len;                                                                                          // 498\n        while (j < len) {                                                                                              // 499\n          output[idx++] = value[j++];                                                                                  // 500\n        }                                                                                                              // 501\n      } else if (!strict) {                                                                                            // 502\n        output[idx++] = value;                                                                                         // 503\n      }                                                                                                                // 504\n    }                                                                                                                  // 505\n    return output;                                                                                                     // 506\n  };                                                                                                                   // 507\n                                                                                                                       // 508\n  // Flatten out an array, either recursively (by default), or just one level.                                         // 509\n  _.flatten = function(array, shallow) {                                                                               // 510\n    return flatten(array, shallow, false);                                                                             // 511\n  };                                                                                                                   // 512\n                                                                                                                       // 513\n  // Return a version of the array that does not contain the specified value(s).                                       // 514\n  _.without = function(array) {                                                                                        // 515\n    return _.difference(array, slice.call(arguments, 1));                                                              // 516\n  };                                                                                                                   // 517\n                                                                                                                       // 518\n  // Produce a duplicate-free version of the array. If the array has already                                           // 519\n  // been sorted, you have the option of using a faster algorithm.                                                     // 520\n  // Aliased as `unique`.                                                                                              // 521\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {                                                   // 522\n    if (!_.isBoolean(isSorted)) {                                                                                      // 523\n      context = iteratee;                                                                                              // 524\n      iteratee = isSorted;                                                                                             // 525\n      isSorted = false;                                                                                                // 526\n    }                                                                                                                  // 527\n    if (iteratee != null) iteratee = cb(iteratee, context);                                                            // 528\n    var result = [];                                                                                                   // 529\n    var seen = [];                                                                                                     // 530\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 531\n      var value = array[i],                                                                                            // 532\n          computed = iteratee ? iteratee(value, i, array) : value;                                                     // 533\n      if (isSorted) {                                                                                                  // 534\n        if (!i || seen !== computed) result.push(value);                                                               // 535\n        seen = computed;                                                                                               // 536\n      } else if (iteratee) {                                                                                           // 537\n        if (!_.contains(seen, computed)) {                                                                             // 538\n          seen.push(computed);                                                                                         // 539\n          result.push(value);                                                                                          // 540\n        }                                                                                                              // 541\n      } else if (!_.contains(result, value)) {                                                                         // 542\n        result.push(value);                                                                                            // 543\n      }                                                                                                                // 544\n    }                                                                                                                  // 545\n    return result;                                                                                                     // 546\n  };                                                                                                                   // 547\n                                                                                                                       // 548\n  // Produce an array that contains the union: each distinct element from all of                                       // 549\n  // the passed-in arrays.                                                                                             // 550\n  _.union = function() {                                                                                               // 551\n    return _.uniq(flatten(arguments, true, true));                                                                     // 552\n  };                                                                                                                   // 553\n                                                                                                                       // 554\n  // Produce an array that contains every item shared between all the                                                  // 555\n  // passed-in arrays.                                                                                                 // 556\n  _.intersection = function(array) {                                                                                   // 557\n    var result = [];                                                                                                   // 558\n    var argsLength = arguments.length;                                                                                 // 559\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 560\n      var item = array[i];                                                                                             // 561\n      if (_.contains(result, item)) continue;                                                                          // 562\n      for (var j = 1; j < argsLength; j++) {                                                                           // 563\n        if (!_.contains(arguments[j], item)) break;                                                                    // 564\n      }                                                                                                                // 565\n      if (j === argsLength) result.push(item);                                                                         // 566\n    }                                                                                                                  // 567\n    return result;                                                                                                     // 568\n  };                                                                                                                   // 569\n                                                                                                                       // 570\n  // Take the difference between one array and a number of other arrays.                                               // 571\n  // Only the elements present in just the first array will remain.                                                    // 572\n  _.difference = function(array) {                                                                                     // 573\n    var rest = flatten(arguments, true, true, 1);                                                                      // 574\n    return _.filter(array, function(value){                                                                            // 575\n      return !_.contains(rest, value);                                                                                 // 576\n    });                                                                                                                // 577\n  };                                                                                                                   // 578\n                                                                                                                       // 579\n  // Zip together multiple lists into a single array -- elements that share                                            // 580\n  // an index go together.                                                                                             // 581\n  _.zip = function() {                                                                                                 // 582\n    return _.unzip(arguments);                                                                                         // 583\n  };                                                                                                                   // 584\n                                                                                                                       // 585\n  // Complement of _.zip. Unzip accepts an array of arrays and groups                                                  // 586\n  // each array's elements on shared indices                                                                           // 587\n  _.unzip = function(array) {                                                                                          // 588\n    var length = array && _.max(array, getLength).length || 0;                                                         // 589\n    var result = Array(length);                                                                                        // 590\n                                                                                                                       // 591\n    for (var index = 0; index < length; index++) {                                                                     // 592\n      result[index] = _.pluck(array, index);                                                                           // 593\n    }                                                                                                                  // 594\n    return result;                                                                                                     // 595\n  };                                                                                                                   // 596\n                                                                                                                       // 597\n  // Converts lists into objects. Pass either a single array of `[key, value]`                                         // 598\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of                                       // 599\n  // the corresponding values.                                                                                         // 600\n  _.object = function(list, values) {                                                                                  // 601\n    var result = {};                                                                                                   // 602\n    for (var i = 0, length = getLength(list); i < length; i++) {                                                       // 603\n      if (values) {                                                                                                    // 604\n        result[list[i]] = values[i];                                                                                   // 605\n      } else {                                                                                                         // 606\n        result[list[i][0]] = list[i][1];                                                                               // 607\n      }                                                                                                                // 608\n    }                                                                                                                  // 609\n    return result;                                                                                                     // 610\n  };                                                                                                                   // 611\n                                                                                                                       // 612\n  // Generator function to create the findIndex and findLastIndex functions                                            // 613\n  function createPredicateIndexFinder(dir) {                                                                           // 614\n    return function(array, predicate, context) {                                                                       // 615\n      predicate = cb(predicate, context);                                                                              // 616\n      var length = getLength(array);                                                                                   // 617\n      var index = dir > 0 ? 0 : length - 1;                                                                            // 618\n      for (; index >= 0 && index < length; index += dir) {                                                             // 619\n        if (predicate(array[index], index, array)) return index;                                                       // 620\n      }                                                                                                                // 621\n      return -1;                                                                                                       // 622\n    };                                                                                                                 // 623\n  }                                                                                                                    // 624\n                                                                                                                       // 625\n  // Returns the first index on an array-like that passes a predicate test                                             // 626\n  _.findIndex = createPredicateIndexFinder(1);                                                                         // 627\n  _.findLastIndex = createPredicateIndexFinder(-1);                                                                    // 628\n                                                                                                                       // 629\n  // Use a comparator function to figure out the smallest index at which                                               // 630\n  // an object should be inserted so as to maintain order. Uses binary search.                                         // 631\n  _.sortedIndex = function(array, obj, iteratee, context) {                                                            // 632\n    iteratee = cb(iteratee, context, 1);                                                                               // 633\n    var value = iteratee(obj);                                                                                         // 634\n    var low = 0, high = getLength(array);                                                                              // 635\n    while (low < high) {                                                                                               // 636\n      var mid = Math.floor((low + high) / 2);                                                                          // 637\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;                                                // 638\n    }                                                                                                                  // 639\n    return low;                                                                                                        // 640\n  };                                                                                                                   // 641\n                                                                                                                       // 642\n  // Generator function to create the indexOf and lastIndexOf functions                                                // 643\n  function createIndexFinder(dir, predicateFind, sortedIndex) {                                                        // 644\n    return function(array, item, idx) {                                                                                // 645\n      var i = 0, length = getLength(array);                                                                            // 646\n      if (typeof idx == 'number') {                                                                                    // 647\n        if (dir > 0) {                                                                                                 // 648\n            i = idx >= 0 ? idx : Math.max(idx + length, i);                                                            // 649\n        } else {                                                                                                       // 650\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;                                          // 651\n        }                                                                                                              // 652\n      } else if (sortedIndex && idx && length) {                                                                       // 653\n        idx = sortedIndex(array, item);                                                                                // 654\n        return array[idx] === item ? idx : -1;                                                                         // 655\n      }                                                                                                                // 656\n      if (item !== item) {                                                                                             // 657\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);                                                    // 658\n        return idx >= 0 ? idx + i : -1;                                                                                // 659\n      }                                                                                                                // 660\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {                                     // 661\n        if (array[idx] === item) return idx;                                                                           // 662\n      }                                                                                                                // 663\n      return -1;                                                                                                       // 664\n    };                                                                                                                 // 665\n  }                                                                                                                    // 666\n                                                                                                                       // 667\n  // Return the position of the first occurrence of an item in an array,                                               // 668\n  // or -1 if the item is not included in the array.                                                                   // 669\n  // If the array is large and already in sort order, pass `true`                                                      // 670\n  // for **isSorted** to use binary search.                                                                            // 671\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);                                                        // 672\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);                                                              // 673\n                                                                                                                       // 674\n  // Generate an integer Array containing an arithmetic progression. A port of                                         // 675\n  // the native Python `range()` function. See                                                                         // 676\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).                                  // 677\n  _.range = function(start, stop, step) {                                                                              // 678\n    if (stop == null) {                                                                                                // 679\n      stop = start || 0;                                                                                               // 680\n      start = 0;                                                                                                       // 681\n    }                                                                                                                  // 682\n    step = step || 1;                                                                                                  // 683\n                                                                                                                       // 684\n    var length = Math.max(Math.ceil((stop - start) / step), 0);                                                        // 685\n    var range = Array(length);                                                                                         // 686\n                                                                                                                       // 687\n    for (var idx = 0; idx < length; idx++, start += step) {                                                            // 688\n      range[idx] = start;                                                                                              // 689\n    }                                                                                                                  // 690\n                                                                                                                       // 691\n    return range;                                                                                                      // 692\n  };                                                                                                                   // 693\n                                                                                                                       // 694\n  // Function (ahem) Functions                                                                                         // 695\n  // ------------------                                                                                                // 696\n                                                                                                                       // 697\n  // Determines whether to execute a function as a constructor                                                         // 698\n  // or a normal function with the provided arguments                                                                  // 699\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {                                  // 700\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);                                // 701\n    var self = baseCreate(sourceFunc.prototype);                                                                       // 702\n    var result = sourceFunc.apply(self, args);                                                                         // 703\n    if (_.isObject(result)) return result;                                                                             // 704\n    return self;                                                                                                       // 705\n  };                                                                                                                   // 706\n                                                                                                                       // 707\n  // Create a function bound to a given object (assigning `this`, and arguments,                                       // 708\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                                            // 709\n  // available.                                                                                                        // 710\n  _.bind = function(func, context) {                                                                                   // 711\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));               // 712\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');                                 // 713\n    var args = slice.call(arguments, 2);                                                                               // 714\n    var bound = function() {                                                                                           // 715\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));                             // 716\n    };                                                                                                                 // 717\n    return bound;                                                                                                      // 718\n  };                                                                                                                   // 719\n                                                                                                                       // 720\n  // Partially apply a function by creating a version that has had some of its                                         // 721\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts                                         // 722\n  // as a placeholder, allowing any combination of arguments to be pre-filled.                                         // 723\n  _.partial = function(func) {                                                                                         // 724\n    var boundArgs = slice.call(arguments, 1);                                                                          // 725\n    var bound = function() {                                                                                           // 726\n      var position = 0, length = boundArgs.length;                                                                     // 727\n      var args = Array(length);                                                                                        // 728\n      for (var i = 0; i < length; i++) {                                                                               // 729\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];                                           // 730\n      }                                                                                                                // 731\n      while (position < arguments.length) args.push(arguments[position++]);                                            // 732\n      return executeBound(func, bound, this, this, args);                                                              // 733\n    };                                                                                                                 // 734\n    return bound;                                                                                                      // 735\n  };                                                                                                                   // 736\n                                                                                                                       // 737\n  // Bind a number of an object's methods to that object. Remaining arguments                                          // 738\n  // are the method names to be bound. Useful for ensuring that all callbacks                                          // 739\n  // defined on an object belong to it.                                                                                // 740\n  _.bindAll = function(obj) {                                                                                          // 741\n    var i, length = arguments.length, key;                                                                             // 742\n    if (length <= 1) throw new Error('bindAll must be passed function names');                                         // 743\n    for (i = 1; i < length; i++) {                                                                                     // 744\n      key = arguments[i];                                                                                              // 745\n      obj[key] = _.bind(obj[key], obj);                                                                                // 746\n    }                                                                                                                  // 747\n    return obj;                                                                                                        // 748\n  };                                                                                                                   // 749\n                                                                                                                       // 750\n  // Memoize an expensive function by storing its results.                                                             // 751\n  _.memoize = function(func, hasher) {                                                                                 // 752\n    var memoize = function(key) {                                                                                      // 753\n      var cache = memoize.cache;                                                                                       // 754\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);                                               // 755\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);                                        // 756\n      return cache[address];                                                                                           // 757\n    };                                                                                                                 // 758\n    memoize.cache = {};                                                                                                // 759\n    return memoize;                                                                                                    // 760\n  };                                                                                                                   // 761\n                                                                                                                       // 762\n  // Delays a function for the given number of milliseconds, and then calls                                            // 763\n  // it with the arguments supplied.                                                                                   // 764\n  _.delay = function(func, wait) {                                                                                     // 765\n    var args = slice.call(arguments, 2);                                                                               // 766\n    return setTimeout(function(){                                                                                      // 767\n      return func.apply(null, args);                                                                                   // 768\n    }, wait);                                                                                                          // 769\n  };                                                                                                                   // 770\n                                                                                                                       // 771\n  // Defers a function, scheduling it to run after the current call stack has                                          // 772\n  // cleared.                                                                                                          // 773\n  _.defer = _.partial(_.delay, _, 1);                                                                                  // 774\n                                                                                                                       // 775\n  // Returns a function, that, when invoked, will only be triggered at most once                                       // 776\n  // during a given window of time. Normally, the throttled function will run                                          // 777\n  // as much as it can, without ever going more than once per `wait` duration;                                         // 778\n  // but if you'd like to disable the execution on the leading edge, pass                                              // 779\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.                                             // 780\n  _.throttle = function(func, wait, options) {                                                                         // 781\n    var context, args, result;                                                                                         // 782\n    var timeout = null;                                                                                                // 783\n    var previous = 0;                                                                                                  // 784\n    if (!options) options = {};                                                                                        // 785\n    var later = function() {                                                                                           // 786\n      previous = options.leading === false ? 0 : _.now();                                                              // 787\n      timeout = null;                                                                                                  // 788\n      result = func.apply(context, args);                                                                              // 789\n      if (!timeout) context = args = null;                                                                             // 790\n    };                                                                                                                 // 791\n    return function() {                                                                                                // 792\n      var now = _.now();                                                                                               // 793\n      if (!previous && options.leading === false) previous = now;                                                      // 794\n      var remaining = wait - (now - previous);                                                                         // 795\n      context = this;                                                                                                  // 796\n      args = arguments;                                                                                                // 797\n      if (remaining <= 0 || remaining > wait) {                                                                        // 798\n        if (timeout) {                                                                                                 // 799\n          clearTimeout(timeout);                                                                                       // 800\n          timeout = null;                                                                                              // 801\n        }                                                                                                              // 802\n        previous = now;                                                                                                // 803\n        result = func.apply(context, args);                                                                            // 804\n        if (!timeout) context = args = null;                                                                           // 805\n      } else if (!timeout && options.trailing !== false) {                                                             // 806\n        timeout = setTimeout(later, remaining);                                                                        // 807\n      }                                                                                                                // 808\n      return result;                                                                                                   // 809\n    };                                                                                                                 // 810\n  };                                                                                                                   // 811\n                                                                                                                       // 812\n  // Returns a function, that, as long as it continues to be invoked, will not                                         // 813\n  // be triggered. The function will be called after it stops being called for                                         // 814\n  // N milliseconds. If `immediate` is passed, trigger the function on the                                             // 815\n  // leading edge, instead of the trailing.                                                                            // 816\n  _.debounce = function(func, wait, immediate) {                                                                       // 817\n    var timeout, args, context, timestamp, result;                                                                     // 818\n                                                                                                                       // 819\n    var later = function() {                                                                                           // 820\n      var last = _.now() - timestamp;                                                                                  // 821\n                                                                                                                       // 822\n      if (last < wait && last >= 0) {                                                                                  // 823\n        timeout = setTimeout(later, wait - last);                                                                      // 824\n      } else {                                                                                                         // 825\n        timeout = null;                                                                                                // 826\n        if (!immediate) {                                                                                              // 827\n          result = func.apply(context, args);                                                                          // 828\n          if (!timeout) context = args = null;                                                                         // 829\n        }                                                                                                              // 830\n      }                                                                                                                // 831\n    };                                                                                                                 // 832\n                                                                                                                       // 833\n    return function() {                                                                                                // 834\n      context = this;                                                                                                  // 835\n      args = arguments;                                                                                                // 836\n      timestamp = _.now();                                                                                             // 837\n      var callNow = immediate && !timeout;                                                                             // 838\n      if (!timeout) timeout = setTimeout(later, wait);                                                                 // 839\n      if (callNow) {                                                                                                   // 840\n        result = func.apply(context, args);                                                                            // 841\n        context = args = null;                                                                                         // 842\n      }                                                                                                                // 843\n                                                                                                                       // 844\n      return result;                                                                                                   // 845\n    };                                                                                                                 // 846\n  };                                                                                                                   // 847\n                                                                                                                       // 848\n  // Returns the first function passed as an argument to the second,                                                   // 849\n  // allowing you to adjust arguments, run code before and after, and                                                  // 850\n  // conditionally execute the original function.                                                                      // 851\n  _.wrap = function(func, wrapper) {                                                                                   // 852\n    return _.partial(wrapper, func);                                                                                   // 853\n  };                                                                                                                   // 854\n                                                                                                                       // 855\n  // Returns a negated version of the passed-in predicate.                                                             // 856\n  _.negate = function(predicate) {                                                                                     // 857\n    return function() {                                                                                                // 858\n      return !predicate.apply(this, arguments);                                                                        // 859\n    };                                                                                                                 // 860\n  };                                                                                                                   // 861\n                                                                                                                       // 862\n  // Returns a function that is the composition of a list of functions, each                                           // 863\n  // consuming the return value of the function that follows.                                                          // 864\n  _.compose = function() {                                                                                             // 865\n    var args = arguments;                                                                                              // 866\n    var start = args.length - 1;                                                                                       // 867\n    return function() {                                                                                                // 868\n      var i = start;                                                                                                   // 869\n      var result = args[start].apply(this, arguments);                                                                 // 870\n      while (i--) result = args[i].call(this, result);                                                                 // 871\n      return result;                                                                                                   // 872\n    };                                                                                                                 // 873\n  };                                                                                                                   // 874\n                                                                                                                       // 875\n  // Returns a function that will only be executed on and after the Nth call.                                          // 876\n  _.after = function(times, func) {                                                                                    // 877\n    return function() {                                                                                                // 878\n      if (--times < 1) {                                                                                               // 879\n        return func.apply(this, arguments);                                                                            // 880\n      }                                                                                                                // 881\n    };                                                                                                                 // 882\n  };                                                                                                                   // 883\n                                                                                                                       // 884\n  // Returns a function that will only be executed up to (but not including) the Nth call.                             // 885\n  _.before = function(times, func) {                                                                                   // 886\n    var memo;                                                                                                          // 887\n    return function() {                                                                                                // 888\n      if (--times > 0) {                                                                                               // 889\n        memo = func.apply(this, arguments);                                                                            // 890\n      }                                                                                                                // 891\n      if (times <= 1) func = null;                                                                                     // 892\n      return memo;                                                                                                     // 893\n    };                                                                                                                 // 894\n  };                                                                                                                   // 895\n                                                                                                                       // 896\n  // Returns a function that will be executed at most one time, no matter how                                          // 897\n  // often you call it. Useful for lazy initialization.                                                                // 898\n  _.once = _.partial(_.before, 2);                                                                                     // 899\n                                                                                                                       // 900\n  // Object Functions                                                                                                  // 901\n  // ----------------                                                                                                  // 902\n                                                                                                                       // 903\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.                                        // 904\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');                                                 // 905\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',                                                    // 906\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];                                     // 907\n                                                                                                                       // 908\n  function collectNonEnumProps(obj, keys) {                                                                            // 909\n    var nonEnumIdx = nonEnumerableProps.length;                                                                        // 910\n    var constructor = obj.constructor;                                                                                 // 911\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;                                      // 912\n                                                                                                                       // 913\n    // Constructor is a special case.                                                                                  // 914\n    var prop = 'constructor';                                                                                          // 915\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);                                                  // 916\n                                                                                                                       // 917\n    while (nonEnumIdx--) {                                                                                             // 918\n      prop = nonEnumerableProps[nonEnumIdx];                                                                           // 919\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {                                       // 920\n        keys.push(prop);                                                                                               // 921\n      }                                                                                                                // 922\n    }                                                                                                                  // 923\n  }                                                                                                                    // 924\n                                                                                                                       // 925\n  // Retrieve the names of an object's own properties.                                                                 // 926\n  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                              // 927\n  _.keys = function(obj) {                                                                                             // 928\n    if (!_.isObject(obj)) return [];                                                                                   // 929\n    if (nativeKeys) return nativeKeys(obj);                                                                            // 930\n    var keys = [];                                                                                                     // 931\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                                          // 932\n    // Ahem, IE < 9.                                                                                                   // 933\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 934\n    return keys;                                                                                                       // 935\n  };                                                                                                                   // 936\n                                                                                                                       // 937\n  // Retrieve all the property names of an object.                                                                     // 938\n  _.allKeys = function(obj) {                                                                                          // 939\n    if (!_.isObject(obj)) return [];                                                                                   // 940\n    var keys = [];                                                                                                     // 941\n    for (var key in obj) keys.push(key);                                                                               // 942\n    // Ahem, IE < 9.                                                                                                   // 943\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 944\n    return keys;                                                                                                       // 945\n  };                                                                                                                   // 946\n                                                                                                                       // 947\n  // Retrieve the values of an object's properties.                                                                    // 948\n  _.values = function(obj) {                                                                                           // 949\n    var keys = _.keys(obj);                                                                                            // 950\n    var length = keys.length;                                                                                          // 951\n    var values = Array(length);                                                                                        // 952\n    for (var i = 0; i < length; i++) {                                                                                 // 953\n      values[i] = obj[keys[i]];                                                                                        // 954\n    }                                                                                                                  // 955\n    return values;                                                                                                     // 956\n  };                                                                                                                   // 957\n                                                                                                                       // 958\n  // Returns the results of applying the iteratee to each element of the object                                        // 959\n  // In contrast to _.map it returns an object                                                                         // 960\n  _.mapObject = function(obj, iteratee, context) {                                                                     // 961\n    iteratee = cb(iteratee, context);                                                                                  // 962\n    var keys =  _.keys(obj),                                                                                           // 963\n          length = keys.length,                                                                                        // 964\n          results = {},                                                                                                // 965\n          currentKey;                                                                                                  // 966\n      for (var index = 0; index < length; index++) {                                                                   // 967\n        currentKey = keys[index];                                                                                      // 968\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);                                              // 969\n      }                                                                                                                // 970\n      return results;                                                                                                  // 971\n  };                                                                                                                   // 972\n                                                                                                                       // 973\n  // Convert an object into a list of `[key, value]` pairs.                                                            // 974\n  _.pairs = function(obj) {                                                                                            // 975\n    var keys = _.keys(obj);                                                                                            // 976\n    var length = keys.length;                                                                                          // 977\n    var pairs = Array(length);                                                                                         // 978\n    for (var i = 0; i < length; i++) {                                                                                 // 979\n      pairs[i] = [keys[i], obj[keys[i]]];                                                                              // 980\n    }                                                                                                                  // 981\n    return pairs;                                                                                                      // 982\n  };                                                                                                                   // 983\n                                                                                                                       // 984\n  // Invert the keys and values of an object. The values must be serializable.                                         // 985\n  _.invert = function(obj) {                                                                                           // 986\n    var result = {};                                                                                                   // 987\n    var keys = _.keys(obj);                                                                                            // 988\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 989\n      result[obj[keys[i]]] = keys[i];                                                                                  // 990\n    }                                                                                                                  // 991\n    return result;                                                                                                     // 992\n  };                                                                                                                   // 993\n                                                                                                                       // 994\n  // Return a sorted list of the function names available on the object.                                               // 995\n  // Aliased as `methods`                                                                                              // 996\n  _.functions = _.methods = function(obj) {                                                                            // 997\n    var names = [];                                                                                                    // 998\n    for (var key in obj) {                                                                                             // 999\n      if (_.isFunction(obj[key])) names.push(key);                                                                     // 1000\n    }                                                                                                                  // 1001\n    return names.sort();                                                                                               // 1002\n  };                                                                                                                   // 1003\n                                                                                                                       // 1004\n  // Extend a given object with all the properties in passed-in object(s).                                             // 1005\n  _.extend = createAssigner(_.allKeys);                                                                                // 1006\n                                                                                                                       // 1007\n  // Assigns a given object with all the own properties in the passed-in object(s)                                     // 1008\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)                        // 1009\n  _.extendOwn = _.assign = createAssigner(_.keys);                                                                     // 1010\n                                                                                                                       // 1011\n  // Returns the first key on an object that passes a predicate test                                                   // 1012\n  _.findKey = function(obj, predicate, context) {                                                                      // 1013\n    predicate = cb(predicate, context);                                                                                // 1014\n    var keys = _.keys(obj), key;                                                                                       // 1015\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1016\n      key = keys[i];                                                                                                   // 1017\n      if (predicate(obj[key], key, obj)) return key;                                                                   // 1018\n    }                                                                                                                  // 1019\n  };                                                                                                                   // 1020\n                                                                                                                       // 1021\n  // Return a copy of the object only containing the whitelisted properties.                                           // 1022\n  _.pick = function(object, oiteratee, context) {                                                                      // 1023\n    var result = {}, obj = object, iteratee, keys;                                                                     // 1024\n    if (obj == null) return result;                                                                                    // 1025\n    if (_.isFunction(oiteratee)) {                                                                                     // 1026\n      keys = _.allKeys(obj);                                                                                           // 1027\n      iteratee = optimizeCb(oiteratee, context);                                                                       // 1028\n    } else {                                                                                                           // 1029\n      keys = flatten(arguments, false, false, 1);                                                                      // 1030\n      iteratee = function(value, key, obj) { return key in obj; };                                                     // 1031\n      obj = Object(obj);                                                                                               // 1032\n    }                                                                                                                  // 1033\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1034\n      var key = keys[i];                                                                                               // 1035\n      var value = obj[key];                                                                                            // 1036\n      if (iteratee(value, key, obj)) result[key] = value;                                                              // 1037\n    }                                                                                                                  // 1038\n    return result;                                                                                                     // 1039\n  };                                                                                                                   // 1040\n                                                                                                                       // 1041\n   // Return a copy of the object without the blacklisted properties.                                                  // 1042\n  _.omit = function(obj, iteratee, context) {                                                                          // 1043\n    if (_.isFunction(iteratee)) {                                                                                      // 1044\n      iteratee = _.negate(iteratee);                                                                                   // 1045\n    } else {                                                                                                           // 1046\n      var keys = _.map(flatten(arguments, false, false, 1), String);                                                   // 1047\n      iteratee = function(value, key) {                                                                                // 1048\n        return !_.contains(keys, key);                                                                                 // 1049\n      };                                                                                                               // 1050\n    }                                                                                                                  // 1051\n    return _.pick(obj, iteratee, context);                                                                             // 1052\n  };                                                                                                                   // 1053\n                                                                                                                       // 1054\n  // Fill in a given object with default properties.                                                                   // 1055\n  _.defaults = createAssigner(_.allKeys, true);                                                                        // 1056\n                                                                                                                       // 1057\n  // Creates an object that inherits from the given prototype object.                                                  // 1058\n  // If additional properties are provided then they will be added to the                                              // 1059\n  // created object.                                                                                                   // 1060\n  _.create = function(prototype, props) {                                                                              // 1061\n    var result = baseCreate(prototype);                                                                                // 1062\n    if (props) _.extendOwn(result, props);                                                                             // 1063\n    return result;                                                                                                     // 1064\n  };                                                                                                                   // 1065\n                                                                                                                       // 1066\n  // Create a (shallow-cloned) duplicate of an object.                                                                 // 1067\n  _.clone = function(obj) {                                                                                            // 1068\n    if (!_.isObject(obj)) return obj;                                                                                  // 1069\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                                           // 1070\n  };                                                                                                                   // 1071\n                                                                                                                       // 1072\n  // Invokes interceptor with the obj, and then returns obj.                                                           // 1073\n  // The primary purpose of this method is to \"tap into\" a method chain, in                                            // 1074\n  // order to perform operations on intermediate results within the chain.                                             // 1075\n  _.tap = function(obj, interceptor) {                                                                                 // 1076\n    interceptor(obj);                                                                                                  // 1077\n    return obj;                                                                                                        // 1078\n  };                                                                                                                   // 1079\n                                                                                                                       // 1080\n  // Returns whether an object has a given set of `key:value` pairs.                                                   // 1081\n  _.isMatch = function(object, attrs) {                                                                                // 1082\n    var keys = _.keys(attrs), length = keys.length;                                                                    // 1083\n    if (object == null) return !length;                                                                                // 1084\n    var obj = Object(object);                                                                                          // 1085\n    for (var i = 0; i < length; i++) {                                                                                 // 1086\n      var key = keys[i];                                                                                               // 1087\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;                                                      // 1088\n    }                                                                                                                  // 1089\n    return true;                                                                                                       // 1090\n  };                                                                                                                   // 1091\n                                                                                                                       // 1092\n                                                                                                                       // 1093\n  // Internal recursive comparison function for `isEqual`.                                                             // 1094\n  var eq = function(a, b, aStack, bStack) {                                                                            // 1095\n    // Identical objects are equal. `0 === -0`, but they aren't identical.                                             // 1096\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).                         // 1097\n    if (a === b) return a !== 0 || 1 / a === 1 / b;                                                                    // 1098\n    // A strict comparison is necessary because `null == undefined`.                                                   // 1099\n    if (a == null || b == null) return a === b;                                                                        // 1100\n    // Unwrap any wrapped objects.                                                                                     // 1101\n    if (a instanceof _) a = a._wrapped;                                                                                // 1102\n    if (b instanceof _) b = b._wrapped;                                                                                // 1103\n    // Compare `[[Class]]` names.                                                                                      // 1104\n    var className = toString.call(a);                                                                                  // 1105\n    if (className !== toString.call(b)) return false;                                                                  // 1106\n    switch (className) {                                                                                               // 1107\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.                             // 1108\n      case '[object RegExp]':                                                                                          // 1109\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')                                    // 1110\n      case '[object String]':                                                                                          // 1111\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is                           // 1112\n        // equivalent to `new String(\"5\")`.                                                                            // 1113\n        return '' + a === '' + b;                                                                                      // 1114\n      case '[object Number]':                                                                                          // 1115\n        // `NaN`s are equivalent, but non-reflexive.                                                                   // 1116\n        // Object(NaN) is equivalent to NaN                                                                            // 1117\n        if (+a !== +a) return +b !== +b;                                                                               // 1118\n        // An `egal` comparison is performed for other numeric values.                                                 // 1119\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;                                                                // 1120\n      case '[object Date]':                                                                                            // 1121\n      case '[object Boolean]':                                                                                         // 1122\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their                          // 1123\n        // millisecond representations. Note that invalid dates with millisecond representations                       // 1124\n        // of `NaN` are not equivalent.                                                                                // 1125\n        return +a === +b;                                                                                              // 1126\n    }                                                                                                                  // 1127\n                                                                                                                       // 1128\n    var areArrays = className === '[object Array]';                                                                    // 1129\n    if (!areArrays) {                                                                                                  // 1130\n      if (typeof a != 'object' || typeof b != 'object') return false;                                                  // 1131\n                                                                                                                       // 1132\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s                             // 1133\n      // from different frames are.                                                                                    // 1134\n      var aCtor = a.constructor, bCtor = b.constructor;                                                                // 1135\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&                                        // 1136\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)                                          // 1137\n                          && ('constructor' in a && 'constructor' in b)) {                                             // 1138\n        return false;                                                                                                  // 1139\n      }                                                                                                                // 1140\n    }                                                                                                                  // 1141\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic                                       // 1142\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                                     // 1143\n                                                                                                                       // 1144\n    // Initializing stack of traversed objects.                                                                        // 1145\n    // It's done here since we only need them for objects and arrays comparison.                                       // 1146\n    aStack = aStack || [];                                                                                             // 1147\n    bStack = bStack || [];                                                                                             // 1148\n    var length = aStack.length;                                                                                        // 1149\n    while (length--) {                                                                                                 // 1150\n      // Linear search. Performance is inversely proportional to the number of                                         // 1151\n      // unique nested structures.                                                                                     // 1152\n      if (aStack[length] === a) return bStack[length] === b;                                                           // 1153\n    }                                                                                                                  // 1154\n                                                                                                                       // 1155\n    // Add the first object to the stack of traversed objects.                                                         // 1156\n    aStack.push(a);                                                                                                    // 1157\n    bStack.push(b);                                                                                                    // 1158\n                                                                                                                       // 1159\n    // Recursively compare objects and arrays.                                                                         // 1160\n    if (areArrays) {                                                                                                   // 1161\n      // Compare array lengths to determine if a deep comparison is necessary.                                         // 1162\n      length = a.length;                                                                                               // 1163\n      if (length !== b.length) return false;                                                                           // 1164\n      // Deep compare the contents, ignoring non-numeric properties.                                                   // 1165\n      while (length--) {                                                                                               // 1166\n        if (!eq(a[length], b[length], aStack, bStack)) return false;                                                   // 1167\n      }                                                                                                                // 1168\n    } else {                                                                                                           // 1169\n      // Deep compare objects.                                                                                         // 1170\n      var keys = _.keys(a), key;                                                                                       // 1171\n      length = keys.length;                                                                                            // 1172\n      // Ensure that both objects contain the same number of properties before comparing deep equality.                // 1173\n      if (_.keys(b).length !== length) return false;                                                                   // 1174\n      while (length--) {                                                                                               // 1175\n        // Deep compare each member                                                                                    // 1176\n        key = keys[length];                                                                                            // 1177\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;                                      // 1178\n      }                                                                                                                // 1179\n    }                                                                                                                  // 1180\n    // Remove the first object from the stack of traversed objects.                                                    // 1181\n    aStack.pop();                                                                                                      // 1182\n    bStack.pop();                                                                                                      // 1183\n    return true;                                                                                                       // 1184\n  };                                                                                                                   // 1185\n                                                                                                                       // 1186\n  // Perform a deep comparison to check if two objects are equal.                                                      // 1187\n  _.isEqual = function(a, b) {                                                                                         // 1188\n    return eq(a, b);                                                                                                   // 1189\n  };                                                                                                                   // 1190\n                                                                                                                       // 1191\n  // Is a given array, string, or object empty?                                                                        // 1192\n  // An \"empty\" object has no enumerable own-properties.                                                               // 1193\n  _.isEmpty = function(obj) {                                                                                          // 1194\n    if (obj == null) return true;                                                                                      // 1195\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;        // 1196\n    return _.keys(obj).length === 0;                                                                                   // 1197\n  };                                                                                                                   // 1198\n                                                                                                                       // 1199\n  // Is a given value a DOM element?                                                                                   // 1200\n  _.isElement = function(obj) {                                                                                        // 1201\n    return !!(obj && obj.nodeType === 1);                                                                              // 1202\n  };                                                                                                                   // 1203\n                                                                                                                       // 1204\n  // Is a given value an array?                                                                                        // 1205\n  // Delegates to ECMA5's native Array.isArray                                                                         // 1206\n  _.isArray = nativeIsArray || function(obj) {                                                                         // 1207\n    return toString.call(obj) === '[object Array]';                                                                    // 1208\n  };                                                                                                                   // 1209\n                                                                                                                       // 1210\n  // Is a given variable an object?                                                                                    // 1211\n  _.isObject = function(obj) {                                                                                         // 1212\n    var type = typeof obj;                                                                                             // 1213\n    return type === 'function' || type === 'object' && !!obj;                                                          // 1214\n  };                                                                                                                   // 1215\n                                                                                                                       // 1216\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.                  // 1217\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {                    // 1218\n    _['is' + name] = function(obj) {                                                                                   // 1219\n      return toString.call(obj) === '[object ' + name + ']';                                                           // 1220\n    };                                                                                                                 // 1221\n  });                                                                                                                  // 1222\n                                                                                                                       // 1223\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where                                         // 1224\n  // there isn't any inspectable \"Arguments\" type.                                                                     // 1225\n  if (!_.isArguments(arguments)) {                                                                                     // 1226\n    _.isArguments = function(obj) {                                                                                    // 1227\n      return _.has(obj, 'callee');                                                                                     // 1228\n    };                                                                                                                 // 1229\n  }                                                                                                                    // 1230\n                                                                                                                       // 1231\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,                                     // 1232\n  // IE 11 (#1621), and in Safari 8 (#1929).                                                                           // 1233\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {                                                      // 1234\n    _.isFunction = function(obj) {                                                                                     // 1235\n      return typeof obj == 'function' || false;                                                                        // 1236\n    };                                                                                                                 // 1237\n  }                                                                                                                    // 1238\n                                                                                                                       // 1239\n  // Is a given object a finite number?                                                                                // 1240\n  _.isFinite = function(obj) {                                                                                         // 1241\n    return isFinite(obj) && !isNaN(parseFloat(obj));                                                                   // 1242\n  };                                                                                                                   // 1243\n                                                                                                                       // 1244\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                                   // 1245\n  _.isNaN = function(obj) {                                                                                            // 1246\n    return _.isNumber(obj) && obj !== +obj;                                                                            // 1247\n  };                                                                                                                   // 1248\n                                                                                                                       // 1249\n  // Is a given value a boolean?                                                                                       // 1250\n  _.isBoolean = function(obj) {                                                                                        // 1251\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';                                 // 1252\n  };                                                                                                                   // 1253\n                                                                                                                       // 1254\n  // Is a given value equal to null?                                                                                   // 1255\n  _.isNull = function(obj) {                                                                                           // 1256\n    return obj === null;                                                                                               // 1257\n  };                                                                                                                   // 1258\n                                                                                                                       // 1259\n  // Is a given variable undefined?                                                                                    // 1260\n  _.isUndefined = function(obj) {                                                                                      // 1261\n    return obj === void 0;                                                                                             // 1262\n  };                                                                                                                   // 1263\n                                                                                                                       // 1264\n  // Shortcut function for checking if an object has a given property directly                                         // 1265\n  // on itself (in other words, not on a prototype).                                                                   // 1266\n  _.has = function(obj, key) {                                                                                         // 1267\n    return obj != null && hasOwnProperty.call(obj, key);                                                               // 1268\n  };                                                                                                                   // 1269\n                                                                                                                       // 1270\n  // Utility Functions                                                                                                 // 1271\n  // -----------------                                                                                                 // 1272\n                                                                                                                       // 1273\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                                         // 1274\n  // previous owner. Returns a reference to the Underscore object.                                                     // 1275\n  _.noConflict = function() {                                                                                          // 1276\n    root._ = previousUnderscore;                                                                                       // 1277\n    return this;                                                                                                       // 1278\n  };                                                                                                                   // 1279\n                                                                                                                       // 1280\n  // Keep the identity function around for default iteratees.                                                          // 1281\n  _.identity = function(value) {                                                                                       // 1282\n    return value;                                                                                                      // 1283\n  };                                                                                                                   // 1284\n                                                                                                                       // 1285\n  // Predicate-generating functions. Often useful outside of Underscore.                                               // 1286\n  _.constant = function(value) {                                                                                       // 1287\n    return function() {                                                                                                // 1288\n      return value;                                                                                                    // 1289\n    };                                                                                                                 // 1290\n  };                                                                                                                   // 1291\n                                                                                                                       // 1292\n  _.noop = function(){};                                                                                               // 1293\n                                                                                                                       // 1294\n  _.property = property;                                                                                               // 1295\n                                                                                                                       // 1296\n  // Generates a function for a given object that returns a given property.                                            // 1297\n  _.propertyOf = function(obj) {                                                                                       // 1298\n    return obj == null ? function(){} : function(key) {                                                                // 1299\n      return obj[key];                                                                                                 // 1300\n    };                                                                                                                 // 1301\n  };                                                                                                                   // 1302\n                                                                                                                       // 1303\n  // Returns a predicate for checking whether an object has a given set of                                             // 1304\n  // `key:value` pairs.                                                                                                // 1305\n  _.matcher = _.matches = function(attrs) {                                                                            // 1306\n    attrs = _.extendOwn({}, attrs);                                                                                    // 1307\n    return function(obj) {                                                                                             // 1308\n      return _.isMatch(obj, attrs);                                                                                    // 1309\n    };                                                                                                                 // 1310\n  };                                                                                                                   // 1311\n                                                                                                                       // 1312\n  // Run a function **n** times.                                                                                       // 1313\n  _.times = function(n, iteratee, context) {                                                                           // 1314\n    var accum = Array(Math.max(0, n));                                                                                 // 1315\n    iteratee = optimizeCb(iteratee, context, 1);                                                                       // 1316\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);                                                                // 1317\n    return accum;                                                                                                      // 1318\n  };                                                                                                                   // 1319\n                                                                                                                       // 1320\n  // Return a random integer between min and max (inclusive).                                                          // 1321\n  _.random = function(min, max) {                                                                                      // 1322\n    if (max == null) {                                                                                                 // 1323\n      max = min;                                                                                                       // 1324\n      min = 0;                                                                                                         // 1325\n    }                                                                                                                  // 1326\n    return min + Math.floor(Math.random() * (max - min + 1));                                                          // 1327\n  };                                                                                                                   // 1328\n                                                                                                                       // 1329\n  // A (possibly faster) way to get the current timestamp as an integer.                                               // 1330\n  _.now = Date.now || function() {                                                                                     // 1331\n    return new Date().getTime();                                                                                       // 1332\n  };                                                                                                                   // 1333\n                                                                                                                       // 1334\n   // List of HTML entities for escaping.                                                                              // 1335\n  var escapeMap = {                                                                                                    // 1336\n    '&': '&amp;',                                                                                                      // 1337\n    '<': '&lt;',                                                                                                       // 1338\n    '>': '&gt;',                                                                                                       // 1339\n    '\"': '&quot;',                                                                                                     // 1340\n    \"'\": '&#x27;',                                                                                                     // 1341\n    '`': '&#x60;'                                                                                                      // 1342\n  };                                                                                                                   // 1343\n  var unescapeMap = _.invert(escapeMap);                                                                               // 1344\n                                                                                                                       // 1345\n  // Functions for escaping and unescaping strings to/from HTML interpolation.                                         // 1346\n  var createEscaper = function(map) {                                                                                  // 1347\n    var escaper = function(match) {                                                                                    // 1348\n      return map[match];                                                                                               // 1349\n    };                                                                                                                 // 1350\n    // Regexes for identifying a key that needs to be escaped                                                          // 1351\n    var source = '(?:' + _.keys(map).join('|') + ')';                                                                  // 1352\n    var testRegexp = RegExp(source);                                                                                   // 1353\n    var replaceRegexp = RegExp(source, 'g');                                                                           // 1354\n    return function(string) {                                                                                          // 1355\n      string = string == null ? '' : '' + string;                                                                      // 1356\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;                                // 1357\n    };                                                                                                                 // 1358\n  };                                                                                                                   // 1359\n  _.escape = createEscaper(escapeMap);                                                                                 // 1360\n  _.unescape = createEscaper(unescapeMap);                                                                             // 1361\n                                                                                                                       // 1362\n  // If the value of the named `property` is a function then invoke it with the                                        // 1363\n  // `object` as context; otherwise, return it.                                                                        // 1364\n  _.result = function(object, property, fallback) {                                                                    // 1365\n    var value = object == null ? void 0 : object[property];                                                            // 1366\n    if (value === void 0) {                                                                                            // 1367\n      value = fallback;                                                                                                // 1368\n    }                                                                                                                  // 1369\n    return _.isFunction(value) ? value.call(object) : value;                                                           // 1370\n  };                                                                                                                   // 1371\n                                                                                                                       // 1372\n  // Generate a unique integer id (unique within the entire client session).                                           // 1373\n  // Useful for temporary DOM ids.                                                                                     // 1374\n  var idCounter = 0;                                                                                                   // 1375\n  _.uniqueId = function(prefix) {                                                                                      // 1376\n    var id = ++idCounter + '';                                                                                         // 1377\n    return prefix ? prefix + id : id;                                                                                  // 1378\n  };                                                                                                                   // 1379\n                                                                                                                       // 1380\n  // By default, Underscore uses ERB-style template delimiters, change the                                             // 1381\n  // following template settings to use alternative delimiters.                                                        // 1382\n  _.templateSettings = {                                                                                               // 1383\n    evaluate    : /<%([\\s\\S]+?)%>/g,                                                                                   // 1384\n    interpolate : /<%=([\\s\\S]+?)%>/g,                                                                                  // 1385\n    escape      : /<%-([\\s\\S]+?)%>/g                                                                                   // 1386\n  };                                                                                                                   // 1387\n                                                                                                                       // 1388\n  // When customizing `templateSettings`, if you don't want to define an                                               // 1389\n  // interpolation, evaluation or escaping regex, we need one that is                                                  // 1390\n  // guaranteed not to match.                                                                                          // 1391\n  var noMatch = /(.)^/;                                                                                                // 1392\n                                                                                                                       // 1393\n  // Certain characters need to be escaped so that they can be put into a                                              // 1394\n  // string literal.                                                                                                   // 1395\n  var escapes = {                                                                                                      // 1396\n    \"'\":      \"'\",                                                                                                     // 1397\n    '\\\\':     '\\\\',                                                                                                    // 1398\n    '\\r':     'r',                                                                                                     // 1399\n    '\\n':     'n',                                                                                                     // 1400\n    '\\u2028': 'u2028',                                                                                                 // 1401\n    '\\u2029': 'u2029'                                                                                                  // 1402\n  };                                                                                                                   // 1403\n                                                                                                                       // 1404\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;                                                                           // 1405\n                                                                                                                       // 1406\n  var escapeChar = function(match) {                                                                                   // 1407\n    return '\\\\' + escapes[match];                                                                                      // 1408\n  };                                                                                                                   // 1409\n                                                                                                                       // 1410\n  // JavaScript micro-templating, similar to John Resig's implementation.                                              // 1411\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,                                         // 1412\n  // and correctly escapes quotes within interpolated code.                                                            // 1413\n  // NB: `oldSettings` only exists for backwards compatibility.                                                        // 1414\n  _.template = function(text, settings, oldSettings) {                                                                 // 1415\n    if (!settings && oldSettings) settings = oldSettings;                                                              // 1416\n    settings = _.defaults({}, settings, _.templateSettings);                                                           // 1417\n                                                                                                                       // 1418\n    // Combine delimiters into one regular expression via alternation.                                                 // 1419\n    var matcher = RegExp([                                                                                             // 1420\n      (settings.escape || noMatch).source,                                                                             // 1421\n      (settings.interpolate || noMatch).source,                                                                        // 1422\n      (settings.evaluate || noMatch).source                                                                            // 1423\n    ].join('|') + '|$', 'g');                                                                                          // 1424\n                                                                                                                       // 1425\n    // Compile the template source, escaping string literals appropriately.                                            // 1426\n    var index = 0;                                                                                                     // 1427\n    var source = \"__p+='\";                                                                                             // 1428\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                                     // 1429\n      source += text.slice(index, offset).replace(escaper, escapeChar);                                                // 1430\n      index = offset + match.length;                                                                                   // 1431\n                                                                                                                       // 1432\n      if (escape) {                                                                                                    // 1433\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";                                           // 1434\n      } else if (interpolate) {                                                                                        // 1435\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";                                                // 1436\n      } else if (evaluate) {                                                                                           // 1437\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";                                                                      // 1438\n      }                                                                                                                // 1439\n                                                                                                                       // 1440\n      // Adobe VMs need the match returned to produce the correct offest.                                              // 1441\n      return match;                                                                                                    // 1442\n    });                                                                                                                // 1443\n    source += \"';\\n\";                                                                                                  // 1444\n                                                                                                                       // 1445\n    // If a variable is not specified, place data values in local scope.                                               // 1446\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';                                              // 1447\n                                                                                                                       // 1448\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +                                                              // 1449\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +                                                            // 1450\n      source + 'return __p;\\n';                                                                                        // 1451\n                                                                                                                       // 1452\n    try {                                                                                                              // 1453\n      var render = new Function(settings.variable || 'obj', '_', source);                                              // 1454\n    } catch (e) {                                                                                                      // 1455\n      e.source = source;                                                                                               // 1456\n      throw e;                                                                                                         // 1457\n    }                                                                                                                  // 1458\n                                                                                                                       // 1459\n    var template = function(data) {                                                                                    // 1460\n      return render.call(this, data, _);                                                                               // 1461\n    };                                                                                                                 // 1462\n                                                                                                                       // 1463\n    // Provide the compiled source as a convenience for precompilation.                                                // 1464\n    var argument = settings.variable || 'obj';                                                                         // 1465\n    template.source = 'function(' + argument + '){\\n' + source + '}';                                                  // 1466\n                                                                                                                       // 1467\n    return template;                                                                                                   // 1468\n  };                                                                                                                   // 1469\n                                                                                                                       // 1470\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.                                               // 1471\n  _.chain = function(obj) {                                                                                            // 1472\n    var instance = _(obj);                                                                                             // 1473\n    instance._chain = true;                                                                                            // 1474\n    return instance;                                                                                                   // 1475\n  };                                                                                                                   // 1476\n                                                                                                                       // 1477\n  // OOP                                                                                                               // 1478\n  // ---------------                                                                                                   // 1479\n  // If Underscore is called as a function, it returns a wrapped object that                                           // 1480\n  // can be used OO-style. This wrapper holds altered versions of all the                                              // 1481\n  // underscore functions. Wrapped objects may be chained.                                                             // 1482\n                                                                                                                       // 1483\n  // Helper function to continue chaining intermediate results.                                                        // 1484\n  var result = function(instance, obj) {                                                                               // 1485\n    return instance._chain ? _(obj).chain() : obj;                                                                     // 1486\n  };                                                                                                                   // 1487\n                                                                                                                       // 1488\n  // Add your own custom functions to the Underscore object.                                                           // 1489\n  _.mixin = function(obj) {                                                                                            // 1490\n    _.each(_.functions(obj), function(name) {                                                                          // 1491\n      var func = _[name] = obj[name];                                                                                  // 1492\n      _.prototype[name] = function() {                                                                                 // 1493\n        var args = [this._wrapped];                                                                                    // 1494\n        push.apply(args, arguments);                                                                                   // 1495\n        return result(this, func.apply(_, args));                                                                      // 1496\n      };                                                                                                               // 1497\n    });                                                                                                                // 1498\n  };                                                                                                                   // 1499\n                                                                                                                       // 1500\n  // Add all of the Underscore functions to the wrapper object.                                                        // 1501\n  _.mixin(_);                                                                                                          // 1502\n                                                                                                                       // 1503\n  // Add all mutator Array functions to the wrapper.                                                                   // 1504\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                            // 1505\n    var method = ArrayProto[name];                                                                                     // 1506\n    _.prototype[name] = function() {                                                                                   // 1507\n      var obj = this._wrapped;                                                                                         // 1508\n      method.apply(obj, arguments);                                                                                    // 1509\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];                                  // 1510\n      return result(this, obj);                                                                                        // 1511\n    };                                                                                                                 // 1512\n  });                                                                                                                  // 1513\n                                                                                                                       // 1514\n  // Add all accessor Array functions to the wrapper.                                                                  // 1515\n  _.each(['concat', 'join', 'slice'], function(name) {                                                                 // 1516\n    var method = ArrayProto[name];                                                                                     // 1517\n    _.prototype[name] = function() {                                                                                   // 1518\n      return result(this, method.apply(this._wrapped, arguments));                                                     // 1519\n    };                                                                                                                 // 1520\n  });                                                                                                                  // 1521\n                                                                                                                       // 1522\n  // Extracts the result from a wrapped and chained object.                                                            // 1523\n  _.prototype.value = function() {                                                                                     // 1524\n    return this._wrapped;                                                                                              // 1525\n  };                                                                                                                   // 1526\n                                                                                                                       // 1527\n  // Provide unwrapping proxy for some methods used in engine operations                                               // 1528\n  // such as arithmetic and JSON stringification.                                                                      // 1529\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;                                                        // 1530\n                                                                                                                       // 1531\n  _.prototype.toString = function() {                                                                                  // 1532\n    return '' + this._wrapped;                                                                                         // 1533\n  };                                                                                                                   // 1534\n                                                                                                                       // 1535\n  // AMD registration happens at the end for compatibility with AMD loaders                                            // 1536\n  // that may not enforce next-turn semantics on modules. Even though general                                          // 1537\n  // practice for AMD registration is to be anonymous, underscore registers                                            // 1538\n  // as a named module because, like jQuery, it is a base library that is                                              // 1539\n  // popular enough to be bundled in a third party lib, but not be part of                                             // 1540\n  // an AMD load request. Those cases could generate an error when an                                                  // 1541\n  // anonymous define() is called outside of a loader request.                                                         // 1542\n  if (typeof define === 'function' && define.amd) {                                                                    // 1543\n    define('underscore', [], function() {                                                                              // 1544\n      return _;                                                                                                        // 1545\n    });                                                                                                                // 1546\n  }                                                                                                                    // 1547\n}.call(this));                                                                                                         // 1548\n                                                                                                                       // 1549\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"mocha\":{\"lib\":{\"test.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/test.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Runnable = require('./runnable');                                                                                  // 5\nvar inherits = require('./utils').inherits;                                                                            // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Test`.                                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nmodule.exports = Test;                                                                                                 // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Test` with the given `title` and callback `fn`.                                                   // 15\n *                                                                                                                     // 16\n * @api private                                                                                                        // 17\n * @param {String} title                                                                                               // 18\n * @param {Function} fn                                                                                                // 19\n */                                                                                                                    // 20\nfunction Test(title, fn) {                                                                                             // 21\n  Runnable.call(this, title, fn);                                                                                      // 22\n  this.pending = !fn;                                                                                                  // 23\n  this.type = 'test';                                                                                                  // 24\n  this.body = (fn || '').toString();                                                                                   // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Inherit from `Runnable.prototype`.                                                                                  // 29\n */                                                                                                                    // 30\ninherits(Test, Runnable);                                                                                              // 31\n                                                                                                                       // 32\nTest.prototype.clone = function() {                                                                                    // 33\n  var test = new Test(this.title, this.fn);                                                                            // 34\n  test.timeout(this.timeout());                                                                                        // 35\n  test.slow(this.slow());                                                                                              // 36\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 37\n  test.retries(this.retries());                                                                                        // 38\n  test.currentRetry(this.currentRetry());                                                                              // 39\n  test.globals(this.globals());                                                                                        // 40\n  test.parent = this.parent;                                                                                           // 41\n  test.file = this.file;                                                                                               // 42\n  test.ctx = this.ctx;                                                                                                 // 43\n  return test;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runnable.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/runnable.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5\nvar Pending = require('./pending');                                                                                    // 6\nvar debug = require('debug')('mocha:runnable');                                                                        // 7\nvar milliseconds = require('./ms');                                                                                    // 8\nvar utils = require('./utils');                                                                                        // 9\nvar inherits = utils.inherits;                                                                                         // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 16\nvar Date = global.Date;                                                                                                // 17\nvar setTimeout = global.setTimeout;                                                                                    // 18\nvar setInterval = global.setInterval;                                                                                  // 19\nvar clearTimeout = global.clearTimeout;                                                                                // 20\nvar clearInterval = global.clearInterval;                                                                              // 21\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Object#toString().                                                                                                  // 25\n */                                                                                                                    // 26\n                                                                                                                       // 27\nvar toString = Object.prototype.toString;                                                                              // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * Expose `Runnable`.                                                                                                  // 31\n */                                                                                                                    // 32\n                                                                                                                       // 33\nmodule.exports = Runnable;                                                                                             // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Initialize a new `Runnable` with the given `title` and callback `fn`.                                               // 37\n *                                                                                                                     // 38\n * @param {String} title                                                                                               // 39\n * @param {Function} fn                                                                                                // 40\n * @api private                                                                                                        // 41\n * @param {string} title                                                                                               // 42\n * @param {Function} fn                                                                                                // 43\n */                                                                                                                    // 44\nfunction Runnable(title, fn) {                                                                                         // 45\n  this.title = title;                                                                                                  // 46\n  this.fn = fn;                                                                                                        // 47\n  this.async = fn && fn.length;                                                                                        // 48\n  this.sync = !this.async;                                                                                             // 49\n  this._timeout = 2000;                                                                                                // 50\n  this._slow = 75;                                                                                                     // 51\n  this._enableTimeouts = true;                                                                                         // 52\n  this.timedOut = false;                                                                                               // 53\n  this._trace = new Error('done() called multiple times');                                                             // 54\n  this._retries = -1;                                                                                                  // 55\n  this._currentRetry = 0;                                                                                              // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Inherit from `EventEmitter.prototype`.                                                                              // 60\n */                                                                                                                    // 61\ninherits(Runnable, EventEmitter);                                                                                      // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Set & get timeout `ms`.                                                                                             // 65\n *                                                                                                                     // 66\n * @api private                                                                                                        // 67\n * @param {number|string} ms                                                                                           // 68\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 69\n */                                                                                                                    // 70\nRunnable.prototype.timeout = function(ms) {                                                                            // 71\n  if (!arguments.length) {                                                                                             // 72\n    return this._timeout;                                                                                              // 73\n  }                                                                                                                    // 74\n  if (ms === 0) {                                                                                                      // 75\n    this._enableTimeouts = false;                                                                                      // 76\n  }                                                                                                                    // 77\n  if (typeof ms === 'string') {                                                                                        // 78\n    ms = milliseconds(ms);                                                                                             // 79\n  }                                                                                                                    // 80\n  debug('timeout %d', ms);                                                                                             // 81\n  this._timeout = ms;                                                                                                  // 82\n  if (this.timer) {                                                                                                    // 83\n    this.resetTimeout();                                                                                               // 84\n  }                                                                                                                    // 85\n  return this;                                                                                                         // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * Set & get slow `ms`.                                                                                                // 90\n *                                                                                                                     // 91\n * @api private                                                                                                        // 92\n * @param {number|string} ms                                                                                           // 93\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 94\n */                                                                                                                    // 95\nRunnable.prototype.slow = function(ms) {                                                                               // 96\n  if (!arguments.length) {                                                                                             // 97\n    return this._slow;                                                                                                 // 98\n  }                                                                                                                    // 99\n  if (typeof ms === 'string') {                                                                                        // 100\n    ms = milliseconds(ms);                                                                                             // 101\n  }                                                                                                                    // 102\n  debug('timeout %d', ms);                                                                                             // 103\n  this._slow = ms;                                                                                                     // 104\n  return this;                                                                                                         // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * Set and get whether timeout is `enabled`.                                                                           // 109\n *                                                                                                                     // 110\n * @api private                                                                                                        // 111\n * @param {boolean} enabled                                                                                            // 112\n * @return {Runnable|boolean} enabled or Runnable instance.                                                            // 113\n */                                                                                                                    // 114\nRunnable.prototype.enableTimeouts = function(enabled) {                                                                // 115\n  if (!arguments.length) {                                                                                             // 116\n    return this._enableTimeouts;                                                                                       // 117\n  }                                                                                                                    // 118\n  debug('enableTimeouts %s', enabled);                                                                                 // 119\n  this._enableTimeouts = enabled;                                                                                      // 120\n  return this;                                                                                                         // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * Halt and mark as pending.                                                                                           // 125\n *                                                                                                                     // 126\n * @api private                                                                                                        // 127\n */                                                                                                                    // 128\nRunnable.prototype.skip = function() {                                                                                 // 129\n  throw new Pending();                                                                                                 // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Set number of retries.                                                                                              // 134\n *                                                                                                                     // 135\n * @api private                                                                                                        // 136\n */                                                                                                                    // 137\nRunnable.prototype.retries = function(n) {                                                                             // 138\n  if (!arguments.length) {                                                                                             // 139\n    return this._retries;                                                                                              // 140\n  }                                                                                                                    // 141\n  this._retries = n;                                                                                                   // 142\n};                                                                                                                     // 143\n                                                                                                                       // 144\n/**                                                                                                                    // 145\n * Get current retry                                                                                                   // 146\n *                                                                                                                     // 147\n * @api private                                                                                                        // 148\n */                                                                                                                    // 149\nRunnable.prototype.currentRetry = function(n) {                                                                        // 150\n  if (!arguments.length) {                                                                                             // 151\n    return this._currentRetry;                                                                                         // 152\n  }                                                                                                                    // 153\n  this._currentRetry = n;                                                                                              // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\n/**                                                                                                                    // 157\n * Return the full title generated by recursively concatenating the parent's                                           // 158\n * full title.                                                                                                         // 159\n *                                                                                                                     // 160\n * @api public                                                                                                         // 161\n * @return {string}                                                                                                    // 162\n */                                                                                                                    // 163\nRunnable.prototype.fullTitle = function() {                                                                            // 164\n  return this.parent.fullTitle() + ' ' + this.title;                                                                   // 165\n};                                                                                                                     // 166\n                                                                                                                       // 167\n/**                                                                                                                    // 168\n * Clear the timeout.                                                                                                  // 169\n *                                                                                                                     // 170\n * @api private                                                                                                        // 171\n */                                                                                                                    // 172\nRunnable.prototype.clearTimeout = function() {                                                                         // 173\n  clearTimeout(this.timer);                                                                                            // 174\n};                                                                                                                     // 175\n                                                                                                                       // 176\n/**                                                                                                                    // 177\n * Inspect the runnable void of private properties.                                                                    // 178\n *                                                                                                                     // 179\n * @api private                                                                                                        // 180\n * @return {string}                                                                                                    // 181\n */                                                                                                                    // 182\nRunnable.prototype.inspect = function() {                                                                              // 183\n  return JSON.stringify(this, function(key, val) {                                                                     // 184\n    if (key[0] === '_') {                                                                                              // 185\n      return;                                                                                                          // 186\n    }                                                                                                                  // 187\n    if (key === 'parent') {                                                                                            // 188\n      return '#<Suite>';                                                                                               // 189\n    }                                                                                                                  // 190\n    if (key === 'ctx') {                                                                                               // 191\n      return '#<Context>';                                                                                             // 192\n    }                                                                                                                  // 193\n    return val;                                                                                                        // 194\n  }, 2);                                                                                                               // 195\n};                                                                                                                     // 196\n                                                                                                                       // 197\n/**                                                                                                                    // 198\n * Reset the timeout.                                                                                                  // 199\n *                                                                                                                     // 200\n * @api private                                                                                                        // 201\n */                                                                                                                    // 202\nRunnable.prototype.resetTimeout = function() {                                                                         // 203\n  var self = this;                                                                                                     // 204\n  var ms = this.timeout() || 1e9;                                                                                      // 205\n                                                                                                                       // 206\n  if (!this._enableTimeouts) {                                                                                         // 207\n    return;                                                                                                            // 208\n  }                                                                                                                    // 209\n  this.clearTimeout();                                                                                                 // 210\n  this.timer = setTimeout(function() {                                                                                 // 211\n    if (!self._enableTimeouts) {                                                                                       // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.'));\n    self.timedOut = true;                                                                                              // 216\n  }, ms);                                                                                                              // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\n/**                                                                                                                    // 220\n * Whitelist a list of globals for this test run.                                                                      // 221\n *                                                                                                                     // 222\n * @api private                                                                                                        // 223\n * @param {string[]} globals                                                                                           // 224\n */                                                                                                                    // 225\nRunnable.prototype.globals = function(globals) {                                                                       // 226\n  if (!arguments.length) {                                                                                             // 227\n    return this._allowedGlobals;                                                                                       // 228\n  }                                                                                                                    // 229\n  this._allowedGlobals = globals;                                                                                      // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\n/**                                                                                                                    // 233\n * Run the test and invoke `fn(err)`.                                                                                  // 234\n *                                                                                                                     // 235\n * @param {Function} fn                                                                                                // 236\n * @api private                                                                                                        // 237\n */                                                                                                                    // 238\nRunnable.prototype.run = function(fn) {                                                                                // 239\n  var self = this;                                                                                                     // 240\n  var start = new Date();                                                                                              // 241\n  var ctx = this.ctx;                                                                                                  // 242\n  var finished;                                                                                                        // 243\n  var emitted;                                                                                                         // 244\n                                                                                                                       // 245\n  // Sometimes the ctx exists, but it is not runnable                                                                  // 246\n  if (ctx && ctx.runnable) {                                                                                           // 247\n    ctx.runnable(this);                                                                                                // 248\n  }                                                                                                                    // 249\n                                                                                                                       // 250\n  // called multiple times                                                                                             // 251\n  function multiple(err) {                                                                                             // 252\n    if (emitted) {                                                                                                     // 253\n      return;                                                                                                          // 254\n    }                                                                                                                  // 255\n    emitted = true;                                                                                                    // 256\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));                // 257\n  }                                                                                                                    // 258\n                                                                                                                       // 259\n  // finished                                                                                                          // 260\n  function done(err) {                                                                                                 // 261\n    var ms = self.timeout();                                                                                           // 262\n    if (self.timedOut) {                                                                                               // 263\n      return;                                                                                                          // 264\n    }                                                                                                                  // 265\n    if (finished) {                                                                                                    // 266\n      return multiple(err || self._trace);                                                                             // 267\n    }                                                                                                                  // 268\n                                                                                                                       // 269\n    self.clearTimeout();                                                                                               // 270\n    self.duration = new Date() - start;                                                                                // 271\n    finished = true;                                                                                                   // 272\n    if (!err && self.duration > ms && self._enableTimeouts) {                                                          // 273\n      err = new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.');   // 274\n    }                                                                                                                  // 275\n    fn(err);                                                                                                           // 276\n  }                                                                                                                    // 277\n                                                                                                                       // 278\n  // for .resetTimeout()                                                                                               // 279\n  this.callback = done;                                                                                                // 280\n                                                                                                                       // 281\n  // explicit async with `done` argument                                                                               // 282\n  if (this.async) {                                                                                                    // 283\n    this.resetTimeout();                                                                                               // 284\n                                                                                                                       // 285\n    if (this.allowUncaught) {                                                                                          // 286\n      return callFnAsync(this.fn);                                                                                     // 287\n    }                                                                                                                  // 288\n    try {                                                                                                              // 289\n      callFnAsync(this.fn);                                                                                            // 290\n    } catch (err) {                                                                                                    // 291\n      done(utils.getError(err));                                                                                       // 292\n    }                                                                                                                  // 293\n    return;                                                                                                            // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  if (this.allowUncaught) {                                                                                            // 297\n    callFn(this.fn);                                                                                                   // 298\n    done();                                                                                                            // 299\n    return;                                                                                                            // 300\n  }                                                                                                                    // 301\n                                                                                                                       // 302\n  // sync or promise-returning                                                                                         // 303\n  try {                                                                                                                // 304\n    if (this.pending) {                                                                                                // 305\n      done();                                                                                                          // 306\n    } else {                                                                                                           // 307\n      callFn(this.fn);                                                                                                 // 308\n    }                                                                                                                  // 309\n  } catch (err) {                                                                                                      // 310\n    done(utils.getError(err));                                                                                         // 311\n  }                                                                                                                    // 312\n                                                                                                                       // 313\n  function callFn(fn) {                                                                                                // 314\n    var result = fn.call(ctx);                                                                                         // 315\n    if (result && typeof result.then === 'function') {                                                                 // 316\n      self.resetTimeout();                                                                                             // 317\n      result                                                                                                           // 318\n        .then(function() {                                                                                             // 319\n          done();                                                                                                      // 320\n          // Return null so libraries like bluebird do not warn about                                                  // 321\n          // subsequently constructed Promises.                                                                        // 322\n          return null;                                                                                                 // 323\n        },                                                                                                             // 324\n        function(reason) {                                                                                             // 325\n          done(reason || new Error('Promise rejected with no or falsy reason'));                                       // 326\n        });                                                                                                            // 327\n    } else {                                                                                                           // 328\n      if (self.asyncOnly) {                                                                                            // 329\n        return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));        // 330\n      }                                                                                                                // 331\n                                                                                                                       // 332\n      done();                                                                                                          // 333\n    }                                                                                                                  // 334\n  }                                                                                                                    // 335\n                                                                                                                       // 336\n  function callFnAsync(fn) {                                                                                           // 337\n    fn.call(ctx, function(err) {                                                                                       // 338\n      if (err instanceof Error || toString.call(err) === '[object Error]') {                                           // 339\n        return done(err);                                                                                              // 340\n      }                                                                                                                // 341\n      if (err) {                                                                                                       // 342\n        if (Object.prototype.toString.call(err) === '[object Object]') {                                               // 343\n          return done(new Error('done() invoked with non-Error: '                                                      // 344\n            + JSON.stringify(err)));                                                                                   // 345\n        }                                                                                                              // 346\n        return done(new Error('done() invoked with non-Error: ' + err));                                               // 347\n      }                                                                                                                // 348\n      done();                                                                                                          // 349\n    });                                                                                                                // 350\n  }                                                                                                                    // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pending.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/pending.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * Expose `Pending`.                                                                                                   // 3\n */                                                                                                                    // 4\n                                                                                                                       // 5\nmodule.exports = Pending;                                                                                              // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Initialize a new `Pending` error with the given message.                                                            // 9\n *                                                                                                                     // 10\n * @param {string} message                                                                                             // 11\n */                                                                                                                    // 12\nfunction Pending(message) {                                                                                            // 13\n  this.message = message;                                                                                              // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ms.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/ms.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar s = 1000;                                                                                                          // 5\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25;                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Parse or format the given `val`.                                                                                    // 12\n *                                                                                                                     // 13\n * Options:                                                                                                            // 14\n *                                                                                                                     // 15\n *  - `long` verbose formatting [false]                                                                                // 16\n *                                                                                                                     // 17\n * @api public                                                                                                         // 18\n * @param {string|number} val                                                                                          // 19\n * @param {Object} options                                                                                             // 20\n * @return {string|number}                                                                                             // 21\n */                                                                                                                    // 22\nmodule.exports = function(val, options) {                                                                              // 23\n  options = options || {};                                                                                             // 24\n  if (typeof val === 'string') {                                                                                       // 25\n    return parse(val);                                                                                                 // 26\n  }                                                                                                                    // 27\n  // https://github.com/mochajs/mocha/pull/1035                                                                        // 28\n  return options['long'] ? longFormat(val) : shortFormat(val);                                                         // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Parse the given `str` and return milliseconds.                                                                      // 33\n *                                                                                                                     // 34\n * @api private                                                                                                        // 35\n * @param {string} str                                                                                                 // 36\n * @return {number}                                                                                                    // 37\n */                                                                                                                    // 38\nfunction parse(str) {                                                                                                  // 39\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);                // 40\n  if (!match) {                                                                                                        // 41\n    return;                                                                                                            // 42\n  }                                                                                                                    // 43\n  var n = parseFloat(match[1]);                                                                                        // 44\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 45\n  switch (type) {                                                                                                      // 46\n    case 'years':                                                                                                      // 47\n    case 'year':                                                                                                       // 48\n    case 'y':                                                                                                          // 49\n      return n * y;                                                                                                    // 50\n    case 'days':                                                                                                       // 51\n    case 'day':                                                                                                        // 52\n    case 'd':                                                                                                          // 53\n      return n * d;                                                                                                    // 54\n    case 'hours':                                                                                                      // 55\n    case 'hour':                                                                                                       // 56\n    case 'h':                                                                                                          // 57\n      return n * h;                                                                                                    // 58\n    case 'minutes':                                                                                                    // 59\n    case 'minute':                                                                                                     // 60\n    case 'm':                                                                                                          // 61\n      return n * m;                                                                                                    // 62\n    case 'seconds':                                                                                                    // 63\n    case 'second':                                                                                                     // 64\n    case 's':                                                                                                          // 65\n      return n * s;                                                                                                    // 66\n    case 'ms':                                                                                                         // 67\n      return n;                                                                                                        // 68\n    default:                                                                                                           // 69\n      // No default case                                                                                               // 70\n  }                                                                                                                    // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Short format for `ms`.                                                                                              // 75\n *                                                                                                                     // 76\n * @api private                                                                                                        // 77\n * @param {number} ms                                                                                                  // 78\n * @return {string}                                                                                                    // 79\n */                                                                                                                    // 80\nfunction shortFormat(ms) {                                                                                             // 81\n  if (ms >= d) {                                                                                                       // 82\n    return Math.round(ms / d) + 'd';                                                                                   // 83\n  }                                                                                                                    // 84\n  if (ms >= h) {                                                                                                       // 85\n    return Math.round(ms / h) + 'h';                                                                                   // 86\n  }                                                                                                                    // 87\n  if (ms >= m) {                                                                                                       // 88\n    return Math.round(ms / m) + 'm';                                                                                   // 89\n  }                                                                                                                    // 90\n  if (ms >= s) {                                                                                                       // 91\n    return Math.round(ms / s) + 's';                                                                                   // 92\n  }                                                                                                                    // 93\n  return ms + 'ms';                                                                                                    // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Long format for `ms`.                                                                                               // 98\n *                                                                                                                     // 99\n * @api private                                                                                                        // 100\n * @param {number} ms                                                                                                  // 101\n * @return {string}                                                                                                    // 102\n */                                                                                                                    // 103\nfunction longFormat(ms) {                                                                                              // 104\n  return plural(ms, d, 'day')                                                                                          // 105\n    || plural(ms, h, 'hour')                                                                                           // 106\n    || plural(ms, m, 'minute')                                                                                         // 107\n    || plural(ms, s, 'second')                                                                                         // 108\n    || ms + ' ms';                                                                                                     // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Pluralization helper.                                                                                               // 113\n *                                                                                                                     // 114\n * @api private                                                                                                        // 115\n * @param {number} ms                                                                                                  // 116\n * @param {number} n                                                                                                   // 117\n * @param {string} name                                                                                                // 118\n */                                                                                                                    // 119\nfunction plural(ms, n, name) {                                                                                         // 120\n  if (ms < n) {                                                                                                        // 121\n    return;                                                                                                            // 122\n  }                                                                                                                    // 123\n  if (ms < n * 1.5) {                                                                                                  // 124\n    return Math.floor(ms / n) + ' ' + name;                                                                            // 125\n  }                                                                                                                    // 126\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/utils.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */                                                                                               // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Module dependencies.                                                                                                // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nvar basename = require('path').basename;                                                                               // 7\nvar debug = require('debug')('mocha:watch');                                                                           // 8\nvar exists = require('fs').existsSync || require('path').existsSync;                                                   // 9\nvar glob = require('glob');                                                                                            // 10\nvar join = require('path').join;                                                                                       // 11\nvar readdirSync = require('fs').readdirSync;                                                                           // 12\nvar statSync = require('fs').statSync;                                                                                 // 13\nvar watchFile = require('fs').watchFile;                                                                               // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Ignored directories.                                                                                                // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nvar ignore = ['node_modules', '.git'];                                                                                 // 20\n                                                                                                                       // 21\nexports.inherits = require('util').inherits;                                                                           // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Escape special characters in the given string of html.                                                              // 25\n *                                                                                                                     // 26\n * @api private                                                                                                        // 27\n * @param  {string} html                                                                                               // 28\n * @return {string}                                                                                                    // 29\n */                                                                                                                    // 30\nexports.escape = function(html) {                                                                                      // 31\n  return String(html)                                                                                                  // 32\n    .replace(/&/g, '&amp;')                                                                                            // 33\n    .replace(/\"/g, '&quot;')                                                                                           // 34\n    .replace(/</g, '&lt;')                                                                                             // 35\n    .replace(/>/g, '&gt;');                                                                                            // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Array#forEach (<=IE8)                                                                                               // 40\n *                                                                                                                     // 41\n * @api private                                                                                                        // 42\n * @param {Array} arr                                                                                                  // 43\n * @param {Function} fn                                                                                                // 44\n * @param {Object} scope                                                                                               // 45\n */                                                                                                                    // 46\nexports.forEach = function(arr, fn, scope) {                                                                           // 47\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 48\n    fn.call(scope, arr[i], i);                                                                                         // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Test if the given obj is type of string.                                                                            // 54\n *                                                                                                                     // 55\n * @api private                                                                                                        // 56\n * @param {Object} obj                                                                                                 // 57\n * @return {boolean}                                                                                                   // 58\n */                                                                                                                    // 59\nexports.isString = function(obj) {                                                                                     // 60\n  return typeof obj === 'string';                                                                                      // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Array#map (<=IE8)                                                                                                   // 65\n *                                                                                                                     // 66\n * @api private                                                                                                        // 67\n * @param {Array} arr                                                                                                  // 68\n * @param {Function} fn                                                                                                // 69\n * @param {Object} scope                                                                                               // 70\n * @return {Array}                                                                                                     // 71\n */                                                                                                                    // 72\nexports.map = function(arr, fn, scope) {                                                                               // 73\n  var result = [];                                                                                                     // 74\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 75\n    result.push(fn.call(scope, arr[i], i, arr));                                                                       // 76\n  }                                                                                                                    // 77\n  return result;                                                                                                       // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Array#indexOf (<=IE8)                                                                                               // 82\n *                                                                                                                     // 83\n * @api private                                                                                                        // 84\n * @param {Array} arr                                                                                                  // 85\n * @param {Object} obj to find index of                                                                                // 86\n * @param {number} start                                                                                               // 87\n * @return {number}                                                                                                    // 88\n */                                                                                                                    // 89\nexports.indexOf = function(arr, obj, start) {                                                                          // 90\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                               // 91\n    if (arr[i] === obj) {                                                                                              // 92\n      return i;                                                                                                        // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n  return -1;                                                                                                           // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * Array#reduce (<=IE8)                                                                                                // 100\n *                                                                                                                     // 101\n * @api private                                                                                                        // 102\n * @param {Array} arr                                                                                                  // 103\n * @param {Function} fn                                                                                                // 104\n * @param {Object} val Initial value.                                                                                  // 105\n * @return {*}                                                                                                         // 106\n */                                                                                                                    // 107\nexports.reduce = function(arr, fn, val) {                                                                              // 108\n  var rval = val;                                                                                                      // 109\n                                                                                                                       // 110\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 111\n    rval = fn(rval, arr[i], i, arr);                                                                                   // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n  return rval;                                                                                                         // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * Array#filter (<=IE8)                                                                                                // 119\n *                                                                                                                     // 120\n * @api private                                                                                                        // 121\n * @param {Array} arr                                                                                                  // 122\n * @param {Function} fn                                                                                                // 123\n * @return {Array}                                                                                                     // 124\n */                                                                                                                    // 125\nexports.filter = function(arr, fn) {                                                                                   // 126\n  var ret = [];                                                                                                        // 127\n                                                                                                                       // 128\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 129\n    var val = arr[i];                                                                                                  // 130\n    if (fn(val, i, arr)) {                                                                                             // 131\n      ret.push(val);                                                                                                   // 132\n    }                                                                                                                  // 133\n  }                                                                                                                    // 134\n                                                                                                                       // 135\n  return ret;                                                                                                          // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * Object.keys (<=IE8)                                                                                                 // 140\n *                                                                                                                     // 141\n * @api private                                                                                                        // 142\n * @param {Object} obj                                                                                                 // 143\n * @return {Array} keys                                                                                                // 144\n */                                                                                                                    // 145\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {                                       // 146\n  var keys = [];                                                                                                       // 147\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8                                                  // 148\n                                                                                                                       // 149\n  for (var key in obj) {                                                                                               // 150\n    if (has.call(obj, key)) {                                                                                          // 151\n      keys.push(key);                                                                                                  // 152\n    }                                                                                                                  // 153\n  }                                                                                                                    // 154\n                                                                                                                       // 155\n  return keys;                                                                                                         // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Watch the given `files` for changes                                                                                 // 160\n * and invoke `fn(file)` on modification.                                                                              // 161\n *                                                                                                                     // 162\n * @api private                                                                                                        // 163\n * @param {Array} files                                                                                                // 164\n * @param {Function} fn                                                                                                // 165\n */                                                                                                                    // 166\nexports.watch = function(files, fn) {                                                                                  // 167\n  var options = { interval: 100 };                                                                                     // 168\n  files.forEach(function(file) {                                                                                       // 169\n    debug('file %s', file);                                                                                            // 170\n    watchFile(file, options, function(curr, prev) {                                                                    // 171\n      if (prev.mtime < curr.mtime) {                                                                                   // 172\n        fn(file);                                                                                                      // 173\n      }                                                                                                                // 174\n    });                                                                                                                // 175\n  });                                                                                                                  // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * Array.isArray (<=IE8)                                                                                               // 180\n *                                                                                                                     // 181\n * @api private                                                                                                        // 182\n * @param {Object} obj                                                                                                 // 183\n * @return {Boolean}                                                                                                   // 184\n */                                                                                                                    // 185\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {                                    // 186\n  return Object.prototype.toString.call(obj) === '[object Array]';                                                     // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\nexports.isArray = isArray;                                                                                             // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n * Buffer.prototype.toJSON polyfill.                                                                                   // 193\n *                                                                                                                     // 194\n * @type {Function}                                                                                                    // 195\n */                                                                                                                    // 196\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {                                                               // 197\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {                                                    // 198\n    return Array.prototype.slice.call(this, 0);                                                                        // 199\n  };                                                                                                                   // 200\n}                                                                                                                      // 201\n                                                                                                                       // 202\n/**                                                                                                                    // 203\n * Ignored files.                                                                                                      // 204\n *                                                                                                                     // 205\n * @api private                                                                                                        // 206\n * @param {string} path                                                                                                // 207\n * @return {boolean}                                                                                                   // 208\n */                                                                                                                    // 209\nfunction ignored(path) {                                                                                               // 210\n  return !~ignore.indexOf(path);                                                                                       // 211\n}                                                                                                                      // 212\n                                                                                                                       // 213\n/**                                                                                                                    // 214\n * Lookup files in the given `dir`.                                                                                    // 215\n *                                                                                                                     // 216\n * @api private                                                                                                        // 217\n * @param {string} dir                                                                                                 // 218\n * @param {string[]} [ext=['.js']]                                                                                     // 219\n * @param {Array} [ret=[]]                                                                                             // 220\n * @return {Array}                                                                                                     // 221\n */                                                                                                                    // 222\nexports.files = function(dir, ext, ret) {                                                                              // 223\n  ret = ret || [];                                                                                                     // 224\n  ext = ext || ['js'];                                                                                                 // 225\n                                                                                                                       // 226\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');                                                                  // 227\n                                                                                                                       // 228\n  readdirSync(dir)                                                                                                     // 229\n    .filter(ignored)                                                                                                   // 230\n    .forEach(function(path) {                                                                                          // 231\n      path = join(dir, path);                                                                                          // 232\n      if (statSync(path).isDirectory()) {                                                                              // 233\n        exports.files(path, ext, ret);                                                                                 // 234\n      } else if (path.match(re)) {                                                                                     // 235\n        ret.push(path);                                                                                                // 236\n      }                                                                                                                // 237\n    });                                                                                                                // 238\n                                                                                                                       // 239\n  return ret;                                                                                                          // 240\n};                                                                                                                     // 241\n                                                                                                                       // 242\n/**                                                                                                                    // 243\n * Compute a slug from the given `str`.                                                                                // 244\n *                                                                                                                     // 245\n * @api private                                                                                                        // 246\n * @param {string} str                                                                                                 // 247\n * @return {string}                                                                                                    // 248\n */                                                                                                                    // 249\nexports.slug = function(str) {                                                                                         // 250\n  return str                                                                                                           // 251\n    .toLowerCase()                                                                                                     // 252\n    .replace(/ +/g, '-')                                                                                               // 253\n    .replace(/[^-\\w]/g, '');                                                                                           // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\n/**                                                                                                                    // 257\n * Strip the function definition from `str`, and re-indent for pre whitespace.                                         // 258\n *                                                                                                                     // 259\n * @param {string} str                                                                                                 // 260\n * @return {string}                                                                                                    // 261\n */                                                                                                                    // 262\nexports.clean = function(str) {                                                                                        // 263\n  str = str                                                                                                            // 264\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')                                                   // 265\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')                                                             // 266\n    .replace(/\\s+\\}$/, '');                                                                                            // 267\n                                                                                                                       // 268\n  var spaces = str.match(/^\\n?( *)/)[1].length;                                                                        // 269\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;                                                                         // 270\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                        // 271\n                                                                                                                       // 272\n  str = str.replace(re, '');                                                                                           // 273\n                                                                                                                       // 274\n  return exports.trim(str);                                                                                            // 275\n};                                                                                                                     // 276\n                                                                                                                       // 277\n/**                                                                                                                    // 278\n * Trim the given `str`.                                                                                               // 279\n *                                                                                                                     // 280\n * @api private                                                                                                        // 281\n * @param {string} str                                                                                                 // 282\n * @return {string}                                                                                                    // 283\n */                                                                                                                    // 284\nexports.trim = function(str) {                                                                                         // 285\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                                // 286\n};                                                                                                                     // 287\n                                                                                                                       // 288\n/**                                                                                                                    // 289\n * Parse the given `qs`.                                                                                               // 290\n *                                                                                                                     // 291\n * @api private                                                                                                        // 292\n * @param {string} qs                                                                                                  // 293\n * @return {Object}                                                                                                    // 294\n */                                                                                                                    // 295\nexports.parseQuery = function(qs) {                                                                                    // 296\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {                                          // 297\n    var i = pair.indexOf('=');                                                                                         // 298\n    var key = pair.slice(0, i);                                                                                        // 299\n    var val = pair.slice(++i);                                                                                         // 300\n                                                                                                                       // 301\n    obj[key] = decodeURIComponent(val);                                                                                // 302\n    return obj;                                                                                                        // 303\n  }, {});                                                                                                              // 304\n};                                                                                                                     // 305\n                                                                                                                       // 306\n/**                                                                                                                    // 307\n * Highlight the given string of `js`.                                                                                 // 308\n *                                                                                                                     // 309\n * @api private                                                                                                        // 310\n * @param {string} js                                                                                                  // 311\n * @return {string}                                                                                                    // 312\n */                                                                                                                    // 313\nfunction highlight(js) {                                                                                               // 314\n  return js                                                                                                            // 315\n    .replace(/</g, '&lt;')                                                                                             // 316\n    .replace(/>/g, '&gt;')                                                                                             // 317\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')                                                        // 318\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')                                                            // 319\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')                                                         // 320\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')                                                              // 321\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')                    // 322\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');                      // 323\n}                                                                                                                      // 324\n                                                                                                                       // 325\n/**                                                                                                                    // 326\n * Highlight the contents of tag `name`.                                                                               // 327\n *                                                                                                                     // 328\n * @api private                                                                                                        // 329\n * @param {string} name                                                                                                // 330\n */                                                                                                                    // 331\nexports.highlightTags = function(name) {                                                                               // 332\n  var code = document.getElementById('mocha').getElementsByTagName(name);                                              // 333\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 334\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                  // 335\n  }                                                                                                                    // 336\n};                                                                                                                     // 337\n                                                                                                                       // 338\n/**                                                                                                                    // 339\n * If a value could have properties, and has none, this function is called,                                            // 340\n * which returns a string representation of the empty value.                                                           // 341\n *                                                                                                                     // 342\n * Functions w/ no properties return `'[Function]'`                                                                    // 343\n * Arrays w/ length === 0 return `'[]'`                                                                                // 344\n * Objects w/ no properties return `'{}'`                                                                              // 345\n * All else: return result of `value.toString()`                                                                       // 346\n *                                                                                                                     // 347\n * @api private                                                                                                        // 348\n * @param {*} value The value to inspect.                                                                              // 349\n * @param {string} [type] The type of the value, if known.                                                             // 350\n * @returns {string}                                                                                                   // 351\n */                                                                                                                    // 352\nfunction emptyRepresentation(value, type) {                                                                            // 353\n  type = type || exports.type(value);                                                                                  // 354\n                                                                                                                       // 355\n  switch (type) {                                                                                                      // 356\n    case 'function':                                                                                                   // 357\n      return '[Function]';                                                                                             // 358\n    case 'object':                                                                                                     // 359\n      return '{}';                                                                                                     // 360\n    case 'array':                                                                                                      // 361\n      return '[]';                                                                                                     // 362\n    default:                                                                                                           // 363\n      return value.toString();                                                                                         // 364\n  }                                                                                                                    // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\n/**                                                                                                                    // 368\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it                                        // 369\n * is.                                                                                                                 // 370\n *                                                                                                                     // 371\n * @api private                                                                                                        // 372\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString               // 373\n * @param {*} value The value to test.                                                                                 // 374\n * @returns {string}                                                                                                   // 375\n * @example                                                                                                            // 376\n * type({}) // 'object'                                                                                                // 377\n * type([]) // 'array'                                                                                                 // 378\n * type(1) // 'number'                                                                                                 // 379\n * type(false) // 'boolean'                                                                                            // 380\n * type(Infinity) // 'number'                                                                                          // 381\n * type(null) // 'null'                                                                                                // 382\n * type(new Date()) // 'date'                                                                                          // 383\n * type(/foo/) // 'regexp'                                                                                             // 384\n * type('type') // 'string'                                                                                            // 385\n * type(global) // 'global'                                                                                            // 386\n */                                                                                                                    // 387\nexports.type = function type(value) {                                                                                  // 388\n  if (value === undefined) {                                                                                           // 389\n    return 'undefined';                                                                                                // 390\n  } else if (value === null) {                                                                                         // 391\n    return 'null';                                                                                                     // 392\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {                                                // 393\n    return 'buffer';                                                                                                   // 394\n  }                                                                                                                    // 395\n  return Object.prototype.toString.call(value)                                                                         // 396\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')                                                                                  // 397\n    .toLowerCase();                                                                                                    // 398\n};                                                                                                                     // 399\n                                                                                                                       // 400\n/**                                                                                                                    // 401\n * Stringify `value`. Different behavior depending on type of value:                                                   // 402\n *                                                                                                                     // 403\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.                              // 404\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.     // 405\n * - If `value` is an *empty* object, function, or array, return result of function                                    // 406\n *   {@link emptyRepresentation}.                                                                                      // 407\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of                         // 408\n *   JSON.stringify().                                                                                                 // 409\n *                                                                                                                     // 410\n * @api private                                                                                                        // 411\n * @see exports.type                                                                                                   // 412\n * @param {*} value                                                                                                    // 413\n * @return {string}                                                                                                    // 414\n */                                                                                                                    // 415\nexports.stringify = function(value) {                                                                                  // 416\n  var type = exports.type(value);                                                                                      // 417\n                                                                                                                       // 418\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {                                                      // 419\n    if (type !== 'buffer') {                                                                                           // 420\n      return jsonStringify(value);                                                                                     // 421\n    }                                                                                                                  // 422\n    var json = value.toJSON();                                                                                         // 423\n    // Based on the toJSON result                                                                                      // 424\n    return jsonStringify(json.data && json.type ? json.data : json, 2)                                                 // 425\n      .replace(/,(\\n|$)/g, '$1');                                                                                      // 426\n  }                                                                                                                    // 427\n                                                                                                                       // 428\n  for (var prop in value) {                                                                                            // 429\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {                                                           // 430\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');                                  // 431\n    }                                                                                                                  // 432\n  }                                                                                                                    // 433\n                                                                                                                       // 434\n  return emptyRepresentation(value, type);                                                                             // 435\n};                                                                                                                     // 436\n                                                                                                                       // 437\n/**                                                                                                                    // 438\n * like JSON.stringify but more sense.                                                                                 // 439\n *                                                                                                                     // 440\n * @api private                                                                                                        // 441\n * @param {Object}  object                                                                                             // 442\n * @param {number=} spaces                                                                                             // 443\n * @param {number=} depth                                                                                              // 444\n * @returns {*}                                                                                                        // 445\n */                                                                                                                    // 446\nfunction jsonStringify(object, spaces, depth) {                                                                        // 447\n  if (typeof spaces === 'undefined') {                                                                                 // 448\n    // primitive types                                                                                                 // 449\n    return _stringify(object);                                                                                         // 450\n  }                                                                                                                    // 451\n                                                                                                                       // 452\n  depth = depth || 1;                                                                                                  // 453\n  var space = spaces * depth;                                                                                          // 454\n  var str = isArray(object) ? '[' : '{';                                                                               // 455\n  var end = isArray(object) ? ']' : '}';                                                                               // 456\n  var length = object.length || exports.keys(object).length;                                                           // 457\n  // `.repeat()` polyfill                                                                                              // 458\n  function repeat(s, n) {                                                                                              // 459\n    return new Array(n).join(s);                                                                                       // 460\n  }                                                                                                                    // 461\n                                                                                                                       // 462\n  function _stringify(val) {                                                                                           // 463\n    switch (exports.type(val)) {                                                                                       // 464\n      case 'null':                                                                                                     // 465\n      case 'undefined':                                                                                                // 466\n        val = '[' + val + ']';                                                                                         // 467\n        break;                                                                                                         // 468\n      case 'array':                                                                                                    // 469\n      case 'object':                                                                                                   // 470\n        val = jsonStringify(val, spaces, depth + 1);                                                                   // 471\n        break;                                                                                                         // 472\n      case 'boolean':                                                                                                  // 473\n      case 'regexp':                                                                                                   // 474\n      case 'number':                                                                                                   // 475\n        val = val === 0 && (1 / val) === -Infinity // `-0`                                                             // 476\n          ? '-0'                                                                                                       // 477\n          : val.toString();                                                                                            // 478\n        break;                                                                                                         // 479\n      case 'date':                                                                                                     // 480\n        var sDate = isNaN(val.getTime())        // Invalid date                                                        // 481\n          ? val.toString()                                                                                             // 482\n          : val.toISOString();                                                                                         // 483\n        val = '[Date: ' + sDate + ']';                                                                                 // 484\n        break;                                                                                                         // 485\n      case 'buffer':                                                                                                   // 486\n        var json = val.toJSON();                                                                                       // 487\n        // Based on the toJSON result                                                                                  // 488\n        json = json.data && json.type ? json.data : json;                                                              // 489\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';                                                   // 490\n        break;                                                                                                         // 491\n      default:                                                                                                         // 492\n        val = (val === '[Function]' || val === '[Circular]')                                                           // 493\n          ? val                                                                                                        // 494\n          : JSON.stringify(val); // string                                                                             // 495\n    }                                                                                                                  // 496\n    return val;                                                                                                        // 497\n  }                                                                                                                    // 498\n                                                                                                                       // 499\n  for (var i in object) {                                                                                              // 500\n    if (!object.hasOwnProperty(i)) {                                                                                   // 501\n      continue; // not my business                                                                                     // 502\n    }                                                                                                                  // 503\n    --length;                                                                                                          // 504\n    str += '\\n ' + repeat(' ', space)                                                                                  // 505\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key                                                                // 506\n      + _stringify(object[i])                     // value                                                             // 507\n      + (length ? ',' : '');                     // comma                                                              // 508\n  }                                                                                                                    // 509\n                                                                                                                       // 510\n  return str                                                                                                           // 511\n    // [], {}                                                                                                          // 512\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);                                                    // 513\n}                                                                                                                      // 514\n                                                                                                                       // 515\n/**                                                                                                                    // 516\n * Test if a value is a buffer.                                                                                        // 517\n *                                                                                                                     // 518\n * @api private                                                                                                        // 519\n * @param {*} value The value to test.                                                                                 // 520\n * @return {boolean} True if `value` is a buffer, otherwise false                                                      // 521\n */                                                                                                                    // 522\nexports.isBuffer = function(value) {                                                                                   // 523\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);                                                      // 524\n};                                                                                                                     // 525\n                                                                                                                       // 526\n/**                                                                                                                    // 527\n * Return a new Thing that has the keys in sorted order. Recursive.                                                    // 528\n *                                                                                                                     // 529\n * If the Thing...                                                                                                     // 530\n * - has already been seen, return string `'[Circular]'`                                                               // 531\n * - is `undefined`, return string `'[undefined]'`                                                                     // 532\n * - is `null`, return value `null`                                                                                    // 533\n * - is some other primitive, return the value                                                                         // 534\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method    // 535\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.                // 536\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`                // 537\n *                                                                                                                     // 538\n * @api private                                                                                                        // 539\n * @see {@link exports.stringify}                                                                                      // 540\n * @param {*} value Thing to inspect.  May or may not have properties.                                                 // 541\n * @param {Array} [stack=[]] Stack of seen values                                                                      // 542\n * @return {(Object|Array|Function|string|undefined)}                                                                  // 543\n */                                                                                                                    // 544\nexports.canonicalize = function(value, stack) {                                                                        // 545\n  var canonicalizedObj;                                                                                                // 546\n  /* eslint-disable no-unused-vars */                                                                                  // 547\n  var prop;                                                                                                            // 548\n  /* eslint-enable no-unused-vars */                                                                                   // 549\n  var type = exports.type(value);                                                                                      // 550\n  function withStack(value, fn) {                                                                                      // 551\n    stack.push(value);                                                                                                 // 552\n    fn();                                                                                                              // 553\n    stack.pop();                                                                                                       // 554\n  }                                                                                                                    // 555\n                                                                                                                       // 556\n  stack = stack || [];                                                                                                 // 557\n                                                                                                                       // 558\n  if (exports.indexOf(stack, value) !== -1) {                                                                          // 559\n    return '[Circular]';                                                                                               // 560\n  }                                                                                                                    // 561\n                                                                                                                       // 562\n  switch (type) {                                                                                                      // 563\n    case 'undefined':                                                                                                  // 564\n    case 'buffer':                                                                                                     // 565\n    case 'null':                                                                                                       // 566\n      canonicalizedObj = value;                                                                                        // 567\n      break;                                                                                                           // 568\n    case 'array':                                                                                                      // 569\n      withStack(value, function() {                                                                                    // 570\n        canonicalizedObj = exports.map(value, function(item) {                                                         // 571\n          return exports.canonicalize(item, stack);                                                                    // 572\n        });                                                                                                            // 573\n      });                                                                                                              // 574\n      break;                                                                                                           // 575\n    case 'function':                                                                                                   // 576\n      /* eslint-disable guard-for-in */                                                                                // 577\n      for (prop in value) {                                                                                            // 578\n        canonicalizedObj = {};                                                                                         // 579\n        break;                                                                                                         // 580\n      }                                                                                                                // 581\n      /* eslint-enable guard-for-in */                                                                                 // 582\n      if (!canonicalizedObj) {                                                                                         // 583\n        canonicalizedObj = emptyRepresentation(value, type);                                                           // 584\n        break;                                                                                                         // 585\n      }                                                                                                                // 586\n    /* falls through */                                                                                                // 587\n    case 'object':                                                                                                     // 588\n      canonicalizedObj = canonicalizedObj || {};                                                                       // 589\n      withStack(value, function() {                                                                                    // 590\n        exports.forEach(exports.keys(value).sort(), function(key) {                                                    // 591\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);                                             // 592\n        });                                                                                                            // 593\n      });                                                                                                              // 594\n      break;                                                                                                           // 595\n    case 'date':                                                                                                       // 596\n    case 'number':                                                                                                     // 597\n    case 'regexp':                                                                                                     // 598\n    case 'boolean':                                                                                                    // 599\n      canonicalizedObj = value;                                                                                        // 600\n      break;                                                                                                           // 601\n    default:                                                                                                           // 602\n      canonicalizedObj = value + '';                                                                                   // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  return canonicalizedObj;                                                                                             // 606\n};                                                                                                                     // 607\n                                                                                                                       // 608\n/**                                                                                                                    // 609\n * Lookup file names at the given `path`.                                                                              // 610\n *                                                                                                                     // 611\n * @api public                                                                                                         // 612\n * @param {string} path Base path to start searching from.                                                             // 613\n * @param {string[]} extensions File extensions to look for.                                                           // 614\n * @param {boolean} recursive Whether or not to recurse into subdirectories.                                           // 615\n * @return {string[]} An array of paths.                                                                               // 616\n */                                                                                                                    // 617\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {                                              // 618\n  var files = [];                                                                                                      // 619\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');                                                           // 620\n                                                                                                                       // 621\n  if (!exists(path)) {                                                                                                 // 622\n    if (exists(path + '.js')) {                                                                                        // 623\n      path += '.js';                                                                                                   // 624\n    } else {                                                                                                           // 625\n      files = glob.sync(path);                                                                                         // 626\n      if (!files.length) {                                                                                             // 627\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");                                            // 628\n      }                                                                                                                // 629\n      return files;                                                                                                    // 630\n    }                                                                                                                  // 631\n  }                                                                                                                    // 632\n                                                                                                                       // 633\n  try {                                                                                                                // 634\n    var stat = statSync(path);                                                                                         // 635\n    if (stat.isFile()) {                                                                                               // 636\n      return path;                                                                                                     // 637\n    }                                                                                                                  // 638\n  } catch (err) {                                                                                                      // 639\n    // ignore error                                                                                                    // 640\n    return;                                                                                                            // 641\n  }                                                                                                                    // 642\n                                                                                                                       // 643\n  readdirSync(path).forEach(function(file) {                                                                           // 644\n    file = join(path, file);                                                                                           // 645\n    try {                                                                                                              // 646\n      var stat = statSync(file);                                                                                       // 647\n      if (stat.isDirectory()) {                                                                                        // 648\n        if (recursive) {                                                                                               // 649\n          files = files.concat(lookupFiles(file, extensions, recursive));                                              // 650\n        }                                                                                                              // 651\n        return;                                                                                                        // 652\n      }                                                                                                                // 653\n    } catch (err) {                                                                                                    // 654\n      // ignore error                                                                                                  // 655\n      return;                                                                                                          // 656\n    }                                                                                                                  // 657\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {                                               // 658\n      return;                                                                                                          // 659\n    }                                                                                                                  // 660\n    files.push(file);                                                                                                  // 661\n  });                                                                                                                  // 662\n                                                                                                                       // 663\n  return files;                                                                                                        // 664\n};                                                                                                                     // 665\n                                                                                                                       // 666\n/**                                                                                                                    // 667\n * Generate an undefined error with a message warning the user.                                                        // 668\n *                                                                                                                     // 669\n * @return {Error}                                                                                                     // 670\n */                                                                                                                    // 671\n                                                                                                                       // 672\nexports.undefinedError = function() {                                                                                  // 673\n  return new Error('Caught undefined error, did you throw without specifying what?');                                  // 674\n};                                                                                                                     // 675\n                                                                                                                       // 676\n/**                                                                                                                    // 677\n * Generate an undefined error if `err` is not defined.                                                                // 678\n *                                                                                                                     // 679\n * @param {Error} err                                                                                                  // 680\n * @return {Error}                                                                                                     // 681\n */                                                                                                                    // 682\n                                                                                                                       // 683\nexports.getError = function(err) {                                                                                     // 684\n  return err || exports.undefinedError();                                                                              // 685\n};                                                                                                                     // 686\n                                                                                                                       // 687\n/**                                                                                                                    // 688\n * @summary                                                                                                            // 689\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)                                  // 690\n * @description                                                                                                        // 691\n * When invoking this function you get a filter function that get the Error.stack as an input,                         // 692\n * and return a prettify output.                                                                                       // 693\n * (i.e: strip Mocha and internal node functions from stack trace).                                                    // 694\n * @returns {Function}                                                                                                 // 695\n */                                                                                                                    // 696\nexports.stackTraceFilter = function() {                                                                                // 697\n  // TODO: Replace with `process.browser`                                                                              // 698\n  var slash = '/';                                                                                                     // 699\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };                                       // 700\n  var cwd = is.node                                                                                                    // 701\n      ? process.cwd() + slash                                                                                          // 702\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');                 // 703\n                                                                                                                       // 704\n  function isMochaInternal(line) {                                                                                     // 705\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))                                                   // 706\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))                                                     // 707\n      || (~line.indexOf('components' + slash + 'mocha' + slash))                                                       // 708\n      || (~line.indexOf(slash + 'mocha.js'));                                                                          // 709\n  }                                                                                                                    // 710\n                                                                                                                       // 711\n  function isNodeInternal(line) {                                                                                      // 712\n    return (~line.indexOf('(timers.js:'))                                                                              // 713\n      || (~line.indexOf('(events.js:'))                                                                                // 714\n      || (~line.indexOf('(node.js:'))                                                                                  // 715\n      || (~line.indexOf('(module.js:'))                                                                                // 716\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))                                                   // 717\n      || false;                                                                                                        // 718\n  }                                                                                                                    // 719\n                                                                                                                       // 720\n  return function(stack) {                                                                                             // 721\n    stack = stack.split('\\n');                                                                                         // 722\n                                                                                                                       // 723\n    stack = exports.reduce(stack, function(list, line) {                                                               // 724\n      if (isMochaInternal(line)) {                                                                                     // 725\n        return list;                                                                                                   // 726\n      }                                                                                                                // 727\n                                                                                                                       // 728\n      if (is.node && isNodeInternal(line)) {                                                                           // 729\n        return list;                                                                                                   // 730\n      }                                                                                                                // 731\n                                                                                                                       // 732\n      // Clean up cwd(absolute)                                                                                        // 733\n      list.push(line.replace(cwd, ''));                                                                                // 734\n      return list;                                                                                                     // 735\n    }, []);                                                                                                            // 736\n                                                                                                                       // 737\n    return stack.join('\\n');                                                                                           // 738\n  };                                                                                                                   // 739\n};                                                                                                                     // 740\n                                                                                                                       // 741\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"suite.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/suite.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5\nvar Hook = require('./hook');                                                                                          // 6\nvar utils = require('./utils');                                                                                        // 7\nvar inherits = utils.inherits;                                                                                         // 8\nvar debug = require('debug')('mocha:suite');                                                                           // 9\nvar milliseconds = require('./ms');                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Expose `Suite`.                                                                                                     // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\nexports = module.exports = Suite;                                                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite                                        // 19\n * with the same title is already present, that suite is returned to provide                                           // 20\n * nicer reporter and more flexible meta-testing.                                                                      // 21\n *                                                                                                                     // 22\n * @api public                                                                                                         // 23\n * @param {Suite} parent                                                                                               // 24\n * @param {string} title                                                                                               // 25\n * @return {Suite}                                                                                                     // 26\n */                                                                                                                    // 27\nexports.create = function(parent, title) {                                                                             // 28\n  var suite = new Suite(title, parent.ctx);                                                                            // 29\n  suite.parent = parent;                                                                                               // 30\n  if (parent.pending) {                                                                                                // 31\n    suite.pending = true;                                                                                              // 32\n  }                                                                                                                    // 33\n  title = suite.fullTitle();                                                                                           // 34\n  parent.addSuite(suite);                                                                                              // 35\n  return suite;                                                                                                        // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Initialize a new `Suite` with the given `title` and `ctx`.                                                          // 40\n *                                                                                                                     // 41\n * @api private                                                                                                        // 42\n * @param {string} title                                                                                               // 43\n * @param {Context} parentContext                                                                                      // 44\n */                                                                                                                    // 45\nfunction Suite(title, parentContext) {                                                                                 // 46\n  this.title = title;                                                                                                  // 47\n  function Context() {}                                                                                                // 48\n  Context.prototype = parentContext;                                                                                   // 49\n  this.ctx = new Context();                                                                                            // 50\n  this.suites = [];                                                                                                    // 51\n  this.tests = [];                                                                                                     // 52\n  this.pending = false;                                                                                                // 53\n  this._beforeEach = [];                                                                                               // 54\n  this._beforeAll = [];                                                                                                // 55\n  this._afterEach = [];                                                                                                // 56\n  this._afterAll = [];                                                                                                 // 57\n  this.root = !title;                                                                                                  // 58\n  this._timeout = 2000;                                                                                                // 59\n  this._enableTimeouts = true;                                                                                         // 60\n  this._slow = 75;                                                                                                     // 61\n  this._bail = false;                                                                                                  // 62\n  this._retries = -1;                                                                                                  // 63\n  this.delayed = false;                                                                                                // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Inherit from `EventEmitter.prototype`.                                                                              // 68\n */                                                                                                                    // 69\ninherits(Suite, EventEmitter);                                                                                         // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Return a clone of this `Suite`.                                                                                     // 73\n *                                                                                                                     // 74\n * @api private                                                                                                        // 75\n * @return {Suite}                                                                                                     // 76\n */                                                                                                                    // 77\nSuite.prototype.clone = function() {                                                                                   // 78\n  var suite = new Suite(this.title);                                                                                   // 79\n  debug('clone');                                                                                                      // 80\n  suite.ctx = this.ctx;                                                                                                // 81\n  suite.timeout(this.timeout());                                                                                       // 82\n  suite.retries(this.retries());                                                                                       // 83\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 84\n  suite.slow(this.slow());                                                                                             // 85\n  suite.bail(this.bail());                                                                                             // 86\n  return suite;                                                                                                        // 87\n};                                                                                                                     // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Set timeout `ms` or short-hand such as \"2s\".                                                                        // 91\n *                                                                                                                     // 92\n * @api private                                                                                                        // 93\n * @param {number|string} ms                                                                                           // 94\n * @return {Suite|number} for chaining                                                                                 // 95\n */                                                                                                                    // 96\nSuite.prototype.timeout = function(ms) {                                                                               // 97\n  if (!arguments.length) {                                                                                             // 98\n    return this._timeout;                                                                                              // 99\n  }                                                                                                                    // 100\n  if (ms.toString() === '0') {                                                                                         // 101\n    this._enableTimeouts = false;                                                                                      // 102\n  }                                                                                                                    // 103\n  if (typeof ms === 'string') {                                                                                        // 104\n    ms = milliseconds(ms);                                                                                             // 105\n  }                                                                                                                    // 106\n  debug('timeout %d', ms);                                                                                             // 107\n  this._timeout = parseInt(ms, 10);                                                                                    // 108\n  return this;                                                                                                         // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Set number of times to retry a failed test.                                                                         // 113\n *                                                                                                                     // 114\n * @api private                                                                                                        // 115\n * @param {number|string} n                                                                                            // 116\n * @return {Suite|number} for chaining                                                                                 // 117\n */                                                                                                                    // 118\nSuite.prototype.retries = function(n) {                                                                                // 119\n  if (!arguments.length) {                                                                                             // 120\n    return this._retries;                                                                                              // 121\n  }                                                                                                                    // 122\n  debug('retries %d', n);                                                                                              // 123\n  this._retries = parseInt(n, 10) || 0;                                                                                // 124\n  return this;                                                                                                         // 125\n};                                                                                                                     // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\n  * Set timeout to `enabled`.                                                                                          // 129\n  *                                                                                                                    // 130\n  * @api private                                                                                                       // 131\n  * @param {boolean} enabled                                                                                           // 132\n  * @return {Suite|boolean} self or enabled                                                                            // 133\n  */                                                                                                                   // 134\nSuite.prototype.enableTimeouts = function(enabled) {                                                                   // 135\n  if (!arguments.length) {                                                                                             // 136\n    return this._enableTimeouts;                                                                                       // 137\n  }                                                                                                                    // 138\n  debug('enableTimeouts %s', enabled);                                                                                 // 139\n  this._enableTimeouts = enabled;                                                                                      // 140\n  return this;                                                                                                         // 141\n};                                                                                                                     // 142\n                                                                                                                       // 143\n/**                                                                                                                    // 144\n * Set slow `ms` or short-hand such as \"2s\".                                                                           // 145\n *                                                                                                                     // 146\n * @api private                                                                                                        // 147\n * @param {number|string} ms                                                                                           // 148\n * @return {Suite|number} for chaining                                                                                 // 149\n */                                                                                                                    // 150\nSuite.prototype.slow = function(ms) {                                                                                  // 151\n  if (!arguments.length) {                                                                                             // 152\n    return this._slow;                                                                                                 // 153\n  }                                                                                                                    // 154\n  if (typeof ms === 'string') {                                                                                        // 155\n    ms = milliseconds(ms);                                                                                             // 156\n  }                                                                                                                    // 157\n  debug('slow %d', ms);                                                                                                // 158\n  this._slow = ms;                                                                                                     // 159\n  return this;                                                                                                         // 160\n};                                                                                                                     // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Sets whether to bail after first error.                                                                             // 164\n *                                                                                                                     // 165\n * @api private                                                                                                        // 166\n * @param {boolean} bail                                                                                               // 167\n * @return {Suite|number} for chaining                                                                                 // 168\n */                                                                                                                    // 169\nSuite.prototype.bail = function(bail) {                                                                                // 170\n  if (!arguments.length) {                                                                                             // 171\n    return this._bail;                                                                                                 // 172\n  }                                                                                                                    // 173\n  debug('bail %s', bail);                                                                                              // 174\n  this._bail = bail;                                                                                                   // 175\n  return this;                                                                                                         // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * Run `fn(test[, done])` before running tests.                                                                        // 180\n *                                                                                                                     // 181\n * @api private                                                                                                        // 182\n * @param {string} title                                                                                               // 183\n * @param {Function} fn                                                                                                // 184\n * @return {Suite} for chaining                                                                                        // 185\n */                                                                                                                    // 186\nSuite.prototype.beforeAll = function(title, fn) {                                                                      // 187\n  if (this.pending) {                                                                                                  // 188\n    return this;                                                                                                       // 189\n  }                                                                                                                    // 190\n  if (typeof title === 'function') {                                                                                   // 191\n    fn = title;                                                                                                        // 192\n    title = fn.name;                                                                                                   // 193\n  }                                                                                                                    // 194\n  title = '\"before all\" hook' + (title ? ': ' + title : '');                                                           // 195\n                                                                                                                       // 196\n  var hook = new Hook(title, fn);                                                                                      // 197\n  hook.parent = this;                                                                                                  // 198\n  hook.timeout(this.timeout());                                                                                        // 199\n  hook.retries(this.retries());                                                                                        // 200\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 201\n  hook.slow(this.slow());                                                                                              // 202\n  hook.ctx = this.ctx;                                                                                                 // 203\n  this._beforeAll.push(hook);                                                                                          // 204\n  this.emit('beforeAll', hook);                                                                                        // 205\n  return this;                                                                                                         // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * Run `fn(test[, done])` after running tests.                                                                         // 210\n *                                                                                                                     // 211\n * @api private                                                                                                        // 212\n * @param {string} title                                                                                               // 213\n * @param {Function} fn                                                                                                // 214\n * @return {Suite} for chaining                                                                                        // 215\n */                                                                                                                    // 216\nSuite.prototype.afterAll = function(title, fn) {                                                                       // 217\n  if (this.pending) {                                                                                                  // 218\n    return this;                                                                                                       // 219\n  }                                                                                                                    // 220\n  if (typeof title === 'function') {                                                                                   // 221\n    fn = title;                                                                                                        // 222\n    title = fn.name;                                                                                                   // 223\n  }                                                                                                                    // 224\n  title = '\"after all\" hook' + (title ? ': ' + title : '');                                                            // 225\n                                                                                                                       // 226\n  var hook = new Hook(title, fn);                                                                                      // 227\n  hook.parent = this;                                                                                                  // 228\n  hook.timeout(this.timeout());                                                                                        // 229\n  hook.retries(this.retries());                                                                                        // 230\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 231\n  hook.slow(this.slow());                                                                                              // 232\n  hook.ctx = this.ctx;                                                                                                 // 233\n  this._afterAll.push(hook);                                                                                           // 234\n  this.emit('afterAll', hook);                                                                                         // 235\n  return this;                                                                                                         // 236\n};                                                                                                                     // 237\n                                                                                                                       // 238\n/**                                                                                                                    // 239\n * Run `fn(test[, done])` before each test case.                                                                       // 240\n *                                                                                                                     // 241\n * @api private                                                                                                        // 242\n * @param {string} title                                                                                               // 243\n * @param {Function} fn                                                                                                // 244\n * @return {Suite} for chaining                                                                                        // 245\n */                                                                                                                    // 246\nSuite.prototype.beforeEach = function(title, fn) {                                                                     // 247\n  if (this.pending) {                                                                                                  // 248\n    return this;                                                                                                       // 249\n  }                                                                                                                    // 250\n  if (typeof title === 'function') {                                                                                   // 251\n    fn = title;                                                                                                        // 252\n    title = fn.name;                                                                                                   // 253\n  }                                                                                                                    // 254\n  title = '\"before each\" hook' + (title ? ': ' + title : '');                                                          // 255\n                                                                                                                       // 256\n  var hook = new Hook(title, fn);                                                                                      // 257\n  hook.parent = this;                                                                                                  // 258\n  hook.timeout(this.timeout());                                                                                        // 259\n  hook.retries(this.retries());                                                                                        // 260\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 261\n  hook.slow(this.slow());                                                                                              // 262\n  hook.ctx = this.ctx;                                                                                                 // 263\n  this._beforeEach.push(hook);                                                                                         // 264\n  this.emit('beforeEach', hook);                                                                                       // 265\n  return this;                                                                                                         // 266\n};                                                                                                                     // 267\n                                                                                                                       // 268\n/**                                                                                                                    // 269\n * Run `fn(test[, done])` after each test case.                                                                        // 270\n *                                                                                                                     // 271\n * @api private                                                                                                        // 272\n * @param {string} title                                                                                               // 273\n * @param {Function} fn                                                                                                // 274\n * @return {Suite} for chaining                                                                                        // 275\n */                                                                                                                    // 276\nSuite.prototype.afterEach = function(title, fn) {                                                                      // 277\n  if (this.pending) {                                                                                                  // 278\n    return this;                                                                                                       // 279\n  }                                                                                                                    // 280\n  if (typeof title === 'function') {                                                                                   // 281\n    fn = title;                                                                                                        // 282\n    title = fn.name;                                                                                                   // 283\n  }                                                                                                                    // 284\n  title = '\"after each\" hook' + (title ? ': ' + title : '');                                                           // 285\n                                                                                                                       // 286\n  var hook = new Hook(title, fn);                                                                                      // 287\n  hook.parent = this;                                                                                                  // 288\n  hook.timeout(this.timeout());                                                                                        // 289\n  hook.retries(this.retries());                                                                                        // 290\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 291\n  hook.slow(this.slow());                                                                                              // 292\n  hook.ctx = this.ctx;                                                                                                 // 293\n  this._afterEach.push(hook);                                                                                          // 294\n  this.emit('afterEach', hook);                                                                                        // 295\n  return this;                                                                                                         // 296\n};                                                                                                                     // 297\n                                                                                                                       // 298\n/**                                                                                                                    // 299\n * Add a test `suite`.                                                                                                 // 300\n *                                                                                                                     // 301\n * @api private                                                                                                        // 302\n * @param {Suite} suite                                                                                                // 303\n * @return {Suite} for chaining                                                                                        // 304\n */                                                                                                                    // 305\nSuite.prototype.addSuite = function(suite) {                                                                           // 306\n  suite.parent = this;                                                                                                 // 307\n  suite.timeout(this.timeout());                                                                                       // 308\n  suite.retries(this.retries());                                                                                       // 309\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 310\n  suite.slow(this.slow());                                                                                             // 311\n  suite.bail(this.bail());                                                                                             // 312\n  this.suites.push(suite);                                                                                             // 313\n  this.emit('suite', suite);                                                                                           // 314\n  return this;                                                                                                         // 315\n};                                                                                                                     // 316\n                                                                                                                       // 317\n/**                                                                                                                    // 318\n * Add a `test` to this suite.                                                                                         // 319\n *                                                                                                                     // 320\n * @api private                                                                                                        // 321\n * @param {Test} test                                                                                                  // 322\n * @return {Suite} for chaining                                                                                        // 323\n */                                                                                                                    // 324\nSuite.prototype.addTest = function(test) {                                                                             // 325\n  test.parent = this;                                                                                                  // 326\n  test.timeout(this.timeout());                                                                                        // 327\n  test.retries(this.retries());                                                                                        // 328\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 329\n  test.slow(this.slow());                                                                                              // 330\n  test.ctx = this.ctx;                                                                                                 // 331\n  this.tests.push(test);                                                                                               // 332\n  this.emit('test', test);                                                                                             // 333\n  return this;                                                                                                         // 334\n};                                                                                                                     // 335\n                                                                                                                       // 336\n/**                                                                                                                    // 337\n * Return the full title generated by recursively concatenating the parent's                                           // 338\n * full title.                                                                                                         // 339\n *                                                                                                                     // 340\n * @api public                                                                                                         // 341\n * @return {string}                                                                                                    // 342\n */                                                                                                                    // 343\nSuite.prototype.fullTitle = function() {                                                                               // 344\n  if (this.parent) {                                                                                                   // 345\n    var full = this.parent.fullTitle();                                                                                // 346\n    if (full) {                                                                                                        // 347\n      return full + ' ' + this.title;                                                                                  // 348\n    }                                                                                                                  // 349\n  }                                                                                                                    // 350\n  return this.title;                                                                                                   // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * Return the total number of tests.                                                                                   // 355\n *                                                                                                                     // 356\n * @api public                                                                                                         // 357\n * @return {number}                                                                                                    // 358\n */                                                                                                                    // 359\nSuite.prototype.total = function() {                                                                                   // 360\n  return utils.reduce(this.suites, function(sum, suite) {                                                              // 361\n    return sum + suite.total();                                                                                        // 362\n  }, 0) + this.tests.length;                                                                                           // 363\n};                                                                                                                     // 364\n                                                                                                                       // 365\n/**                                                                                                                    // 366\n * Iterates through each suite recursively to find all tests. Applies a                                                // 367\n * function in the format `fn(test)`.                                                                                  // 368\n *                                                                                                                     // 369\n * @api private                                                                                                        // 370\n * @param {Function} fn                                                                                                // 371\n * @return {Suite}                                                                                                     // 372\n */                                                                                                                    // 373\nSuite.prototype.eachTest = function(fn) {                                                                              // 374\n  utils.forEach(this.tests, fn);                                                                                       // 375\n  utils.forEach(this.suites, function(suite) {                                                                         // 376\n    suite.eachTest(fn);                                                                                                // 377\n  });                                                                                                                  // 378\n  return this;                                                                                                         // 379\n};                                                                                                                     // 380\n                                                                                                                       // 381\n/**                                                                                                                    // 382\n * This will run the root suite if we happen to be running in delayed mode.                                            // 383\n */                                                                                                                    // 384\nSuite.prototype.run = function run() {                                                                                 // 385\n  if (this.root) {                                                                                                     // 386\n    this.emit('run');                                                                                                  // 387\n  }                                                                                                                    // 388\n};                                                                                                                     // 389\n                                                                                                                       // 390\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/hook.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Runnable = require('./runnable');                                                                                  // 5\nvar inherits = require('./utils').inherits;                                                                            // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Hook`.                                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nmodule.exports = Hook;                                                                                                 // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Hook` with the given `title` and callback `fn`.                                                   // 15\n *                                                                                                                     // 16\n * @param {String} title                                                                                               // 17\n * @param {Function} fn                                                                                                // 18\n * @api private                                                                                                        // 19\n */                                                                                                                    // 20\nfunction Hook(title, fn) {                                                                                             // 21\n  Runnable.call(this, title, fn);                                                                                      // 22\n  this.type = 'hook';                                                                                                  // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Inherit from `Runnable.prototype`.                                                                                  // 27\n */                                                                                                                    // 28\ninherits(Hook, Runnable);                                                                                              // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Get or set the test `err`.                                                                                          // 32\n *                                                                                                                     // 33\n * @param {Error} err                                                                                                  // 34\n * @return {Error}                                                                                                     // 35\n * @api public                                                                                                         // 36\n */                                                                                                                    // 37\nHook.prototype.error = function(err) {                                                                                 // 38\n  if (!arguments.length) {                                                                                             // 39\n    err = this._error;                                                                                                 // 40\n    this._error = null;                                                                                                // 41\n    return err;                                                                                                        // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  this._error = err;                                                                                                   // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"events\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/events/package.json                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"events\";                                                                                               // 1\nexports.version = \"1.1.0\";                                                                                             // 2\nexports.main = \"./events.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/events/events.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nfunction EventEmitter() {                                                                                              // 22\n  this._events = this._events || {};                                                                                   // 23\n  this._maxListeners = this._maxListeners || undefined;                                                                // 24\n}                                                                                                                      // 25\nmodule.exports = EventEmitter;                                                                                         // 26\n                                                                                                                       // 27\n// Backwards-compat with node 0.10.x                                                                                   // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 29\n                                                                                                                       // 30\nEventEmitter.prototype._events = undefined;                                                                            // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 32\n                                                                                                                       // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34\n// added to it. This is a useful default which helps finding memory leaks.                                             // 35\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 36\n                                                                                                                       // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 38\n// that to be increased. Set to zero for unlimited.                                                                    // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41\n    throw TypeError('n must be a positive number');                                                                    // 42\n  this._maxListeners = n;                                                                                              // 43\n  return this;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nEventEmitter.prototype.emit = function(type) {                                                                         // 47\n  var er, handler, len, args, i, listeners;                                                                            // 48\n                                                                                                                       // 49\n  if (!this._events)                                                                                                   // 50\n    this._events = {};                                                                                                 // 51\n                                                                                                                       // 52\n  // If there is no 'error' event listener then throw.                                                                 // 53\n  if (type === 'error') {                                                                                              // 54\n    if (!this._events.error ||                                                                                         // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56\n      er = arguments[1];                                                                                               // 57\n      if (er instanceof Error) {                                                                                       // 58\n        throw er; // Unhandled 'error' event                                                                           // 59\n      }                                                                                                                // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 61\n    }                                                                                                                  // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  handler = this._events[type];                                                                                        // 65\n                                                                                                                       // 66\n  if (isUndefined(handler))                                                                                            // 67\n    return false;                                                                                                      // 68\n                                                                                                                       // 69\n  if (isFunction(handler)) {                                                                                           // 70\n    switch (arguments.length) {                                                                                        // 71\n      // fast cases                                                                                                    // 72\n      case 1:                                                                                                          // 73\n        handler.call(this);                                                                                            // 74\n        break;                                                                                                         // 75\n      case 2:                                                                                                          // 76\n        handler.call(this, arguments[1]);                                                                              // 77\n        break;                                                                                                         // 78\n      case 3:                                                                                                          // 79\n        handler.call(this, arguments[1], arguments[2]);                                                                // 80\n        break;                                                                                                         // 81\n      // slower                                                                                                        // 82\n      default:                                                                                                         // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                               // 84\n        handler.apply(this, args);                                                                                     // 85\n    }                                                                                                                  // 86\n  } else if (isObject(handler)) {                                                                                      // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                                   // 88\n    listeners = handler.slice();                                                                                       // 89\n    len = listeners.length;                                                                                            // 90\n    for (i = 0; i < len; i++)                                                                                          // 91\n      listeners[i].apply(this, args);                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  return true;                                                                                                         // 95\n};                                                                                                                     // 96\n                                                                                                                       // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 98\n  var m;                                                                                                               // 99\n                                                                                                                       // 100\n  if (!isFunction(listener))                                                                                           // 101\n    throw TypeError('listener must be a function');                                                                    // 102\n                                                                                                                       // 103\n  if (!this._events)                                                                                                   // 104\n    this._events = {};                                                                                                 // 105\n                                                                                                                       // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 107\n  // adding it to the listeners, first emit \"newListener\".                                                             // 108\n  if (this._events.newListener)                                                                                        // 109\n    this.emit('newListener', type,                                                                                     // 110\n              isFunction(listener.listener) ?                                                                          // 111\n              listener.listener : listener);                                                                           // 112\n                                                                                                                       // 113\n  if (!this._events[type])                                                                                             // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 115\n    this._events[type] = listener;                                                                                     // 116\n  else if (isObject(this._events[type]))                                                                               // 117\n    // If we've already got an array, just append.                                                                     // 118\n    this._events[type].push(listener);                                                                                 // 119\n  else                                                                                                                 // 120\n    // Adding the second element, need to change to array.                                                             // 121\n    this._events[type] = [this._events[type], listener];                                                               // 122\n                                                                                                                       // 123\n  // Check for listener leak                                                                                           // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 125\n    if (!isUndefined(this._maxListeners)) {                                                                            // 126\n      m = this._maxListeners;                                                                                          // 127\n    } else {                                                                                                           // 128\n      m = EventEmitter.defaultMaxListeners;                                                                            // 129\n    }                                                                                                                  // 130\n                                                                                                                       // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 132\n      this._events[type].warned = true;                                                                                // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 134\n                    'leak detected. %d listeners added. ' +                                                            // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 136\n                    this._events[type].length);                                                                        // 137\n      if (typeof console.trace === 'function') {                                                                       // 138\n        // not supported in IE 10                                                                                      // 139\n        console.trace();                                                                                               // 140\n      }                                                                                                                // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n                                                                                                                       // 144\n  return this;                                                                                                         // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 148\n                                                                                                                       // 149\nEventEmitter.prototype.once = function(type, listener) {                                                               // 150\n  if (!isFunction(listener))                                                                                           // 151\n    throw TypeError('listener must be a function');                                                                    // 152\n                                                                                                                       // 153\n  var fired = false;                                                                                                   // 154\n                                                                                                                       // 155\n  function g() {                                                                                                       // 156\n    this.removeListener(type, g);                                                                                      // 157\n                                                                                                                       // 158\n    if (!fired) {                                                                                                      // 159\n      fired = true;                                                                                                    // 160\n      listener.apply(this, arguments);                                                                                 // 161\n    }                                                                                                                  // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  g.listener = listener;                                                                                               // 165\n  this.on(type, g);                                                                                                    // 166\n                                                                                                                       // 167\n  return this;                                                                                                         // 168\n};                                                                                                                     // 169\n                                                                                                                       // 170\n// emits a 'removeListener' event iff the listener was removed                                                         // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 172\n  var list, position, length, i;                                                                                       // 173\n                                                                                                                       // 174\n  if (!isFunction(listener))                                                                                           // 175\n    throw TypeError('listener must be a function');                                                                    // 176\n                                                                                                                       // 177\n  if (!this._events || !this._events[type])                                                                            // 178\n    return this;                                                                                                       // 179\n                                                                                                                       // 180\n  list = this._events[type];                                                                                           // 181\n  length = list.length;                                                                                                // 182\n  position = -1;                                                                                                       // 183\n                                                                                                                       // 184\n  if (list === listener ||                                                                                             // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 186\n    delete this._events[type];                                                                                         // 187\n    if (this._events.removeListener)                                                                                   // 188\n      this.emit('removeListener', type, listener);                                                                     // 189\n                                                                                                                       // 190\n  } else if (isObject(list)) {                                                                                         // 191\n    for (i = length; i-- > 0;) {                                                                                       // 192\n      if (list[i] === listener ||                                                                                      // 193\n          (list[i].listener && list[i].listener === listener)) {                                                       // 194\n        position = i;                                                                                                  // 195\n        break;                                                                                                         // 196\n      }                                                                                                                // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    if (position < 0)                                                                                                  // 200\n      return this;                                                                                                     // 201\n                                                                                                                       // 202\n    if (list.length === 1) {                                                                                           // 203\n      list.length = 0;                                                                                                 // 204\n      delete this._events[type];                                                                                       // 205\n    } else {                                                                                                           // 206\n      list.splice(position, 1);                                                                                        // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    if (this._events.removeListener)                                                                                   // 210\n      this.emit('removeListener', type, listener);                                                                     // 211\n  }                                                                                                                    // 212\n                                                                                                                       // 213\n  return this;                                                                                                         // 214\n};                                                                                                                     // 215\n                                                                                                                       // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 217\n  var key, listeners;                                                                                                  // 218\n                                                                                                                       // 219\n  if (!this._events)                                                                                                   // 220\n    return this;                                                                                                       // 221\n                                                                                                                       // 222\n  // not listening for removeListener, no need to emit                                                                 // 223\n  if (!this._events.removeListener) {                                                                                  // 224\n    if (arguments.length === 0)                                                                                        // 225\n      this._events = {};                                                                                               // 226\n    else if (this._events[type])                                                                                       // 227\n      delete this._events[type];                                                                                       // 228\n    return this;                                                                                                       // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  // emit removeListener for all listeners on all events                                                               // 232\n  if (arguments.length === 0) {                                                                                        // 233\n    for (key in this._events) {                                                                                        // 234\n      if (key === 'removeListener') continue;                                                                          // 235\n      this.removeAllListeners(key);                                                                                    // 236\n    }                                                                                                                  // 237\n    this.removeAllListeners('removeListener');                                                                         // 238\n    this._events = {};                                                                                                 // 239\n    return this;                                                                                                       // 240\n  }                                                                                                                    // 241\n                                                                                                                       // 242\n  listeners = this._events[type];                                                                                      // 243\n                                                                                                                       // 244\n  if (isFunction(listeners)) {                                                                                         // 245\n    this.removeListener(type, listeners);                                                                              // 246\n  } else if (listeners) {                                                                                              // 247\n    // LIFO order                                                                                                      // 248\n    while (listeners.length)                                                                                           // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 250\n  }                                                                                                                    // 251\n  delete this._events[type];                                                                                           // 252\n                                                                                                                       // 253\n  return this;                                                                                                         // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\nEventEmitter.prototype.listeners = function(type) {                                                                    // 257\n  var ret;                                                                                                             // 258\n  if (!this._events || !this._events[type])                                                                            // 259\n    ret = [];                                                                                                          // 260\n  else if (isFunction(this._events[type]))                                                                             // 261\n    ret = [this._events[type]];                                                                                        // 262\n  else                                                                                                                 // 263\n    ret = this._events[type].slice();                                                                                  // 264\n  return ret;                                                                                                          // 265\n};                                                                                                                     // 266\n                                                                                                                       // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                                // 268\n  if (this._events) {                                                                                                  // 269\n    var evlistener = this._events[type];                                                                               // 270\n                                                                                                                       // 271\n    if (isFunction(evlistener))                                                                                        // 272\n      return 1;                                                                                                        // 273\n    else if (evlistener)                                                                                               // 274\n      return evlistener.length;                                                                                        // 275\n  }                                                                                                                    // 276\n  return 0;                                                                                                            // 277\n};                                                                                                                     // 278\n                                                                                                                       // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 280\n  return emitter.listenerCount(type);                                                                                  // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\nfunction isFunction(arg) {                                                                                             // 284\n  return typeof arg === 'function';                                                                                    // 285\n}                                                                                                                      // 286\n                                                                                                                       // 287\nfunction isNumber(arg) {                                                                                               // 288\n  return typeof arg === 'number';                                                                                      // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nfunction isObject(arg) {                                                                                               // 292\n  return typeof arg === 'object' && arg !== null;                                                                      // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction isUndefined(arg) {                                                                                            // 296\n  return arg === void 0;                                                                                               // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"debug\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/debug/package.json                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"debug\";                                                                                                // 1\nexports.version = \"2.2.0\";                                                                                             // 2\nexports.browser = \"./browser.js\";                                                                                      // 3\nexports.main = \"./node.js\";                                                                                            // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/debug/browser.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the web browser implementation of `debug()`.                                                                // 3\n *                                                                                                                     // 4\n * Expose `debug()` as the module.                                                                                     // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nexports = module.exports = require('./debug');                                                                         // 8\nexports.log = log;                                                                                                     // 9\nexports.formatArgs = formatArgs;                                                                                       // 10\nexports.save = save;                                                                                                   // 11\nexports.load = load;                                                                                                   // 12\nexports.useColors = useColors;                                                                                         // 13\nexports.storage = 'undefined' != typeof chrome                                                                         // 14\n               && 'undefined' != typeof chrome.storage                                                                 // 15\n                  ? chrome.storage.local                                                                               // 16\n                  : localstorage();                                                                                    // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Colors.                                                                                                             // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nexports.colors = [                                                                                                     // 23\n  'lightseagreen',                                                                                                     // 24\n  'forestgreen',                                                                                                       // 25\n  'goldenrod',                                                                                                         // 26\n  'dodgerblue',                                                                                                        // 27\n  'darkorchid',                                                                                                        // 28\n  'crimson'                                                                                                            // 29\n];                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,                                                         // 33\n * and the Firebug extension (any Firefox version) are known                                                           // 34\n * to support \"%c\" CSS customizations.                                                                                 // 35\n *                                                                                                                     // 36\n * TODO: add a `localStorage` variable to explicitly enable/disable colors                                             // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction useColors() {                                                                                                 // 40\n  // is webkit? http://stackoverflow.com/a/16459606/376773                                                             // 41\n  return ('WebkitAppearance' in document.documentElement.style) ||                                                     // 42\n    // is firebug? http://stackoverflow.com/a/398120/376773                                                            // 43\n    (window.console && (console.firebug || (console.exception && console.table))) ||                                   // 44\n    // is firefox >= v31?                                                                                              // 45\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages                                     // 46\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);                      // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.                                           // 51\n */                                                                                                                    // 52\n                                                                                                                       // 53\nexports.formatters.j = function(v) {                                                                                   // 54\n  return JSON.stringify(v);                                                                                            // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Colorize log arguments if enabled.                                                                                  // 60\n *                                                                                                                     // 61\n * @api public                                                                                                         // 62\n */                                                                                                                    // 63\n                                                                                                                       // 64\nfunction formatArgs() {                                                                                                // 65\n  var args = arguments;                                                                                                // 66\n  var useColors = this.useColors;                                                                                      // 67\n                                                                                                                       // 68\n  args[0] = (useColors ? '%c' : '')                                                                                    // 69\n    + this.namespace                                                                                                   // 70\n    + (useColors ? ' %c' : ' ')                                                                                        // 71\n    + args[0]                                                                                                          // 72\n    + (useColors ? '%c ' : ' ')                                                                                        // 73\n    + '+' + exports.humanize(this.diff);                                                                               // 74\n                                                                                                                       // 75\n  if (!useColors) return args;                                                                                         // 76\n                                                                                                                       // 77\n  var c = 'color: ' + this.color;                                                                                      // 78\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));                                   // 79\n                                                                                                                       // 80\n  // the final \"%c\" is somewhat tricky, because there could be other                                                   // 81\n  // arguments passed either before or after the %c, so we need to                                                     // 82\n  // figure out the correct index to insert the CSS into                                                               // 83\n  var index = 0;                                                                                                       // 84\n  var lastC = 0;                                                                                                       // 85\n  args[0].replace(/%[a-z%]/g, function(match) {                                                                        // 86\n    if ('%%' === match) return;                                                                                        // 87\n    index++;                                                                                                           // 88\n    if ('%c' === match) {                                                                                              // 89\n      // we only are interested in the *last* %c                                                                       // 90\n      // (the user may have provided their own)                                                                        // 91\n      lastC = index;                                                                                                   // 92\n    }                                                                                                                  // 93\n  });                                                                                                                  // 94\n                                                                                                                       // 95\n  args.splice(lastC, 0, c);                                                                                            // 96\n  return args;                                                                                                         // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * Invokes `console.log()` when available.                                                                             // 101\n * No-op when `console.log` is not a \"function\".                                                                       // 102\n *                                                                                                                     // 103\n * @api public                                                                                                         // 104\n */                                                                                                                    // 105\n                                                                                                                       // 106\nfunction log() {                                                                                                       // 107\n  // this hackery is required for IE8/9, where                                                                         // 108\n  // the `console.log` function doesn't have 'apply'                                                                   // 109\n  return 'object' === typeof console                                                                                   // 110\n    && console.log                                                                                                     // 111\n    && Function.prototype.apply.call(console.log, console, arguments);                                                 // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * Save `namespaces`.                                                                                                  // 116\n *                                                                                                                     // 117\n * @param {String} namespaces                                                                                          // 118\n * @api private                                                                                                        // 119\n */                                                                                                                    // 120\n                                                                                                                       // 121\nfunction save(namespaces) {                                                                                            // 122\n  try {                                                                                                                // 123\n    if (null == namespaces) {                                                                                          // 124\n      exports.storage.removeItem('debug');                                                                             // 125\n    } else {                                                                                                           // 126\n      exports.storage.debug = namespaces;                                                                              // 127\n    }                                                                                                                  // 128\n  } catch(e) {}                                                                                                        // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\n/**                                                                                                                    // 132\n * Load `namespaces`.                                                                                                  // 133\n *                                                                                                                     // 134\n * @return {String} returns the previously persisted debug modes                                                       // 135\n * @api private                                                                                                        // 136\n */                                                                                                                    // 137\n                                                                                                                       // 138\nfunction load() {                                                                                                      // 139\n  var r;                                                                                                               // 140\n  try {                                                                                                                // 141\n    r = exports.storage.debug;                                                                                         // 142\n  } catch(e) {}                                                                                                        // 143\n  return r;                                                                                                            // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * Enable namespaces listed in `localStorage.debug` initially.                                                         // 148\n */                                                                                                                    // 149\n                                                                                                                       // 150\nexports.enable(load());                                                                                                // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Localstorage attempts to return the localstorage.                                                                   // 154\n *                                                                                                                     // 155\n * This is necessary because safari throws                                                                             // 156\n * when a user disables cookies/localstorage                                                                           // 157\n * and you attempt to access it.                                                                                       // 158\n *                                                                                                                     // 159\n * @return {LocalStorage}                                                                                              // 160\n * @api private                                                                                                        // 161\n */                                                                                                                    // 162\n                                                                                                                       // 163\nfunction localstorage(){                                                                                               // 164\n  try {                                                                                                                // 165\n    return window.localStorage;                                                                                        // 166\n  } catch (e) {}                                                                                                       // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"debug.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/debug/debug.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the common logic for both the Node.js and web browser                                                       // 3\n * implementations of `debug()`.                                                                                       // 4\n *                                                                                                                     // 5\n * Expose `debug()` as the module.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nexports = module.exports = debug;                                                                                      // 9\nexports.coerce = coerce;                                                                                               // 10\nexports.disable = disable;                                                                                             // 11\nexports.enable = enable;                                                                                               // 12\nexports.enabled = enabled;                                                                                             // 13\nexports.humanize = require('ms');                                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * The currently active debug mode names, and names to skip.                                                           // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nexports.names = [];                                                                                                    // 20\nexports.skips = [];                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.                                            // 24\n *                                                                                                                     // 25\n * Valid key names are a single, lowercased letter, i.e. \"n\".                                                          // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports.formatters = {};                                                                                               // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Previously assigned color.                                                                                          // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar prevColor = 0;                                                                                                     // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Previous log timestamp.                                                                                             // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\nvar prevTime;                                                                                                          // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Select a color.                                                                                                     // 44\n *                                                                                                                     // 45\n * @return {Number}                                                                                                    // 46\n * @api private                                                                                                        // 47\n */                                                                                                                    // 48\n                                                                                                                       // 49\nfunction selectColor() {                                                                                               // 50\n  return exports.colors[prevColor++ % exports.colors.length];                                                          // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Create a debugger with the given `namespace`.                                                                       // 55\n *                                                                                                                     // 56\n * @param {String} namespace                                                                                           // 57\n * @return {Function}                                                                                                  // 58\n * @api public                                                                                                         // 59\n */                                                                                                                    // 60\n                                                                                                                       // 61\nfunction debug(namespace) {                                                                                            // 62\n                                                                                                                       // 63\n  // define the `disabled` version                                                                                     // 64\n  function disabled() {                                                                                                // 65\n  }                                                                                                                    // 66\n  disabled.enabled = false;                                                                                            // 67\n                                                                                                                       // 68\n  // define the `enabled` version                                                                                      // 69\n  function enabled() {                                                                                                 // 70\n                                                                                                                       // 71\n    var self = enabled;                                                                                                // 72\n                                                                                                                       // 73\n    // set `diff` timestamp                                                                                            // 74\n    var curr = +new Date();                                                                                            // 75\n    var ms = curr - (prevTime || curr);                                                                                // 76\n    self.diff = ms;                                                                                                    // 77\n    self.prev = prevTime;                                                                                              // 78\n    self.curr = curr;                                                                                                  // 79\n    prevTime = curr;                                                                                                   // 80\n                                                                                                                       // 81\n    // add the `color` if not set                                                                                      // 82\n    if (null == self.useColors) self.useColors = exports.useColors();                                                  // 83\n    if (null == self.color && self.useColors) self.color = selectColor();                                              // 84\n                                                                                                                       // 85\n    var args = Array.prototype.slice.call(arguments);                                                                  // 86\n                                                                                                                       // 87\n    args[0] = exports.coerce(args[0]);                                                                                 // 88\n                                                                                                                       // 89\n    if ('string' !== typeof args[0]) {                                                                                 // 90\n      // anything else let's inspect with %o                                                                           // 91\n      args = ['%o'].concat(args);                                                                                      // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    // apply any `formatters` transformations                                                                          // 95\n    var index = 0;                                                                                                     // 96\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {                                                  // 97\n      // if we encounter an escaped % then don't increase the array index                                              // 98\n      if (match === '%%') return match;                                                                                // 99\n      index++;                                                                                                         // 100\n      var formatter = exports.formatters[format];                                                                      // 101\n      if ('function' === typeof formatter) {                                                                           // 102\n        var val = args[index];                                                                                         // 103\n        match = formatter.call(self, val);                                                                             // 104\n                                                                                                                       // 105\n        // now we need to remove `args[index]` since it's inlined in the `format`                                      // 106\n        args.splice(index, 1);                                                                                         // 107\n        index--;                                                                                                       // 108\n      }                                                                                                                // 109\n      return match;                                                                                                    // 110\n    });                                                                                                                // 111\n                                                                                                                       // 112\n    if ('function' === typeof exports.formatArgs) {                                                                    // 113\n      args = exports.formatArgs.apply(self, args);                                                                     // 114\n    }                                                                                                                  // 115\n    var logFn = enabled.log || exports.log || console.log.bind(console);                                               // 116\n    logFn.apply(self, args);                                                                                           // 117\n  }                                                                                                                    // 118\n  enabled.enabled = true;                                                                                              // 119\n                                                                                                                       // 120\n  var fn = exports.enabled(namespace) ? enabled : disabled;                                                            // 121\n                                                                                                                       // 122\n  fn.namespace = namespace;                                                                                            // 123\n                                                                                                                       // 124\n  return fn;                                                                                                           // 125\n}                                                                                                                      // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\n * Enables a debug mode by namespaces. This can include modes                                                          // 129\n * separated by a colon and wildcards.                                                                                 // 130\n *                                                                                                                     // 131\n * @param {String} namespaces                                                                                          // 132\n * @api public                                                                                                         // 133\n */                                                                                                                    // 134\n                                                                                                                       // 135\nfunction enable(namespaces) {                                                                                          // 136\n  exports.save(namespaces);                                                                                            // 137\n                                                                                                                       // 138\n  var split = (namespaces || '').split(/[\\s,]+/);                                                                      // 139\n  var len = split.length;                                                                                              // 140\n                                                                                                                       // 141\n  for (var i = 0; i < len; i++) {                                                                                      // 142\n    if (!split[i]) continue; // ignore empty strings                                                                   // 143\n    namespaces = split[i].replace(/\\*/g, '.*?');                                                                       // 144\n    if (namespaces[0] === '-') {                                                                                       // 145\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));                                                // 146\n    } else {                                                                                                           // 147\n      exports.names.push(new RegExp('^' + namespaces + '$'));                                                          // 148\n    }                                                                                                                  // 149\n  }                                                                                                                    // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Disable debug output.                                                                                               // 154\n *                                                                                                                     // 155\n * @api public                                                                                                         // 156\n */                                                                                                                    // 157\n                                                                                                                       // 158\nfunction disable() {                                                                                                   // 159\n  exports.enable('');                                                                                                  // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Returns true if the given mode name is enabled, false otherwise.                                                    // 164\n *                                                                                                                     // 165\n * @param {String} name                                                                                                // 166\n * @return {Boolean}                                                                                                   // 167\n * @api public                                                                                                         // 168\n */                                                                                                                    // 169\n                                                                                                                       // 170\nfunction enabled(name) {                                                                                               // 171\n  var i, len;                                                                                                          // 172\n  for (i = 0, len = exports.skips.length; i < len; i++) {                                                              // 173\n    if (exports.skips[i].test(name)) {                                                                                 // 174\n      return false;                                                                                                    // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n  for (i = 0, len = exports.names.length; i < len; i++) {                                                              // 178\n    if (exports.names[i].test(name)) {                                                                                 // 179\n      return true;                                                                                                     // 180\n    }                                                                                                                  // 181\n  }                                                                                                                    // 182\n  return false;                                                                                                        // 183\n}                                                                                                                      // 184\n                                                                                                                       // 185\n/**                                                                                                                    // 186\n * Coerce `val`.                                                                                                       // 187\n *                                                                                                                     // 188\n * @param {Mixed} val                                                                                                  // 189\n * @return {Mixed}                                                                                                     // 190\n * @api private                                                                                                        // 191\n */                                                                                                                    // 192\n                                                                                                                       // 193\nfunction coerce(val) {                                                                                                 // 194\n  if (val instanceof Error) return val.stack || val.message;                                                           // 195\n  return val;                                                                                                          // 196\n}                                                                                                                      // 197\n                                                                                                                       // 198\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ms\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/ms/package.json                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ms\";                                                                                                   // 1\nexports.version = \"0.7.1\";                                                                                             // 2\nexports.main = \"./index\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/ms/index.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar s = 1000;                                                                                                          // 5\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25;                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Parse or format the given `val`.                                                                                    // 12\n *                                                                                                                     // 13\n * Options:                                                                                                            // 14\n *                                                                                                                     // 15\n *  - `long` verbose formatting [false]                                                                                // 16\n *                                                                                                                     // 17\n * @param {String|Number} val                                                                                          // 18\n * @param {Object} options                                                                                             // 19\n * @return {String|Number}                                                                                             // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nmodule.exports = function(val, options){                                                                               // 24\n  options = options || {};                                                                                             // 25\n  if ('string' == typeof val) return parse(val);                                                                       // 26\n  return options.long                                                                                                  // 27\n    ? long(val)                                                                                                        // 28\n    : short(val);                                                                                                      // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Parse the given `str` and return milliseconds.                                                                      // 33\n *                                                                                                                     // 34\n * @param {String} str                                                                                                 // 35\n * @return {Number}                                                                                                    // 36\n * @api private                                                                                                        // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction parse(str) {                                                                                                  // 40\n  str = '' + str;                                                                                                      // 41\n  if (str.length > 10000) return;                                                                                      // 42\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;                                                                                                  // 44\n  var n = parseFloat(match[1]);                                                                                        // 45\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 46\n  switch (type) {                                                                                                      // 47\n    case 'years':                                                                                                      // 48\n    case 'year':                                                                                                       // 49\n    case 'yrs':                                                                                                        // 50\n    case 'yr':                                                                                                         // 51\n    case 'y':                                                                                                          // 52\n      return n * y;                                                                                                    // 53\n    case 'days':                                                                                                       // 54\n    case 'day':                                                                                                        // 55\n    case 'd':                                                                                                          // 56\n      return n * d;                                                                                                    // 57\n    case 'hours':                                                                                                      // 58\n    case 'hour':                                                                                                       // 59\n    case 'hrs':                                                                                                        // 60\n    case 'hr':                                                                                                         // 61\n    case 'h':                                                                                                          // 62\n      return n * h;                                                                                                    // 63\n    case 'minutes':                                                                                                    // 64\n    case 'minute':                                                                                                     // 65\n    case 'mins':                                                                                                       // 66\n    case 'min':                                                                                                        // 67\n    case 'm':                                                                                                          // 68\n      return n * m;                                                                                                    // 69\n    case 'seconds':                                                                                                    // 70\n    case 'second':                                                                                                     // 71\n    case 'secs':                                                                                                       // 72\n    case 'sec':                                                                                                        // 73\n    case 's':                                                                                                          // 74\n      return n * s;                                                                                                    // 75\n    case 'milliseconds':                                                                                               // 76\n    case 'millisecond':                                                                                                // 77\n    case 'msecs':                                                                                                      // 78\n    case 'msec':                                                                                                       // 79\n    case 'ms':                                                                                                         // 80\n      return n;                                                                                                        // 81\n  }                                                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Short format for `ms`.                                                                                              // 86\n *                                                                                                                     // 87\n * @param {Number} ms                                                                                                  // 88\n * @return {String}                                                                                                    // 89\n * @api private                                                                                                        // 90\n */                                                                                                                    // 91\n                                                                                                                       // 92\nfunction short(ms) {                                                                                                   // 93\n  if (ms >= d) return Math.round(ms / d) + 'd';                                                                        // 94\n  if (ms >= h) return Math.round(ms / h) + 'h';                                                                        // 95\n  if (ms >= m) return Math.round(ms / m) + 'm';                                                                        // 96\n  if (ms >= s) return Math.round(ms / s) + 's';                                                                        // 97\n  return ms + 'ms';                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Long format for `ms`.                                                                                               // 102\n *                                                                                                                     // 103\n * @param {Number} ms                                                                                                  // 104\n * @return {String}                                                                                                    // 105\n * @api private                                                                                                        // 106\n */                                                                                                                    // 107\n                                                                                                                       // 108\nfunction long(ms) {                                                                                                    // 109\n  return plural(ms, d, 'day')                                                                                          // 110\n    || plural(ms, h, 'hour')                                                                                           // 111\n    || plural(ms, m, 'minute')                                                                                         // 112\n    || plural(ms, s, 'second')                                                                                         // 113\n    || ms + ' ms';                                                                                                     // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * Pluralization helper.                                                                                               // 118\n */                                                                                                                    // 119\n                                                                                                                       // 120\nfunction plural(ms, n, name) {                                                                                         // 121\n  if (ms < n) return;                                                                                                  // 122\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;                                                            // 123\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 124\n}                                                                                                                      // 125\n                                                                                                                       // 126\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"path\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/path/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"path\";                                                                                                 // 1\nexports.version = \"0.12.7\";                                                                                            // 2\nexports.main = \"./path.js\";                                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"path.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/path/path.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\n'use strict';                                                                                                          // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\nvar isWindows = process.platform === 'win32';                                                                          // 25\nvar util = require('util');                                                                                            // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n// resolves . and .. elements in a path array with directory names there                                               // 29\n// must be no slashes or device names (c:\\) in the array                                                               // 30\n// (so also no leading and trailing slashes - it does not distinguish                                                  // 31\n// relative and absolute paths)                                                                                        // 32\nfunction normalizeArray(parts, allowAboveRoot) {                                                                       // 33\n  var res = [];                                                                                                        // 34\n  for (var i = 0; i < parts.length; i++) {                                                                             // 35\n    var p = parts[i];                                                                                                  // 36\n                                                                                                                       // 37\n    // ignore empty parts                                                                                              // 38\n    if (!p || p === '.')                                                                                               // 39\n      continue;                                                                                                        // 40\n                                                                                                                       // 41\n    if (p === '..') {                                                                                                  // 42\n      if (res.length && res[res.length - 1] !== '..') {                                                                // 43\n        res.pop();                                                                                                     // 44\n      } else if (allowAboveRoot) {                                                                                     // 45\n        res.push('..');                                                                                                // 46\n      }                                                                                                                // 47\n    } else {                                                                                                           // 48\n      res.push(p);                                                                                                     // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  return res;                                                                                                          // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\n// returns an array with empty elements removed from either end of the input                                           // 56\n// array or the original array if no elements need to be removed                                                       // 57\nfunction trimArray(arr) {                                                                                              // 58\n  var lastIndex = arr.length - 1;                                                                                      // 59\n  var start = 0;                                                                                                       // 60\n  for (; start <= lastIndex; start++) {                                                                                // 61\n    if (arr[start])                                                                                                    // 62\n      break;                                                                                                           // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  var end = lastIndex;                                                                                                 // 66\n  for (; end >= 0; end--) {                                                                                            // 67\n    if (arr[end])                                                                                                      // 68\n      break;                                                                                                           // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  if (start === 0 && end === lastIndex)                                                                                // 72\n    return arr;                                                                                                        // 73\n  if (start > end)                                                                                                     // 74\n    return [];                                                                                                         // 75\n  return arr.slice(start, end + 1);                                                                                    // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\n// Regex to split a windows path into three parts: [*, device, slash,                                                  // 79\n// tail] windows-only                                                                                                  // 80\nvar splitDeviceRe =                                                                                                    // 81\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;                                              // 82\n                                                                                                                       // 83\n// Regex to split the tail part of the above into [*, dir, basename, ext]                                              // 84\nvar splitTailRe =                                                                                                      // 85\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;                                                   // 86\n                                                                                                                       // 87\nvar win32 = {};                                                                                                        // 88\n                                                                                                                       // 89\n// Function to split a filename into [root, dir, basename, ext]                                                        // 90\nfunction win32SplitPath(filename) {                                                                                    // 91\n  // Separate device+slash from tail                                                                                   // 92\n  var result = splitDeviceRe.exec(filename),                                                                           // 93\n      device = (result[1] || '') + (result[2] || ''),                                                                  // 94\n      tail = result[3] || '';                                                                                          // 95\n  // Split the tail into dir, basename and extension                                                                   // 96\n  var result2 = splitTailRe.exec(tail),                                                                                // 97\n      dir = result2[1],                                                                                                // 98\n      basename = result2[2],                                                                                           // 99\n      ext = result2[3];                                                                                                // 100\n  return [device, dir, basename, ext];                                                                                 // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\nfunction win32StatPath(path) {                                                                                         // 104\n  var result = splitDeviceRe.exec(path),                                                                               // 105\n      device = result[1] || '',                                                                                        // 106\n      isUnc = !!device && device[1] !== ':';                                                                           // 107\n  return {                                                                                                             // 108\n    device: device,                                                                                                    // 109\n    isUnc: isUnc,                                                                                                      // 110\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute                                                 // 111\n    tail: result[3]                                                                                                    // 112\n  };                                                                                                                   // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\nfunction normalizeUNCRoot(device) {                                                                                    // 116\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');                                            // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n// path.resolve([from ...], to)                                                                                        // 120\nwin32.resolve = function() {                                                                                           // 121\n  var resolvedDevice = '',                                                                                             // 122\n      resolvedTail = '',                                                                                               // 123\n      resolvedAbsolute = false;                                                                                        // 124\n                                                                                                                       // 125\n  for (var i = arguments.length - 1; i >= -1; i--) {                                                                   // 126\n    var path;                                                                                                          // 127\n    if (i >= 0) {                                                                                                      // 128\n      path = arguments[i];                                                                                             // 129\n    } else if (!resolvedDevice) {                                                                                      // 130\n      path = process.cwd();                                                                                            // 131\n    } else {                                                                                                           // 132\n      // Windows has the concept of drive-specific current working                                                     // 133\n      // directories. If we've resolved a drive letter but not yet an                                                  // 134\n      // absolute path, get cwd for that drive. We're sure the device is not                                           // 135\n      // an unc path at this points, because unc paths are always absolute.                                            // 136\n      path = process.env['=' + resolvedDevice];                                                                        // 137\n      // Verify that a drive-local cwd was found and that it actually points                                           // 138\n      // to our drive. If not, default to the drive's root.                                                            // 139\n      if (!path || path.substr(0, 3).toLowerCase() !==                                                                 // 140\n          resolvedDevice.toLowerCase() + '\\\\') {                                                                       // 141\n        path = resolvedDevice + '\\\\';                                                                                  // 142\n      }                                                                                                                // 143\n    }                                                                                                                  // 144\n                                                                                                                       // 145\n    // Skip empty and invalid entries                                                                                  // 146\n    if (!util.isString(path)) {                                                                                        // 147\n      throw new TypeError('Arguments to path.resolve must be strings');                                                // 148\n    } else if (!path) {                                                                                                // 149\n      continue;                                                                                                        // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    var result = win32StatPath(path),                                                                                  // 153\n        device = result.device,                                                                                        // 154\n        isUnc = result.isUnc,                                                                                          // 155\n        isAbsolute = result.isAbsolute,                                                                                // 156\n        tail = result.tail;                                                                                            // 157\n                                                                                                                       // 158\n    if (device &&                                                                                                      // 159\n        resolvedDevice &&                                                                                              // 160\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {                                                       // 161\n      // This path points to another device so it is not applicable                                                    // 162\n      continue;                                                                                                        // 163\n    }                                                                                                                  // 164\n                                                                                                                       // 165\n    if (!resolvedDevice) {                                                                                             // 166\n      resolvedDevice = device;                                                                                         // 167\n    }                                                                                                                  // 168\n    if (!resolvedAbsolute) {                                                                                           // 169\n      resolvedTail = tail + '\\\\' + resolvedTail;                                                                       // 170\n      resolvedAbsolute = isAbsolute;                                                                                   // 171\n    }                                                                                                                  // 172\n                                                                                                                       // 173\n    if (resolvedDevice && resolvedAbsolute) {                                                                          // 174\n      break;                                                                                                           // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n                                                                                                                       // 178\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC                                             // 179\n  // root. Also squash multiple slashes into a single one where appropriate.                                           // 180\n  if (isUnc) {                                                                                                         // 181\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);                                                                 // 182\n  }                                                                                                                    // 183\n                                                                                                                       // 184\n  // At this point the path should be resolved to a full absolute path,                                                // 185\n  // but handle relative paths to be safe (might happen when process.cwd()                                             // 186\n  // fails)                                                                                                            // 187\n                                                                                                                       // 188\n  // Normalize the tail path                                                                                           // 189\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),                                                         // 190\n                                !resolvedAbsolute).join('\\\\');                                                         // 191\n                                                                                                                       // 192\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||                                           // 193\n         '.';                                                                                                          // 194\n};                                                                                                                     // 195\n                                                                                                                       // 196\n                                                                                                                       // 197\nwin32.normalize = function(path) {                                                                                     // 198\n  var result = win32StatPath(path),                                                                                    // 199\n      device = result.device,                                                                                          // 200\n      isUnc = result.isUnc,                                                                                            // 201\n      isAbsolute = result.isAbsolute,                                                                                  // 202\n      tail = result.tail,                                                                                              // 203\n      trailingSlash = /[\\\\\\/]$/.test(tail);                                                                            // 204\n                                                                                                                       // 205\n  // Normalize the tail path                                                                                           // 206\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');                                                // 207\n                                                                                                                       // 208\n  if (!tail && !isAbsolute) {                                                                                          // 209\n    tail = '.';                                                                                                        // 210\n  }                                                                                                                    // 211\n  if (tail && trailingSlash) {                                                                                         // 212\n    tail += '\\\\';                                                                                                      // 213\n  }                                                                                                                    // 214\n                                                                                                                       // 215\n  // Convert slashes to backslashes when `device` points to an UNC root.                                               // 216\n  // Also squash multiple slashes into a single one where appropriate.                                                 // 217\n  if (isUnc) {                                                                                                         // 218\n    device = normalizeUNCRoot(device);                                                                                 // 219\n  }                                                                                                                    // 220\n                                                                                                                       // 221\n  return device + (isAbsolute ? '\\\\' : '') + tail;                                                                     // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\n                                                                                                                       // 225\nwin32.isAbsolute = function(path) {                                                                                    // 226\n  return win32StatPath(path).isAbsolute;                                                                               // 227\n};                                                                                                                     // 228\n                                                                                                                       // 229\nwin32.join = function() {                                                                                              // 230\n  var paths = [];                                                                                                      // 231\n  for (var i = 0; i < arguments.length; i++) {                                                                         // 232\n    var arg = arguments[i];                                                                                            // 233\n    if (!util.isString(arg)) {                                                                                         // 234\n      throw new TypeError('Arguments to path.join must be strings');                                                   // 235\n    }                                                                                                                  // 236\n    if (arg) {                                                                                                         // 237\n      paths.push(arg);                                                                                                 // 238\n    }                                                                                                                  // 239\n  }                                                                                                                    // 240\n                                                                                                                       // 241\n  var joined = paths.join('\\\\');                                                                                       // 242\n                                                                                                                       // 243\n  // Make sure that the joined path doesn't start with two slashes, because                                            // 244\n  // normalize() will mistake it for an UNC path then.                                                                 // 245\n  //                                                                                                                   // 246\n  // This step is skipped when it is very clear that the user actually                                                 // 247\n  // intended to point at an UNC path. This is assumed when the first                                                  // 248\n  // non-empty string arguments starts with exactly two slashes followed by                                            // 249\n  // at least one more non-slash character.                                                                            // 250\n  //                                                                                                                   // 251\n  // Note that for normalize() to treat a path as an UNC path it needs to                                              // 252\n  // have at least 2 components, so we don't filter for that here.                                                     // 253\n  // This means that the user can use join to construct UNC paths from                                                 // 254\n  // a server name and a share name; for example:                                                                      // 255\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')                                                         // 256\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {                                                                           // 257\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');                                                                      // 258\n  }                                                                                                                    // 259\n                                                                                                                       // 260\n  return win32.normalize(joined);                                                                                      // 261\n};                                                                                                                     // 262\n                                                                                                                       // 263\n                                                                                                                       // 264\n// path.relative(from, to)                                                                                             // 265\n// it will solve the relative path from 'from' to 'to', for instance:                                                  // 266\n// from = 'C:\\\\orandea\\\\test\\\\aaa'                                                                                     // 267\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'                                                                                       // 268\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'                                                           // 269\nwin32.relative = function(from, to) {                                                                                  // 270\n  from = win32.resolve(from);                                                                                          // 271\n  to = win32.resolve(to);                                                                                              // 272\n                                                                                                                       // 273\n  // windows is not case sensitive                                                                                     // 274\n  var lowerFrom = from.toLowerCase();                                                                                  // 275\n  var lowerTo = to.toLowerCase();                                                                                      // 276\n                                                                                                                       // 277\n  var toParts = trimArray(to.split('\\\\'));                                                                             // 278\n                                                                                                                       // 279\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));                                                               // 280\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));                                                                   // 281\n                                                                                                                       // 282\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);                                                   // 283\n  var samePartsLength = length;                                                                                        // 284\n  for (var i = 0; i < length; i++) {                                                                                   // 285\n    if (lowerFromParts[i] !== lowerToParts[i]) {                                                                       // 286\n      samePartsLength = i;                                                                                             // 287\n      break;                                                                                                           // 288\n    }                                                                                                                  // 289\n  }                                                                                                                    // 290\n                                                                                                                       // 291\n  if (samePartsLength == 0) {                                                                                          // 292\n    return to;                                                                                                         // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  var outputParts = [];                                                                                                // 296\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {                                                      // 297\n    outputParts.push('..');                                                                                            // 298\n  }                                                                                                                    // 299\n                                                                                                                       // 300\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));                                                    // 301\n                                                                                                                       // 302\n  return outputParts.join('\\\\');                                                                                       // 303\n};                                                                                                                     // 304\n                                                                                                                       // 305\n                                                                                                                       // 306\nwin32._makeLong = function(path) {                                                                                     // 307\n  // Note: this will *probably* throw somewhere.                                                                       // 308\n  if (!util.isString(path))                                                                                            // 309\n    return path;                                                                                                       // 310\n                                                                                                                       // 311\n  if (!path) {                                                                                                         // 312\n    return '';                                                                                                         // 313\n  }                                                                                                                    // 314\n                                                                                                                       // 315\n  var resolvedPath = win32.resolve(path);                                                                              // 316\n                                                                                                                       // 317\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {                                                                            // 318\n    // path is local filesystem path, which needs to be converted                                                      // 319\n    // to long UNC path.                                                                                               // 320\n    return '\\\\\\\\?\\\\' + resolvedPath;                                                                                   // 321\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {                                                                        // 322\n    // path is network UNC path, which needs to be converted                                                           // 323\n    // to long UNC path.                                                                                               // 324\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);                                                                 // 325\n  }                                                                                                                    // 326\n                                                                                                                       // 327\n  return path;                                                                                                         // 328\n};                                                                                                                     // 329\n                                                                                                                       // 330\n                                                                                                                       // 331\nwin32.dirname = function(path) {                                                                                       // 332\n  var result = win32SplitPath(path),                                                                                   // 333\n      root = result[0],                                                                                                // 334\n      dir = result[1];                                                                                                 // 335\n                                                                                                                       // 336\n  if (!root && !dir) {                                                                                                 // 337\n    // No dirname whatsoever                                                                                           // 338\n    return '.';                                                                                                        // 339\n  }                                                                                                                    // 340\n                                                                                                                       // 341\n  if (dir) {                                                                                                           // 342\n    // It has a dirname, strip trailing slash                                                                          // 343\n    dir = dir.substr(0, dir.length - 1);                                                                               // 344\n  }                                                                                                                    // 345\n                                                                                                                       // 346\n  return root + dir;                                                                                                   // 347\n};                                                                                                                     // 348\n                                                                                                                       // 349\n                                                                                                                       // 350\nwin32.basename = function(path, ext) {                                                                                 // 351\n  var f = win32SplitPath(path)[2];                                                                                     // 352\n  // TODO: make this comparison case-insensitive on windows?                                                           // 353\n  if (ext && f.substr(-1 * ext.length) === ext) {                                                                      // 354\n    f = f.substr(0, f.length - ext.length);                                                                            // 355\n  }                                                                                                                    // 356\n  return f;                                                                                                            // 357\n};                                                                                                                     // 358\n                                                                                                                       // 359\n                                                                                                                       // 360\nwin32.extname = function(path) {                                                                                       // 361\n  return win32SplitPath(path)[3];                                                                                      // 362\n};                                                                                                                     // 363\n                                                                                                                       // 364\n                                                                                                                       // 365\nwin32.format = function(pathObject) {                                                                                  // 366\n  if (!util.isObject(pathObject)) {                                                                                    // 367\n    throw new TypeError(                                                                                               // 368\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject                                           // 369\n    );                                                                                                                 // 370\n  }                                                                                                                    // 371\n                                                                                                                       // 372\n  var root = pathObject.root || '';                                                                                    // 373\n                                                                                                                       // 374\n  if (!util.isString(root)) {                                                                                          // 375\n    throw new TypeError(                                                                                               // 376\n        \"'pathObject.root' must be a string or undefined, not \" +                                                      // 377\n        typeof pathObject.root                                                                                         // 378\n    );                                                                                                                 // 379\n  }                                                                                                                    // 380\n                                                                                                                       // 381\n  var dir = pathObject.dir;                                                                                            // 382\n  var base = pathObject.base || '';                                                                                    // 383\n  if (!dir) {                                                                                                          // 384\n    return base;                                                                                                       // 385\n  }                                                                                                                    // 386\n  if (dir[dir.length - 1] === win32.sep) {                                                                             // 387\n    return dir + base;                                                                                                 // 388\n  }                                                                                                                    // 389\n  return dir + win32.sep + base;                                                                                       // 390\n};                                                                                                                     // 391\n                                                                                                                       // 392\n                                                                                                                       // 393\nwin32.parse = function(pathString) {                                                                                   // 394\n  if (!util.isString(pathString)) {                                                                                    // 395\n    throw new TypeError(                                                                                               // 396\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString                                            // 397\n    );                                                                                                                 // 398\n  }                                                                                                                    // 399\n  var allParts = win32SplitPath(pathString);                                                                           // 400\n  if (!allParts || allParts.length !== 4) {                                                                            // 401\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");                                                          // 402\n  }                                                                                                                    // 403\n  return {                                                                                                             // 404\n    root: allParts[0],                                                                                                 // 405\n    dir: allParts[0] + allParts[1].slice(0, -1),                                                                       // 406\n    base: allParts[2],                                                                                                 // 407\n    ext: allParts[3],                                                                                                  // 408\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)                                                // 409\n  };                                                                                                                   // 410\n};                                                                                                                     // 411\n                                                                                                                       // 412\n                                                                                                                       // 413\nwin32.sep = '\\\\';                                                                                                      // 414\nwin32.delimiter = ';';                                                                                                 // 415\n                                                                                                                       // 416\n                                                                                                                       // 417\n// Split a filename into [root, dir, basename, ext], unix version                                                      // 418\n// 'root' is just a slash, or nothing.                                                                                 // 419\nvar splitPathRe =                                                                                                      // 420\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;                                                   // 421\nvar posix = {};                                                                                                        // 422\n                                                                                                                       // 423\n                                                                                                                       // 424\nfunction posixSplitPath(filename) {                                                                                    // 425\n  return splitPathRe.exec(filename).slice(1);                                                                          // 426\n}                                                                                                                      // 427\n                                                                                                                       // 428\n                                                                                                                       // 429\n// path.resolve([from ...], to)                                                                                        // 430\n// posix version                                                                                                       // 431\nposix.resolve = function() {                                                                                           // 432\n  var resolvedPath = '',                                                                                               // 433\n      resolvedAbsolute = false;                                                                                        // 434\n                                                                                                                       // 435\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {                                              // 436\n    var path = (i >= 0) ? arguments[i] : process.cwd();                                                                // 437\n                                                                                                                       // 438\n    // Skip empty and invalid entries                                                                                  // 439\n    if (!util.isString(path)) {                                                                                        // 440\n      throw new TypeError('Arguments to path.resolve must be strings');                                                // 441\n    } else if (!path) {                                                                                                // 442\n      continue;                                                                                                        // 443\n    }                                                                                                                  // 444\n                                                                                                                       // 445\n    resolvedPath = path + '/' + resolvedPath;                                                                          // 446\n    resolvedAbsolute = path[0] === '/';                                                                                // 447\n  }                                                                                                                    // 448\n                                                                                                                       // 449\n  // At this point the path should be resolved to a full absolute path, but                                            // 450\n  // handle relative paths to be safe (might happen when process.cwd() fails)                                          // 451\n                                                                                                                       // 452\n  // Normalize the path                                                                                                // 453\n  resolvedPath = normalizeArray(resolvedPath.split('/'),                                                               // 454\n                                !resolvedAbsolute).join('/');                                                          // 455\n                                                                                                                       // 456\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';                                                        // 457\n};                                                                                                                     // 458\n                                                                                                                       // 459\n// path.normalize(path)                                                                                                // 460\n// posix version                                                                                                       // 461\nposix.normalize = function(path) {                                                                                     // 462\n  var isAbsolute = posix.isAbsolute(path),                                                                             // 463\n      trailingSlash = path && path[path.length - 1] === '/';                                                           // 464\n                                                                                                                       // 465\n  // Normalize the path                                                                                                // 466\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');                                                       // 467\n                                                                                                                       // 468\n  if (!path && !isAbsolute) {                                                                                          // 469\n    path = '.';                                                                                                        // 470\n  }                                                                                                                    // 471\n  if (path && trailingSlash) {                                                                                         // 472\n    path += '/';                                                                                                       // 473\n  }                                                                                                                    // 474\n                                                                                                                       // 475\n  return (isAbsolute ? '/' : '') + path;                                                                               // 476\n};                                                                                                                     // 477\n                                                                                                                       // 478\n// posix version                                                                                                       // 479\nposix.isAbsolute = function(path) {                                                                                    // 480\n  return path.charAt(0) === '/';                                                                                       // 481\n};                                                                                                                     // 482\n                                                                                                                       // 483\n// posix version                                                                                                       // 484\nposix.join = function() {                                                                                              // 485\n  var path = '';                                                                                                       // 486\n  for (var i = 0; i < arguments.length; i++) {                                                                         // 487\n    var segment = arguments[i];                                                                                        // 488\n    if (!util.isString(segment)) {                                                                                     // 489\n      throw new TypeError('Arguments to path.join must be strings');                                                   // 490\n    }                                                                                                                  // 491\n    if (segment) {                                                                                                     // 492\n      if (!path) {                                                                                                     // 493\n        path += segment;                                                                                               // 494\n      } else {                                                                                                         // 495\n        path += '/' + segment;                                                                                         // 496\n      }                                                                                                                // 497\n    }                                                                                                                  // 498\n  }                                                                                                                    // 499\n  return posix.normalize(path);                                                                                        // 500\n};                                                                                                                     // 501\n                                                                                                                       // 502\n                                                                                                                       // 503\n// path.relative(from, to)                                                                                             // 504\n// posix version                                                                                                       // 505\nposix.relative = function(from, to) {                                                                                  // 506\n  from = posix.resolve(from).substr(1);                                                                                // 507\n  to = posix.resolve(to).substr(1);                                                                                    // 508\n                                                                                                                       // 509\n  var fromParts = trimArray(from.split('/'));                                                                          // 510\n  var toParts = trimArray(to.split('/'));                                                                              // 511\n                                                                                                                       // 512\n  var length = Math.min(fromParts.length, toParts.length);                                                             // 513\n  var samePartsLength = length;                                                                                        // 514\n  for (var i = 0; i < length; i++) {                                                                                   // 515\n    if (fromParts[i] !== toParts[i]) {                                                                                 // 516\n      samePartsLength = i;                                                                                             // 517\n      break;                                                                                                           // 518\n    }                                                                                                                  // 519\n  }                                                                                                                    // 520\n                                                                                                                       // 521\n  var outputParts = [];                                                                                                // 522\n  for (var i = samePartsLength; i < fromParts.length; i++) {                                                           // 523\n    outputParts.push('..');                                                                                            // 524\n  }                                                                                                                    // 525\n                                                                                                                       // 526\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));                                                    // 527\n                                                                                                                       // 528\n  return outputParts.join('/');                                                                                        // 529\n};                                                                                                                     // 530\n                                                                                                                       // 531\n                                                                                                                       // 532\nposix._makeLong = function(path) {                                                                                     // 533\n  return path;                                                                                                         // 534\n};                                                                                                                     // 535\n                                                                                                                       // 536\n                                                                                                                       // 537\nposix.dirname = function(path) {                                                                                       // 538\n  var result = posixSplitPath(path),                                                                                   // 539\n      root = result[0],                                                                                                // 540\n      dir = result[1];                                                                                                 // 541\n                                                                                                                       // 542\n  if (!root && !dir) {                                                                                                 // 543\n    // No dirname whatsoever                                                                                           // 544\n    return '.';                                                                                                        // 545\n  }                                                                                                                    // 546\n                                                                                                                       // 547\n  if (dir) {                                                                                                           // 548\n    // It has a dirname, strip trailing slash                                                                          // 549\n    dir = dir.substr(0, dir.length - 1);                                                                               // 550\n  }                                                                                                                    // 551\n                                                                                                                       // 552\n  return root + dir;                                                                                                   // 553\n};                                                                                                                     // 554\n                                                                                                                       // 555\n                                                                                                                       // 556\nposix.basename = function(path, ext) {                                                                                 // 557\n  var f = posixSplitPath(path)[2];                                                                                     // 558\n  // TODO: make this comparison case-insensitive on windows?                                                           // 559\n  if (ext && f.substr(-1 * ext.length) === ext) {                                                                      // 560\n    f = f.substr(0, f.length - ext.length);                                                                            // 561\n  }                                                                                                                    // 562\n  return f;                                                                                                            // 563\n};                                                                                                                     // 564\n                                                                                                                       // 565\n                                                                                                                       // 566\nposix.extname = function(path) {                                                                                       // 567\n  return posixSplitPath(path)[3];                                                                                      // 568\n};                                                                                                                     // 569\n                                                                                                                       // 570\n                                                                                                                       // 571\nposix.format = function(pathObject) {                                                                                  // 572\n  if (!util.isObject(pathObject)) {                                                                                    // 573\n    throw new TypeError(                                                                                               // 574\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject                                           // 575\n    );                                                                                                                 // 576\n  }                                                                                                                    // 577\n                                                                                                                       // 578\n  var root = pathObject.root || '';                                                                                    // 579\n                                                                                                                       // 580\n  if (!util.isString(root)) {                                                                                          // 581\n    throw new TypeError(                                                                                               // 582\n        \"'pathObject.root' must be a string or undefined, not \" +                                                      // 583\n        typeof pathObject.root                                                                                         // 584\n    );                                                                                                                 // 585\n  }                                                                                                                    // 586\n                                                                                                                       // 587\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';                                                          // 588\n  var base = pathObject.base || '';                                                                                    // 589\n  return dir + base;                                                                                                   // 590\n};                                                                                                                     // 591\n                                                                                                                       // 592\n                                                                                                                       // 593\nposix.parse = function(pathString) {                                                                                   // 594\n  if (!util.isString(pathString)) {                                                                                    // 595\n    throw new TypeError(                                                                                               // 596\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString                                            // 597\n    );                                                                                                                 // 598\n  }                                                                                                                    // 599\n  var allParts = posixSplitPath(pathString);                                                                           // 600\n  if (!allParts || allParts.length !== 4) {                                                                            // 601\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");                                                          // 602\n  }                                                                                                                    // 603\n  allParts[1] = allParts[1] || '';                                                                                     // 604\n  allParts[2] = allParts[2] || '';                                                                                     // 605\n  allParts[3] = allParts[3] || '';                                                                                     // 606\n                                                                                                                       // 607\n  return {                                                                                                             // 608\n    root: allParts[0],                                                                                                 // 609\n    dir: allParts[0] + allParts[1].slice(0, -1),                                                                       // 610\n    base: allParts[2],                                                                                                 // 611\n    ext: allParts[3],                                                                                                  // 612\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)                                                // 613\n  };                                                                                                                   // 614\n};                                                                                                                     // 615\n                                                                                                                       // 616\n                                                                                                                       // 617\nposix.sep = '/';                                                                                                       // 618\nposix.delimiter = ':';                                                                                                 // 619\n                                                                                                                       // 620\n                                                                                                                       // 621\nif (isWindows)                                                                                                         // 622\n  module.exports = win32;                                                                                              // 623\nelse /* posix */                                                                                                       // 624\n  module.exports = posix;                                                                                              // 625\n                                                                                                                       // 626\nmodule.exports.posix = posix;                                                                                          // 627\nmodule.exports.win32 = win32;                                                                                          // 628\n                                                                                                                       // 629\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"util\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/util/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"util\";                                                                                                 // 1\nexports.version = \"0.10.3\";                                                                                            // 2\nexports.main = \"./util.js\";                                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"util.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/util/util.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nvar formatRegExp = /%[sdj%]/g;                                                                                         // 22\nexports.format = function(f) {                                                                                         // 23\n  if (!isString(f)) {                                                                                                  // 24\n    var objects = [];                                                                                                  // 25\n    for (var i = 0; i < arguments.length; i++) {                                                                       // 26\n      objects.push(inspect(arguments[i]));                                                                             // 27\n    }                                                                                                                  // 28\n    return objects.join(' ');                                                                                          // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  var i = 1;                                                                                                           // 32\n  var args = arguments;                                                                                                // 33\n  var len = args.length;                                                                                               // 34\n  var str = String(f).replace(formatRegExp, function(x) {                                                              // 35\n    if (x === '%%') return '%';                                                                                        // 36\n    if (i >= len) return x;                                                                                            // 37\n    switch (x) {                                                                                                       // 38\n      case '%s': return String(args[i++]);                                                                             // 39\n      case '%d': return Number(args[i++]);                                                                             // 40\n      case '%j':                                                                                                       // 41\n        try {                                                                                                          // 42\n          return JSON.stringify(args[i++]);                                                                            // 43\n        } catch (_) {                                                                                                  // 44\n          return '[Circular]';                                                                                         // 45\n        }                                                                                                              // 46\n      default:                                                                                                         // 47\n        return x;                                                                                                      // 48\n    }                                                                                                                  // 49\n  });                                                                                                                  // 50\n  for (var x = args[i]; i < len; x = args[++i]) {                                                                      // 51\n    if (isNull(x) || !isObject(x)) {                                                                                   // 52\n      str += ' ' + x;                                                                                                  // 53\n    } else {                                                                                                           // 54\n      str += ' ' + inspect(x);                                                                                         // 55\n    }                                                                                                                  // 56\n  }                                                                                                                    // 57\n  return str;                                                                                                          // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n                                                                                                                       // 61\n// Mark that a method should not be used.                                                                              // 62\n// Returns a modified function which warns once by default.                                                            // 63\n// If --no-deprecation is set, then it is a no-op.                                                                     // 64\nexports.deprecate = function(fn, msg) {                                                                                // 65\n  // Allow for deprecating things in the process of starting up.                                                       // 66\n  if (isUndefined(global.process)) {                                                                                   // 67\n    return function() {                                                                                                // 68\n      return exports.deprecate(fn, msg).apply(this, arguments);                                                        // 69\n    };                                                                                                                 // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (process.noDeprecation === true) {                                                                                // 73\n    return fn;                                                                                                         // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  var warned = false;                                                                                                  // 77\n  function deprecated() {                                                                                              // 78\n    if (!warned) {                                                                                                     // 79\n      if (process.throwDeprecation) {                                                                                  // 80\n        throw new Error(msg);                                                                                          // 81\n      } else if (process.traceDeprecation) {                                                                           // 82\n        console.trace(msg);                                                                                            // 83\n      } else {                                                                                                         // 84\n        console.error(msg);                                                                                            // 85\n      }                                                                                                                // 86\n      warned = true;                                                                                                   // 87\n    }                                                                                                                  // 88\n    return fn.apply(this, arguments);                                                                                  // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n  return deprecated;                                                                                                   // 92\n};                                                                                                                     // 93\n                                                                                                                       // 94\n                                                                                                                       // 95\nvar debugs = {};                                                                                                       // 96\nvar debugEnviron;                                                                                                      // 97\nexports.debuglog = function(set) {                                                                                     // 98\n  if (isUndefined(debugEnviron))                                                                                       // 99\n    debugEnviron = process.env.NODE_DEBUG || '';                                                                       // 100\n  set = set.toUpperCase();                                                                                             // 101\n  if (!debugs[set]) {                                                                                                  // 102\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {                                                     // 103\n      var pid = process.pid;                                                                                           // 104\n      debugs[set] = function() {                                                                                       // 105\n        var msg = exports.format.apply(exports, arguments);                                                            // 106\n        console.error('%s %d: %s', set, pid, msg);                                                                     // 107\n      };                                                                                                               // 108\n    } else {                                                                                                           // 109\n      debugs[set] = function() {};                                                                                     // 110\n    }                                                                                                                  // 111\n  }                                                                                                                    // 112\n  return debugs[set];                                                                                                  // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * Echos the value of a value. Trys to print the value out                                                             // 118\n * in the best way possible given the different types.                                                                 // 119\n *                                                                                                                     // 120\n * @param {Object} obj The object to print out.                                                                        // 121\n * @param {Object} opts Optional options object that alters the output.                                                // 122\n */                                                                                                                    // 123\n/* legacy: obj, showHidden, depth, colors*/                                                                            // 124\nfunction inspect(obj, opts) {                                                                                          // 125\n  // default options                                                                                                   // 126\n  var ctx = {                                                                                                          // 127\n    seen: [],                                                                                                          // 128\n    stylize: stylizeNoColor                                                                                            // 129\n  };                                                                                                                   // 130\n  // legacy...                                                                                                         // 131\n  if (arguments.length >= 3) ctx.depth = arguments[2];                                                                 // 132\n  if (arguments.length >= 4) ctx.colors = arguments[3];                                                                // 133\n  if (isBoolean(opts)) {                                                                                               // 134\n    // legacy...                                                                                                       // 135\n    ctx.showHidden = opts;                                                                                             // 136\n  } else if (opts) {                                                                                                   // 137\n    // got an \"options\" object                                                                                         // 138\n    exports._extend(ctx, opts);                                                                                        // 139\n  }                                                                                                                    // 140\n  // set default options                                                                                               // 141\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;                                                             // 142\n  if (isUndefined(ctx.depth)) ctx.depth = 2;                                                                           // 143\n  if (isUndefined(ctx.colors)) ctx.colors = false;                                                                     // 144\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;                                                        // 145\n  if (ctx.colors) ctx.stylize = stylizeWithColor;                                                                      // 146\n  return formatValue(ctx, obj, ctx.depth);                                                                             // 147\n}                                                                                                                      // 148\nexports.inspect = inspect;                                                                                             // 149\n                                                                                                                       // 150\n                                                                                                                       // 151\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics                                                              // 152\ninspect.colors = {                                                                                                     // 153\n  'bold' : [1, 22],                                                                                                    // 154\n  'italic' : [3, 23],                                                                                                  // 155\n  'underline' : [4, 24],                                                                                               // 156\n  'inverse' : [7, 27],                                                                                                 // 157\n  'white' : [37, 39],                                                                                                  // 158\n  'grey' : [90, 39],                                                                                                   // 159\n  'black' : [30, 39],                                                                                                  // 160\n  'blue' : [34, 39],                                                                                                   // 161\n  'cyan' : [36, 39],                                                                                                   // 162\n  'green' : [32, 39],                                                                                                  // 163\n  'magenta' : [35, 39],                                                                                                // 164\n  'red' : [31, 39],                                                                                                    // 165\n  'yellow' : [33, 39]                                                                                                  // 166\n};                                                                                                                     // 167\n                                                                                                                       // 168\n// Don't use 'blue' not visible on cmd.exe                                                                             // 169\ninspect.styles = {                                                                                                     // 170\n  'special': 'cyan',                                                                                                   // 171\n  'number': 'yellow',                                                                                                  // 172\n  'boolean': 'yellow',                                                                                                 // 173\n  'undefined': 'grey',                                                                                                 // 174\n  'null': 'bold',                                                                                                      // 175\n  'string': 'green',                                                                                                   // 176\n  'date': 'magenta',                                                                                                   // 177\n  // \"name\": intentionally not styling                                                                                 // 178\n  'regexp': 'red'                                                                                                      // 179\n};                                                                                                                     // 180\n                                                                                                                       // 181\n                                                                                                                       // 182\nfunction stylizeWithColor(str, styleType) {                                                                            // 183\n  var style = inspect.styles[styleType];                                                                               // 184\n                                                                                                                       // 185\n  if (style) {                                                                                                         // 186\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +                                                          // 187\n           '\\u001b[' + inspect.colors[style][1] + 'm';                                                                 // 188\n  } else {                                                                                                             // 189\n    return str;                                                                                                        // 190\n  }                                                                                                                    // 191\n}                                                                                                                      // 192\n                                                                                                                       // 193\n                                                                                                                       // 194\nfunction stylizeNoColor(str, styleType) {                                                                              // 195\n  return str;                                                                                                          // 196\n}                                                                                                                      // 197\n                                                                                                                       // 198\n                                                                                                                       // 199\nfunction arrayToHash(array) {                                                                                          // 200\n  var hash = {};                                                                                                       // 201\n                                                                                                                       // 202\n  array.forEach(function(val, idx) {                                                                                   // 203\n    hash[val] = true;                                                                                                  // 204\n  });                                                                                                                  // 205\n                                                                                                                       // 206\n  return hash;                                                                                                         // 207\n}                                                                                                                      // 208\n                                                                                                                       // 209\n                                                                                                                       // 210\nfunction formatValue(ctx, value, recurseTimes) {                                                                       // 211\n  // Provide a hook for user-specified inspect functions.                                                              // 212\n  // Check that value is an object with an inspect function on it                                                      // 213\n  if (ctx.customInspect &&                                                                                             // 214\n      value &&                                                                                                         // 215\n      isFunction(value.inspect) &&                                                                                     // 216\n      // Filter out the util module, it's inspect function is special                                                  // 217\n      value.inspect !== exports.inspect &&                                                                             // 218\n      // Also filter out any prototype objects using the circular check.                                               // 219\n      !(value.constructor && value.constructor.prototype === value)) {                                                 // 220\n    var ret = value.inspect(recurseTimes, ctx);                                                                        // 221\n    if (!isString(ret)) {                                                                                              // 222\n      ret = formatValue(ctx, ret, recurseTimes);                                                                       // 223\n    }                                                                                                                  // 224\n    return ret;                                                                                                        // 225\n  }                                                                                                                    // 226\n                                                                                                                       // 227\n  // Primitive types cannot have properties                                                                            // 228\n  var primitive = formatPrimitive(ctx, value);                                                                         // 229\n  if (primitive) {                                                                                                     // 230\n    return primitive;                                                                                                  // 231\n  }                                                                                                                    // 232\n                                                                                                                       // 233\n  // Look up the keys of the object.                                                                                   // 234\n  var keys = Object.keys(value);                                                                                       // 235\n  var visibleKeys = arrayToHash(keys);                                                                                 // 236\n                                                                                                                       // 237\n  if (ctx.showHidden) {                                                                                                // 238\n    keys = Object.getOwnPropertyNames(value);                                                                          // 239\n  }                                                                                                                    // 240\n                                                                                                                       // 241\n  // IE doesn't make error fields non-enumerable                                                                       // 242\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx                                                 // 243\n  if (isError(value)                                                                                                   // 244\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {                                         // 245\n    return formatError(value);                                                                                         // 246\n  }                                                                                                                    // 247\n                                                                                                                       // 248\n  // Some type of object without properties can be shortcutted.                                                        // 249\n  if (keys.length === 0) {                                                                                             // 250\n    if (isFunction(value)) {                                                                                           // 251\n      var name = value.name ? ': ' + value.name : '';                                                                  // 252\n      return ctx.stylize('[Function' + name + ']', 'special');                                                         // 253\n    }                                                                                                                  // 254\n    if (isRegExp(value)) {                                                                                             // 255\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 256\n    }                                                                                                                  // 257\n    if (isDate(value)) {                                                                                               // 258\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');                                                 // 259\n    }                                                                                                                  // 260\n    if (isError(value)) {                                                                                              // 261\n      return formatError(value);                                                                                       // 262\n    }                                                                                                                  // 263\n  }                                                                                                                    // 264\n                                                                                                                       // 265\n  var base = '', array = false, braces = ['{', '}'];                                                                   // 266\n                                                                                                                       // 267\n  // Make Array say that they are Array                                                                                // 268\n  if (isArray(value)) {                                                                                                // 269\n    array = true;                                                                                                      // 270\n    braces = ['[', ']'];                                                                                               // 271\n  }                                                                                                                    // 272\n                                                                                                                       // 273\n  // Make functions say that they are functions                                                                        // 274\n  if (isFunction(value)) {                                                                                             // 275\n    var n = value.name ? ': ' + value.name : '';                                                                       // 276\n    base = ' [Function' + n + ']';                                                                                     // 277\n  }                                                                                                                    // 278\n                                                                                                                       // 279\n  // Make RegExps say that they are RegExps                                                                            // 280\n  if (isRegExp(value)) {                                                                                               // 281\n    base = ' ' + RegExp.prototype.toString.call(value);                                                                // 282\n  }                                                                                                                    // 283\n                                                                                                                       // 284\n  // Make dates with properties first say the date                                                                     // 285\n  if (isDate(value)) {                                                                                                 // 286\n    base = ' ' + Date.prototype.toUTCString.call(value);                                                               // 287\n  }                                                                                                                    // 288\n                                                                                                                       // 289\n  // Make error with message first say the error                                                                       // 290\n  if (isError(value)) {                                                                                                // 291\n    base = ' ' + formatError(value);                                                                                   // 292\n  }                                                                                                                    // 293\n                                                                                                                       // 294\n  if (keys.length === 0 && (!array || value.length == 0)) {                                                            // 295\n    return braces[0] + base + braces[1];                                                                               // 296\n  }                                                                                                                    // 297\n                                                                                                                       // 298\n  if (recurseTimes < 0) {                                                                                              // 299\n    if (isRegExp(value)) {                                                                                             // 300\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 301\n    } else {                                                                                                           // 302\n      return ctx.stylize('[Object]', 'special');                                                                       // 303\n    }                                                                                                                  // 304\n  }                                                                                                                    // 305\n                                                                                                                       // 306\n  ctx.seen.push(value);                                                                                                // 307\n                                                                                                                       // 308\n  var output;                                                                                                          // 309\n  if (array) {                                                                                                         // 310\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                                 // 311\n  } else {                                                                                                             // 312\n    output = keys.map(function(key) {                                                                                  // 313\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                        // 314\n    });                                                                                                                // 315\n  }                                                                                                                    // 316\n                                                                                                                       // 317\n  ctx.seen.pop();                                                                                                      // 318\n                                                                                                                       // 319\n  return reduceToSingleString(output, base, braces);                                                                   // 320\n}                                                                                                                      // 321\n                                                                                                                       // 322\n                                                                                                                       // 323\nfunction formatPrimitive(ctx, value) {                                                                                 // 324\n  if (isUndefined(value))                                                                                              // 325\n    return ctx.stylize('undefined', 'undefined');                                                                      // 326\n  if (isString(value)) {                                                                                               // 327\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')                                                    // 328\n                                             .replace(/'/g, \"\\\\'\")                                                     // 329\n                                             .replace(/\\\\\"/g, '\"') + '\\'';                                             // 330\n    return ctx.stylize(simple, 'string');                                                                              // 331\n  }                                                                                                                    // 332\n  if (isNumber(value))                                                                                                 // 333\n    return ctx.stylize('' + value, 'number');                                                                          // 334\n  if (isBoolean(value))                                                                                                // 335\n    return ctx.stylize('' + value, 'boolean');                                                                         // 336\n  // For some reason typeof null is \"object\", so special case here.                                                    // 337\n  if (isNull(value))                                                                                                   // 338\n    return ctx.stylize('null', 'null');                                                                                // 339\n}                                                                                                                      // 340\n                                                                                                                       // 341\n                                                                                                                       // 342\nfunction formatError(value) {                                                                                          // 343\n  return '[' + Error.prototype.toString.call(value) + ']';                                                             // 344\n}                                                                                                                      // 345\n                                                                                                                       // 346\n                                                                                                                       // 347\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                                    // 348\n  var output = [];                                                                                                     // 349\n  for (var i = 0, l = value.length; i < l; ++i) {                                                                      // 350\n    if (hasOwnProperty(value, String(i))) {                                                                            // 351\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 352\n          String(i), true));                                                                                           // 353\n    } else {                                                                                                           // 354\n      output.push('');                                                                                                 // 355\n    }                                                                                                                  // 356\n  }                                                                                                                    // 357\n  keys.forEach(function(key) {                                                                                         // 358\n    if (!key.match(/^\\d+$/)) {                                                                                         // 359\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 360\n          key, true));                                                                                                 // 361\n    }                                                                                                                  // 362\n  });                                                                                                                  // 363\n  return output;                                                                                                       // 364\n}                                                                                                                      // 365\n                                                                                                                       // 366\n                                                                                                                       // 367\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                           // 368\n  var name, str, desc;                                                                                                 // 369\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };                                         // 370\n  if (desc.get) {                                                                                                      // 371\n    if (desc.set) {                                                                                                    // 372\n      str = ctx.stylize('[Getter/Setter]', 'special');                                                                 // 373\n    } else {                                                                                                           // 374\n      str = ctx.stylize('[Getter]', 'special');                                                                        // 375\n    }                                                                                                                  // 376\n  } else {                                                                                                             // 377\n    if (desc.set) {                                                                                                    // 378\n      str = ctx.stylize('[Setter]', 'special');                                                                        // 379\n    }                                                                                                                  // 380\n  }                                                                                                                    // 381\n  if (!hasOwnProperty(visibleKeys, key)) {                                                                             // 382\n    name = '[' + key + ']';                                                                                            // 383\n  }                                                                                                                    // 384\n  if (!str) {                                                                                                          // 385\n    if (ctx.seen.indexOf(desc.value) < 0) {                                                                            // 386\n      if (isNull(recurseTimes)) {                                                                                      // 387\n        str = formatValue(ctx, desc.value, null);                                                                      // 388\n      } else {                                                                                                         // 389\n        str = formatValue(ctx, desc.value, recurseTimes - 1);                                                          // 390\n      }                                                                                                                // 391\n      if (str.indexOf('\\n') > -1) {                                                                                    // 392\n        if (array) {                                                                                                   // 393\n          str = str.split('\\n').map(function(line) {                                                                   // 394\n            return '  ' + line;                                                                                        // 395\n          }).join('\\n').substr(2);                                                                                     // 396\n        } else {                                                                                                       // 397\n          str = '\\n' + str.split('\\n').map(function(line) {                                                            // 398\n            return '   ' + line;                                                                                       // 399\n          }).join('\\n');                                                                                               // 400\n        }                                                                                                              // 401\n      }                                                                                                                // 402\n    } else {                                                                                                           // 403\n      str = ctx.stylize('[Circular]', 'special');                                                                      // 404\n    }                                                                                                                  // 405\n  }                                                                                                                    // 406\n  if (isUndefined(name)) {                                                                                             // 407\n    if (array && key.match(/^\\d+$/)) {                                                                                 // 408\n      return str;                                                                                                      // 409\n    }                                                                                                                  // 410\n    name = JSON.stringify('' + key);                                                                                   // 411\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {                                                                  // 412\n      name = name.substr(1, name.length - 2);                                                                          // 413\n      name = ctx.stylize(name, 'name');                                                                                // 414\n    } else {                                                                                                           // 415\n      name = name.replace(/'/g, \"\\\\'\")                                                                                 // 416\n                 .replace(/\\\\\"/g, '\"')                                                                                 // 417\n                 .replace(/(^\"|\"$)/g, \"'\");                                                                            // 418\n      name = ctx.stylize(name, 'string');                                                                              // 419\n    }                                                                                                                  // 420\n  }                                                                                                                    // 421\n                                                                                                                       // 422\n  return name + ': ' + str;                                                                                            // 423\n}                                                                                                                      // 424\n                                                                                                                       // 425\n                                                                                                                       // 426\nfunction reduceToSingleString(output, base, braces) {                                                                  // 427\n  var numLinesEst = 0;                                                                                                 // 428\n  var length = output.reduce(function(prev, cur) {                                                                     // 429\n    numLinesEst++;                                                                                                     // 430\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;                                                                         // 431\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;                                                       // 432\n  }, 0);                                                                                                               // 433\n                                                                                                                       // 434\n  if (length > 60) {                                                                                                   // 435\n    return braces[0] +                                                                                                 // 436\n           (base === '' ? '' : base + '\\n ') +                                                                         // 437\n           ' ' +                                                                                                       // 438\n           output.join(',\\n  ') +                                                                                      // 439\n           ' ' +                                                                                                       // 440\n           braces[1];                                                                                                  // 441\n  }                                                                                                                    // 442\n                                                                                                                       // 443\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                                 // 444\n}                                                                                                                      // 445\n                                                                                                                       // 446\n                                                                                                                       // 447\n// NOTE: These type checking functions intentionally don't use `instanceof`                                            // 448\n// because it is fragile and can be easily faked with `Object.create()`.                                               // 449\nfunction isArray(ar) {                                                                                                 // 450\n  return Array.isArray(ar);                                                                                            // 451\n}                                                                                                                      // 452\nexports.isArray = isArray;                                                                                             // 453\n                                                                                                                       // 454\nfunction isBoolean(arg) {                                                                                              // 455\n  return typeof arg === 'boolean';                                                                                     // 456\n}                                                                                                                      // 457\nexports.isBoolean = isBoolean;                                                                                         // 458\n                                                                                                                       // 459\nfunction isNull(arg) {                                                                                                 // 460\n  return arg === null;                                                                                                 // 461\n}                                                                                                                      // 462\nexports.isNull = isNull;                                                                                               // 463\n                                                                                                                       // 464\nfunction isNullOrUndefined(arg) {                                                                                      // 465\n  return arg == null;                                                                                                  // 466\n}                                                                                                                      // 467\nexports.isNullOrUndefined = isNullOrUndefined;                                                                         // 468\n                                                                                                                       // 469\nfunction isNumber(arg) {                                                                                               // 470\n  return typeof arg === 'number';                                                                                      // 471\n}                                                                                                                      // 472\nexports.isNumber = isNumber;                                                                                           // 473\n                                                                                                                       // 474\nfunction isString(arg) {                                                                                               // 475\n  return typeof arg === 'string';                                                                                      // 476\n}                                                                                                                      // 477\nexports.isString = isString;                                                                                           // 478\n                                                                                                                       // 479\nfunction isSymbol(arg) {                                                                                               // 480\n  return typeof arg === 'symbol';                                                                                      // 481\n}                                                                                                                      // 482\nexports.isSymbol = isSymbol;                                                                                           // 483\n                                                                                                                       // 484\nfunction isUndefined(arg) {                                                                                            // 485\n  return arg === void 0;                                                                                               // 486\n}                                                                                                                      // 487\nexports.isUndefined = isUndefined;                                                                                     // 488\n                                                                                                                       // 489\nfunction isRegExp(re) {                                                                                                // 490\n  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 491\n}                                                                                                                      // 492\nexports.isRegExp = isRegExp;                                                                                           // 493\n                                                                                                                       // 494\nfunction isObject(arg) {                                                                                               // 495\n  return typeof arg === 'object' && arg !== null;                                                                      // 496\n}                                                                                                                      // 497\nexports.isObject = isObject;                                                                                           // 498\n                                                                                                                       // 499\nfunction isDate(d) {                                                                                                   // 500\n  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 501\n}                                                                                                                      // 502\nexports.isDate = isDate;                                                                                               // 503\n                                                                                                                       // 504\nfunction isError(e) {                                                                                                  // 505\n  return isObject(e) &&                                                                                                // 506\n      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 507\n}                                                                                                                      // 508\nexports.isError = isError;                                                                                             // 509\n                                                                                                                       // 510\nfunction isFunction(arg) {                                                                                             // 511\n  return typeof arg === 'function';                                                                                    // 512\n}                                                                                                                      // 513\nexports.isFunction = isFunction;                                                                                       // 514\n                                                                                                                       // 515\nfunction isPrimitive(arg) {                                                                                            // 516\n  return arg === null ||                                                                                               // 517\n         typeof arg === 'boolean' ||                                                                                   // 518\n         typeof arg === 'number' ||                                                                                    // 519\n         typeof arg === 'string' ||                                                                                    // 520\n         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 521\n         typeof arg === 'undefined';                                                                                   // 522\n}                                                                                                                      // 523\nexports.isPrimitive = isPrimitive;                                                                                     // 524\n                                                                                                                       // 525\nexports.isBuffer = require('./support/isBuffer');                                                                      // 526\n                                                                                                                       // 527\nfunction objectToString(o) {                                                                                           // 528\n  return Object.prototype.toString.call(o);                                                                            // 529\n}                                                                                                                      // 530\n                                                                                                                       // 531\n                                                                                                                       // 532\nfunction pad(n) {                                                                                                      // 533\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);                                                               // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\n                                                                                                                       // 537\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',                                           // 538\n              'Oct', 'Nov', 'Dec'];                                                                                    // 539\n                                                                                                                       // 540\n// 26 Feb 16:19:34                                                                                                     // 541\nfunction timestamp() {                                                                                                 // 542\n  var d = new Date();                                                                                                  // 543\n  var time = [pad(d.getHours()),                                                                                       // 544\n              pad(d.getMinutes()),                                                                                     // 545\n              pad(d.getSeconds())].join(':');                                                                          // 546\n  return [d.getDate(), months[d.getMonth()], time].join(' ');                                                          // 547\n}                                                                                                                      // 548\n                                                                                                                       // 549\n                                                                                                                       // 550\n// log is just a thin wrapper to console.log that prepends a timestamp                                                 // 551\nexports.log = function() {                                                                                             // 552\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));                                       // 553\n};                                                                                                                     // 554\n                                                                                                                       // 555\n                                                                                                                       // 556\n/**                                                                                                                    // 557\n * Inherit the prototype methods from one constructor into another.                                                    // 558\n *                                                                                                                     // 559\n * The Function.prototype.inherits from lang.js rewritten as a standalone                                              // 560\n * function (not on Function.prototype). NOTE: If this file is to be loaded                                            // 561\n * during bootstrapping this function needs to be rewritten using some native                                          // 562\n * functions as prototype setup using normal JavaScript does not work as                                               // 563\n * expected during bootstrapping (see mirror.js in r114903).                                                           // 564\n *                                                                                                                     // 565\n * @param {function} ctor Constructor function which needs to inherit the                                              // 566\n *     prototype.                                                                                                      // 567\n * @param {function} superCtor Constructor function to inherit prototype from.                                         // 568\n */                                                                                                                    // 569\nexports.inherits = require('inherits');                                                                                // 570\n                                                                                                                       // 571\nexports._extend = function(origin, add) {                                                                              // 572\n  // Don't do anything if add isn't an object                                                                          // 573\n  if (!add || !isObject(add)) return origin;                                                                           // 574\n                                                                                                                       // 575\n  var keys = Object.keys(add);                                                                                         // 576\n  var i = keys.length;                                                                                                 // 577\n  while (i--) {                                                                                                        // 578\n    origin[keys[i]] = add[keys[i]];                                                                                    // 579\n  }                                                                                                                    // 580\n  return origin;                                                                                                       // 581\n};                                                                                                                     // 582\n                                                                                                                       // 583\nfunction hasOwnProperty(obj, prop) {                                                                                   // 584\n  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 585\n}                                                                                                                      // 586\n                                                                                                                       // 587\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"support\":{\"isBuffer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/util/support/isBuffer.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function isBuffer(arg) {                                                                              // 1\n  return arg instanceof Buffer;                                                                                        // 2\n}                                                                                                                      // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"inherits\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/inherits/package.json                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"inherits\";                                                                                             // 1\nexports.version = \"2.0.1\";                                                                                             // 2\nexports.browser = \"./inherits_browser.js\";                                                                             // 3\nexports.main = \"./inherits.js\";                                                                                        // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"inherits_browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/inherits/inherits_browser.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (typeof Object.create === 'function') {                                                                             // 1\n  // implementation from standard node.js 'util' module                                                                // 2\n  module.exports = function inherits(ctor, superCtor) {                                                                // 3\n    ctor.super_ = superCtor                                                                                            // 4\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 5\n      constructor: {                                                                                                   // 6\n        value: ctor,                                                                                                   // 7\n        enumerable: false,                                                                                             // 8\n        writable: true,                                                                                                // 9\n        configurable: true                                                                                             // 10\n      }                                                                                                                // 11\n    });                                                                                                                // 12\n  };                                                                                                                   // 13\n} else {                                                                                                               // 14\n  // old school shim for old browsers                                                                                  // 15\n  module.exports = function inherits(ctor, superCtor) {                                                                // 16\n    ctor.super_ = superCtor                                                                                            // 17\n    var TempCtor = function () {}                                                                                      // 18\n    TempCtor.prototype = superCtor.prototype                                                                           // 19\n    ctor.prototype = new TempCtor()                                                                                    // 20\n    ctor.prototype.constructor = ctor                                                                                  // 21\n  }                                                                                                                    // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"glob\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/glob/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"glob\";                                                                                                 // 1\nexports.version = \"3.2.3\";                                                                                             // 2\nexports.main = \"glob.js\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"glob.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/glob/glob.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Approach:                                                                                                           // 1\n//                                                                                                                     // 2\n// 1. Get the minimatch set                                                                                            // 3\n// 2. For each pattern in the set, PROCESS(pattern)                                                                    // 4\n// 3. Store matches per-set, then uniq them                                                                            // 5\n//                                                                                                                     // 6\n// PROCESS(pattern)                                                                                                    // 7\n// Get the first [n] items from pattern that are all strings                                                           // 8\n// Join these together.  This is PREFIX.                                                                               // 9\n//   If there is no more remaining, then stat(PREFIX) and                                                              // 10\n//   add to matches if it succeeds.  END.                                                                              // 11\n// readdir(PREFIX) as ENTRIES                                                                                          // 12\n//   If fails, END                                                                                                     // 13\n//   If pattern[n] is GLOBSTAR                                                                                         // 14\n//     // handle the case where the globstar match is empty                                                            // 15\n//     // by pruning it out, and testing the resulting pattern                                                         // 16\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $])                                                                      // 17\n//     // handle other cases.                                                                                          // 18\n//     for ENTRY in ENTRIES (not dotfiles)                                                                             // 19\n//       // attach globstar + tail onto the entry                                                                      // 20\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])                                                              // 21\n//                                                                                                                     // 22\n//   else // not globstar                                                                                              // 23\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)                                                   // 24\n//       Test ENTRY against pattern[n]                                                                                 // 25\n//       If fails, continue                                                                                            // 26\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])                                                  // 27\n//                                                                                                                     // 28\n// Caveat:                                                                                                             // 29\n//   Cache all stats and readdirs results to minimize syscall.  Since all                                              // 30\n//   we ever care about is existence and directory-ness, we can just keep                                              // 31\n//   `true` for files, and [children,...] for directories, or `false` for                                              // 32\n//   things that don't exist.                                                                                          // 33\n                                                                                                                       // 34\n                                                                                                                       // 35\n                                                                                                                       // 36\nmodule.exports = glob                                                                                                  // 37\n                                                                                                                       // 38\nvar fs = require(\"graceful-fs\")                                                                                        // 39\n, minimatch = require(\"minimatch\")                                                                                     // 40\n, Minimatch = minimatch.Minimatch                                                                                      // 41\n, inherits = require(\"inherits\")                                                                                       // 42\n, EE = require(\"events\").EventEmitter                                                                                  // 43\n, path = require(\"path\")                                                                                               // 44\n, isDir = {}                                                                                                           // 45\n, assert = require(\"assert\").ok                                                                                        // 46\n                                                                                                                       // 47\nfunction glob (pattern, options, cb) {                                                                                 // 48\n  if (typeof options === \"function\") cb = options, options = {}                                                        // 49\n  if (!options) options = {}                                                                                           // 50\n                                                                                                                       // 51\n  if (typeof options === \"number\") {                                                                                   // 52\n    deprecated()                                                                                                       // 53\n    return                                                                                                             // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  var g = new Glob(pattern, options, cb)                                                                               // 57\n  return g.sync ? g.found : g                                                                                          // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nglob.fnmatch = deprecated                                                                                              // 61\n                                                                                                                       // 62\nfunction deprecated () {                                                                                               // 63\n  throw new Error(\"glob's interface has changed. Please see the docs.\")                                                // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nglob.sync = globSync                                                                                                   // 67\nfunction globSync (pattern, options) {                                                                                 // 68\n  if (typeof options === \"number\") {                                                                                   // 69\n    deprecated()                                                                                                       // 70\n    return                                                                                                             // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  options = options || {}                                                                                              // 74\n  options.sync = true                                                                                                  // 75\n  return glob(pattern, options)                                                                                        // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\n                                                                                                                       // 79\nglob.Glob = Glob                                                                                                       // 80\ninherits(Glob, EE)                                                                                                     // 81\nfunction Glob (pattern, options, cb) {                                                                                 // 82\n  if (!(this instanceof Glob)) {                                                                                       // 83\n    return new Glob(pattern, options, cb)                                                                              // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  if (typeof cb === \"function\") {                                                                                      // 87\n    this.on(\"error\", cb)                                                                                               // 88\n    this.on(\"end\", function (matches) {                                                                                // 89\n      cb(null, matches)                                                                                                // 90\n    })                                                                                                                 // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  options = options || {}                                                                                              // 94\n                                                                                                                       // 95\n  this.EOF = {}                                                                                                        // 96\n  this._emitQueue = []                                                                                                 // 97\n                                                                                                                       // 98\n  this.maxDepth = options.maxDepth || 1000                                                                             // 99\n  this.maxLength = options.maxLength || Infinity                                                                       // 100\n  this.cache = options.cache || {}                                                                                     // 101\n  this.statCache = options.statCache || {}                                                                             // 102\n                                                                                                                       // 103\n  this.changedCwd = false                                                                                              // 104\n  var cwd = process.cwd()                                                                                              // 105\n  if (!options.hasOwnProperty(\"cwd\")) this.cwd = cwd                                                                   // 106\n  else {                                                                                                               // 107\n    this.cwd = options.cwd                                                                                             // 108\n    this.changedCwd = path.resolve(options.cwd) !== cwd                                                                // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  this.root = options.root || path.resolve(this.cwd, \"/\")                                                              // 112\n  this.root = path.resolve(this.root)                                                                                  // 113\n  if (process.platform === \"win32\")                                                                                    // 114\n    this.root = this.root.replace(/\\\\/g, \"/\")                                                                          // 115\n                                                                                                                       // 116\n  this.nomount = !!options.nomount                                                                                     // 117\n                                                                                                                       // 118\n  if (!pattern) {                                                                                                      // 119\n    throw new Error(\"must provide pattern\")                                                                            // 120\n  }                                                                                                                    // 121\n                                                                                                                       // 122\n  // base-matching: just use globstar for that.                                                                        // 123\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {                                                              // 124\n    if (options.noglobstar) {                                                                                          // 125\n      throw new Error(\"base matching requires globstar\")                                                               // 126\n    }                                                                                                                  // 127\n    pattern = \"**/\" + pattern                                                                                          // 128\n  }                                                                                                                    // 129\n                                                                                                                       // 130\n  this.strict = options.strict !== false                                                                               // 131\n  this.dot = !!options.dot                                                                                             // 132\n  this.mark = !!options.mark                                                                                           // 133\n  this.sync = !!options.sync                                                                                           // 134\n  this.nounique = !!options.nounique                                                                                   // 135\n  this.nonull = !!options.nonull                                                                                       // 136\n  this.nosort = !!options.nosort                                                                                       // 137\n  this.nocase = !!options.nocase                                                                                       // 138\n  this.stat = !!options.stat                                                                                           // 139\n                                                                                                                       // 140\n  this.debug = !!options.debug || !!options.globDebug                                                                  // 141\n  if (this.debug)                                                                                                      // 142\n    this.log = console.error                                                                                           // 143\n                                                                                                                       // 144\n  this.silent = !!options.silent                                                                                       // 145\n                                                                                                                       // 146\n  var mm = this.minimatch = new Minimatch(pattern, options)                                                            // 147\n  this.options = mm.options                                                                                            // 148\n  pattern = this.pattern = mm.pattern                                                                                  // 149\n                                                                                                                       // 150\n  this.error = null                                                                                                    // 151\n  this.aborted = false                                                                                                 // 152\n                                                                                                                       // 153\n  // list of all the patterns that ** has resolved do, so                                                              // 154\n  // we can avoid visiting multiple times.                                                                             // 155\n  this._globstars = {}                                                                                                 // 156\n                                                                                                                       // 157\n  EE.call(this)                                                                                                        // 158\n                                                                                                                       // 159\n  // process each pattern in the minimatch set                                                                         // 160\n  var n = this.minimatch.set.length                                                                                    // 161\n                                                                                                                       // 162\n  // The matches are stored as {<filename>: true,...} so that                                                          // 163\n  // duplicates are automagically pruned.                                                                              // 164\n  // Later, we do an Object.keys() on these.                                                                           // 165\n  // Keep them as a list so we can fill in when nonull is set.                                                         // 166\n  this.matches = new Array(n)                                                                                          // 167\n                                                                                                                       // 168\n  this.minimatch.set.forEach(iterator.bind(this))                                                                      // 169\n  function iterator (pattern, i, set) {                                                                                // 170\n    this._process(pattern, 0, i, function (er) {                                                                       // 171\n      if (er) this.emit(\"error\", er)                                                                                   // 172\n      if (-- n <= 0) this._finish()                                                                                    // 173\n    })                                                                                                                 // 174\n  }                                                                                                                    // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nGlob.prototype.log = function () {}                                                                                    // 178\n                                                                                                                       // 179\nGlob.prototype._finish = function () {                                                                                 // 180\n  assert(this instanceof Glob)                                                                                         // 181\n                                                                                                                       // 182\n  var nou = this.nounique                                                                                              // 183\n  , all = nou ? [] : {}                                                                                                // 184\n                                                                                                                       // 185\n  for (var i = 0, l = this.matches.length; i < l; i ++) {                                                              // 186\n    var matches = this.matches[i]                                                                                      // 187\n    this.log(\"matches[%d] =\", i, matches)                                                                              // 188\n    // do like the shell, and spit out the literal glob                                                                // 189\n    if (!matches) {                                                                                                    // 190\n      if (this.nonull) {                                                                                               // 191\n        var literal = this.minimatch.globSet[i]                                                                        // 192\n        if (nou) all.push(literal)                                                                                     // 193\n        else all[literal] = true                                                                                       // 194\n      }                                                                                                                // 195\n    } else {                                                                                                           // 196\n      // had matches                                                                                                   // 197\n      var m = Object.keys(matches)                                                                                     // 198\n      if (nou) all.push.apply(all, m)                                                                                  // 199\n      else m.forEach(function (m) {                                                                                    // 200\n        all[m] = true                                                                                                  // 201\n      })                                                                                                               // 202\n    }                                                                                                                  // 203\n  }                                                                                                                    // 204\n                                                                                                                       // 205\n  if (!nou) all = Object.keys(all)                                                                                     // 206\n                                                                                                                       // 207\n  if (!this.nosort) {                                                                                                  // 208\n    all = all.sort(this.nocase ? alphasorti : alphasort)                                                               // 209\n  }                                                                                                                    // 210\n                                                                                                                       // 211\n  if (this.mark) {                                                                                                     // 212\n    // at *some* point we statted all of these                                                                         // 213\n    all = all.map(function (m) {                                                                                       // 214\n      var sc = this.cache[m]                                                                                           // 215\n      if (!sc)                                                                                                         // 216\n        return m                                                                                                       // 217\n      var isDir = (Array.isArray(sc) || sc === 2)                                                                      // 218\n      if (isDir && m.slice(-1) !== \"/\") {                                                                              // 219\n        return m + \"/\"                                                                                                 // 220\n      }                                                                                                                // 221\n      if (!isDir && m.slice(-1) === \"/\") {                                                                             // 222\n        return m.replace(/\\/+$/, \"\")                                                                                   // 223\n      }                                                                                                                // 224\n      return m                                                                                                         // 225\n    }, this)                                                                                                           // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  this.log(\"emitting end\", all)                                                                                        // 229\n                                                                                                                       // 230\n  this.EOF = this.found = all                                                                                          // 231\n  this.emitMatch(this.EOF)                                                                                             // 232\n}                                                                                                                      // 233\n                                                                                                                       // 234\nfunction alphasorti (a, b) {                                                                                           // 235\n  a = a.toLowerCase()                                                                                                  // 236\n  b = b.toLowerCase()                                                                                                  // 237\n  return alphasort(a, b)                                                                                               // 238\n}                                                                                                                      // 239\n                                                                                                                       // 240\nfunction alphasort (a, b) {                                                                                            // 241\n  return a > b ? 1 : a < b ? -1 : 0                                                                                    // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\nGlob.prototype.abort = function () {                                                                                   // 245\n  this.aborted = true                                                                                                  // 246\n  this.emit(\"abort\")                                                                                                   // 247\n}                                                                                                                      // 248\n                                                                                                                       // 249\nGlob.prototype.pause = function () {                                                                                   // 250\n  if (this.paused) return                                                                                              // 251\n  if (this.sync)                                                                                                       // 252\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))                                                      // 253\n  this.paused = true                                                                                                   // 254\n  this.emit(\"pause\")                                                                                                   // 255\n}                                                                                                                      // 256\n                                                                                                                       // 257\nGlob.prototype.resume = function () {                                                                                  // 258\n  if (!this.paused) return                                                                                             // 259\n  if (this.sync)                                                                                                       // 260\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))                                                      // 261\n  this.paused = false                                                                                                  // 262\n  this.emit(\"resume\")                                                                                                  // 263\n  this._processEmitQueue()                                                                                             // 264\n  //process.nextTick(this.emit.bind(this, \"resume\"))                                                                   // 265\n}                                                                                                                      // 266\n                                                                                                                       // 267\nGlob.prototype.emitMatch = function (m) {                                                                              // 268\n  if (!this.stat || this.statCache[m] || m === this.EOF) {                                                             // 269\n    this._emitQueue.push(m)                                                                                            // 270\n    this._processEmitQueue()                                                                                           // 271\n  } else {                                                                                                             // 272\n    this._stat(m, function(exists, isDir) {                                                                            // 273\n      if (exists) {                                                                                                    // 274\n        this._emitQueue.push(m)                                                                                        // 275\n        this._processEmitQueue()                                                                                       // 276\n      }                                                                                                                // 277\n    })                                                                                                                 // 278\n  }                                                                                                                    // 279\n}                                                                                                                      // 280\n                                                                                                                       // 281\nGlob.prototype._processEmitQueue = function (m) {                                                                      // 282\n  while (!this._processingEmitQueue &&                                                                                 // 283\n         !this.paused) {                                                                                               // 284\n    this._processingEmitQueue = true                                                                                   // 285\n    var m = this._emitQueue.shift()                                                                                    // 286\n    if (!m) {                                                                                                          // 287\n      this._processingEmitQueue = false                                                                                // 288\n      break                                                                                                            // 289\n    }                                                                                                                  // 290\n                                                                                                                       // 291\n    this.log('emit!', m === this.EOF ? \"end\" : \"match\")                                                                // 292\n                                                                                                                       // 293\n    this.emit(m === this.EOF ? \"end\" : \"match\", m)                                                                     // 294\n    this._processingEmitQueue = false                                                                                  // 295\n  }                                                                                                                    // 296\n}                                                                                                                      // 297\n                                                                                                                       // 298\nGlob.prototype._process = function (pattern, depth, index, cb_) {                                                      // 299\n  assert(this instanceof Glob)                                                                                         // 300\n                                                                                                                       // 301\n  var cb = function cb (er, res) {                                                                                     // 302\n    assert(this instanceof Glob)                                                                                       // 303\n    if (this.paused) {                                                                                                 // 304\n      if (!this._processQueue) {                                                                                       // 305\n        this._processQueue = []                                                                                        // 306\n        this.once(\"resume\", function () {                                                                              // 307\n          var q = this._processQueue                                                                                   // 308\n          this._processQueue = null                                                                                    // 309\n          q.forEach(function (cb) { cb() })                                                                            // 310\n        })                                                                                                             // 311\n      }                                                                                                                // 312\n      this._processQueue.push(cb_.bind(this, er, res))                                                                 // 313\n    } else {                                                                                                           // 314\n      cb_.call(this, er, res)                                                                                          // 315\n    }                                                                                                                  // 316\n  }.bind(this)                                                                                                         // 317\n                                                                                                                       // 318\n  if (this.aborted) return cb()                                                                                        // 319\n                                                                                                                       // 320\n  if (depth > this.maxDepth) return cb()                                                                               // 321\n                                                                                                                       // 322\n  // Get the first [n] parts of pattern that are all strings.                                                          // 323\n  var n = 0                                                                                                            // 324\n  while (typeof pattern[n] === \"string\") {                                                                             // 325\n    n ++                                                                                                               // 326\n  }                                                                                                                    // 327\n  // now n is the index of the first one that is *not* a string.                                                       // 328\n                                                                                                                       // 329\n  // see if there's anything else                                                                                      // 330\n  var prefix                                                                                                           // 331\n  switch (n) {                                                                                                         // 332\n    // if not, then this is rather simple                                                                              // 333\n    case pattern.length:                                                                                               // 334\n      prefix = pattern.join(\"/\")                                                                                       // 335\n      this._stat(prefix, function (exists, isDir) {                                                                    // 336\n        // either it's there, or it isn't.                                                                             // 337\n        // nothing more to do, either way.                                                                             // 338\n        if (exists) {                                                                                                  // 339\n          if (prefix && isAbsolute(prefix) && !this.nomount) {                                                         // 340\n            if (prefix.charAt(0) === \"/\") {                                                                            // 341\n              prefix = path.join(this.root, prefix)                                                                    // 342\n            } else {                                                                                                   // 343\n              prefix = path.resolve(this.root, prefix)                                                                 // 344\n            }                                                                                                          // 345\n          }                                                                                                            // 346\n                                                                                                                       // 347\n          if (process.platform === \"win32\")                                                                            // 348\n            prefix = prefix.replace(/\\\\/g, \"/\")                                                                        // 349\n                                                                                                                       // 350\n          this.matches[index] = this.matches[index] || {}                                                              // 351\n          this.matches[index][prefix] = true                                                                           // 352\n          this.emitMatch(prefix)                                                                                       // 353\n        }                                                                                                              // 354\n        return cb()                                                                                                    // 355\n      })                                                                                                               // 356\n      return                                                                                                           // 357\n                                                                                                                       // 358\n    case 0:                                                                                                            // 359\n      // pattern *starts* with some non-trivial item.                                                                  // 360\n      // going to readdir(cwd), but not include the prefix in matches.                                                 // 361\n      prefix = null                                                                                                    // 362\n      break                                                                                                            // 363\n                                                                                                                       // 364\n    default:                                                                                                           // 365\n      // pattern has some string bits in the front.                                                                    // 366\n      // whatever it starts with, whether that's \"absolute\" like /foo/bar,                                             // 367\n      // or \"relative\" like \"../baz\"                                                                                   // 368\n      prefix = pattern.slice(0, n)                                                                                     // 369\n      prefix = prefix.join(\"/\")                                                                                        // 370\n      break                                                                                                            // 371\n  }                                                                                                                    // 372\n                                                                                                                       // 373\n  // get the list of entries.                                                                                          // 374\n  var read                                                                                                             // 375\n  if (prefix === null) read = \".\"                                                                                      // 376\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join(\"/\"))) {                                                      // 377\n    if (!prefix || !isAbsolute(prefix)) {                                                                              // 378\n      prefix = path.join(\"/\", prefix)                                                                                  // 379\n    }                                                                                                                  // 380\n    read = prefix = path.resolve(prefix)                                                                               // 381\n                                                                                                                       // 382\n    // if (process.platform === \"win32\")                                                                               // 383\n    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\\\/g, \"/\")                                                         // 384\n                                                                                                                       // 385\n    this.log('absolute: ', prefix, this.root, pattern, read)                                                           // 386\n  } else {                                                                                                             // 387\n    read = prefix                                                                                                      // 388\n  }                                                                                                                    // 389\n                                                                                                                       // 390\n  this.log('readdir(%j)', read, this.cwd, this.root)                                                                   // 391\n                                                                                                                       // 392\n  return this._readdir(read, function (er, entries) {                                                                  // 393\n    if (er) {                                                                                                          // 394\n      // not a directory!                                                                                              // 395\n      // this means that, whatever else comes after this, it can never match                                           // 396\n      return cb()                                                                                                      // 397\n    }                                                                                                                  // 398\n                                                                                                                       // 399\n    // globstar is special                                                                                             // 400\n    if (pattern[n] === minimatch.GLOBSTAR) {                                                                           // 401\n      // test without the globstar, and with every child both below                                                    // 402\n      // and replacing the globstar.                                                                                   // 403\n      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]                                                     // 404\n      entries.forEach(function (e) {                                                                                   // 405\n        if (e.charAt(0) === \".\" && !this.dot) return                                                                   // 406\n        // instead of the globstar                                                                                     // 407\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))                                             // 408\n        // below the globstar                                                                                          // 409\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))                                                 // 410\n      }, this)                                                                                                         // 411\n                                                                                                                       // 412\n      s = s.filter(function (pattern) {                                                                                // 413\n        var key = gsKey(pattern)                                                                                       // 414\n        var seen = !this._globstars[key]                                                                               // 415\n        this._globstars[key] = true                                                                                    // 416\n        return seen                                                                                                    // 417\n      }, this)                                                                                                         // 418\n                                                                                                                       // 419\n      if (!s.length)                                                                                                   // 420\n        return cb()                                                                                                    // 421\n                                                                                                                       // 422\n      // now asyncForEach over this                                                                                    // 423\n      var l = s.length                                                                                                 // 424\n      , errState = null                                                                                                // 425\n      s.forEach(function (gsPattern) {                                                                                 // 426\n        this._process(gsPattern, depth + 1, index, function (er) {                                                     // 427\n          if (errState) return                                                                                         // 428\n          if (er) return cb(errState = er)                                                                             // 429\n          if (--l <= 0) return cb()                                                                                    // 430\n        })                                                                                                             // 431\n      }, this)                                                                                                         // 432\n                                                                                                                       // 433\n      return                                                                                                           // 434\n    }                                                                                                                  // 435\n                                                                                                                       // 436\n    // not a globstar                                                                                                  // 437\n    // It will only match dot entries if it starts with a dot, or if                                                   // 438\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.                                                             // 439\n    var pn = pattern[n]                                                                                                // 440\n    var rawGlob = pattern[n]._glob                                                                                     // 441\n    , dotOk = this.dot || rawGlob.charAt(0) === \".\"                                                                    // 442\n                                                                                                                       // 443\n    entries = entries.filter(function (e) {                                                                            // 444\n      return (e.charAt(0) !== \".\" || dotOk) &&                                                                         // 445\n             e.match(pattern[n])                                                                                       // 446\n    })                                                                                                                 // 447\n                                                                                                                       // 448\n    // If n === pattern.length - 1, then there's no need for the extra stat                                            // 449\n    // *unless* the user has specified \"mark\" or \"stat\" explicitly.                                                    // 450\n    // We know that they exist, since the readdir returned them.                                                       // 451\n    if (n === pattern.length - 1 &&                                                                                    // 452\n        !this.mark &&                                                                                                  // 453\n        !this.stat) {                                                                                                  // 454\n      entries.forEach(function (e) {                                                                                   // 455\n        if (prefix) {                                                                                                  // 456\n          if (prefix !== \"/\") e = prefix + \"/\" + e                                                                     // 457\n          else e = prefix + e                                                                                          // 458\n        }                                                                                                              // 459\n        if (e.charAt(0) === \"/\" && !this.nomount) {                                                                    // 460\n          e = path.join(this.root, e)                                                                                  // 461\n        }                                                                                                              // 462\n                                                                                                                       // 463\n        if (process.platform === \"win32\")                                                                              // 464\n          e = e.replace(/\\\\/g, \"/\")                                                                                    // 465\n                                                                                                                       // 466\n        this.matches[index] = this.matches[index] || {}                                                                // 467\n        this.matches[index][e] = true                                                                                  // 468\n        this.emitMatch(e)                                                                                              // 469\n      }, this)                                                                                                         // 470\n      return cb.call(this)                                                                                             // 471\n    }                                                                                                                  // 472\n                                                                                                                       // 473\n                                                                                                                       // 474\n    // now test all the remaining entries as stand-ins for that part                                                   // 475\n    // of the pattern.                                                                                                 // 476\n    var l = entries.length                                                                                             // 477\n    , errState = null                                                                                                  // 478\n    if (l === 0) return cb() // no matches possible                                                                    // 479\n    entries.forEach(function (e) {                                                                                     // 480\n      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))                                               // 481\n      this._process(p, depth + 1, index, function (er) {                                                               // 482\n        if (errState) return                                                                                           // 483\n        if (er) return cb(errState = er)                                                                               // 484\n        if (--l === 0) return cb.call(this)                                                                            // 485\n      })                                                                                                               // 486\n    }, this)                                                                                                           // 487\n  })                                                                                                                   // 488\n                                                                                                                       // 489\n}                                                                                                                      // 490\n                                                                                                                       // 491\nfunction gsKey (pattern) {                                                                                             // 492\n  return '**' + pattern.map(function (p) {                                                                             // 493\n    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)                                                                  // 494\n  }).join('/')                                                                                                         // 495\n}                                                                                                                      // 496\n                                                                                                                       // 497\nGlob.prototype._stat = function (f, cb) {                                                                              // 498\n  assert(this instanceof Glob)                                                                                         // 499\n  var abs = f                                                                                                          // 500\n  if (f.charAt(0) === \"/\") {                                                                                           // 501\n    abs = path.join(this.root, f)                                                                                      // 502\n  } else if (this.changedCwd) {                                                                                        // 503\n    abs = path.resolve(this.cwd, f)                                                                                    // 504\n  }                                                                                                                    // 505\n                                                                                                                       // 506\n  if (f.length > this.maxLength) {                                                                                     // 507\n    var er = new Error(\"Path name too long\")                                                                           // 508\n    er.code = \"ENAMETOOLONG\"                                                                                           // 509\n    er.path = f                                                                                                        // 510\n    return this._afterStat(f, abs, cb, er)                                                                             // 511\n  }                                                                                                                    // 512\n                                                                                                                       // 513\n  this.log('stat', [this.cwd, f, '=', abs])                                                                            // 514\n                                                                                                                       // 515\n  if (!this.stat && this.cache.hasOwnProperty(f)) {                                                                    // 516\n    var exists = this.cache[f]                                                                                         // 517\n    , isDir = exists && (Array.isArray(exists) || exists === 2)                                                        // 518\n    if (this.sync) return cb.call(this, !!exists, isDir)                                                               // 519\n    return process.nextTick(cb.bind(this, !!exists, isDir))                                                            // 520\n  }                                                                                                                    // 521\n                                                                                                                       // 522\n  var stat = this.statCache[abs]                                                                                       // 523\n  if (this.sync || stat) {                                                                                             // 524\n    var er                                                                                                             // 525\n    try {                                                                                                              // 526\n      stat = fs.statSync(abs)                                                                                          // 527\n    } catch (e) {                                                                                                      // 528\n      er = e                                                                                                           // 529\n    }                                                                                                                  // 530\n    this._afterStat(f, abs, cb, er, stat)                                                                              // 531\n  } else {                                                                                                             // 532\n    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))                                                               // 533\n  }                                                                                                                    // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\nGlob.prototype._afterStat = function (f, abs, cb, er, stat) {                                                          // 537\n  var exists                                                                                                           // 538\n  assert(this instanceof Glob)                                                                                         // 539\n                                                                                                                       // 540\n  if (abs.slice(-1) === \"/\" && stat && !stat.isDirectory()) {                                                          // 541\n    this.log(\"should be ENOTDIR, fake it\")                                                                             // 542\n                                                                                                                       // 543\n    er = new Error(\"ENOTDIR, not a directory '\" + abs + \"'\")                                                           // 544\n    er.path = abs                                                                                                      // 545\n    er.code = \"ENOTDIR\"                                                                                                // 546\n    stat = null                                                                                                        // 547\n  }                                                                                                                    // 548\n                                                                                                                       // 549\n  var emit = !this.statCache[abs]                                                                                      // 550\n  this.statCache[abs] = stat                                                                                           // 551\n                                                                                                                       // 552\n  if (er || !stat) {                                                                                                   // 553\n    exists = false                                                                                                     // 554\n  } else {                                                                                                             // 555\n    exists = stat.isDirectory() ? 2 : 1                                                                                // 556\n    if (emit)                                                                                                          // 557\n      this.emit('stat', f, stat)                                                                                       // 558\n  }                                                                                                                    // 559\n  this.cache[f] = this.cache[f] || exists                                                                              // 560\n  cb.call(this, !!exists, exists === 2)                                                                                // 561\n}                                                                                                                      // 562\n                                                                                                                       // 563\nGlob.prototype._readdir = function (f, cb) {                                                                           // 564\n  assert(this instanceof Glob)                                                                                         // 565\n  var abs = f                                                                                                          // 566\n  if (f.charAt(0) === \"/\") {                                                                                           // 567\n    abs = path.join(this.root, f)                                                                                      // 568\n  } else if (isAbsolute(f)) {                                                                                          // 569\n    abs = f                                                                                                            // 570\n  } else if (this.changedCwd) {                                                                                        // 571\n    abs = path.resolve(this.cwd, f)                                                                                    // 572\n  }                                                                                                                    // 573\n                                                                                                                       // 574\n  if (f.length > this.maxLength) {                                                                                     // 575\n    var er = new Error(\"Path name too long\")                                                                           // 576\n    er.code = \"ENAMETOOLONG\"                                                                                           // 577\n    er.path = f                                                                                                        // 578\n    return this._afterReaddir(f, abs, cb, er)                                                                          // 579\n  }                                                                                                                    // 580\n                                                                                                                       // 581\n  this.log('readdir', [this.cwd, f, abs])                                                                              // 582\n  if (this.cache.hasOwnProperty(f)) {                                                                                  // 583\n    var c = this.cache[f]                                                                                              // 584\n    if (Array.isArray(c)) {                                                                                            // 585\n      if (this.sync) return cb.call(this, null, c)                                                                     // 586\n      return process.nextTick(cb.bind(this, null, c))                                                                  // 587\n    }                                                                                                                  // 588\n                                                                                                                       // 589\n    if (!c || c === 1) {                                                                                               // 590\n      // either ENOENT or ENOTDIR                                                                                      // 591\n      var code = c ? \"ENOTDIR\" : \"ENOENT\"                                                                              // 592\n      , er = new Error((c ? \"Not a directory\" : \"Not found\") + \": \" + f)                                               // 593\n      er.path = f                                                                                                      // 594\n      er.code = code                                                                                                   // 595\n      this.log(f, er)                                                                                                  // 596\n      if (this.sync) return cb.call(this, er)                                                                          // 597\n      return process.nextTick(cb.bind(this, er))                                                                       // 598\n    }                                                                                                                  // 599\n                                                                                                                       // 600\n    // at this point, c === 2, meaning it's a dir, but we haven't                                                      // 601\n    // had to read it yet, or c === true, meaning it's *something*                                                     // 602\n    // but we don't have any idea what.  Need to read it, either way.                                                  // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  if (this.sync) {                                                                                                     // 606\n    var er, entries                                                                                                    // 607\n    try {                                                                                                              // 608\n      entries = fs.readdirSync(abs)                                                                                    // 609\n    } catch (e) {                                                                                                      // 610\n      er = e                                                                                                           // 611\n    }                                                                                                                  // 612\n    return this._afterReaddir(f, abs, cb, er, entries)                                                                 // 613\n  }                                                                                                                    // 614\n                                                                                                                       // 615\n  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))                                                           // 616\n}                                                                                                                      // 617\n                                                                                                                       // 618\nGlob.prototype._afterReaddir = function (f, abs, cb, er, entries) {                                                    // 619\n  assert(this instanceof Glob)                                                                                         // 620\n  if (entries && !er) {                                                                                                // 621\n    this.cache[f] = entries                                                                                            // 622\n    // if we haven't asked to stat everything for suresies, then just                                                  // 623\n    // assume that everything in there exists, so we can avoid                                                         // 624\n    // having to stat it a second time.  This also gets us one step                                                    // 625\n    // further into ELOOP territory.                                                                                   // 626\n    if (!this.mark && !this.stat) {                                                                                    // 627\n      entries.forEach(function (e) {                                                                                   // 628\n        if (f === \"/\") e = f + e                                                                                       // 629\n        else e = f + \"/\" + e                                                                                           // 630\n        this.cache[e] = true                                                                                           // 631\n      }, this)                                                                                                         // 632\n    }                                                                                                                  // 633\n                                                                                                                       // 634\n    return cb.call(this, er, entries)                                                                                  // 635\n  }                                                                                                                    // 636\n                                                                                                                       // 637\n  // now handle errors, and cache the information                                                                      // 638\n  if (er) switch (er.code) {                                                                                           // 639\n    case \"ENOTDIR\": // totally normal. means it *does* exist.                                                          // 640\n      this.cache[f] = 1                                                                                                // 641\n      return cb.call(this, er)                                                                                         // 642\n    case \"ENOENT\": // not terribly unusual                                                                             // 643\n    case \"ELOOP\":                                                                                                      // 644\n    case \"ENAMETOOLONG\":                                                                                               // 645\n    case \"UNKNOWN\":                                                                                                    // 646\n      this.cache[f] = false                                                                                            // 647\n      return cb.call(this, er)                                                                                         // 648\n    default: // some unusual error.  Treat as failure.                                                                 // 649\n      this.cache[f] = false                                                                                            // 650\n      if (this.strict) this.emit(\"error\", er)                                                                          // 651\n      if (!this.silent) console.error(\"glob error\", er)                                                                // 652\n      return cb.call(this, er)                                                                                         // 653\n  }                                                                                                                    // 654\n}                                                                                                                      // 655\n                                                                                                                       // 656\nvar isAbsolute = process.platform === \"win32\" ? absWin : absUnix                                                       // 657\n                                                                                                                       // 658\nfunction absWin (p) {                                                                                                  // 659\n  if (absUnix(p)) return true                                                                                          // 660\n  // pull off the device/UNC bit from a windows path.                                                                  // 661\n  // from node's lib/path.js                                                                                           // 662\n  var splitDeviceRe =                                                                                                  // 663\n      /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/                                             // 664\n    , result = splitDeviceRe.exec(p)                                                                                   // 665\n    , device = result[1] || ''                                                                                         // 666\n    , isUnc = device && device.charAt(1) !== ':'                                                                       // 667\n    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute                                               // 668\n                                                                                                                       // 669\n  return isAbsolute                                                                                                    // 670\n}                                                                                                                      // 671\n                                                                                                                       // 672\nfunction absUnix (p) {                                                                                                 // 673\n  return p.charAt(0) === \"/\" || p === \"\"                                                                               // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"graceful-fs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/graceful-fs/package.json                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"graceful-fs\";                                                                                          // 1\nexports.version = \"2.0.3\";                                                                                             // 2\nexports.main = \"graceful-fs.js\";                                                                                       // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"graceful-fs.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/graceful-fs/graceful-fs.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Monkey-patching the fs module.                                                                                      // 1\n// It's ugly, but there is simply no other way to do this.                                                             // 2\nvar fs = module.exports = require('fs')                                                                                // 3\n                                                                                                                       // 4\nvar assert = require('assert')                                                                                         // 5\n                                                                                                                       // 6\n// fix up some busted stuff, mostly on windows and old nodes                                                           // 7\nrequire('./polyfills.js')                                                                                              // 8\n                                                                                                                       // 9\n// The EMFILE enqueuing stuff                                                                                          // 10\n                                                                                                                       // 11\nvar util = require('util')                                                                                             // 12\n                                                                                                                       // 13\nfunction noop () {}                                                                                                    // 14\n                                                                                                                       // 15\nvar debug = noop                                                                                                       // 16\nif (util.debuglog)                                                                                                     // 17\n  debug = util.debuglog('gfs')                                                                                         // 18\nelse if (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || ''))                                                                // 19\n  debug = function() {                                                                                                 // 20\n    var m = util.format.apply(util, arguments)                                                                         // 21\n    m = 'GFS: ' + m.split(/\\n/).join('\\nGFS: ')                                                                        // 22\n    console.error(m)                                                                                                   // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\nif (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || '')) {                                                                   // 26\n  process.on('exit', function() {                                                                                      // 27\n    debug('fds', fds)                                                                                                  // 28\n    debug(queue)                                                                                                       // 29\n    assert.equal(queue.length, 0)                                                                                      // 30\n  })                                                                                                                   // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n                                                                                                                       // 34\nvar originalOpen = fs.open                                                                                             // 35\nfs.open = open                                                                                                         // 36\n                                                                                                                       // 37\nfunction open(path, flags, mode, cb) {                                                                                 // 38\n  if (typeof mode === \"function\") cb = mode, mode = null                                                               // 39\n  if (typeof cb !== \"function\") cb = noop                                                                              // 40\n  new OpenReq(path, flags, mode, cb)                                                                                   // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nfunction OpenReq(path, flags, mode, cb) {                                                                              // 44\n  this.path = path                                                                                                     // 45\n  this.flags = flags                                                                                                   // 46\n  this.mode = mode                                                                                                     // 47\n  this.cb = cb                                                                                                         // 48\n  Req.call(this)                                                                                                       // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nutil.inherits(OpenReq, Req)                                                                                            // 52\n                                                                                                                       // 53\nOpenReq.prototype.process = function() {                                                                               // 54\n  originalOpen.call(fs, this.path, this.flags, this.mode, this.done)                                                   // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nvar fds = {}                                                                                                           // 58\nOpenReq.prototype.done = function(er, fd) {                                                                            // 59\n  debug('open done', er, fd)                                                                                           // 60\n  if (fd)                                                                                                              // 61\n    fds['fd' + fd] = this.path                                                                                         // 62\n  Req.prototype.done.call(this, er, fd)                                                                                // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\nvar originalReaddir = fs.readdir                                                                                       // 67\nfs.readdir = readdir                                                                                                   // 68\n                                                                                                                       // 69\nfunction readdir(path, cb) {                                                                                           // 70\n  if (typeof cb !== \"function\") cb = noop                                                                              // 71\n  new ReaddirReq(path, cb)                                                                                             // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\nfunction ReaddirReq(path, cb) {                                                                                        // 75\n  this.path = path                                                                                                     // 76\n  this.cb = cb                                                                                                         // 77\n  Req.call(this)                                                                                                       // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nutil.inherits(ReaddirReq, Req)                                                                                         // 81\n                                                                                                                       // 82\nReaddirReq.prototype.process = function() {                                                                            // 83\n  originalReaddir.call(fs, this.path, this.done)                                                                       // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\nReaddirReq.prototype.done = function(er, files) {                                                                      // 87\n  if (files && files.sort)                                                                                             // 88\n    files = files.sort()                                                                                               // 89\n  Req.prototype.done.call(this, er, files)                                                                             // 90\n  onclose()                                                                                                            // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\n                                                                                                                       // 94\nvar originalClose = fs.close                                                                                           // 95\nfs.close = close                                                                                                       // 96\n                                                                                                                       // 97\nfunction close (fd, cb) {                                                                                              // 98\n  debug('close', fd)                                                                                                   // 99\n  if (typeof cb !== \"function\") cb = noop                                                                              // 100\n  delete fds['fd' + fd]                                                                                                // 101\n  originalClose.call(fs, fd, function(er) {                                                                            // 102\n    onclose()                                                                                                          // 103\n    cb(er)                                                                                                             // 104\n  })                                                                                                                   // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\n                                                                                                                       // 108\nvar originalCloseSync = fs.closeSync                                                                                   // 109\nfs.closeSync = closeSync                                                                                               // 110\n                                                                                                                       // 111\nfunction closeSync (fd) {                                                                                              // 112\n  try {                                                                                                                // 113\n    return originalCloseSync(fd)                                                                                       // 114\n  } finally {                                                                                                          // 115\n    onclose()                                                                                                          // 116\n  }                                                                                                                    // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n                                                                                                                       // 120\n// Req class                                                                                                           // 121\nfunction Req () {                                                                                                      // 122\n  // start processing                                                                                                  // 123\n  this.done = this.done.bind(this)                                                                                     // 124\n  this.failures = 0                                                                                                    // 125\n  this.process()                                                                                                       // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\nReq.prototype.done = function (er, result) {                                                                           // 129\n  var tryAgain = false                                                                                                 // 130\n  if (er) {                                                                                                            // 131\n    var code = er.code                                                                                                 // 132\n    var tryAgain = code === \"EMFILE\"                                                                                   // 133\n    if (process.platform === \"win32\")                                                                                  // 134\n      tryAgain = tryAgain || code === \"OK\"                                                                             // 135\n  }                                                                                                                    // 136\n                                                                                                                       // 137\n  if (tryAgain) {                                                                                                      // 138\n    this.failures ++                                                                                                   // 139\n    enqueue(this)                                                                                                      // 140\n  } else {                                                                                                             // 141\n    var cb = this.cb                                                                                                   // 142\n    cb(er, result)                                                                                                     // 143\n  }                                                                                                                    // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\nvar queue = []                                                                                                         // 147\n                                                                                                                       // 148\nfunction enqueue(req) {                                                                                                // 149\n  queue.push(req)                                                                                                      // 150\n  debug('enqueue %d %s', queue.length, req.constructor.name, req)                                                      // 151\n}                                                                                                                      // 152\n                                                                                                                       // 153\nfunction onclose() {                                                                                                   // 154\n  var req = queue.shift()                                                                                              // 155\n  if (req) {                                                                                                           // 156\n    debug('process', req.constructor.name, req)                                                                        // 157\n    req.process()                                                                                                      // 158\n  }                                                                                                                    // 159\n}                                                                                                                      // 160\n                                                                                                                       // 161\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"polyfills.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/graceful-fs/polyfills.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar fs = require('fs')                                                                                                 // 1\nvar constants = require('constants')                                                                                   // 2\n                                                                                                                       // 3\nvar origCwd = process.cwd                                                                                              // 4\nvar cwd = null                                                                                                         // 5\nprocess.cwd = function() {                                                                                             // 6\n  if (!cwd)                                                                                                            // 7\n    cwd = origCwd.call(process)                                                                                        // 8\n  return cwd                                                                                                           // 9\n}                                                                                                                      // 10\nvar chdir = process.chdir                                                                                              // 11\nprocess.chdir = function(d) {                                                                                          // 12\n  cwd = null                                                                                                           // 13\n  chdir.call(process, d)                                                                                               // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n// (re-)implement some things that are known busted or missing.                                                        // 17\n                                                                                                                       // 18\n// lchmod, broken prior to 0.6.2                                                                                       // 19\n// back-port the fix here.                                                                                             // 20\nif (constants.hasOwnProperty('O_SYMLINK') &&                                                                           // 21\n    process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {                                                                 // 22\n  fs.lchmod = function (path, mode, callback) {                                                                        // 23\n    callback = callback || noop                                                                                        // 24\n    fs.open( path                                                                                                      // 25\n           , constants.O_WRONLY | constants.O_SYMLINK                                                                  // 26\n           , mode                                                                                                      // 27\n           , function (err, fd) {                                                                                      // 28\n      if (err) {                                                                                                       // 29\n        callback(err)                                                                                                  // 30\n        return                                                                                                         // 31\n      }                                                                                                                // 32\n      // prefer to return the chmod error, if one occurs,                                                              // 33\n      // but still try to close, and report closing errors if they occur.                                              // 34\n      fs.fchmod(fd, mode, function (err) {                                                                             // 35\n        fs.close(fd, function(err2) {                                                                                  // 36\n          callback(err || err2)                                                                                        // 37\n        })                                                                                                             // 38\n      })                                                                                                               // 39\n    })                                                                                                                 // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  fs.lchmodSync = function (path, mode) {                                                                              // 43\n    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)                                         // 44\n                                                                                                                       // 45\n    // prefer to return the chmod error, if one occurs,                                                                // 46\n    // but still try to close, and report closing errors if they occur.                                                // 47\n    var err, err2                                                                                                      // 48\n    try {                                                                                                              // 49\n      var ret = fs.fchmodSync(fd, mode)                                                                                // 50\n    } catch (er) {                                                                                                     // 51\n      err = er                                                                                                         // 52\n    }                                                                                                                  // 53\n    try {                                                                                                              // 54\n      fs.closeSync(fd)                                                                                                 // 55\n    } catch (er) {                                                                                                     // 56\n      err2 = er                                                                                                        // 57\n    }                                                                                                                  // 58\n    if (err || err2) throw (err || err2)                                                                               // 59\n    return ret                                                                                                         // 60\n  }                                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n                                                                                                                       // 64\n// lutimes implementation, or no-op                                                                                    // 65\nif (!fs.lutimes) {                                                                                                     // 66\n  if (constants.hasOwnProperty(\"O_SYMLINK\")) {                                                                         // 67\n    fs.lutimes = function (path, at, mt, cb) {                                                                         // 68\n      fs.open(path, constants.O_SYMLINK, function (er, fd) {                                                           // 69\n        cb = cb || noop                                                                                                // 70\n        if (er) return cb(er)                                                                                          // 71\n        fs.futimes(fd, at, mt, function (er) {                                                                         // 72\n          fs.close(fd, function (er2) {                                                                                // 73\n            return cb(er || er2)                                                                                       // 74\n          })                                                                                                           // 75\n        })                                                                                                             // 76\n      })                                                                                                               // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    fs.lutimesSync = function (path, at, mt) {                                                                         // 80\n      var fd = fs.openSync(path, constants.O_SYMLINK)                                                                  // 81\n        , err                                                                                                          // 82\n        , err2                                                                                                         // 83\n        , ret                                                                                                          // 84\n                                                                                                                       // 85\n      try {                                                                                                            // 86\n        var ret = fs.futimesSync(fd, at, mt)                                                                           // 87\n      } catch (er) {                                                                                                   // 88\n        err = er                                                                                                       // 89\n      }                                                                                                                // 90\n      try {                                                                                                            // 91\n        fs.closeSync(fd)                                                                                               // 92\n      } catch (er) {                                                                                                   // 93\n        err2 = er                                                                                                      // 94\n      }                                                                                                                // 95\n      if (err || err2) throw (err || err2)                                                                             // 96\n      return ret                                                                                                       // 97\n    }                                                                                                                  // 98\n                                                                                                                       // 99\n  } else if (fs.utimensat && constants.hasOwnProperty(\"AT_SYMLINK_NOFOLLOW\")) {                                        // 100\n    // maybe utimensat will be bound soonish?                                                                          // 101\n    fs.lutimes = function (path, at, mt, cb) {                                                                         // 102\n      fs.utimensat(path, at, mt, constants.AT_SYMLINK_NOFOLLOW, cb)                                                    // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    fs.lutimesSync = function (path, at, mt) {                                                                         // 106\n      return fs.utimensatSync(path, at, mt, constants.AT_SYMLINK_NOFOLLOW)                                             // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n  } else {                                                                                                             // 110\n    fs.lutimes = function (_a, _b, _c, cb) { process.nextTick(cb) }                                                    // 111\n    fs.lutimesSync = function () {}                                                                                    // 112\n  }                                                                                                                    // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n// https://github.com/isaacs/node-graceful-fs/issues/4                                                                 // 117\n// Chown should not fail on einval or eperm if non-root.                                                               // 118\n                                                                                                                       // 119\nfs.chown = chownFix(fs.chown)                                                                                          // 120\nfs.fchown = chownFix(fs.fchown)                                                                                        // 121\nfs.lchown = chownFix(fs.lchown)                                                                                        // 122\n                                                                                                                       // 123\nfs.chownSync = chownFixSync(fs.chownSync)                                                                              // 124\nfs.fchownSync = chownFixSync(fs.fchownSync)                                                                            // 125\nfs.lchownSync = chownFixSync(fs.lchownSync)                                                                            // 126\n                                                                                                                       // 127\nfunction chownFix (orig) {                                                                                             // 128\n  if (!orig) return orig                                                                                               // 129\n  return function (target, uid, gid, cb) {                                                                             // 130\n    return orig.call(fs, target, uid, gid, function (er, res) {                                                        // 131\n      if (chownErOk(er)) er = null                                                                                     // 132\n      cb(er, res)                                                                                                      // 133\n    })                                                                                                                 // 134\n  }                                                                                                                    // 135\n}                                                                                                                      // 136\n                                                                                                                       // 137\nfunction chownFixSync (orig) {                                                                                         // 138\n  if (!orig) return orig                                                                                               // 139\n  return function (target, uid, gid) {                                                                                 // 140\n    try {                                                                                                              // 141\n      return orig.call(fs, target, uid, gid)                                                                           // 142\n    } catch (er) {                                                                                                     // 143\n      if (!chownErOk(er)) throw er                                                                                     // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\nfunction chownErOk (er) {                                                                                              // 149\n  // if there's no getuid, or if getuid() is something other than 0,                                                   // 150\n  // and the error is EINVAL or EPERM, then just ignore it.                                                            // 151\n  // This specific case is a silent failure in cp, install, tar,                                                       // 152\n  // and most other unix tools that manage permissions.                                                                // 153\n  // When running as root, or if other types of errors are encountered,                                                // 154\n  // then it's strict.                                                                                                 // 155\n  if (!er || (!process.getuid || process.getuid() !== 0)                                                               // 156\n      && (er.code === \"EINVAL\" || er.code === \"EPERM\")) return true                                                    // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\n                                                                                                                       // 160\n// if lchmod/lchown do not exist, then make them no-ops                                                                // 161\nif (!fs.lchmod) {                                                                                                      // 162\n  fs.lchmod = function (path, mode, cb) {                                                                              // 163\n    process.nextTick(cb)                                                                                               // 164\n  }                                                                                                                    // 165\n  fs.lchmodSync = function () {}                                                                                       // 166\n}                                                                                                                      // 167\nif (!fs.lchown) {                                                                                                      // 168\n  fs.lchown = function (path, uid, gid, cb) {                                                                          // 169\n    process.nextTick(cb)                                                                                               // 170\n  }                                                                                                                    // 171\n  fs.lchownSync = function () {}                                                                                       // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n                                                                                                                       // 175\n                                                                                                                       // 176\n// on Windows, A/V software can lock the directory, causing this                                                       // 177\n// to fail with an EACCES or EPERM if the directory contains newly                                                     // 178\n// created files.  Try again on failure, for up to 1 second.                                                           // 179\nif (process.platform === \"win32\") {                                                                                    // 180\n  var rename_ = fs.rename                                                                                              // 181\n  fs.rename = function rename (from, to, cb) {                                                                         // 182\n    var start = Date.now()                                                                                             // 183\n    rename_(from, to, function CB (er) {                                                                               // 184\n      if (er                                                                                                           // 185\n          && (er.code === \"EACCES\" || er.code === \"EPERM\")                                                             // 186\n          && Date.now() - start < 1000) {                                                                              // 187\n        return rename_(from, to, CB)                                                                                   // 188\n      }                                                                                                                // 189\n      cb(er)                                                                                                           // 190\n    })                                                                                                                 // 191\n  }                                                                                                                    // 192\n}                                                                                                                      // 193\n                                                                                                                       // 194\n                                                                                                                       // 195\n// if read() returns EAGAIN, then just try it again.                                                                   // 196\nvar read = fs.read                                                                                                     // 197\nfs.read = function (fd, buffer, offset, length, position, callback_) {                                                 // 198\n  var callback                                                                                                         // 199\n  if (callback_ && typeof callback_ === 'function') {                                                                  // 200\n    var eagCounter = 0                                                                                                 // 201\n    callback = function (er, _, __) {                                                                                  // 202\n      if (er && er.code === 'EAGAIN' && eagCounter < 10) {                                                             // 203\n        eagCounter ++                                                                                                  // 204\n        return read.call(fs, fd, buffer, offset, length, position, callback)                                           // 205\n      }                                                                                                                // 206\n      callback_.apply(this, arguments)                                                                                 // 207\n    }                                                                                                                  // 208\n  }                                                                                                                    // 209\n  return read.call(fs, fd, buffer, offset, length, position, callback)                                                 // 210\n}                                                                                                                      // 211\n                                                                                                                       // 212\nvar readSync = fs.readSync                                                                                             // 213\nfs.readSync = function (fd, buffer, offset, length, position) {                                                        // 214\n  var eagCounter = 0                                                                                                   // 215\n  while (true) {                                                                                                       // 216\n    try {                                                                                                              // 217\n      return readSync.call(fs, fd, buffer, offset, length, position)                                                   // 218\n    } catch (er) {                                                                                                     // 219\n      if (er.code === 'EAGAIN' && eagCounter < 10) {                                                                   // 220\n        eagCounter ++                                                                                                  // 221\n        continue                                                                                                       // 222\n      }                                                                                                                // 223\n      throw er                                                                                                         // 224\n    }                                                                                                                  // 225\n  }                                                                                                                    // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n                                                                                                                       // 229\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"assert\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/assert/package.json                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"assert\";                                                                                               // 1\nexports.version = \"1.3.0\";                                                                                             // 2\nexports.main = \"./assert.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"assert.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/assert/assert.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0                                                                      // 1\n//                                                                                                                     // 2\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!                                                                   // 3\n//                                                                                                                     // 4\n// Originally from narwhal.js (http://narwhaljs.org)                                                                   // 5\n// Copyright (c) 2009 Thomas Robinson <280north.com>                                                                   // 6\n//                                                                                                                     // 7\n// Permission is hereby granted, free of charge, to any person obtaining a copy                                        // 8\n// of this software and associated documentation files (the 'Software'), to                                            // 9\n// deal in the Software without restriction, including without limitation the                                          // 10\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or                                         // 11\n// sell copies of the Software, and to permit persons to whom the Software is                                          // 12\n// furnished to do so, subject to the following conditions:                                                            // 13\n//                                                                                                                     // 14\n// The above copyright notice and this permission notice shall be included in                                          // 15\n// all copies or substantial portions of the Software.                                                                 // 16\n//                                                                                                                     // 17\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                          // 18\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                            // 19\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                         // 20\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN                                          // 21\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                        // 22\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 23\n                                                                                                                       // 24\n// when used in node, this will actually load the util module we depend on                                             // 25\n// versus loading the builtin util module as happens otherwise                                                         // 26\n// this is a bug in node module loading as far as I am concerned                                                       // 27\nvar util = require('util/');                                                                                           // 28\n                                                                                                                       // 29\nvar pSlice = Array.prototype.slice;                                                                                    // 30\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 31\n                                                                                                                       // 32\n// 1. The assert module provides functions that throw                                                                  // 33\n// AssertionError's when particular conditions are not met. The                                                        // 34\n// assert module must conform to the following interface.                                                              // 35\n                                                                                                                       // 36\nvar assert = module.exports = ok;                                                                                      // 37\n                                                                                                                       // 38\n// 2. The AssertionError is defined in assert.                                                                         // 39\n// new assert.AssertionError({ message: message,                                                                       // 40\n//                             actual: actual,                                                                         // 41\n//                             expected: expected })                                                                   // 42\n                                                                                                                       // 43\nassert.AssertionError = function AssertionError(options) {                                                             // 44\n  this.name = 'AssertionError';                                                                                        // 45\n  this.actual = options.actual;                                                                                        // 46\n  this.expected = options.expected;                                                                                    // 47\n  this.operator = options.operator;                                                                                    // 48\n  if (options.message) {                                                                                               // 49\n    this.message = options.message;                                                                                    // 50\n    this.generatedMessage = false;                                                                                     // 51\n  } else {                                                                                                             // 52\n    this.message = getMessage(this);                                                                                   // 53\n    this.generatedMessage = true;                                                                                      // 54\n  }                                                                                                                    // 55\n  var stackStartFunction = options.stackStartFunction || fail;                                                         // 56\n                                                                                                                       // 57\n  if (Error.captureStackTrace) {                                                                                       // 58\n    Error.captureStackTrace(this, stackStartFunction);                                                                 // 59\n  }                                                                                                                    // 60\n  else {                                                                                                               // 61\n    // non v8 browsers so we can have a stacktrace                                                                     // 62\n    var err = new Error();                                                                                             // 63\n    if (err.stack) {                                                                                                   // 64\n      var out = err.stack;                                                                                             // 65\n                                                                                                                       // 66\n      // try to strip useless frames                                                                                   // 67\n      var fn_name = stackStartFunction.name;                                                                           // 68\n      var idx = out.indexOf('\\n' + fn_name);                                                                           // 69\n      if (idx >= 0) {                                                                                                  // 70\n        // once we have located the function frame                                                                     // 71\n        // we need to strip out everything before it (and its line)                                                    // 72\n        var next_line = out.indexOf('\\n', idx + 1);                                                                    // 73\n        out = out.substring(next_line + 1);                                                                            // 74\n      }                                                                                                                // 75\n                                                                                                                       // 76\n      this.stack = out;                                                                                                // 77\n    }                                                                                                                  // 78\n  }                                                                                                                    // 79\n};                                                                                                                     // 80\n                                                                                                                       // 81\n// assert.AssertionError instanceof Error                                                                              // 82\nutil.inherits(assert.AssertionError, Error);                                                                           // 83\n                                                                                                                       // 84\nfunction replacer(key, value) {                                                                                        // 85\n  if (util.isUndefined(value)) {                                                                                       // 86\n    return '' + value;                                                                                                 // 87\n  }                                                                                                                    // 88\n  if (util.isNumber(value) && !isFinite(value)) {                                                                      // 89\n    return value.toString();                                                                                           // 90\n  }                                                                                                                    // 91\n  if (util.isFunction(value) || util.isRegExp(value)) {                                                                // 92\n    return value.toString();                                                                                           // 93\n  }                                                                                                                    // 94\n  return value;                                                                                                        // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\nfunction truncate(s, n) {                                                                                              // 98\n  if (util.isString(s)) {                                                                                              // 99\n    return s.length < n ? s : s.slice(0, n);                                                                           // 100\n  } else {                                                                                                             // 101\n    return s;                                                                                                          // 102\n  }                                                                                                                    // 103\n}                                                                                                                      // 104\n                                                                                                                       // 105\nfunction getMessage(self) {                                                                                            // 106\n  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +                                                  // 107\n         self.operator + ' ' +                                                                                         // 108\n         truncate(JSON.stringify(self.expected, replacer), 128);                                                       // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\n// At present only the three keys mentioned above are used and                                                         // 112\n// understood by the spec. Implementations or sub modules can pass                                                     // 113\n// other keys to the AssertionError's constructor - they will be                                                       // 114\n// ignored.                                                                                                            // 115\n                                                                                                                       // 116\n// 3. All of the following functions must throw an AssertionError                                                      // 117\n// when a corresponding condition is not met, with a message that                                                      // 118\n// may be undefined if not provided.  All assertion methods provide                                                    // 119\n// both the actual and expected values to the assertion error for                                                      // 120\n// display purposes.                                                                                                   // 121\n                                                                                                                       // 122\nfunction fail(actual, expected, message, operator, stackStartFunction) {                                               // 123\n  throw new assert.AssertionError({                                                                                    // 124\n    message: message,                                                                                                  // 125\n    actual: actual,                                                                                                    // 126\n    expected: expected,                                                                                                // 127\n    operator: operator,                                                                                                // 128\n    stackStartFunction: stackStartFunction                                                                             // 129\n  });                                                                                                                  // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\n// EXTENSION! allows for well behaved errors defined elsewhere.                                                        // 133\nassert.fail = fail;                                                                                                    // 134\n                                                                                                                       // 135\n// 4. Pure assertion tests whether a value is truthy, as determined                                                    // 136\n// by !!guard.                                                                                                         // 137\n// assert.ok(guard, message_opt);                                                                                      // 138\n// This statement is equivalent to assert.equal(true, !!guard,                                                         // 139\n// message_opt);. To test strictly for the value true, use                                                             // 140\n// assert.strictEqual(true, guard, message_opt);.                                                                      // 141\n                                                                                                                       // 142\nfunction ok(value, message) {                                                                                          // 143\n  if (!value) fail(value, true, message, '==', assert.ok);                                                             // 144\n}                                                                                                                      // 145\nassert.ok = ok;                                                                                                        // 146\n                                                                                                                       // 147\n// 5. The equality assertion tests shallow, coercive equality with                                                     // 148\n// ==.                                                                                                                 // 149\n// assert.equal(actual, expected, message_opt);                                                                        // 150\n                                                                                                                       // 151\nassert.equal = function equal(actual, expected, message) {                                                             // 152\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);                                         // 153\n};                                                                                                                     // 154\n                                                                                                                       // 155\n// 6. The non-equality assertion tests for whether two objects are not equal                                           // 156\n// with != assert.notEqual(actual, expected, message_opt);                                                             // 157\n                                                                                                                       // 158\nassert.notEqual = function notEqual(actual, expected, message) {                                                       // 159\n  if (actual == expected) {                                                                                            // 160\n    fail(actual, expected, message, '!=', assert.notEqual);                                                            // 161\n  }                                                                                                                    // 162\n};                                                                                                                     // 163\n                                                                                                                       // 164\n// 7. The equivalence assertion tests a deep equality relation.                                                        // 165\n// assert.deepEqual(actual, expected, message_opt);                                                                    // 166\n                                                                                                                       // 167\nassert.deepEqual = function deepEqual(actual, expected, message) {                                                     // 168\n  if (!_deepEqual(actual, expected)) {                                                                                 // 169\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);                                                    // 170\n  }                                                                                                                    // 171\n};                                                                                                                     // 172\n                                                                                                                       // 173\nfunction _deepEqual(actual, expected) {                                                                                // 174\n  // 7.1. All identical values are equivalent, as determined by ===.                                                   // 175\n  if (actual === expected) {                                                                                           // 176\n    return true;                                                                                                       // 177\n                                                                                                                       // 178\n  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {                                                       // 179\n    if (actual.length != expected.length) return false;                                                                // 180\n                                                                                                                       // 181\n    for (var i = 0; i < actual.length; i++) {                                                                          // 182\n      if (actual[i] !== expected[i]) return false;                                                                     // 183\n    }                                                                                                                  // 184\n                                                                                                                       // 185\n    return true;                                                                                                       // 186\n                                                                                                                       // 187\n  // 7.2. If the expected value is a Date object, the actual value is                                                  // 188\n  // equivalent if it is also a Date object that refers to the same time.                                              // 189\n  } else if (util.isDate(actual) && util.isDate(expected)) {                                                           // 190\n    return actual.getTime() === expected.getTime();                                                                    // 191\n                                                                                                                       // 192\n  // 7.3 If the expected value is a RegExp object, the actual value is                                                 // 193\n  // equivalent if it is also a RegExp object with the same source and                                                 // 194\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).                                                    // 195\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {                                                       // 196\n    return actual.source === expected.source &&                                                                        // 197\n           actual.global === expected.global &&                                                                        // 198\n           actual.multiline === expected.multiline &&                                                                  // 199\n           actual.lastIndex === expected.lastIndex &&                                                                  // 200\n           actual.ignoreCase === expected.ignoreCase;                                                                  // 201\n                                                                                                                       // 202\n  // 7.4. Other pairs that do not both pass typeof value == 'object',                                                  // 203\n  // equivalence is determined by ==.                                                                                  // 204\n  } else if (!util.isObject(actual) && !util.isObject(expected)) {                                                     // 205\n    return actual == expected;                                                                                         // 206\n                                                                                                                       // 207\n  // 7.5 For all other Object pairs, including Array objects, equivalence is                                           // 208\n  // determined by having the same number of owned properties (as verified                                             // 209\n  // with Object.prototype.hasOwnProperty.call), the same set of keys                                                  // 210\n  // (although not necessarily the same order), equivalent values for every                                            // 211\n  // corresponding key, and an identical 'prototype' property. Note: this                                              // 212\n  // accounts for both named and indexed properties on Arrays.                                                         // 213\n  } else {                                                                                                             // 214\n    return objEquiv(actual, expected);                                                                                 // 215\n  }                                                                                                                    // 216\n}                                                                                                                      // 217\n                                                                                                                       // 218\nfunction isArguments(object) {                                                                                         // 219\n  return Object.prototype.toString.call(object) == '[object Arguments]';                                               // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\nfunction objEquiv(a, b) {                                                                                              // 223\n  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))                                                          // 224\n    return false;                                                                                                      // 225\n  // an identical 'prototype' property.                                                                                // 226\n  if (a.prototype !== b.prototype) return false;                                                                       // 227\n  // if one is a primitive, the other must be same                                                                     // 228\n  if (util.isPrimitive(a) || util.isPrimitive(b)) {                                                                    // 229\n    return a === b;                                                                                                    // 230\n  }                                                                                                                    // 231\n  var aIsArgs = isArguments(a),                                                                                        // 232\n      bIsArgs = isArguments(b);                                                                                        // 233\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))                                                                  // 234\n    return false;                                                                                                      // 235\n  if (aIsArgs) {                                                                                                       // 236\n    a = pSlice.call(a);                                                                                                // 237\n    b = pSlice.call(b);                                                                                                // 238\n    return _deepEqual(a, b);                                                                                           // 239\n  }                                                                                                                    // 240\n  var ka = objectKeys(a),                                                                                              // 241\n      kb = objectKeys(b),                                                                                              // 242\n      key, i;                                                                                                          // 243\n  // having the same number of owned properties (keys incorporates                                                     // 244\n  // hasOwnProperty)                                                                                                   // 245\n  if (ka.length != kb.length)                                                                                          // 246\n    return false;                                                                                                      // 247\n  //the same set of keys (although not necessarily the same order),                                                    // 248\n  ka.sort();                                                                                                           // 249\n  kb.sort();                                                                                                           // 250\n  //~~~cheap key test                                                                                                  // 251\n  for (i = ka.length - 1; i >= 0; i--) {                                                                               // 252\n    if (ka[i] != kb[i])                                                                                                // 253\n      return false;                                                                                                    // 254\n  }                                                                                                                    // 255\n  //equivalent values for every corresponding key, and                                                                 // 256\n  //~~~possibly expensive deep test                                                                                    // 257\n  for (i = ka.length - 1; i >= 0; i--) {                                                                               // 258\n    key = ka[i];                                                                                                       // 259\n    if (!_deepEqual(a[key], b[key])) return false;                                                                     // 260\n  }                                                                                                                    // 261\n  return true;                                                                                                         // 262\n}                                                                                                                      // 263\n                                                                                                                       // 264\n// 8. The non-equivalence assertion tests for any deep inequality.                                                     // 265\n// assert.notDeepEqual(actual, expected, message_opt);                                                                 // 266\n                                                                                                                       // 267\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {                                               // 268\n  if (_deepEqual(actual, expected)) {                                                                                  // 269\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);                                              // 270\n  }                                                                                                                    // 271\n};                                                                                                                     // 272\n                                                                                                                       // 273\n// 9. The strict equality assertion tests strict equality, as determined by ===.                                       // 274\n// assert.strictEqual(actual, expected, message_opt);                                                                  // 275\n                                                                                                                       // 276\nassert.strictEqual = function strictEqual(actual, expected, message) {                                                 // 277\n  if (actual !== expected) {                                                                                           // 278\n    fail(actual, expected, message, '===', assert.strictEqual);                                                        // 279\n  }                                                                                                                    // 280\n};                                                                                                                     // 281\n                                                                                                                       // 282\n// 10. The strict non-equality assertion tests for strict inequality, as                                               // 283\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);                                           // 284\n                                                                                                                       // 285\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {                                           // 286\n  if (actual === expected) {                                                                                           // 287\n    fail(actual, expected, message, '!==', assert.notStrictEqual);                                                     // 288\n  }                                                                                                                    // 289\n};                                                                                                                     // 290\n                                                                                                                       // 291\nfunction expectedException(actual, expected) {                                                                         // 292\n  if (!actual || !expected) {                                                                                          // 293\n    return false;                                                                                                      // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {                                                 // 297\n    return expected.test(actual);                                                                                      // 298\n  } else if (actual instanceof expected) {                                                                             // 299\n    return true;                                                                                                       // 300\n  } else if (expected.call({}, actual) === true) {                                                                     // 301\n    return true;                                                                                                       // 302\n  }                                                                                                                    // 303\n                                                                                                                       // 304\n  return false;                                                                                                        // 305\n}                                                                                                                      // 306\n                                                                                                                       // 307\nfunction _throws(shouldThrow, block, expected, message) {                                                              // 308\n  var actual;                                                                                                          // 309\n                                                                                                                       // 310\n  if (util.isString(expected)) {                                                                                       // 311\n    message = expected;                                                                                                // 312\n    expected = null;                                                                                                   // 313\n  }                                                                                                                    // 314\n                                                                                                                       // 315\n  try {                                                                                                                // 316\n    block();                                                                                                           // 317\n  } catch (e) {                                                                                                        // 318\n    actual = e;                                                                                                        // 319\n  }                                                                                                                    // 320\n                                                                                                                       // 321\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +                                          // 322\n            (message ? ' ' + message : '.');                                                                           // 323\n                                                                                                                       // 324\n  if (shouldThrow && !actual) {                                                                                        // 325\n    fail(actual, expected, 'Missing expected exception' + message);                                                    // 326\n  }                                                                                                                    // 327\n                                                                                                                       // 328\n  if (!shouldThrow && expectedException(actual, expected)) {                                                           // 329\n    fail(actual, expected, 'Got unwanted exception' + message);                                                        // 330\n  }                                                                                                                    // 331\n                                                                                                                       // 332\n  if ((shouldThrow && actual && expected &&                                                                            // 333\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {                                             // 334\n    throw actual;                                                                                                      // 335\n  }                                                                                                                    // 336\n}                                                                                                                      // 337\n                                                                                                                       // 338\n// 11. Expected to throw an error:                                                                                     // 339\n// assert.throws(block, Error_opt, message_opt);                                                                       // 340\n                                                                                                                       // 341\nassert.throws = function(block, /*optional*/error, /*optional*/message) {                                              // 342\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));                                                          // 343\n};                                                                                                                     // 344\n                                                                                                                       // 345\n// EXTENSION! This is annoying to write outside this module.                                                           // 346\nassert.doesNotThrow = function(block, /*optional*/message) {                                                           // 347\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));                                                         // 348\n};                                                                                                                     // 349\n                                                                                                                       // 350\nassert.ifError = function(err) { if (err) {throw err;}};                                                               // 351\n                                                                                                                       // 352\nvar objectKeys = Object.keys || function (obj) {                                                                       // 353\n  var keys = [];                                                                                                       // 354\n  for (var key in obj) {                                                                                               // 355\n    if (hasOwn.call(obj, key)) keys.push(key);                                                                         // 356\n  }                                                                                                                    // 357\n  return keys;                                                                                                         // 358\n};                                                                                                                     // 359\n                                                                                                                       // 360\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"minimatch\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/minimatch/package.json                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"minimatch\";                                                                                            // 1\nexports.version = \"0.2.14\";                                                                                            // 2\nexports.main = \"minimatch.js\";                                                                                         // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimatch.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/minimatch/minimatch.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (require, exports, module, platform) {                                                                      // 1\n                                                                                                                       // 2\nif (module) module.exports = minimatch                                                                                 // 3\nelse exports.minimatch = minimatch                                                                                     // 4\n                                                                                                                       // 5\nif (!require) {                                                                                                        // 6\n  require = function (id) {                                                                                            // 7\n    switch (id) {                                                                                                      // 8\n      case \"sigmund\": return function sigmund (obj) {                                                                  // 9\n        return JSON.stringify(obj)                                                                                     // 10\n      }                                                                                                                // 11\n      case \"path\": return { basename: function (f) {                                                                   // 12\n        f = f.split(/[\\/\\\\]/)                                                                                          // 13\n        var e = f.pop()                                                                                                // 14\n        if (!e) e = f.pop()                                                                                            // 15\n        return e                                                                                                       // 16\n      }}                                                                                                               // 17\n      case \"lru-cache\": return function LRUCache () {                                                                  // 18\n        // not quite an LRU, but still space-limited.                                                                  // 19\n        var cache = {}                                                                                                 // 20\n        var cnt = 0                                                                                                    // 21\n        this.set = function (k, v) {                                                                                   // 22\n          cnt ++                                                                                                       // 23\n          if (cnt >= 100) cache = {}                                                                                   // 24\n          cache[k] = v                                                                                                 // 25\n        }                                                                                                              // 26\n        this.get = function (k) { return cache[k] }                                                                    // 27\n      }                                                                                                                // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nminimatch.Minimatch = Minimatch                                                                                        // 33\n                                                                                                                       // 34\nvar LRU = require(\"lru-cache\")                                                                                         // 35\n  , cache = minimatch.cache = new LRU({max: 100})                                                                      // 36\n  , GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}                                                            // 37\n  , sigmund = require(\"sigmund\")                                                                                       // 38\n                                                                                                                       // 39\nvar path = require(\"path\")                                                                                             // 40\n  // any single thing other than /                                                                                     // 41\n  // don't need to escape / when using new RegExp()                                                                    // 42\n  , qmark = \"[^/]\"                                                                                                     // 43\n                                                                                                                       // 44\n  // * => any number of characters                                                                                     // 45\n  , star = qmark + \"*?\"                                                                                                // 46\n                                                                                                                       // 47\n  // ** when dots are allowed.  Anything goes, except .. and .                                                         // 48\n  // not (^ or / followed by one or two dots followed by $ or /),                                                      // 49\n  // followed by anything, any number of times.                                                                        // 50\n  , twoStarDot = \"(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?\"                                                           // 51\n                                                                                                                       // 52\n  // not a ^ or / followed by a dot,                                                                                   // 53\n  // followed by anything, any number of times.                                                                        // 54\n  , twoStarNoDot = \"(?:(?!(?:\\\\\\/|^)\\\\.).)*?\"                                                                          // 55\n                                                                                                                       // 56\n  // characters that need to be escaped in RegExp.                                                                     // 57\n  , reSpecials = charSet(\"().*{}+?[]^$\\\\!\")                                                                            // 58\n                                                                                                                       // 59\n// \"abc\" -> { a:true, b:true, c:true }                                                                                 // 60\nfunction charSet (s) {                                                                                                 // 61\n  return s.split(\"\").reduce(function (set, c) {                                                                        // 62\n    set[c] = true                                                                                                      // 63\n    return set                                                                                                         // 64\n  }, {})                                                                                                               // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n// normalizes slashes.                                                                                                 // 68\nvar slashSplit = /\\/+/                                                                                                 // 69\n                                                                                                                       // 70\nminimatch.filter = filter                                                                                              // 71\nfunction filter (pattern, options) {                                                                                   // 72\n  options = options || {}                                                                                              // 73\n  return function (p, i, list) {                                                                                       // 74\n    return minimatch(p, pattern, options)                                                                              // 75\n  }                                                                                                                    // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction ext (a, b) {                                                                                                  // 79\n  a = a || {}                                                                                                          // 80\n  b = b || {}                                                                                                          // 81\n  var t = {}                                                                                                           // 82\n  Object.keys(b).forEach(function (k) {                                                                                // 83\n    t[k] = b[k]                                                                                                        // 84\n  })                                                                                                                   // 85\n  Object.keys(a).forEach(function (k) {                                                                                // 86\n    t[k] = a[k]                                                                                                        // 87\n  })                                                                                                                   // 88\n  return t                                                                                                             // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\nminimatch.defaults = function (def) {                                                                                  // 92\n  if (!def || !Object.keys(def).length) return minimatch                                                               // 93\n                                                                                                                       // 94\n  var orig = minimatch                                                                                                 // 95\n                                                                                                                       // 96\n  var m = function minimatch (p, pattern, options) {                                                                   // 97\n    return orig.minimatch(p, pattern, ext(def, options))                                                               // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  m.Minimatch = function Minimatch (pattern, options) {                                                                // 101\n    return new orig.Minimatch(pattern, ext(def, options))                                                              // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  return m                                                                                                             // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\nMinimatch.defaults = function (def) {                                                                                  // 108\n  if (!def || !Object.keys(def).length) return Minimatch                                                               // 109\n  return minimatch.defaults(def).Minimatch                                                                             // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\n                                                                                                                       // 113\nfunction minimatch (p, pattern, options) {                                                                             // 114\n  if (typeof pattern !== \"string\") {                                                                                   // 115\n    throw new TypeError(\"glob pattern string required\")                                                                // 116\n  }                                                                                                                    // 117\n                                                                                                                       // 118\n  if (!options) options = {}                                                                                           // 119\n                                                                                                                       // 120\n  // shortcut: comments match nothing.                                                                                 // 121\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {                                                               // 122\n    return false                                                                                                       // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  // \"\" only matches \"\"                                                                                                // 126\n  if (pattern.trim() === \"\") return p === \"\"                                                                           // 127\n                                                                                                                       // 128\n  return new Minimatch(pattern, options).match(p)                                                                      // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\nfunction Minimatch (pattern, options) {                                                                                // 132\n  if (!(this instanceof Minimatch)) {                                                                                  // 133\n    return new Minimatch(pattern, options, cache)                                                                      // 134\n  }                                                                                                                    // 135\n                                                                                                                       // 136\n  if (typeof pattern !== \"string\") {                                                                                   // 137\n    throw new TypeError(\"glob pattern string required\")                                                                // 138\n  }                                                                                                                    // 139\n                                                                                                                       // 140\n  if (!options) options = {}                                                                                           // 141\n  pattern = pattern.trim()                                                                                             // 142\n                                                                                                                       // 143\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.                                                      // 145\n  if (platform === \"win32\") {                                                                                          // 146\n    pattern = pattern.split(\"\\\\\").join(\"/\")                                                                            // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  // lru storage.                                                                                                      // 150\n  // these things aren't particularly big, but walking down the string                                                 // 151\n  // and turning it into a regexp can get pretty costly.                                                               // 152\n  var cacheKey = pattern + \"\\n\" + sigmund(options)                                                                     // 153\n  var cached = minimatch.cache.get(cacheKey)                                                                           // 154\n  if (cached) return cached                                                                                            // 155\n  minimatch.cache.set(cacheKey, this)                                                                                  // 156\n                                                                                                                       // 157\n  this.options = options                                                                                               // 158\n  this.set = []                                                                                                        // 159\n  this.pattern = pattern                                                                                               // 160\n  this.regexp = null                                                                                                   // 161\n  this.negate = false                                                                                                  // 162\n  this.comment = false                                                                                                 // 163\n  this.empty = false                                                                                                   // 164\n                                                                                                                       // 165\n  // make the set of regexps etc.                                                                                      // 166\n  this.make()                                                                                                          // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\nMinimatch.prototype.debug = function() {}                                                                              // 170\n                                                                                                                       // 171\nMinimatch.prototype.make = make                                                                                        // 172\nfunction make () {                                                                                                     // 173\n  // don't do it more than once.                                                                                       // 174\n  if (this._made) return                                                                                               // 175\n                                                                                                                       // 176\n  var pattern = this.pattern                                                                                           // 177\n  var options = this.options                                                                                           // 178\n                                                                                                                       // 179\n  // empty patterns and comments match nothing.                                                                        // 180\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {                                                               // 181\n    this.comment = true                                                                                                // 182\n    return                                                                                                             // 183\n  }                                                                                                                    // 184\n  if (!pattern) {                                                                                                      // 185\n    this.empty = true                                                                                                  // 186\n    return                                                                                                             // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  // step 1: figure out negation, etc.                                                                                 // 190\n  this.parseNegate()                                                                                                   // 191\n                                                                                                                       // 192\n  // step 2: expand braces                                                                                             // 193\n  var set = this.globSet = this.braceExpand()                                                                          // 194\n                                                                                                                       // 195\n  if (options.debug) this.debug = console.error                                                                        // 196\n                                                                                                                       // 197\n  this.debug(this.pattern, set)                                                                                        // 198\n                                                                                                                       // 199\n  // step 3: now we have a set, so turn each one into a series of path-portion                                         // 200\n  // matching patterns.                                                                                                // 201\n  // These will be regexps, except in the case of \"**\", which is                                                       // 202\n  // set to the GLOBSTAR object for globstar behavior,                                                                 // 203\n  // and will not contain any / characters                                                                             // 204\n  set = this.globParts = set.map(function (s) {                                                                        // 205\n    return s.split(slashSplit)                                                                                         // 206\n  })                                                                                                                   // 207\n                                                                                                                       // 208\n  this.debug(this.pattern, set)                                                                                        // 209\n                                                                                                                       // 210\n  // glob --> regexps                                                                                                  // 211\n  set = set.map(function (s, si, set) {                                                                                // 212\n    return s.map(this.parse, this)                                                                                     // 213\n  }, this)                                                                                                             // 214\n                                                                                                                       // 215\n  this.debug(this.pattern, set)                                                                                        // 216\n                                                                                                                       // 217\n  // filter out everything that didn't compile properly.                                                               // 218\n  set = set.filter(function (s) {                                                                                      // 219\n    return -1 === s.indexOf(false)                                                                                     // 220\n  })                                                                                                                   // 221\n                                                                                                                       // 222\n  this.debug(this.pattern, set)                                                                                        // 223\n                                                                                                                       // 224\n  this.set = set                                                                                                       // 225\n}                                                                                                                      // 226\n                                                                                                                       // 227\nMinimatch.prototype.parseNegate = parseNegate                                                                          // 228\nfunction parseNegate () {                                                                                              // 229\n  var pattern = this.pattern                                                                                           // 230\n    , negate = false                                                                                                   // 231\n    , options = this.options                                                                                           // 232\n    , negateOffset = 0                                                                                                 // 233\n                                                                                                                       // 234\n  if (options.nonegate) return                                                                                         // 235\n                                                                                                                       // 236\n  for ( var i = 0, l = pattern.length                                                                                  // 237\n      ; i < l && pattern.charAt(i) === \"!\"                                                                             // 238\n      ; i ++) {                                                                                                        // 239\n    negate = !negate                                                                                                   // 240\n    negateOffset ++                                                                                                    // 241\n  }                                                                                                                    // 242\n                                                                                                                       // 243\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)                                                        // 244\n  this.negate = negate                                                                                                 // 245\n}                                                                                                                      // 246\n                                                                                                                       // 247\n// Brace expansion:                                                                                                    // 248\n// a{b,c}d -> abd acd                                                                                                  // 249\n// a{b,}c -> abc ac                                                                                                    // 250\n// a{0..3}d -> a0d a1d a2d a3d                                                                                         // 251\n// a{b,c{d,e}f}g -> abg acdfg acefg                                                                                    // 252\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg                                                                            // 253\n//                                                                                                                     // 254\n// Invalid sets are not expanded.                                                                                      // 255\n// a{2..}b -> a{2..}b                                                                                                  // 256\n// a{b}c -> a{b}c                                                                                                      // 257\nminimatch.braceExpand = function (pattern, options) {                                                                  // 258\n  return new Minimatch(pattern, options).braceExpand()                                                                 // 259\n}                                                                                                                      // 260\n                                                                                                                       // 261\nMinimatch.prototype.braceExpand = braceExpand                                                                          // 262\nfunction braceExpand (pattern, options) {                                                                              // 263\n  options = options || this.options                                                                                    // 264\n  pattern = typeof pattern === \"undefined\"                                                                             // 265\n    ? this.pattern : pattern                                                                                           // 266\n                                                                                                                       // 267\n  if (typeof pattern === \"undefined\") {                                                                                // 268\n    throw new Error(\"undefined pattern\")                                                                               // 269\n  }                                                                                                                    // 270\n                                                                                                                       // 271\n  if (options.nobrace ||                                                                                               // 272\n      !pattern.match(/\\{.*\\}/)) {                                                                                      // 273\n    // shortcut. no need to expand.                                                                                    // 274\n    return [pattern]                                                                                                   // 275\n  }                                                                                                                    // 276\n                                                                                                                       // 277\n  var escaping = false                                                                                                 // 278\n                                                                                                                       // 279\n  // examples and comments refer to this crazy pattern:                                                                // 280\n  // a{b,c{d,e},{f,g}h}x{y,z}                                                                                          // 281\n  // expected:                                                                                                         // 282\n  // abxy                                                                                                              // 283\n  // abxz                                                                                                              // 284\n  // acdxy                                                                                                             // 285\n  // acdxz                                                                                                             // 286\n  // acexy                                                                                                             // 287\n  // acexz                                                                                                             // 288\n  // afhxy                                                                                                             // 289\n  // afhxz                                                                                                             // 290\n  // aghxy                                                                                                             // 291\n  // aghxz                                                                                                             // 292\n                                                                                                                       // 293\n  // everything before the first \\{ is just a prefix.                                                                  // 294\n  // So, we pluck that off, and work with the rest,                                                                    // 295\n  // and then prepend it to everything we find.                                                                        // 296\n  if (pattern.charAt(0) !== \"{\") {                                                                                     // 297\n    this.debug(pattern)                                                                                                // 298\n    var prefix = null                                                                                                  // 299\n    for (var i = 0, l = pattern.length; i < l; i ++) {                                                                 // 300\n      var c = pattern.charAt(i)                                                                                        // 301\n      this.debug(i, c)                                                                                                 // 302\n      if (c === \"\\\\\") {                                                                                                // 303\n        escaping = !escaping                                                                                           // 304\n      } else if (c === \"{\" && !escaping) {                                                                             // 305\n        prefix = pattern.substr(0, i)                                                                                  // 306\n        break                                                                                                          // 307\n      }                                                                                                                // 308\n    }                                                                                                                  // 309\n                                                                                                                       // 310\n    // actually no sets, all { were escaped.                                                                           // 311\n    if (prefix === null) {                                                                                             // 312\n      this.debug(\"no sets\")                                                                                            // 313\n      return [pattern]                                                                                                 // 314\n    }                                                                                                                  // 315\n                                                                                                                       // 316\n   var tail = braceExpand.call(this, pattern.substr(i), options)                                                       // 317\n    return tail.map(function (t) {                                                                                     // 318\n      return prefix + t                                                                                                // 319\n    })                                                                                                                 // 320\n  }                                                                                                                    // 321\n                                                                                                                       // 322\n  // now we have something like:                                                                                       // 323\n  // {b,c{d,e},{f,g}h}x{y,z}                                                                                           // 324\n  // walk through the set, expanding each part, until                                                                  // 325\n  // the set ends.  then, we'll expand the suffix.                                                                     // 326\n  // If the set only has a single member, then'll put the {} back                                                      // 327\n                                                                                                                       // 328\n  // first, handle numeric sets, since they're easier                                                                  // 329\n  var numset = pattern.match(/^\\{(-?[0-9]+)\\.\\.(-?[0-9]+)\\}/)                                                          // 330\n  if (numset) {                                                                                                        // 331\n    this.debug(\"numset\", numset[1], numset[2])                                                                         // 332\n    var suf = braceExpand.call(this, pattern.substr(numset[0].length), options)                                        // 333\n      , start = +numset[1]                                                                                             // 334\n      , end = +numset[2]                                                                                               // 335\n      , inc = start > end ? -1 : 1                                                                                     // 336\n      , set = []                                                                                                       // 337\n    for (var i = start; i != (end + inc); i += inc) {                                                                  // 338\n      // append all the suffixes                                                                                       // 339\n      for (var ii = 0, ll = suf.length; ii < ll; ii ++) {                                                              // 340\n        set.push(i + suf[ii])                                                                                          // 341\n      }                                                                                                                // 342\n    }                                                                                                                  // 343\n    return set                                                                                                         // 344\n  }                                                                                                                    // 345\n                                                                                                                       // 346\n  // ok, walk through the set                                                                                          // 347\n  // We hope, somewhat optimistically, that there                                                                      // 348\n  // will be a } at the end.                                                                                           // 349\n  // If the closing brace isn't found, then the pattern is                                                             // 350\n  // interpreted as braceExpand(\"\\\\\" + pattern) so that                                                                // 351\n  // the leading \\{ will be interpreted literally.                                                                     // 352\n  var i = 1 // skip the \\{                                                                                             // 353\n    , depth = 1                                                                                                        // 354\n    , set = []                                                                                                         // 355\n    , member = \"\"                                                                                                      // 356\n    , sawEnd = false                                                                                                   // 357\n    , escaping = false                                                                                                 // 358\n                                                                                                                       // 359\n  function addMember () {                                                                                              // 360\n    set.push(member)                                                                                                   // 361\n    member = \"\"                                                                                                        // 362\n  }                                                                                                                    // 363\n                                                                                                                       // 364\n  this.debug(\"Entering for\")                                                                                           // 365\n  FOR: for (i = 1, l = pattern.length; i < l; i ++) {                                                                  // 366\n    var c = pattern.charAt(i)                                                                                          // 367\n    this.debug(\"\", i, c)                                                                                               // 368\n                                                                                                                       // 369\n    if (escaping) {                                                                                                    // 370\n      escaping = false                                                                                                 // 371\n      member += \"\\\\\" + c                                                                                               // 372\n    } else {                                                                                                           // 373\n      switch (c) {                                                                                                     // 374\n        case \"\\\\\":                                                                                                     // 375\n          escaping = true                                                                                              // 376\n          continue                                                                                                     // 377\n                                                                                                                       // 378\n        case \"{\":                                                                                                      // 379\n          depth ++                                                                                                     // 380\n          member += \"{\"                                                                                                // 381\n          continue                                                                                                     // 382\n                                                                                                                       // 383\n        case \"}\":                                                                                                      // 384\n          depth --                                                                                                     // 385\n          // if this closes the actual set, then we're done                                                            // 386\n          if (depth === 0) {                                                                                           // 387\n            addMember()                                                                                                // 388\n            // pluck off the close-brace                                                                               // 389\n            i ++                                                                                                       // 390\n            break FOR                                                                                                  // 391\n          } else {                                                                                                     // 392\n            member += c                                                                                                // 393\n            continue                                                                                                   // 394\n          }                                                                                                            // 395\n                                                                                                                       // 396\n        case \",\":                                                                                                      // 397\n          if (depth === 1) {                                                                                           // 398\n            addMember()                                                                                                // 399\n          } else {                                                                                                     // 400\n            member += c                                                                                                // 401\n          }                                                                                                            // 402\n          continue                                                                                                     // 403\n                                                                                                                       // 404\n        default:                                                                                                       // 405\n          member += c                                                                                                  // 406\n          continue                                                                                                     // 407\n      } // switch                                                                                                      // 408\n    } // else                                                                                                          // 409\n  } // for                                                                                                             // 410\n                                                                                                                       // 411\n  // now we've either finished the set, and the suffix is                                                              // 412\n  // pattern.substr(i), or we have *not* closed the set,                                                               // 413\n  // and need to escape the leading brace                                                                              // 414\n  if (depth !== 0) {                                                                                                   // 415\n    this.debug(\"didn't close\", pattern)                                                                                // 416\n    return braceExpand.call(this, \"\\\\\" + pattern, options)                                                             // 417\n  }                                                                                                                    // 418\n                                                                                                                       // 419\n  // x{y,z} -> [\"xy\", \"xz\"]                                                                                            // 420\n  this.debug(\"set\", set)                                                                                               // 421\n  this.debug(\"suffix\", pattern.substr(i))                                                                              // 422\n  var suf = braceExpand.call(this, pattern.substr(i), options)                                                         // 423\n  // [\"b\", \"c{d,e}\",\"{f,g}h\"] ->                                                                                       // 424\n  //   [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]]                                                                             // 425\n  var addBraces = set.length === 1                                                                                     // 426\n  this.debug(\"set pre-expanded\", set)                                                                                  // 427\n  set = set.map(function (p) {                                                                                         // 428\n    return braceExpand.call(this, p, options)                                                                          // 429\n  }, this)                                                                                                             // 430\n  this.debug(\"set expanded\", set)                                                                                      // 431\n                                                                                                                       // 432\n                                                                                                                       // 433\n  // [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]] ->                                                                            // 434\n  //   [\"b\", \"cd\", \"ce\", \"fh\", \"gh\"]                                                                                   // 435\n  set = set.reduce(function (l, r) {                                                                                   // 436\n    return l.concat(r)                                                                                                 // 437\n  })                                                                                                                   // 438\n                                                                                                                       // 439\n  if (addBraces) {                                                                                                     // 440\n    set = set.map(function (s) {                                                                                       // 441\n      return \"{\" + s + \"}\"                                                                                             // 442\n    })                                                                                                                 // 443\n  }                                                                                                                    // 444\n                                                                                                                       // 445\n  // now attach the suffixes.                                                                                          // 446\n  var ret = []                                                                                                         // 447\n  for (var i = 0, l = set.length; i < l; i ++) {                                                                       // 448\n    for (var ii = 0, ll = suf.length; ii < ll; ii ++) {                                                                // 449\n      ret.push(set[i] + suf[ii])                                                                                       // 450\n    }                                                                                                                  // 451\n  }                                                                                                                    // 452\n  return ret                                                                                                           // 453\n}                                                                                                                      // 454\n                                                                                                                       // 455\n// parse a component of the expanded set.                                                                              // 456\n// At this point, no pattern may contain \"/\" in it                                                                     // 457\n// so we're going to return a 2d array, where each entry is the full                                                   // 458\n// pattern, split on '/', and then turned into a regular expression.                                                   // 459\n// A regexp is made at the end which joins each array with an                                                          // 460\n// escaped /, and another full one which joins each regexp with |.                                                     // 461\n//                                                                                                                     // 462\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning                                             // 463\n// when it is the *only* thing in a path portion.  Otherwise, any series                                               // 464\n// of * is equivalent to a single *.  Globstar behavior is enabled by                                                  // 465\n// default, and can be disabled by setting options.noglobstar.                                                         // 466\nMinimatch.prototype.parse = parse                                                                                      // 467\nvar SUBPARSE = {}                                                                                                      // 468\nfunction parse (pattern, isSub) {                                                                                      // 469\n  var options = this.options                                                                                           // 470\n                                                                                                                       // 471\n  // shortcuts                                                                                                         // 472\n  if (!options.noglobstar && pattern === \"**\") return GLOBSTAR                                                         // 473\n  if (pattern === \"\") return \"\"                                                                                        // 474\n                                                                                                                       // 475\n  var re = \"\"                                                                                                          // 476\n    , hasMagic = !!options.nocase                                                                                      // 477\n    , escaping = false                                                                                                 // 478\n    // ? => one single character                                                                                       // 479\n    , patternListStack = []                                                                                            // 480\n    , plType                                                                                                           // 481\n    , stateChar                                                                                                        // 482\n    , inClass = false                                                                                                  // 483\n    , reClassStart = -1                                                                                                // 484\n    , classStart = -1                                                                                                  // 485\n    // . and .. never match anything that doesn't start with .,                                                        // 486\n    // even when options.dot is set.                                                                                   // 487\n    , patternStart = pattern.charAt(0) === \".\" ? \"\" // anything                                                        // 488\n      // not (start or / followed by . or .. followed by / or end)                                                     // 489\n      : options.dot ? \"(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))\"                                                               // 490\n      : \"(?!\\\\.)\"                                                                                                      // 491\n    , self = this                                                                                                      // 492\n                                                                                                                       // 493\n  function clearStateChar () {                                                                                         // 494\n    if (stateChar) {                                                                                                   // 495\n      // we had some state-tracking character                                                                          // 496\n      // that wasn't consumed by this pass.                                                                            // 497\n      switch (stateChar) {                                                                                             // 498\n        case \"*\":                                                                                                      // 499\n          re += star                                                                                                   // 500\n          hasMagic = true                                                                                              // 501\n          break                                                                                                        // 502\n        case \"?\":                                                                                                      // 503\n          re += qmark                                                                                                  // 504\n          hasMagic = true                                                                                              // 505\n          break                                                                                                        // 506\n        default:                                                                                                       // 507\n          re += \"\\\\\"+stateChar                                                                                         // 508\n          break                                                                                                        // 509\n      }                                                                                                                // 510\n      self.debug('clearStateChar %j %j', stateChar, re)                                                                // 511\n      stateChar = false                                                                                                // 512\n    }                                                                                                                  // 513\n  }                                                                                                                    // 514\n                                                                                                                       // 515\n  for ( var i = 0, len = pattern.length, c                                                                             // 516\n      ; (i < len) && (c = pattern.charAt(i))                                                                           // 517\n      ; i ++ ) {                                                                                                       // 518\n                                                                                                                       // 519\n    this.debug(\"%s\\t%s %s %j\", pattern, i, re, c)                                                                      // 520\n                                                                                                                       // 521\n    // skip over any that are escaped.                                                                                 // 522\n    if (escaping && reSpecials[c]) {                                                                                   // 523\n      re += \"\\\\\" + c                                                                                                   // 524\n      escaping = false                                                                                                 // 525\n      continue                                                                                                         // 526\n    }                                                                                                                  // 527\n                                                                                                                       // 528\n    SWITCH: switch (c) {                                                                                               // 529\n      case \"/\":                                                                                                        // 530\n        // completely not allowed, even escaped.                                                                       // 531\n        // Should already be path-split by now.                                                                        // 532\n        return false                                                                                                   // 533\n                                                                                                                       // 534\n      case \"\\\\\":                                                                                                       // 535\n        clearStateChar()                                                                                               // 536\n        escaping = true                                                                                                // 537\n        continue                                                                                                       // 538\n                                                                                                                       // 539\n      // the various stateChar values                                                                                  // 540\n      // for the \"extglob\" stuff.                                                                                      // 541\n      case \"?\":                                                                                                        // 542\n      case \"*\":                                                                                                        // 543\n      case \"+\":                                                                                                        // 544\n      case \"@\":                                                                                                        // 545\n      case \"!\":                                                                                                        // 546\n        this.debug(\"%s\\t%s %s %j <-- stateChar\", pattern, i, re, c)                                                    // 547\n                                                                                                                       // 548\n        // all of those are literals inside a class, except that                                                       // 549\n        // the glob [!a] means [^a] in regexp                                                                          // 550\n        if (inClass) {                                                                                                 // 551\n          this.debug('  in class')                                                                                     // 552\n          if (c === \"!\" && i === classStart + 1) c = \"^\"                                                               // 553\n          re += c                                                                                                      // 554\n          continue                                                                                                     // 555\n        }                                                                                                              // 556\n                                                                                                                       // 557\n        // if we already have a stateChar, then it means                                                               // 558\n        // that there was something like ** or +? in there.                                                            // 559\n        // Handle the stateChar, then proceed with this one.                                                           // 560\n        self.debug('call clearStateChar %j', stateChar)                                                                // 561\n        clearStateChar()                                                                                               // 562\n        stateChar = c                                                                                                  // 563\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.                                                     // 564\n        // just clear the statechar *now*, rather than even diving into                                                // 565\n        // the patternList stuff.                                                                                      // 566\n        if (options.noext) clearStateChar()                                                                            // 567\n        continue                                                                                                       // 568\n                                                                                                                       // 569\n      case \"(\":                                                                                                        // 570\n        if (inClass) {                                                                                                 // 571\n          re += \"(\"                                                                                                    // 572\n          continue                                                                                                     // 573\n        }                                                                                                              // 574\n                                                                                                                       // 575\n        if (!stateChar) {                                                                                              // 576\n          re += \"\\\\(\"                                                                                                  // 577\n          continue                                                                                                     // 578\n        }                                                                                                              // 579\n                                                                                                                       // 580\n        plType = stateChar                                                                                             // 581\n        patternListStack.push({ type: plType                                                                           // 582\n                              , start: i - 1                                                                           // 583\n                              , reStart: re.length })                                                                  // 584\n        // negation is (?:(?!js)[^/]*)                                                                                 // 585\n        re += stateChar === \"!\" ? \"(?:(?!\" : \"(?:\"                                                                     // 586\n        this.debug('plType %j %j', stateChar, re)                                                                      // 587\n        stateChar = false                                                                                              // 588\n        continue                                                                                                       // 589\n                                                                                                                       // 590\n      case \")\":                                                                                                        // 591\n        if (inClass || !patternListStack.length) {                                                                     // 592\n          re += \"\\\\)\"                                                                                                  // 593\n          continue                                                                                                     // 594\n        }                                                                                                              // 595\n                                                                                                                       // 596\n        clearStateChar()                                                                                               // 597\n        hasMagic = true                                                                                                // 598\n        re += \")\"                                                                                                      // 599\n        plType = patternListStack.pop().type                                                                           // 600\n        // negation is (?:(?!js)[^/]*)                                                                                 // 601\n        // The others are (?:<pattern>)<type>                                                                          // 602\n        switch (plType) {                                                                                              // 603\n          case \"!\":                                                                                                    // 604\n            re += \"[^/]*?)\"                                                                                            // 605\n            break                                                                                                      // 606\n          case \"?\":                                                                                                    // 607\n          case \"+\":                                                                                                    // 608\n          case \"*\": re += plType                                                                                       // 609\n          case \"@\": break // the default anyway                                                                        // 610\n        }                                                                                                              // 611\n        continue                                                                                                       // 612\n                                                                                                                       // 613\n      case \"|\":                                                                                                        // 614\n        if (inClass || !patternListStack.length || escaping) {                                                         // 615\n          re += \"\\\\|\"                                                                                                  // 616\n          escaping = false                                                                                             // 617\n          continue                                                                                                     // 618\n        }                                                                                                              // 619\n                                                                                                                       // 620\n        clearStateChar()                                                                                               // 621\n        re += \"|\"                                                                                                      // 622\n        continue                                                                                                       // 623\n                                                                                                                       // 624\n      // these are mostly the same in regexp and glob                                                                  // 625\n      case \"[\":                                                                                                        // 626\n        // swallow any state-tracking char before the [                                                                // 627\n        clearStateChar()                                                                                               // 628\n                                                                                                                       // 629\n        if (inClass) {                                                                                                 // 630\n          re += \"\\\\\" + c                                                                                               // 631\n          continue                                                                                                     // 632\n        }                                                                                                              // 633\n                                                                                                                       // 634\n        inClass = true                                                                                                 // 635\n        classStart = i                                                                                                 // 636\n        reClassStart = re.length                                                                                       // 637\n        re += c                                                                                                        // 638\n        continue                                                                                                       // 639\n                                                                                                                       // 640\n      case \"]\":                                                                                                        // 641\n        //  a right bracket shall lose its special                                                                     // 642\n        //  meaning and represent itself in                                                                            // 643\n        //  a bracket expression if it occurs                                                                          // 644\n        //  first in the list.  -- POSIX.2 2.8.3.2                                                                     // 645\n        if (i === classStart + 1 || !inClass) {                                                                        // 646\n          re += \"\\\\\" + c                                                                                               // 647\n          escaping = false                                                                                             // 648\n          continue                                                                                                     // 649\n        }                                                                                                              // 650\n                                                                                                                       // 651\n        // finish up the class.                                                                                        // 652\n        hasMagic = true                                                                                                // 653\n        inClass = false                                                                                                // 654\n        re += c                                                                                                        // 655\n        continue                                                                                                       // 656\n                                                                                                                       // 657\n      default:                                                                                                         // 658\n        // swallow any state char that wasn't consumed                                                                 // 659\n        clearStateChar()                                                                                               // 660\n                                                                                                                       // 661\n        if (escaping) {                                                                                                // 662\n          // no need                                                                                                   // 663\n          escaping = false                                                                                             // 664\n        } else if (reSpecials[c]                                                                                       // 665\n                   && !(c === \"^\" && inClass)) {                                                                       // 666\n          re += \"\\\\\"                                                                                                   // 667\n        }                                                                                                              // 668\n                                                                                                                       // 669\n        re += c                                                                                                        // 670\n                                                                                                                       // 671\n    } // switch                                                                                                        // 672\n  } // for                                                                                                             // 673\n                                                                                                                       // 674\n                                                                                                                       // 675\n  // handle the case where we left a class open.                                                                       // 676\n  // \"[abc\" is valid, equivalent to \"\\[abc\"                                                                            // 677\n  if (inClass) {                                                                                                       // 678\n    // split where the last [ was, and escape it                                                                       // 679\n    // this is a huge pita.  We now have to re-walk                                                                    // 680\n    // the contents of the would-be class to re-translate                                                              // 681\n    // any characters that were passed through as-is                                                                   // 682\n    var cs = pattern.substr(classStart + 1)                                                                            // 683\n      , sp = this.parse(cs, SUBPARSE)                                                                                  // 684\n    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0]                                                                    // 685\n    hasMagic = hasMagic || sp[1]                                                                                       // 686\n  }                                                                                                                    // 687\n                                                                                                                       // 688\n  // handle the case where we had a +( thing at the *end*                                                              // 689\n  // of the pattern.                                                                                                   // 690\n  // each pattern list stack adds 3 chars, and we need to go through                                                   // 691\n  // and escape any | chars that were passed through as-is for the regexp.                                             // 692\n  // Go through and escape them, taking care not to double-escape any                                                  // 693\n  // | chars that were already escaped.                                                                                // 694\n  var pl                                                                                                               // 695\n  while (pl = patternListStack.pop()) {                                                                                // 696\n    var tail = re.slice(pl.reStart + 3)                                                                                // 697\n    // maybe some even number of \\, then maybe 1 \\, followed by a |                                                    // 698\n    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {                                                 // 699\n      if (!$2) {                                                                                                       // 700\n        // the | isn't already escaped, so escape it.                                                                  // 701\n        $2 = \"\\\\\"                                                                                                      // 702\n      }                                                                                                                // 703\n                                                                                                                       // 704\n      // need to escape all those slashes *again*, without escaping the                                                // 705\n      // one that we need for escaping the | character.  As it works out,                                              // 706\n      // escaping an even number of slashes can be done by simply repeating                                            // 707\n      // it exactly after itself.  That's why this trick works.                                                        // 708\n      //                                                                                                               // 709\n      // I am sorry that you have to see this.                                                                         // 710\n      return $1 + $1 + $2 + \"|\"                                                                                        // 711\n    })                                                                                                                 // 712\n                                                                                                                       // 713\n    this.debug(\"tail=%j\\n   %s\", tail, tail)                                                                           // 714\n    var t = pl.type === \"*\" ? star                                                                                     // 715\n          : pl.type === \"?\" ? qmark                                                                                    // 716\n          : \"\\\\\" + pl.type                                                                                             // 717\n                                                                                                                       // 718\n    hasMagic = true                                                                                                    // 719\n    re = re.slice(0, pl.reStart)                                                                                       // 720\n       + t + \"\\\\(\"                                                                                                     // 721\n       + tail                                                                                                          // 722\n  }                                                                                                                    // 723\n                                                                                                                       // 724\n  // handle trailing things that only matter at the very end.                                                          // 725\n  clearStateChar()                                                                                                     // 726\n  if (escaping) {                                                                                                      // 727\n    // trailing \\\\\n    re += \"\\\\\\\\\"                                                                                                       // 729\n  }                                                                                                                    // 730\n                                                                                                                       // 731\n  // only need to apply the nodot start if the re starts with                                                          // 732\n  // something that could conceivably capture a dot                                                                    // 733\n  var addPatternStart = false                                                                                          // 734\n  switch (re.charAt(0)) {                                                                                              // 735\n    case \".\":                                                                                                          // 736\n    case \"[\":                                                                                                          // 737\n    case \"(\": addPatternStart = true                                                                                   // 738\n  }                                                                                                                    // 739\n                                                                                                                       // 740\n  // if the re is not \"\" at this point, then we need to make sure                                                      // 741\n  // it doesn't match against an empty path part.                                                                      // 742\n  // Otherwise a/* will match a/, which it should not.                                                                 // 743\n  if (re !== \"\" && hasMagic) re = \"(?=.)\" + re                                                                         // 744\n                                                                                                                       // 745\n  if (addPatternStart) re = patternStart + re                                                                          // 746\n                                                                                                                       // 747\n  // parsing just a piece of a larger pattern.                                                                         // 748\n  if (isSub === SUBPARSE) {                                                                                            // 749\n    return [ re, hasMagic ]                                                                                            // 750\n  }                                                                                                                    // 751\n                                                                                                                       // 752\n  // skip the regexp for non-magical patterns                                                                          // 753\n  // unescape anything in it, though, so that it'll be                                                                 // 754\n  // an exact match against a file etc.                                                                                // 755\n  if (!hasMagic) {                                                                                                     // 756\n    return globUnescape(pattern)                                                                                       // 757\n  }                                                                                                                    // 758\n                                                                                                                       // 759\n  var flags = options.nocase ? \"i\" : \"\"                                                                                // 760\n    , regExp = new RegExp(\"^\" + re + \"$\", flags)                                                                       // 761\n                                                                                                                       // 762\n  regExp._glob = pattern                                                                                               // 763\n  regExp._src = re                                                                                                     // 764\n                                                                                                                       // 765\n  return regExp                                                                                                        // 766\n}                                                                                                                      // 767\n                                                                                                                       // 768\nminimatch.makeRe = function (pattern, options) {                                                                       // 769\n  return new Minimatch(pattern, options || {}).makeRe()                                                                // 770\n}                                                                                                                      // 771\n                                                                                                                       // 772\nMinimatch.prototype.makeRe = makeRe                                                                                    // 773\nfunction makeRe () {                                                                                                   // 774\n  if (this.regexp || this.regexp === false) return this.regexp                                                         // 775\n                                                                                                                       // 776\n  // at this point, this.set is a 2d array of partial                                                                  // 777\n  // pattern strings, or \"**\".                                                                                         // 778\n  //                                                                                                                   // 779\n  // It's better to use .match().  This function shouldn't                                                             // 780\n  // be used, really, but it's pretty convenient sometimes,                                                            // 781\n  // when you just want to work with a regex.                                                                          // 782\n  var set = this.set                                                                                                   // 783\n                                                                                                                       // 784\n  if (!set.length) return this.regexp = false                                                                          // 785\n  var options = this.options                                                                                           // 786\n                                                                                                                       // 787\n  var twoStar = options.noglobstar ? star                                                                              // 788\n      : options.dot ? twoStarDot                                                                                       // 789\n      : twoStarNoDot                                                                                                   // 790\n    , flags = options.nocase ? \"i\" : \"\"                                                                                // 791\n                                                                                                                       // 792\n  var re = set.map(function (pattern) {                                                                                // 793\n    return pattern.map(function (p) {                                                                                  // 794\n      return (p === GLOBSTAR) ? twoStar                                                                                // 795\n           : (typeof p === \"string\") ? regExpEscape(p)                                                                 // 796\n           : p._src                                                                                                    // 797\n    }).join(\"\\\\\\/\")                                                                                                    // 798\n  }).join(\"|\")                                                                                                         // 799\n                                                                                                                       // 800\n  // must match entire pattern                                                                                         // 801\n  // ending in a * or ** will make it less strict.                                                                     // 802\n  re = \"^(?:\" + re + \")$\"                                                                                              // 803\n                                                                                                                       // 804\n  // can match anything, as long as it's not this.                                                                     // 805\n  if (this.negate) re = \"^(?!\" + re + \").*$\"                                                                           // 806\n                                                                                                                       // 807\n  try {                                                                                                                // 808\n    return this.regexp = new RegExp(re, flags)                                                                         // 809\n  } catch (ex) {                                                                                                       // 810\n    return this.regexp = false                                                                                         // 811\n  }                                                                                                                    // 812\n}                                                                                                                      // 813\n                                                                                                                       // 814\nminimatch.match = function (list, pattern, options) {                                                                  // 815\n  var mm = new Minimatch(pattern, options)                                                                             // 816\n  list = list.filter(function (f) {                                                                                    // 817\n    return mm.match(f)                                                                                                 // 818\n  })                                                                                                                   // 819\n  if (options.nonull && !list.length) {                                                                                // 820\n    list.push(pattern)                                                                                                 // 821\n  }                                                                                                                    // 822\n  return list                                                                                                          // 823\n}                                                                                                                      // 824\n                                                                                                                       // 825\nMinimatch.prototype.match = match                                                                                      // 826\nfunction match (f, partial) {                                                                                          // 827\n  this.debug(\"match\", f, this.pattern)                                                                                 // 828\n  // short-circuit in the case of busted things.                                                                       // 829\n  // comments, etc.                                                                                                    // 830\n  if (this.comment) return false                                                                                       // 831\n  if (this.empty) return f === \"\"                                                                                      // 832\n                                                                                                                       // 833\n  if (f === \"/\" && partial) return true                                                                                // 834\n                                                                                                                       // 835\n  var options = this.options                                                                                           // 836\n                                                                                                                       // 837\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.                                                      // 839\n  if (platform === \"win32\") {                                                                                          // 840\n    f = f.split(\"\\\\\").join(\"/\")                                                                                        // 841\n  }                                                                                                                    // 842\n                                                                                                                       // 843\n  // treat the test path as a set of pathparts.                                                                        // 844\n  f = f.split(slashSplit)                                                                                              // 845\n  this.debug(this.pattern, \"split\", f)                                                                                 // 846\n                                                                                                                       // 847\n  // just ONE of the pattern sets in this.set needs to match                                                           // 848\n  // in order for it to be valid.  If negating, then just one                                                          // 849\n  // match means that we have failed.                                                                                  // 850\n  // Either way, return on the first hit.                                                                              // 851\n                                                                                                                       // 852\n  var set = this.set                                                                                                   // 853\n  this.debug(this.pattern, \"set\", set)                                                                                 // 854\n                                                                                                                       // 855\n  var splitFile = path.basename(f.join(\"/\")).split(\"/\")                                                                // 856\n                                                                                                                       // 857\n  for (var i = 0, l = set.length; i < l; i ++) {                                                                       // 858\n    var pattern = set[i], file = f                                                                                     // 859\n    if (options.matchBase && pattern.length === 1) {                                                                   // 860\n      file = splitFile                                                                                                 // 861\n    }                                                                                                                  // 862\n    var hit = this.matchOne(file, pattern, partial)                                                                    // 863\n    if (hit) {                                                                                                         // 864\n      if (options.flipNegate) return true                                                                              // 865\n      return !this.negate                                                                                              // 866\n    }                                                                                                                  // 867\n  }                                                                                                                    // 868\n                                                                                                                       // 869\n  // didn't get any hits.  this is success if it's a negative                                                          // 870\n  // pattern, failure otherwise.                                                                                       // 871\n  if (options.flipNegate) return false                                                                                 // 872\n  return this.negate                                                                                                   // 873\n}                                                                                                                      // 874\n                                                                                                                       // 875\n// set partial to true to test if, for example,                                                                        // 876\n// \"/a/b\" matches the start of \"/*/b/*/d\"                                                                              // 877\n// Partial means, if you run out of file before you run                                                                // 878\n// out of pattern, then that's fine, as long as all                                                                    // 879\n// the parts match.                                                                                                    // 880\nMinimatch.prototype.matchOne = function (file, pattern, partial) {                                                     // 881\n  var options = this.options                                                                                           // 882\n                                                                                                                       // 883\n  this.debug(\"matchOne\",                                                                                               // 884\n              { \"this\": this                                                                                           // 885\n              , file: file                                                                                             // 886\n              , pattern: pattern })                                                                                    // 887\n                                                                                                                       // 888\n  this.debug(\"matchOne\", file.length, pattern.length)                                                                  // 889\n                                                                                                                       // 890\n  for ( var fi = 0                                                                                                     // 891\n          , pi = 0                                                                                                     // 892\n          , fl = file.length                                                                                           // 893\n          , pl = pattern.length                                                                                        // 894\n      ; (fi < fl) && (pi < pl)                                                                                         // 895\n      ; fi ++, pi ++ ) {                                                                                               // 896\n                                                                                                                       // 897\n    this.debug(\"matchOne loop\")                                                                                        // 898\n    var p = pattern[pi]                                                                                                // 899\n      , f = file[fi]                                                                                                   // 900\n                                                                                                                       // 901\n    this.debug(pattern, p, f)                                                                                          // 902\n                                                                                                                       // 903\n    // should be impossible.                                                                                           // 904\n    // some invalid regexp stuff in the set.                                                                           // 905\n    if (p === false) return false                                                                                      // 906\n                                                                                                                       // 907\n    if (p === GLOBSTAR) {                                                                                              // 908\n      this.debug('GLOBSTAR', [pattern, p, f])                                                                          // 909\n                                                                                                                       // 910\n      // \"**\"                                                                                                          // 911\n      // a/**/b/**/c would match the following:                                                                        // 912\n      // a/b/x/y/z/c                                                                                                   // 913\n      // a/x/y/z/b/c                                                                                                   // 914\n      // a/b/x/b/x/c                                                                                                   // 915\n      // a/b/c                                                                                                         // 916\n      // To do this, take the rest of the pattern after                                                                // 917\n      // the **, and see if it would match the file remainder.                                                         // 918\n      // If so, return success.                                                                                        // 919\n      // If not, the ** \"swallows\" a segment, and try again.                                                           // 920\n      // This is recursively awful.                                                                                    // 921\n      //                                                                                                               // 922\n      // a/**/b/**/c matching a/b/x/y/z/c                                                                              // 923\n      // - a matches a                                                                                                 // 924\n      // - doublestar                                                                                                  // 925\n      //   - matchOne(b/x/y/z/c, b/**/c)                                                                               // 926\n      //     - b matches b                                                                                             // 927\n      //     - doublestar                                                                                              // 928\n      //       - matchOne(x/y/z/c, c) -> no                                                                            // 929\n      //       - matchOne(y/z/c, c) -> no                                                                              // 930\n      //       - matchOne(z/c, c) -> no                                                                                // 931\n      //       - matchOne(c, c) yes, hit                                                                               // 932\n      var fr = fi                                                                                                      // 933\n        , pr = pi + 1                                                                                                  // 934\n      if (pr === pl) {                                                                                                 // 935\n        this.debug('** at the end')                                                                                    // 936\n        // a ** at the end will just swallow the rest.                                                                 // 937\n        // We have found a match.                                                                                      // 938\n        // however, it will not swallow /.x, unless                                                                    // 939\n        // options.dot is set.                                                                                         // 940\n        // . and .. are *never* matched by **, for explosively                                                         // 941\n        // exponential reasons.                                                                                        // 942\n        for ( ; fi < fl; fi ++) {                                                                                      // 943\n          if (file[fi] === \".\" || file[fi] === \"..\" ||                                                                 // 944\n              (!options.dot && file[fi].charAt(0) === \".\")) return false                                               // 945\n        }                                                                                                              // 946\n        return true                                                                                                    // 947\n      }                                                                                                                // 948\n                                                                                                                       // 949\n      // ok, let's see if we can swallow whatever we can.                                                              // 950\n      WHILE: while (fr < fl) {                                                                                         // 951\n        var swallowee = file[fr]                                                                                       // 952\n                                                                                                                       // 953\n        this.debug('\\nglobstar while',                                                                                 // 954\n                    file, fr, pattern, pr, swallowee)                                                                  // 955\n                                                                                                                       // 956\n        // XXX remove this slice.  Just pass the start index.                                                          // 957\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {                                               // 958\n          this.debug('globstar found match!', fr, fl, swallowee)                                                       // 959\n          // found a match.                                                                                            // 960\n          return true                                                                                                  // 961\n        } else {                                                                                                       // 962\n          // can't swallow \".\" or \"..\" ever.                                                                           // 963\n          // can only swallow \".foo\" when explicitly asked.                                                            // 964\n          if (swallowee === \".\" || swallowee === \"..\" ||                                                               // 965\n              (!options.dot && swallowee.charAt(0) === \".\")) {                                                         // 966\n            this.debug(\"dot detected!\", file, fr, pattern, pr)                                                         // 967\n            break WHILE                                                                                                // 968\n          }                                                                                                            // 969\n                                                                                                                       // 970\n          // ** swallows a segment, and continue.                                                                      // 971\n          this.debug('globstar swallow a segment, and continue')                                                       // 972\n          fr ++                                                                                                        // 973\n        }                                                                                                              // 974\n      }                                                                                                                // 975\n      // no match was found.                                                                                           // 976\n      // However, in partial mode, we can't say this is necessarily over.                                              // 977\n      // If there's more *pattern* left, then                                                                          // 978\n      if (partial) {                                                                                                   // 979\n        // ran out of file                                                                                             // 980\n        this.debug(\"\\n>>> no match, partial?\", file, fr, pattern, pr)                                                  // 981\n        if (fr === fl) return true                                                                                     // 982\n      }                                                                                                                // 983\n      return false                                                                                                     // 984\n    }                                                                                                                  // 985\n                                                                                                                       // 986\n    // something other than **                                                                                         // 987\n    // non-magic patterns just have to match exactly                                                                   // 988\n    // patterns with magic have been turned into regexps.                                                              // 989\n    var hit                                                                                                            // 990\n    if (typeof p === \"string\") {                                                                                       // 991\n      if (options.nocase) {                                                                                            // 992\n        hit = f.toLowerCase() === p.toLowerCase()                                                                      // 993\n      } else {                                                                                                         // 994\n        hit = f === p                                                                                                  // 995\n      }                                                                                                                // 996\n      this.debug(\"string match\", p, f, hit)                                                                            // 997\n    } else {                                                                                                           // 998\n      hit = f.match(p)                                                                                                 // 999\n      this.debug(\"pattern match\", p, f, hit)                                                                           // 1000\n    }                                                                                                                  // 1001\n                                                                                                                       // 1002\n    if (!hit) return false                                                                                             // 1003\n  }                                                                                                                    // 1004\n                                                                                                                       // 1005\n  // Note: ending in / means that we'll get a final \"\"                                                                 // 1006\n  // at the end of the pattern.  This can only match a                                                                 // 1007\n  // corresponding \"\" at the end of the file.                                                                          // 1008\n  // If the file ends in /, then it can only match a                                                                   // 1009\n  // a pattern that ends in /, unless the pattern just                                                                 // 1010\n  // doesn't have any more for it. But, a/b/ should *not*                                                              // 1011\n  // match \"a/b/*\", even though \"\" matches against the                                                                 // 1012\n  // [^/]*? pattern, except in partial mode, where it might                                                            // 1013\n  // simply not be reached yet.                                                                                        // 1014\n  // However, a/b/ should still satisfy a/*                                                                            // 1015\n                                                                                                                       // 1016\n  // now either we fell off the end of the pattern, or we're done.                                                     // 1017\n  if (fi === fl && pi === pl) {                                                                                        // 1018\n    // ran out of pattern and filename at the same time.                                                               // 1019\n    // an exact hit!                                                                                                   // 1020\n    return true                                                                                                        // 1021\n  } else if (fi === fl) {                                                                                              // 1022\n    // ran out of file, but still had pattern left.                                                                    // 1023\n    // this is ok if we're doing the match as part of                                                                  // 1024\n    // a glob fs traversal.                                                                                            // 1025\n    return partial                                                                                                     // 1026\n  } else if (pi === pl) {                                                                                              // 1027\n    // ran out of pattern, still have file left.                                                                       // 1028\n    // this is only acceptable if we're on the very last                                                               // 1029\n    // empty segment of a file with a trailing slash.                                                                  // 1030\n    // a/* should match a/b/                                                                                           // 1031\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === \"\")                                                            // 1032\n    return emptyFileEnd                                                                                                // 1033\n  }                                                                                                                    // 1034\n                                                                                                                       // 1035\n  // should be unreachable.                                                                                            // 1036\n  throw new Error(\"wtf?\")                                                                                              // 1037\n}                                                                                                                      // 1038\n                                                                                                                       // 1039\n                                                                                                                       // 1040\n// replace stuff like \\* with *                                                                                        // 1041\nfunction globUnescape (s) {                                                                                            // 1042\n  return s.replace(/\\\\(.)/g, \"$1\")                                                                                     // 1043\n}                                                                                                                      // 1044\n                                                                                                                       // 1045\n                                                                                                                       // 1046\nfunction regExpEscape (s) {                                                                                            // 1047\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")                                                                 // 1048\n}                                                                                                                      // 1049\n                                                                                                                       // 1050\n})( typeof require === \"function\" ? require : null,                                                                    // 1051\n    this,                                                                                                              // 1052\n    typeof module === \"object\" ? module : null,                                                                        // 1053\n    typeof process === \"object\" ? process.platform : \"win32\"                                                           // 1054\n  )                                                                                                                    // 1055\n                                                                                                                       // 1056\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lru-cache\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/lru-cache/package.json                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lru-cache\";                                                                                            // 1\nexports.version = \"2.7.3\";                                                                                             // 2\nexports.main = \"lib/lru-cache.js\";                                                                                     // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"lru-cache.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/lru-cache/lib/lru-cache.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function () { // closure for web browsers                                                                            // 1\n                                                                                                                       // 2\nif (typeof module === 'object' && module.exports) {                                                                    // 3\n  module.exports = LRUCache                                                                                            // 4\n} else {                                                                                                               // 5\n  // just set the global for non-node platforms.                                                                       // 6\n  this.LRUCache = LRUCache                                                                                             // 7\n}                                                                                                                      // 8\n                                                                                                                       // 9\nfunction hOP (obj, key) {                                                                                              // 10\n  return Object.prototype.hasOwnProperty.call(obj, key)                                                                // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\nfunction naiveLength () { return 1 }                                                                                   // 14\n                                                                                                                       // 15\nvar didTypeWarning = false                                                                                             // 16\nfunction typeCheckKey(key) {                                                                                           // 17\n  if (!didTypeWarning && typeof key !== 'string' && typeof key !== 'number') {                                         // 18\n    didTypeWarning = true                                                                                              // 19\n    console.error(new TypeError(\"LRU: key must be a string or number. Almost certainly a bug! \" + typeof key).stack)   // 20\n  }                                                                                                                    // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nfunction LRUCache (options) {                                                                                          // 24\n  if (!(this instanceof LRUCache))                                                                                     // 25\n    return new LRUCache(options)                                                                                       // 26\n                                                                                                                       // 27\n  if (typeof options === 'number')                                                                                     // 28\n    options = { max: options }                                                                                         // 29\n                                                                                                                       // 30\n  if (!options)                                                                                                        // 31\n    options = {}                                                                                                       // 32\n                                                                                                                       // 33\n  this._max = options.max                                                                                              // 34\n  // Kind of weird to have a default max of Infinity, but oh well.                                                     // 35\n  if (!this._max || !(typeof this._max === \"number\") || this._max <= 0 )                                               // 36\n    this._max = Infinity                                                                                               // 37\n                                                                                                                       // 38\n  this._lengthCalculator = options.length || naiveLength                                                               // 39\n  if (typeof this._lengthCalculator !== \"function\")                                                                    // 40\n    this._lengthCalculator = naiveLength                                                                               // 41\n                                                                                                                       // 42\n  this._allowStale = options.stale || false                                                                            // 43\n  this._maxAge = options.maxAge || null                                                                                // 44\n  this._dispose = options.dispose                                                                                      // 45\n  this.reset()                                                                                                         // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n// resize the cache when the max changes.                                                                              // 49\nObject.defineProperty(LRUCache.prototype, \"max\",                                                                       // 50\n  { set : function (mL) {                                                                                              // 51\n      if (!mL || !(typeof mL === \"number\") || mL <= 0 ) mL = Infinity                                                  // 52\n      this._max = mL                                                                                                   // 53\n      if (this._length > this._max) trim(this)                                                                         // 54\n    }                                                                                                                  // 55\n  , get : function () { return this._max }                                                                             // 56\n  , enumerable : true                                                                                                  // 57\n  })                                                                                                                   // 58\n                                                                                                                       // 59\n// resize the cache when the lengthCalculator changes.                                                                 // 60\nObject.defineProperty(LRUCache.prototype, \"lengthCalculator\",                                                          // 61\n  { set : function (lC) {                                                                                              // 62\n      if (typeof lC !== \"function\") {                                                                                  // 63\n        this._lengthCalculator = naiveLength                                                                           // 64\n        this._length = this._itemCount                                                                                 // 65\n        for (var key in this._cache) {                                                                                 // 66\n          this._cache[key].length = 1                                                                                  // 67\n        }                                                                                                              // 68\n      } else {                                                                                                         // 69\n        this._lengthCalculator = lC                                                                                    // 70\n        this._length = 0                                                                                               // 71\n        for (var key in this._cache) {                                                                                 // 72\n          this._cache[key].length = this._lengthCalculator(this._cache[key].value)                                     // 73\n          this._length += this._cache[key].length                                                                      // 74\n        }                                                                                                              // 75\n      }                                                                                                                // 76\n                                                                                                                       // 77\n      if (this._length > this._max) trim(this)                                                                         // 78\n    }                                                                                                                  // 79\n  , get : function () { return this._lengthCalculator }                                                                // 80\n  , enumerable : true                                                                                                  // 81\n  })                                                                                                                   // 82\n                                                                                                                       // 83\nObject.defineProperty(LRUCache.prototype, \"length\",                                                                    // 84\n  { get : function () { return this._length }                                                                          // 85\n  , enumerable : true                                                                                                  // 86\n  })                                                                                                                   // 87\n                                                                                                                       // 88\n                                                                                                                       // 89\nObject.defineProperty(LRUCache.prototype, \"itemCount\",                                                                 // 90\n  { get : function () { return this._itemCount }                                                                       // 91\n  , enumerable : true                                                                                                  // 92\n  })                                                                                                                   // 93\n                                                                                                                       // 94\nLRUCache.prototype.forEach = function (fn, thisp) {                                                                    // 95\n  thisp = thisp || this                                                                                                // 96\n  var i = 0                                                                                                            // 97\n  var itemCount = this._itemCount                                                                                      // 98\n                                                                                                                       // 99\n  for (var k = this._mru - 1; k >= 0 && i < itemCount; k--) if (this._lruList[k]) {                                    // 100\n    i++                                                                                                                // 101\n    var hit = this._lruList[k]                                                                                         // 102\n    if (isStale(this, hit)) {                                                                                          // 103\n      del(this, hit)                                                                                                   // 104\n      if (!this._allowStale) hit = undefined                                                                           // 105\n    }                                                                                                                  // 106\n    if (hit) {                                                                                                         // 107\n      fn.call(thisp, hit.value, hit.key, this)                                                                         // 108\n    }                                                                                                                  // 109\n  }                                                                                                                    // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nLRUCache.prototype.keys = function () {                                                                                // 113\n  var keys = new Array(this._itemCount)                                                                                // 114\n  var i = 0                                                                                                            // 115\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 116\n    var hit = this._lruList[k]                                                                                         // 117\n    keys[i++] = hit.key                                                                                                // 118\n  }                                                                                                                    // 119\n  return keys                                                                                                          // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\nLRUCache.prototype.values = function () {                                                                              // 123\n  var values = new Array(this._itemCount)                                                                              // 124\n  var i = 0                                                                                                            // 125\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 126\n    var hit = this._lruList[k]                                                                                         // 127\n    values[i++] = hit.value                                                                                            // 128\n  }                                                                                                                    // 129\n  return values                                                                                                        // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\nLRUCache.prototype.reset = function () {                                                                               // 133\n  if (this._dispose && this._cache) {                                                                                  // 134\n    for (var k in this._cache) {                                                                                       // 135\n      this._dispose(k, this._cache[k].value)                                                                           // 136\n    }                                                                                                                  // 137\n  }                                                                                                                    // 138\n                                                                                                                       // 139\n  this._cache = Object.create(null) // hash of items by key                                                            // 140\n  this._lruList = Object.create(null) // list of items in order of use recency                                         // 141\n  this._mru = 0 // most recently used                                                                                  // 142\n  this._lru = 0 // least recently used                                                                                 // 143\n  this._length = 0 // number of items in the list                                                                      // 144\n  this._itemCount = 0                                                                                                  // 145\n}                                                                                                                      // 146\n                                                                                                                       // 147\nLRUCache.prototype.dump = function () {                                                                                // 148\n  var arr = []                                                                                                         // 149\n  var i = 0                                                                                                            // 150\n                                                                                                                       // 151\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 152\n    var hit = this._lruList[k]                                                                                         // 153\n    if (!isStale(this, hit)) {                                                                                         // 154\n      //Do not store staled hits                                                                                       // 155\n      ++i                                                                                                              // 156\n      arr.push({                                                                                                       // 157\n        k: hit.key,                                                                                                    // 158\n        v: hit.value,                                                                                                  // 159\n        e: hit.now + (hit.maxAge || 0)                                                                                 // 160\n      });                                                                                                              // 161\n    }                                                                                                                  // 162\n  }                                                                                                                    // 163\n  //arr has the most read first                                                                                        // 164\n  return arr                                                                                                           // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\nLRUCache.prototype.dumpLru = function () {                                                                             // 168\n  return this._lruList                                                                                                 // 169\n}                                                                                                                      // 170\n                                                                                                                       // 171\nLRUCache.prototype.set = function (key, value, maxAge) {                                                               // 172\n  maxAge = maxAge || this._maxAge                                                                                      // 173\n  typeCheckKey(key)                                                                                                    // 174\n                                                                                                                       // 175\n  var now = maxAge ? Date.now() : 0                                                                                    // 176\n  var len = this._lengthCalculator(value)                                                                              // 177\n                                                                                                                       // 178\n  if (hOP(this._cache, key)) {                                                                                         // 179\n    if (len > this._max) {                                                                                             // 180\n      del(this, this._cache[key])                                                                                      // 181\n      return false                                                                                                     // 182\n    }                                                                                                                  // 183\n    // dispose of the old one before overwriting                                                                       // 184\n    if (this._dispose)                                                                                                 // 185\n      this._dispose(key, this._cache[key].value)                                                                       // 186\n                                                                                                                       // 187\n    this._cache[key].now = now                                                                                         // 188\n    this._cache[key].maxAge = maxAge                                                                                   // 189\n    this._cache[key].value = value                                                                                     // 190\n    this._length += (len - this._cache[key].length)                                                                    // 191\n    this._cache[key].length = len                                                                                      // 192\n    this.get(key)                                                                                                      // 193\n                                                                                                                       // 194\n    if (this._length > this._max)                                                                                      // 195\n      trim(this)                                                                                                       // 196\n                                                                                                                       // 197\n    return true                                                                                                        // 198\n  }                                                                                                                    // 199\n                                                                                                                       // 200\n  var hit = new Entry(key, value, this._mru++, len, now, maxAge)                                                       // 201\n                                                                                                                       // 202\n  // oversized objects fall out of cache automatically.                                                                // 203\n  if (hit.length > this._max) {                                                                                        // 204\n    if (this._dispose) this._dispose(key, value)                                                                       // 205\n    return false                                                                                                       // 206\n  }                                                                                                                    // 207\n                                                                                                                       // 208\n  this._length += hit.length                                                                                           // 209\n  this._lruList[hit.lu] = this._cache[key] = hit                                                                       // 210\n  this._itemCount ++                                                                                                   // 211\n                                                                                                                       // 212\n  if (this._length > this._max)                                                                                        // 213\n    trim(this)                                                                                                         // 214\n                                                                                                                       // 215\n  return true                                                                                                          // 216\n}                                                                                                                      // 217\n                                                                                                                       // 218\nLRUCache.prototype.has = function (key) {                                                                              // 219\n  typeCheckKey(key)                                                                                                    // 220\n  if (!hOP(this._cache, key)) return false                                                                             // 221\n  var hit = this._cache[key]                                                                                           // 222\n  if (isStale(this, hit)) {                                                                                            // 223\n    return false                                                                                                       // 224\n  }                                                                                                                    // 225\n  return true                                                                                                          // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\nLRUCache.prototype.get = function (key) {                                                                              // 229\n  typeCheckKey(key)                                                                                                    // 230\n  return get(this, key, true)                                                                                          // 231\n}                                                                                                                      // 232\n                                                                                                                       // 233\nLRUCache.prototype.peek = function (key) {                                                                             // 234\n  typeCheckKey(key)                                                                                                    // 235\n  return get(this, key, false)                                                                                         // 236\n}                                                                                                                      // 237\n                                                                                                                       // 238\nLRUCache.prototype.pop = function () {                                                                                 // 239\n  var hit = this._lruList[this._lru]                                                                                   // 240\n  del(this, hit)                                                                                                       // 241\n  return hit || null                                                                                                   // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\nLRUCache.prototype.del = function (key) {                                                                              // 245\n  typeCheckKey(key)                                                                                                    // 246\n  del(this, this._cache[key])                                                                                          // 247\n}                                                                                                                      // 248\n                                                                                                                       // 249\nLRUCache.prototype.load = function (arr) {                                                                             // 250\n  //reset the cache                                                                                                    // 251\n  this.reset();                                                                                                        // 252\n                                                                                                                       // 253\n  var now = Date.now()                                                                                                 // 254\n  //A previous serialized cache has the most recent items first                                                        // 255\n  for (var l = arr.length - 1; l >= 0; l-- ) {                                                                         // 256\n    var hit = arr[l]                                                                                                   // 257\n    typeCheckKey(hit.k)                                                                                                // 258\n    var expiresAt = hit.e || 0                                                                                         // 259\n    if (expiresAt === 0) {                                                                                             // 260\n      //the item was created without expiration in a non aged cache                                                    // 261\n      this.set(hit.k, hit.v)                                                                                           // 262\n    } else {                                                                                                           // 263\n      var maxAge = expiresAt - now                                                                                     // 264\n      //dont add already expired items                                                                                 // 265\n      if (maxAge > 0) this.set(hit.k, hit.v, maxAge)                                                                   // 266\n    }                                                                                                                  // 267\n  }                                                                                                                    // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\nfunction get (self, key, doUse) {                                                                                      // 271\n  typeCheckKey(key)                                                                                                    // 272\n  var hit = self._cache[key]                                                                                           // 273\n  if (hit) {                                                                                                           // 274\n    if (isStale(self, hit)) {                                                                                          // 275\n      del(self, hit)                                                                                                   // 276\n      if (!self._allowStale) hit = undefined                                                                           // 277\n    } else {                                                                                                           // 278\n      if (doUse) use(self, hit)                                                                                        // 279\n    }                                                                                                                  // 280\n    if (hit) hit = hit.value                                                                                           // 281\n  }                                                                                                                    // 282\n  return hit                                                                                                           // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\nfunction isStale(self, hit) {                                                                                          // 286\n  if (!hit || (!hit.maxAge && !self._maxAge)) return false                                                             // 287\n  var stale = false;                                                                                                   // 288\n  var diff = Date.now() - hit.now                                                                                      // 289\n  if (hit.maxAge) {                                                                                                    // 290\n    stale = diff > hit.maxAge                                                                                          // 291\n  } else {                                                                                                             // 292\n    stale = self._maxAge && (diff > self._maxAge)                                                                      // 293\n  }                                                                                                                    // 294\n  return stale;                                                                                                        // 295\n}                                                                                                                      // 296\n                                                                                                                       // 297\nfunction use (self, hit) {                                                                                             // 298\n  shiftLU(self, hit)                                                                                                   // 299\n  hit.lu = self._mru ++                                                                                                // 300\n  self._lruList[hit.lu] = hit                                                                                          // 301\n}                                                                                                                      // 302\n                                                                                                                       // 303\nfunction trim (self) {                                                                                                 // 304\n  while (self._lru < self._mru && self._length > self._max)                                                            // 305\n    del(self, self._lruList[self._lru])                                                                                // 306\n}                                                                                                                      // 307\n                                                                                                                       // 308\nfunction shiftLU (self, hit) {                                                                                         // 309\n  delete self._lruList[ hit.lu ]                                                                                       // 310\n  while (self._lru < self._mru && !self._lruList[self._lru]) self._lru ++                                              // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\nfunction del (self, hit) {                                                                                             // 314\n  if (hit) {                                                                                                           // 315\n    if (self._dispose) self._dispose(hit.key, hit.value)                                                               // 316\n    self._length -= hit.length                                                                                         // 317\n    self._itemCount --                                                                                                 // 318\n    delete self._cache[ hit.key ]                                                                                      // 319\n    shiftLU(self, hit)                                                                                                 // 320\n  }                                                                                                                    // 321\n}                                                                                                                      // 322\n                                                                                                                       // 323\n// classy, since V8 prefers predictable objects.                                                                       // 324\nfunction Entry (key, value, lu, length, now, maxAge) {                                                                 // 325\n  this.key = key                                                                                                       // 326\n  this.value = value                                                                                                   // 327\n  this.lu = lu                                                                                                         // 328\n  this.length = length                                                                                                 // 329\n  this.now = now                                                                                                       // 330\n  if (maxAge) this.maxAge = maxAge                                                                                     // 331\n}                                                                                                                      // 332\n                                                                                                                       // 333\n})()                                                                                                                   // 334\n                                                                                                                       // 335\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"sigmund\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/sigmund/package.json                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"sigmund\";                                                                                              // 1\nexports.version = \"1.0.1\";                                                                                             // 2\nexports.main = \"sigmund.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sigmund.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/sigmund/sigmund.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = sigmund                                                                                               // 1\nfunction sigmund (subject, maxSessions) {                                                                              // 2\n    maxSessions = maxSessions || 10;                                                                                   // 3\n    var notes = [];                                                                                                    // 4\n    var analysis = '';                                                                                                 // 5\n    var RE = RegExp;                                                                                                   // 6\n                                                                                                                       // 7\n    function psychoAnalyze (subject, session) {                                                                        // 8\n        if (session > maxSessions) return;                                                                             // 9\n                                                                                                                       // 10\n        if (typeof subject === 'function' ||                                                                           // 11\n            typeof subject === 'undefined') {                                                                          // 12\n            return;                                                                                                    // 13\n        }                                                                                                              // 14\n                                                                                                                       // 15\n        if (typeof subject !== 'object' || !subject ||                                                                 // 16\n            (subject instanceof RE)) {                                                                                 // 17\n            analysis += subject;                                                                                       // 18\n            return;                                                                                                    // 19\n        }                                                                                                              // 20\n                                                                                                                       // 21\n        if (notes.indexOf(subject) !== -1 || session === maxSessions) return;                                          // 22\n                                                                                                                       // 23\n        notes.push(subject);                                                                                           // 24\n        analysis += '{';                                                                                               // 25\n        Object.keys(subject).forEach(function (issue, _, __) {                                                         // 26\n            // pseudo-private values.  skip those.                                                                     // 27\n            if (issue.charAt(0) === '_') return;                                                                       // 28\n            var to = typeof subject[issue];                                                                            // 29\n            if (to === 'function' || to === 'undefined') return;                                                       // 30\n            analysis += issue;                                                                                         // 31\n            psychoAnalyze(subject[issue], session + 1);                                                                // 32\n        });                                                                                                            // 33\n    }                                                                                                                  // 34\n    psychoAnalyze(subject, 0);                                                                                         // 35\n    return analysis;                                                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\n// vim: set softtabstop=4 shiftwidth=4:                                                                                // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"diff\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/diff/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"diff\";                                                                                                 // 1\nexports.version = \"1.4.0\";                                                                                             // 2\nexports.main = \"./diff\";                                                                                               // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"diff.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/diff/diff.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* See LICENSE file for terms of use */                                                                                // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Text diff implementation.                                                                                           // 4\n *                                                                                                                     // 5\n * This library supports the following APIS:                                                                           // 6\n * JsDiff.diffChars: Character by character diff                                                                       // 7\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace                                       // 8\n * JsDiff.diffLines: Line based diff                                                                                   // 9\n *                                                                                                                     // 10\n * JsDiff.diffCss: Diff targeted at CSS content                                                                        // 11\n *                                                                                                                     // 12\n * These methods are based on the implementation proposed in                                                           // 13\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).                                                   // 14\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927                                                      // 15\n */                                                                                                                    // 16\n(function(global, undefined) {                                                                                         // 17\n  var objectPrototypeToString = Object.prototype.toString;                                                             // 18\n                                                                                                                       // 19\n  /*istanbul ignore next*/                                                                                             // 20\n  function map(arr, mapper, that) {                                                                                    // 21\n    if (Array.prototype.map) {                                                                                         // 22\n      return Array.prototype.map.call(arr, mapper, that);                                                              // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    var other = new Array(arr.length);                                                                                 // 26\n                                                                                                                       // 27\n    for (var i = 0, n = arr.length; i < n; i++) {                                                                      // 28\n      other[i] = mapper.call(that, arr[i], i, arr);                                                                    // 29\n    }                                                                                                                  // 30\n    return other;                                                                                                      // 31\n  }                                                                                                                    // 32\n  function clonePath(path) {                                                                                           // 33\n    return { newPos: path.newPos, components: path.components.slice(0) };                                              // 34\n  }                                                                                                                    // 35\n  function removeEmpty(array) {                                                                                        // 36\n    var ret = [];                                                                                                      // 37\n    for (var i = 0; i < array.length; i++) {                                                                           // 38\n      if (array[i]) {                                                                                                  // 39\n        ret.push(array[i]);                                                                                            // 40\n      }                                                                                                                // 41\n    }                                                                                                                  // 42\n    return ret;                                                                                                        // 43\n  }                                                                                                                    // 44\n  function escapeHTML(s) {                                                                                             // 45\n    var n = s;                                                                                                         // 46\n    n = n.replace(/&/g, '&amp;');                                                                                      // 47\n    n = n.replace(/</g, '&lt;');                                                                                       // 48\n    n = n.replace(/>/g, '&gt;');                                                                                       // 49\n    n = n.replace(/\"/g, '&quot;');                                                                                     // 50\n                                                                                                                       // 51\n    return n;                                                                                                          // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  // This function handles the presence of circular references by bailing out when encountering an                     // 55\n  // object that is already on the \"stack\" of items being processed.                                                   // 56\n  function canonicalize(obj, stack, replacementStack) {                                                                // 57\n    stack = stack || [];                                                                                               // 58\n    replacementStack = replacementStack || [];                                                                         // 59\n                                                                                                                       // 60\n    var i;                                                                                                             // 61\n                                                                                                                       // 62\n    for (i = 0; i < stack.length; i += 1) {                                                                            // 63\n      if (stack[i] === obj) {                                                                                          // 64\n        return replacementStack[i];                                                                                    // 65\n      }                                                                                                                // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    var canonicalizedObj;                                                                                              // 69\n                                                                                                                       // 70\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {                                                      // 71\n      stack.push(obj);                                                                                                 // 72\n      canonicalizedObj = new Array(obj.length);                                                                        // 73\n      replacementStack.push(canonicalizedObj);                                                                         // 74\n      for (i = 0; i < obj.length; i += 1) {                                                                            // 75\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);                                           // 76\n      }                                                                                                                // 77\n      stack.pop();                                                                                                     // 78\n      replacementStack.pop();                                                                                          // 79\n    } else if (typeof obj === 'object' && obj !== null) {                                                              // 80\n      stack.push(obj);                                                                                                 // 81\n      canonicalizedObj = {};                                                                                           // 82\n      replacementStack.push(canonicalizedObj);                                                                         // 83\n      var sortedKeys = [],                                                                                             // 84\n          key;                                                                                                         // 85\n      for (key in obj) {                                                                                               // 86\n        sortedKeys.push(key);                                                                                          // 87\n      }                                                                                                                // 88\n      sortedKeys.sort();                                                                                               // 89\n      for (i = 0; i < sortedKeys.length; i += 1) {                                                                     // 90\n        key = sortedKeys[i];                                                                                           // 91\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);                                       // 92\n      }                                                                                                                // 93\n      stack.pop();                                                                                                     // 94\n      replacementStack.pop();                                                                                          // 95\n    } else {                                                                                                           // 96\n      canonicalizedObj = obj;                                                                                          // 97\n    }                                                                                                                  // 98\n    return canonicalizedObj;                                                                                           // 99\n  }                                                                                                                    // 100\n                                                                                                                       // 101\n  function buildValues(components, newString, oldString, useLongestToken) {                                            // 102\n    var componentPos = 0,                                                                                              // 103\n        componentLen = components.length,                                                                              // 104\n        newPos = 0,                                                                                                    // 105\n        oldPos = 0;                                                                                                    // 106\n                                                                                                                       // 107\n    for (; componentPos < componentLen; componentPos++) {                                                              // 108\n      var component = components[componentPos];                                                                        // 109\n      if (!component.removed) {                                                                                        // 110\n        if (!component.added && useLongestToken) {                                                                     // 111\n          var value = newString.slice(newPos, newPos + component.count);                                               // 112\n          value = map(value, function(value, i) {                                                                      // 113\n            var oldValue = oldString[oldPos + i];                                                                      // 114\n            return oldValue.length > value.length ? oldValue : value;                                                  // 115\n          });                                                                                                          // 116\n                                                                                                                       // 117\n          component.value = value.join('');                                                                            // 118\n        } else {                                                                                                       // 119\n          component.value = newString.slice(newPos, newPos + component.count).join('');                                // 120\n        }                                                                                                              // 121\n        newPos += component.count;                                                                                     // 122\n                                                                                                                       // 123\n        // Common case                                                                                                 // 124\n        if (!component.added) {                                                                                        // 125\n          oldPos += component.count;                                                                                   // 126\n        }                                                                                                              // 127\n      } else {                                                                                                         // 128\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');                                  // 129\n        oldPos += component.count;                                                                                     // 130\n                                                                                                                       // 131\n        // Reverse add and remove so removes are output first to match common convention                               // 132\n        // The diffing algorithm is tied to add then remove output and this is the simplest                            // 133\n        // route to get the desired output with minimal overhead.                                                      // 134\n        if (componentPos && components[componentPos - 1].added) {                                                      // 135\n          var tmp = components[componentPos - 1];                                                                      // 136\n          components[componentPos - 1] = components[componentPos];                                                     // 137\n          components[componentPos] = tmp;                                                                              // 138\n        }                                                                                                              // 139\n      }                                                                                                                // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    return components;                                                                                                 // 143\n  }                                                                                                                    // 144\n                                                                                                                       // 145\n  function Diff(ignoreWhitespace) {                                                                                    // 146\n    this.ignoreWhitespace = ignoreWhitespace;                                                                          // 147\n  }                                                                                                                    // 148\n  Diff.prototype = {                                                                                                   // 149\n    diff: function(oldString, newString, callback) {                                                                   // 150\n      var self = this;                                                                                                 // 151\n                                                                                                                       // 152\n      function done(value) {                                                                                           // 153\n        if (callback) {                                                                                                // 154\n          setTimeout(function() { callback(undefined, value); }, 0);                                                   // 155\n          return true;                                                                                                 // 156\n        } else {                                                                                                       // 157\n          return value;                                                                                                // 158\n        }                                                                                                              // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n      // Handle the identity case (this is due to unrolling editLength == 0                                            // 162\n      if (newString === oldString) {                                                                                   // 163\n        return done([{ value: newString }]);                                                                           // 164\n      }                                                                                                                // 165\n      if (!newString) {                                                                                                // 166\n        return done([{ value: oldString, removed: true }]);                                                            // 167\n      }                                                                                                                // 168\n      if (!oldString) {                                                                                                // 169\n        return done([{ value: newString, added: true }]);                                                              // 170\n      }                                                                                                                // 171\n                                                                                                                       // 172\n      newString = this.tokenize(newString);                                                                            // 173\n      oldString = this.tokenize(oldString);                                                                            // 174\n                                                                                                                       // 175\n      var newLen = newString.length, oldLen = oldString.length;                                                        // 176\n      var editLength = 1;                                                                                              // 177\n      var maxEditLength = newLen + oldLen;                                                                             // 178\n      var bestPath = [{ newPos: -1, components: [] }];                                                                 // 179\n                                                                                                                       // 180\n      // Seed editLength = 0, i.e. the content starts with the same values                                             // 181\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);                                           // 182\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                  // 183\n        // Identity per the equality and tokenizer                                                                     // 184\n        return done([{value: newString.join('')}]);                                                                    // 185\n      }                                                                                                                // 186\n                                                                                                                       // 187\n      // Main worker method. checks all permutations of a given edit length for acceptance.                            // 188\n      function execEditLength() {                                                                                      // 189\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {                      // 190\n          var basePath;                                                                                                // 191\n          var addPath = bestPath[diagonalPath - 1],                                                                    // 192\n              removePath = bestPath[diagonalPath + 1],                                                                 // 193\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;                                            // 194\n          if (addPath) {                                                                                               // 195\n            // No one else is going to attempt to use this value, clear it                                             // 196\n            bestPath[diagonalPath - 1] = undefined;                                                                    // 197\n          }                                                                                                            // 198\n                                                                                                                       // 199\n          var canAdd = addPath && addPath.newPos + 1 < newLen,                                                         // 200\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;                                                // 201\n          if (!canAdd && !canRemove) {                                                                                 // 202\n            // If this path is a terminal then prune                                                                   // 203\n            bestPath[diagonalPath] = undefined;                                                                        // 204\n            continue;                                                                                                  // 205\n          }                                                                                                            // 206\n                                                                                                                       // 207\n          // Select the diagonal that we want to branch from. We select the prior                                      // 208\n          // path whose position in the new string is the farthest from the origin                                     // 209\n          // and does not pass the bounds of the diff graph                                                            // 210\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {                                          // 211\n            basePath = clonePath(removePath);                                                                          // 212\n            self.pushComponent(basePath.components, undefined, true);                                                  // 213\n          } else {                                                                                                     // 214\n            basePath = addPath;   // No need to clone, we've pulled it from the list                                   // 215\n            basePath.newPos++;                                                                                         // 216\n            self.pushComponent(basePath.components, true, undefined);                                                  // 217\n          }                                                                                                            // 218\n                                                                                                                       // 219\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);                                   // 220\n                                                                                                                       // 221\n          // If we have hit the end of both strings, then we are done                                                  // 222\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                 // 223\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));                 // 224\n          } else {                                                                                                     // 225\n            // Otherwise track this path as a potential candidate and continue.                                        // 226\n            bestPath[diagonalPath] = basePath;                                                                         // 227\n          }                                                                                                            // 228\n        }                                                                                                              // 229\n                                                                                                                       // 230\n        editLength++;                                                                                                  // 231\n      }                                                                                                                // 232\n                                                                                                                       // 233\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the                              // 234\n      // sync and async mode which is never fun. Loops over execEditLength until a value                               // 235\n      // is produced.                                                                                                  // 236\n      if (callback) {                                                                                                  // 237\n        (function exec() {                                                                                             // 238\n          setTimeout(function() {                                                                                      // 239\n            // This should not happen, but we want to be safe.                                                         // 240\n            /*istanbul ignore next */                                                                                  // 241\n            if (editLength > maxEditLength) {                                                                          // 242\n              return callback();                                                                                       // 243\n            }                                                                                                          // 244\n                                                                                                                       // 245\n            if (!execEditLength()) {                                                                                   // 246\n              exec();                                                                                                  // 247\n            }                                                                                                          // 248\n          }, 0);                                                                                                       // 249\n        }());                                                                                                          // 250\n      } else {                                                                                                         // 251\n        while (editLength <= maxEditLength) {                                                                          // 252\n          var ret = execEditLength();                                                                                  // 253\n          if (ret) {                                                                                                   // 254\n            return ret;                                                                                                // 255\n          }                                                                                                            // 256\n        }                                                                                                              // 257\n      }                                                                                                                // 258\n    },                                                                                                                 // 259\n                                                                                                                       // 260\n    pushComponent: function(components, added, removed) {                                                              // 261\n      var last = components[components.length - 1];                                                                    // 262\n      if (last && last.added === added && last.removed === removed) {                                                  // 263\n        // We need to clone here as the component clone operation is just                                              // 264\n        // as shallow array clone                                                                                      // 265\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };                  // 266\n      } else {                                                                                                         // 267\n        components.push({count: 1, added: added, removed: removed });                                                  // 268\n      }                                                                                                                // 269\n    },                                                                                                                 // 270\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {                                            // 271\n      var newLen = newString.length,                                                                                   // 272\n          oldLen = oldString.length,                                                                                   // 273\n          newPos = basePath.newPos,                                                                                    // 274\n          oldPos = newPos - diagonalPath,                                                                              // 275\n                                                                                                                       // 276\n          commonCount = 0;                                                                                             // 277\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;                                                                                                      // 279\n        oldPos++;                                                                                                      // 280\n        commonCount++;                                                                                                 // 281\n      }                                                                                                                // 282\n                                                                                                                       // 283\n      if (commonCount) {                                                                                               // 284\n        basePath.components.push({count: commonCount});                                                                // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      basePath.newPos = newPos;                                                                                        // 288\n      return oldPos;                                                                                                   // 289\n    },                                                                                                                 // 290\n                                                                                                                       // 291\n    equals: function(left, right) {                                                                                    // 292\n      var reWhitespace = /\\S/;                                                                                         // 293\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));       // 294\n    },                                                                                                                 // 295\n    tokenize: function(value) {                                                                                        // 296\n      return value.split('');                                                                                          // 297\n    }                                                                                                                  // 298\n  };                                                                                                                   // 299\n                                                                                                                       // 300\n  var CharDiff = new Diff();                                                                                           // 301\n                                                                                                                       // 302\n  var WordDiff = new Diff(true);                                                                                       // 303\n  var WordWithSpaceDiff = new Diff();                                                                                  // 304\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {                                                   // 305\n    return removeEmpty(value.split(/(\\s+|\\b)/));                                                                       // 306\n  };                                                                                                                   // 307\n                                                                                                                       // 308\n  var CssDiff = new Diff(true);                                                                                        // 309\n  CssDiff.tokenize = function(value) {                                                                                 // 310\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));                                                                  // 311\n  };                                                                                                                   // 312\n                                                                                                                       // 313\n  var LineDiff = new Diff();                                                                                           // 314\n                                                                                                                       // 315\n  var TrimmedLineDiff = new Diff();                                                                                    // 316\n  TrimmedLineDiff.ignoreTrim = true;                                                                                   // 317\n                                                                                                                       // 318\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {                                                     // 319\n    var retLines = [],                                                                                                 // 320\n        lines = value.split(/^/m);                                                                                     // 321\n    for (var i = 0; i < lines.length; i++) {                                                                           // 322\n      var line = lines[i],                                                                                             // 323\n          lastLine = lines[i - 1],                                                                                     // 324\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];                                                // 325\n                                                                                                                       // 326\n      // Merge lines that may contain windows new lines                                                                // 327\n      if (line === '\\n' && lastLineLastChar === '\\r') {                                                                // 328\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';                         // 329\n      } else {                                                                                                         // 330\n        if (this.ignoreTrim) {                                                                                         // 331\n          line = line.trim();                                                                                          // 332\n          // add a newline unless this is the last line.                                                               // 333\n          if (i < lines.length - 1) {                                                                                  // 334\n            line += '\\n';                                                                                              // 335\n          }                                                                                                            // 336\n        }                                                                                                              // 337\n        retLines.push(line);                                                                                           // 338\n      }                                                                                                                // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    return retLines;                                                                                                   // 342\n  };                                                                                                                   // 343\n                                                                                                                       // 344\n  var PatchDiff = new Diff();                                                                                          // 345\n  PatchDiff.tokenize = function(value) {                                                                               // 346\n    var ret = [],                                                                                                      // 347\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);                                                                   // 348\n                                                                                                                       // 349\n    // Ignore the final empty token that occurs if the string ends with a new line                                     // 350\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {                                                              // 351\n      linesAndNewlines.pop();                                                                                          // 352\n    }                                                                                                                  // 353\n                                                                                                                       // 354\n    // Merge the content and line separators into single tokens                                                        // 355\n    for (var i = 0; i < linesAndNewlines.length; i++) {                                                                // 356\n      var line = linesAndNewlines[i];                                                                                  // 357\n                                                                                                                       // 358\n      if (i % 2) {                                                                                                     // 359\n        ret[ret.length - 1] += line;                                                                                   // 360\n      } else {                                                                                                         // 361\n        ret.push(line);                                                                                                // 362\n      }                                                                                                                // 363\n    }                                                                                                                  // 364\n    return ret;                                                                                                        // 365\n  };                                                                                                                   // 366\n                                                                                                                       // 367\n  var SentenceDiff = new Diff();                                                                                       // 368\n  SentenceDiff.tokenize = function(value) {                                                                            // 369\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));                                                          // 370\n  };                                                                                                                   // 371\n                                                                                                                       // 372\n  var JsonDiff = new Diff();                                                                                           // 373\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a                         // 374\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:            // 375\n  JsonDiff.useLongestToken = true;                                                                                     // 376\n  JsonDiff.tokenize = LineDiff.tokenize;                                                                               // 377\n  JsonDiff.equals = function(left, right) {                                                                            // 378\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));                       // 379\n  };                                                                                                                   // 380\n                                                                                                                       // 381\n  var JsDiff = {                                                                                                       // 382\n    Diff: Diff,                                                                                                        // 383\n                                                                                                                       // 384\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },                 // 385\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },                 // 386\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },                 // 388\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },   // 389\n                                                                                                                       // 390\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },         // 391\n                                                                                                                       // 392\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },                    // 393\n    diffJson: function(oldObj, newObj, callback) {                                                                     // 394\n      return JsonDiff.diff(                                                                                            // 395\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),                   // 396\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),                   // 397\n        callback                                                                                                       // 398\n      );                                                                                                               // 399\n    },                                                                                                                 // 400\n                                                                                                                       // 401\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {                    // 402\n      var ret = [];                                                                                                    // 403\n                                                                                                                       // 404\n      if (oldFileName == newFileName) {                                                                                // 405\n        ret.push('Index: ' + oldFileName);                                                                             // 406\n      }                                                                                                                // 407\n      ret.push('===================================================================');                                 // 408\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));                     // 409\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));                     // 410\n                                                                                                                       // 411\n      var diff = PatchDiff.diff(oldStr, newStr);                                                                       // 412\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier                             // 413\n                                                                                                                       // 414\n      // Formats a given set of lines for printing as context lines in a patch                                         // 415\n      function contextLines(lines) {                                                                                   // 416\n        return map(lines, function(entry) { return ' ' + entry; });                                                    // 417\n      }                                                                                                                // 418\n                                                                                                                       // 419\n      // Outputs the no newline at end of file warning if needed                                                       // 420\n      function eofNL(curRange, i, current) {                                                                           // 421\n        var last = diff[diff.length - 2],                                                                              // 422\n            isLast = i === diff.length - 2,                                                                            // 423\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;                                      // 424\n                                                                                                                       // 425\n        // Figure out if this is the last line for the given file and missing NL                                       // 426\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {                                                // 427\n          curRange.push('\\\\ No newline at end of file');                                                               // 428\n        }                                                                                                              // 429\n      }                                                                                                                // 430\n                                                                                                                       // 431\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],                                                         // 432\n          oldLine = 1, newLine = 1;                                                                                    // 433\n      for (var i = 0; i < diff.length; i++) {                                                                          // 434\n        var current = diff[i],                                                                                         // 435\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');                                     // 436\n        current.lines = lines;                                                                                         // 437\n                                                                                                                       // 438\n        if (current.added || current.removed) {                                                                        // 439\n          // If we have previous context, start with that                                                              // 440\n          if (!oldRangeStart) {                                                                                        // 441\n            var prev = diff[i - 1];                                                                                    // 442\n            oldRangeStart = oldLine;                                                                                   // 443\n            newRangeStart = newLine;                                                                                   // 444\n                                                                                                                       // 445\n            if (prev) {                                                                                                // 446\n              curRange = contextLines(prev.lines.slice(-4));                                                           // 447\n              oldRangeStart -= curRange.length;                                                                        // 448\n              newRangeStart -= curRange.length;                                                                        // 449\n            }                                                                                                          // 450\n          }                                                                                                            // 451\n                                                                                                                       // 452\n          // Output our changes                                                                                        // 453\n          curRange.push.apply(curRange, map(lines, function(entry) {                                                   // 454\n            return (current.added ? '+' : '-') + entry;                                                                // 455\n          }));                                                                                                         // 456\n          eofNL(curRange, i, current);                                                                                 // 457\n                                                                                                                       // 458\n          // Track the updated file position                                                                           // 459\n          if (current.added) {                                                                                         // 460\n            newLine += lines.length;                                                                                   // 461\n          } else {                                                                                                     // 462\n            oldLine += lines.length;                                                                                   // 463\n          }                                                                                                            // 464\n        } else {                                                                                                       // 465\n          // Identical context lines. Track line changes                                                               // 466\n          if (oldRangeStart) {                                                                                         // 467\n            // Close out any changes that have been output (or join overlapping)                                       // 468\n            if (lines.length <= 8 && i < diff.length - 2) {                                                            // 469\n              // Overlapping                                                                                           // 470\n              curRange.push.apply(curRange, contextLines(lines));                                                      // 471\n            } else {                                                                                                   // 472\n              // end the range and output                                                                              // 473\n              var contextSize = Math.min(lines.length, 4);                                                             // 474\n              ret.push(                                                                                                // 475\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)                               // 476\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)                               // 477\n                  + ' @@');                                                                                            // 478\n              ret.push.apply(ret, curRange);                                                                           // 479\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));                                          // 480\n              if (lines.length <= 4) {                                                                                 // 481\n                eofNL(ret, i, current);                                                                                // 482\n              }                                                                                                        // 483\n                                                                                                                       // 484\n              oldRangeStart = 0;                                                                                       // 485\n              newRangeStart = 0;                                                                                       // 486\n              curRange = [];                                                                                           // 487\n            }                                                                                                          // 488\n          }                                                                                                            // 489\n          oldLine += lines.length;                                                                                     // 490\n          newLine += lines.length;                                                                                     // 491\n        }                                                                                                              // 492\n      }                                                                                                                // 493\n                                                                                                                       // 494\n      return ret.join('\\n') + '\\n';                                                                                    // 495\n    },                                                                                                                 // 496\n                                                                                                                       // 497\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {                                            // 498\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);                     // 499\n    },                                                                                                                 // 500\n                                                                                                                       // 501\n    applyPatch: function(oldStr, uniDiff) {                                                                            // 502\n      var diffstr = uniDiff.split('\\n'),                                                                               // 503\n          hunks = [],                                                                                                  // 504\n          i = 0,                                                                                                       // 505\n          remEOFNL = false,                                                                                            // 506\n          addEOFNL = false;                                                                                            // 507\n                                                                                                                       // 508\n      // Skip to the first change hunk                                                                                 // 509\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {                                                        // 510\n        i++;                                                                                                           // 511\n      }                                                                                                                // 512\n                                                                                                                       // 513\n      // Parse the unified diff                                                                                        // 514\n      for (; i < diffstr.length; i++) {                                                                                // 515\n        if (diffstr[i][0] === '@') {                                                                                   // 516\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);                                      // 517\n          hunks.unshift({                                                                                              // 518\n            start: chnukHeader[3],                                                                                     // 519\n            oldlength: +chnukHeader[2],                                                                                // 520\n            removed: [],                                                                                               // 521\n            newlength: chnukHeader[4],                                                                                 // 522\n            added: []                                                                                                  // 523\n          });                                                                                                          // 524\n        } else if (diffstr[i][0] === '+') {                                                                            // 525\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 526\n        } else if (diffstr[i][0] === '-') {                                                                            // 527\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 528\n        } else if (diffstr[i][0] === ' ') {                                                                            // 529\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 530\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 531\n        } else if (diffstr[i][0] === '\\\\') {                                                                           // 532\n          if (diffstr[i - 1][0] === '+') {                                                                             // 533\n            remEOFNL = true;                                                                                           // 534\n          } else if (diffstr[i - 1][0] === '-') {                                                                      // 535\n            addEOFNL = true;                                                                                           // 536\n          }                                                                                                            // 537\n        }                                                                                                              // 538\n      }                                                                                                                // 539\n                                                                                                                       // 540\n      // Apply the diff to the input                                                                                   // 541\n      var lines = oldStr.split('\\n');                                                                                  // 542\n      for (i = hunks.length - 1; i >= 0; i--) {                                                                        // 543\n        var hunk = hunks[i];                                                                                           // 544\n        // Sanity check the input string. Bail if we don't match.                                                      // 545\n        for (var j = 0; j < hunk.oldlength; j++) {                                                                     // 546\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {                                                         // 547\n            return false;                                                                                              // 548\n          }                                                                                                            // 549\n        }                                                                                                              // 550\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));                      // 551\n      }                                                                                                                // 552\n                                                                                                                       // 553\n      // Handle EOFNL insertion/removal                                                                                // 554\n      if (remEOFNL) {                                                                                                  // 555\n        while (!lines[lines.length - 1]) {                                                                             // 556\n          lines.pop();                                                                                                 // 557\n        }                                                                                                              // 558\n      } else if (addEOFNL) {                                                                                           // 559\n        lines.push('');                                                                                                // 560\n      }                                                                                                                // 561\n      return lines.join('\\n');                                                                                         // 562\n    },                                                                                                                 // 563\n                                                                                                                       // 564\n    convertChangesToXML: function(changes) {                                                                           // 565\n      var ret = [];                                                                                                    // 566\n      for (var i = 0; i < changes.length; i++) {                                                                       // 567\n        var change = changes[i];                                                                                       // 568\n        if (change.added) {                                                                                            // 569\n          ret.push('<ins>');                                                                                           // 570\n        } else if (change.removed) {                                                                                   // 571\n          ret.push('<del>');                                                                                           // 572\n        }                                                                                                              // 573\n                                                                                                                       // 574\n        ret.push(escapeHTML(change.value));                                                                            // 575\n                                                                                                                       // 576\n        if (change.added) {                                                                                            // 577\n          ret.push('</ins>');                                                                                          // 578\n        } else if (change.removed) {                                                                                   // 579\n          ret.push('</del>');                                                                                          // 580\n        }                                                                                                              // 581\n      }                                                                                                                // 582\n      return ret.join('');                                                                                             // 583\n    },                                                                                                                 // 584\n                                                                                                                       // 585\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API                                                  // 586\n    convertChangesToDMP: function(changes) {                                                                           // 587\n      var ret = [],                                                                                                    // 588\n          change,                                                                                                      // 589\n          operation;                                                                                                   // 590\n      for (var i = 0; i < changes.length; i++) {                                                                       // 591\n        change = changes[i];                                                                                           // 592\n        if (change.added) {                                                                                            // 593\n          operation = 1;                                                                                               // 594\n        } else if (change.removed) {                                                                                   // 595\n          operation = -1;                                                                                              // 596\n        } else {                                                                                                       // 597\n          operation = 0;                                                                                               // 598\n        }                                                                                                              // 599\n                                                                                                                       // 600\n        ret.push([operation, change.value]);                                                                           // 601\n      }                                                                                                                // 602\n      return ret;                                                                                                      // 603\n    },                                                                                                                 // 604\n                                                                                                                       // 605\n    canonicalize: canonicalize                                                                                         // 606\n  };                                                                                                                   // 607\n                                                                                                                       // 608\n  /*istanbul ignore next */                                                                                            // 609\n  /*global module */                                                                                                   // 610\n  if (typeof module !== 'undefined' && module.exports) {                                                               // 611\n    module.exports = JsDiff;                                                                                           // 612\n  } else if (typeof define === 'function' && define.amd) {                                                             // 613\n    /*global define */                                                                                                 // 614\n    define([], function() { return JsDiff; });                                                                         // 615\n  } else if (typeof global.JsDiff === 'undefined') {                                                                   // 616\n    global.JsDiff = JsDiff;                                                                                            // 617\n  }                                                                                                                    // 618\n}(this));                                                                                                              // 619\n                                                                                                                       // 620\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"supports-color\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/supports-color/index.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar argv = process.argv;                                                                                               // 2\n                                                                                                                       // 3\nmodule.exports = (function () {                                                                                        // 4\n\tif (argv.indexOf('--no-color') !== -1 ||                                                                              // 5\n\t\targv.indexOf('--no-colors') !== -1 ||                                                                                // 6\n\t\targv.indexOf('--color=false') !== -1) {                                                                              // 7\n\t\treturn false;                                                                                                        // 8\n\t}                                                                                                                     // 9\n                                                                                                                       // 10\n\tif (argv.indexOf('--color') !== -1 ||                                                                                 // 11\n\t\targv.indexOf('--colors') !== -1 ||                                                                                   // 12\n\t\targv.indexOf('--color=true') !== -1 ||                                                                               // 13\n\t\targv.indexOf('--color=always') !== -1) {                                                                             // 14\n\t\treturn true;                                                                                                         // 15\n\t}                                                                                                                     // 16\n                                                                                                                       // 17\n\tif (process.stdout && !process.stdout.isTTY) {                                                                        // 18\n\t\treturn false;                                                                                                        // 19\n\t}                                                                                                                     // 20\n                                                                                                                       // 21\n\tif (process.platform === 'win32') {                                                                                   // 22\n\t\treturn true;                                                                                                         // 23\n\t}                                                                                                                     // 24\n                                                                                                                       // 25\n\tif ('COLORTERM' in process.env) {                                                                                     // 26\n\t\treturn true;                                                                                                         // 27\n\t}                                                                                                                     // 28\n                                                                                                                       // 29\n\tif (process.env.TERM === 'dumb') {                                                                                    // 30\n\t\treturn false;                                                                                                        // 31\n\t}                                                                                                                     // 32\n                                                                                                                       // 33\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {                                        // 34\n\t\treturn true;                                                                                                         // 35\n\t}                                                                                                                     // 36\n                                                                                                                       // 37\n\treturn false;                                                                                                         // 38\n})();                                                                                                                  // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"escape-string-regexp\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/escape-string-regexp/index.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;                                                                          // 3\n                                                                                                                       // 4\nmodule.exports = function (str) {                                                                                      // 5\n\tif (typeof str !== 'string') {                                                                                        // 6\n\t\tthrow new TypeError('Expected a string');                                                                            // 7\n\t}                                                                                                                     // 8\n                                                                                                                       // 9\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');                                                                        // 10\n};                                                                                                                     // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".css\",\n    \".coffee\"\n  ]\n});\nrequire(\"./node_modules/meteor/practicalmeteor:mocha/meteor/src/client/template.mocha.js\");\nvar exports = require(\"./node_modules/meteor/practicalmeteor:mocha/meteor/src/index.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:mocha'] = exports, {\n  runTests: runTests\n});\n\n})();\n","servePath":"/packages/practicalmeteor_mocha.js","sourceMap":{"version":3,"sources":["packages/practicalmeteor:mocha/meteor/src/index.js","/packages/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee","packages/practicalmeteor:mocha/meteor/src/reporters/html.js","packages/practicalmeteor:mocha/meteor/src/reporters/index.js","packages/practicalmeteor:mocha/meteor/src/setup/index.js","packages/practicalmeteor:mocha/meteor/src/setup/setupMochaClient.js","packages/practicalmeteor:mocha/lib/ms.js","packages/practicalmeteor:mocha/lib/utils.js","packages/practicalmeteor:mocha/lib/browser/progress.js","packages/practicalmeteor:mocha/lib/reporters/base.js"],"names":["module","export","runTests","MochaRunner","BaseReporter","ClientServerBaseReporter","HtmlReporter","before","after","beforeEach","afterEach","describe","xdescribe","it","xit","specify","xspecify","xcontext","context","watch","require","v","hideOtherCSS","hideApp","runEverywhere","global","Base","utils","Progress","escapeRe","escape","Date","setTimeout","setInterval","clearTimeout","clearInterval","exports","HTML","runner","options","call","elementIdPrefix","statsTemplate","self","stats","stat","fragment","items","getElementsByTagName","passes","passesLink","failures","failuresLink","duration","canvas","report","stack","progress","ctx","root","document","getElementById","getContext","ratio","window","devicePixelRatio","style","width","height","scale","error","on","unhide","name","test","className","replace","trim","hideSuitesWithout","appendChild","size","suite","url","suiteURL","el","title","unshift","createElement","shift","body","fn","toString","type","emit","percent","tests","total","update","draw","ms","start","text","toFixed","state","testURL","speed","pending","stackString","message","err","indexOfMessage","indexOf","substr","length","sourceURL","line","undefined","htmlMessage","h2","pre","display","clean","makeUrl","s","search","location","pathname","encodeURIComponent","prototype","fullTitle","msg","html","args","arguments","div","i","innerHTML","_","String","firstChild","classname","suites","getElementsByClassName","els","contents","textContent","innerText","event","addEventListener","attachEvent","HTML_REPORTER","CONSOLE_REPORTER","XUNIT_REPORTER","REPORTERS","reporters","ConsoleReporter","XunitReporter","mochaInstance","setupMochaClient","Meteor","isClient","isServer","mocha","module1","meteorInstall","exportDefault","process","browser","node_modules","r","e","isatty","m","h","d","y","val","parse","longFormat","shortFormat","str","match","exec","n","parseFloat","toLowerCase","Math","round","plural","floor","ceil","basename","debug","exists","existsSync","glob","join","readdirSync","statSync","watchFile","ignore","inherits","forEach","arr","scope","l","isString","obj","map","result","push","reduce","rval","filter","ret","keys","Object","has","hasOwnProperty","key","files","interval","file","curr","prev","mtime","isArray","Array","Buffer","toJSON","slice","ignored","path","dir","ext","re","RegExp","isDirectory","slug","spaces","tabs","parseQuery","qs","split","pair","decodeURIComponent","highlight","js","highlightTags","code","len","emptyRepresentation","value","isBuffer","stringify","jsonStringify","json","data","prop","canonicalize","object","depth","_stringify","space","end","repeat","Infinity","sDate","isNaN","getTime","toISOString","JSON","canonicalizedObj","withStack","pop","item","sort","lookupFiles","extensions","recursive","sync","Error","isFile","concat","undefinedError","getError","stackTraceFilter","slash","is","node","cwd","href","isMochaInternal","isNodeInternal","list","fontSize","font","_size","_text","_fontSize","family","_font","min","half","x","rad","angle","PI","clearRect","strokeStyle","beginPath","arc","stroke","w","measureText","fillText","tty","diff","supportsColor","useColors","env","MOCHA_COLORS","inlineDiffs","colors","pass","fail","checkmark","fast","medium","slow","green","light","symbols","ok","dot","platform","color","stdout","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","console","log","fmt","inspect","index","actual","expected","uncaught","showDiff","sameType","inlineDiff","unifiedDiff","epilogue","pad","errorDiff","lines","indent","cleanUp","escapeInvisibles","colorLines","notBlank","createPatch","splice","added","removed","objToString","a","b"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,YAAS;AAAA,WAAIA,QAAJ;AAAA,GAAV;AAAuBC,eAAY;AAAA,WAAIA,WAAJ;AAAA,GAAnC;AAAmDC,gBAAa;AAAA,WAAIA,YAAJ;AAAA,GAAhE;AAAiFC,4BAAyB;AAAA,WAAIA,wBAAJ;AAAA,GAA1G;AAAuIC,gBAAa;AAAA,WAAIA,YAAJ;AAAA,GAApJ;AAAqKC,UAAO;AAAA,WAAIA,MAAJ;AAAA,GAA5K;AAAuLC,SAAM;AAAA,WAAIA,KAAJ;AAAA,GAA7L;AAAuMC,cAAW;AAAA,WAAIA,UAAJ;AAAA,GAAlN;AAAiOC,aAAU;AAAA,WAAIA,SAAJ;AAAA,GAA3O;AAAyPC,YAAS;AAAA,WAAIA,QAAJ;AAAA,GAAlQ;AAA+QC,aAAU;AAAA,WAAIA,SAAJ;AAAA,GAAzR;AAAuSC,MAAG;AAAA,WAAIA,EAAJ;AAAA,GAA1S;AAAiTC,OAAI;AAAA,WAAIA,GAAJ;AAAA,GAArT;AAA6TC,WAAQ;AAAA,WAAIA,OAAJ;AAAA,GAArU;AAAiVC,YAAS;AAAA,WAAIA,QAAJ;AAAA,GAA1V;AAAuWC,YAAS;AAAA,WAAIA,QAAJ;AAAA,GAAhX;AAA6XC,WAAQ;AAAA,WAAIA,OAAJ;AAAA;AAArY,CAAd;AAAialB,OAAOmB,KAAP,CAAaC,QAAQ,SAAR,CAAb;AAAiC,IAAIjB,oBAAJ;AAAgBH,OAAOmB,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAAA,uBAASC,CAAT,EAAW;AAAClB,kBAAYkB,CAAZ;AAAc;AAA1B,CAA1C,EAAsE,CAAtE;AAAyE,IAAIjB,qBAAJ;AAAiBJ,OAAOmB,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAAA,uBAASC,CAAT,EAAW;AAACjB,mBAAaiB,CAAb;AAAe;AAA3B,CAAjD,EAA8E,CAA9E;AAAiF,IAAIhB,iCAAJ;AAA6BL,OAAOmB,KAAP,CAAaC,QAAQ,sCAAR,CAAb,EAA6D;AAAA,uBAASC,CAAT,EAAW;AAAChB,+BAAyBgB,CAAzB;AAA2B;AAAvC,CAA7D,EAAsG,CAAtG;AAAyG,IAAIf,qBAAJ;AAAiBN,OAAOmB,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAAA,uBAASC,CAAT,EAAW;AAACf,mBAAae,CAAb;AAAe;AAA3B,CAAjD,EAA8E,CAA9E;AAAiF,IAAIC,qBAAJ;AAAA,IAAiBC,gBAAjB;AAAyBvB,OAAOmB,KAAP,CAAaC,QAAQ,uCAAR,CAAb,EAA8D;AAACE,cAAD,YAAcD,CAAd,EAAgB;AAACC,mBAAaD,CAAb;AAAe,GAAhC;AAAiCE,SAAjC,YAAyCF,CAAzC,EAA2C;AAACE,cAAQF,CAAR;AAAU;AAAtD,CAA9D,EAAsH,CAAtH;;AAOv3B,IAAMnB,WAAW,YAAM;AAC5BqB,UAAQ,gBAAR;AACAD;AACAnB,cAAYqB,aAAZ;AACD,CAJM;;cAQ+BC,M;IAFhClB,M,WAAAA,M;IAAQC,K,WAAAA,K;IAAOC,U,WAAAA,U;IAAYC,S,WAAAA,S;IAC3BC,Q,WAAAA,Q;IAAUC,S,WAAAA,S;IAAWC,E,WAAAA,E;IAAIC,G,WAAAA,G;IAAKC,O,WAAAA,O;IAC9BC,Q,WAAAA,Q;IAAUC,Q,WAAAA,Q;IAAUC,O,WAAAA,O;;;;;;;;;;;;;;;;;;;;;;;;ACf1B;EAAA;;6BAAA;;AAAA,IAAwB,QAAQ,YAAR,EAAvB,CAAD;;AAAA,IACA,GAAwB,QAAQ,gBAAR,CADxB;;AAAA,KAEA,GAAwB,QAAQ,iBAAR,CAFxB;;AAAA,KAGA,GAAwB,QAAQ,iBAAR,CAHxB;;AAAA,QAIwB,QAAQ,cAAR,EAAvB,KAJD;;AAAA,QAKwB,QAAQ,mCAAR,EAAvB,KALD;;AAAA,eAMwB,QAAQ,QAAR,EAAvB,YAND;;AAAA,eAOwB,QAAQ,iCAAR,EAAvB,YAPD;;AAAA,qBAQA,GAAwB,QAAQ,sCAAR,CARxB;;AAAA,GASA,GAAU,iBAAa,aAAb,EAA4B,MAA5B,CATV;;AAAA;AAaE;;AAAA,aAAC,SAAD,GAAW,IAAX;;AAAA,EAEA,WAAC,IAAD,GAAM;0CACJ,WAAW,CAAC,WAAZ,WAAW,CAAC,WAAgB,kBADxB;EAAA,CAFN;;AAAA,wBAKA,UAAS,SALT;;AAAA,wBAMA,kBAAiB,IANjB;;AAAA,wBAOA,aAAY,EAPZ;;AAUa;AACX;AAAA;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,aAAV;AAAA,MACA,IAAC,MAAD,GAAS,KADT;AAAA,MAEA,IAAC,gBAAD,GAAuB,SAAK,CAAC,UAAN,CAAiB,sBAAjB,CAFvB;AAGA,UAAG,MAAM,CAAC,QAAV;AACE,cAAM,CAAC,OAAP,CAAe;AAAA,UACb,wBAAwB,IAAC,eAAc,CAAC,IAAhB,CAAqB,IAArB,CADX;SAAf;AAAA,QAGA,IAAC,QAAD,EAHA,CADF;OAJF;KAAA;AAWE,SAAG,CAAC,QAAD,CAAH,GAXF;KADW;EAAA,CAVb;;AAAA,wBAyBA,UAAS;AACP;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,SAAV;AAAA,MACA,OAAO,IADP;aAEA,MAAM,CAAC,OAAP,CAAe,sBAAf,EAAuC,SAAC,KAAD;AACrC;AAAA;AACE,aAAG,CAAC,KAAJ,CAAU,8BAAV;AAAA,UACA,MAAM,KAAN,EAAa,MAAb,CADA;AAAA,UAEA,OAAO,IAAC,MAAR,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC,CAArB,CAAuB,UAAvB,CAFA;;gBAGgB,UAAU;WAH1B;AAAA,UAIA,IAAC,MAAD,EAJA;AAMA,iBAAO,MAAP,CAPF;SAAA;AASE,UADI,WACJ;AAAA,cAAsB,gBAAtB;AAAA,eAAG,CAAC,KAAJ,CAAU,EAAE,CAAC,KAAb;WAAA;AACA,gBAAU,UAAM,CAAC,KAAP,CAAa,eAAb,EAA8B,CAAI,kBAAH,GAAoB,EAAE,CAAC,OAAvB,GAAoC,MAArC,CAA9B,EAA+E,CAAI,gBAAH,GAAkB,EAAE,CAAC,KAArB,GAAgC,MAAjC,CAA/E,CAAV,CAVF;SAAA;AAYE,aAAG,CAAC,QAAD,CAAH,GAZF;SADqC;MAAA,CAAvC,EAHF;KAAA;AAkBE,SAAG,CAAC,QAAD,CAAH,GAlBF;KADO;EAAA,CAzBT;;AAAA,wBA+CA,iBAAgB,SAAC,KAAD,EAAQ,IAAR;AACd;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,gBAAV,EAA4B,KAA5B;AAAA,MACA,MAAM,KAAN,EAAa,MAAb,CADA;AAAA,MAEA,MAAM,IAAN,EAAY,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB,CAAf,CAAZ,CAFA;AAAA,MAGA,OAAO,KAAP,CAAa,CAAC,EAAE,CAAC,EAAE,CAAC,CAApB,CAAsB,QAAtB,CAHA;AAAA,MAIA,OAAO,IAAC,WAAW,OAAnB,EAA2B,WAA3B,CAAuC,CAAC,EAAE,CAAC,EAAE,CAAC,EAA9C,CAAiD,QAAjD,CAJA;AAAA,MAKA,OAAO,MAAM,CAAC,QAAd,CAAuB,CAAC,EAAE,CAAC,EAAE,CAAC,MAAD,CAL7B;AAAA,MAMA,cAAkB,WANlB;AAAA,MAOA,IAAC,uBAAD,CAAwB,KAAK,CAAC,KAA9B,EAAqC,WAAW,CAAC,KAAjD,CAPA;AAAA,MASA,WAAW,CAAC,QAAZ,CAAqB,qBAArB,EAA4C;AAAA,QAC1C,MAAM,IAAC,WAAD,CAAY,IAAZ,CADoC;AAAA,QAE1C,WAAW,IAAC,WAAW,OAFmB;OAA5C,CATA;AAAA,MAcA,GAAG,CAAC,IAAJ,CAAS,4CAA0C,KAAnD,CAdA;aAeA,WAAW,CAAC,GAAZ,CAAgB,SAAC,QAAD;eACd,GAAG,CAAC,IAAJ,CAAS,WAAT,EAAsB,QAAtB,EADc;MAAA,CAAhB,EAhBF;KAAA;AAoBE,SAAG,CAAC,QAAD,CAAH,GApBF;KADc;EAAA,CA/ChB;;AAAA,wBAwEA,yBAAwB,SAAC,SAAD,EAAY,OAAZ;AACtB;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,uBAAV;AAAA,MAEA,WAAW,SAAC,QAAD;AACT;AAAA;AAAA;wBAAA;AACE,iBAAQ,UAAR,CAAkB,IAAI,CAAC,KAAvB,EAA8B,IAAI,CAAC,EAAnC,EADF;AAAA;eAEA,GAAG,CAAC,KAAJ,CAAU,UAAQ,QAAR,GAAiB,QAAjB,GAAwB,CAAC,SAAS,CAAC,SAAV,EAAD,CAAxB,GAA+C,UAAzD,EAHS;MAAA,CAFX;AAAA,MAOA,SAAS,WAAT,CAPA;AAAA,MAQA,SAAS,UAAT,CARA;AAAA,MASA,SAAS,YAAT,CATA;AAAA,MAUA,SAAS,WAAT,CAVA;AAYA;AAAA;sBAAA;AACE,eAAW,SAAK,IAAI,CAAC,KAAV,EAAiB,IAAI,CAAC,EAAtB,CAAX;AAAA,QACA,OAAO,CAAC,OAAR,CAAgB,IAAhB,CADA;AAAA,QAEA,GAAG,CAAC,KAAJ,CAAU,gBAAa,CAAC,SAAS,CAAC,SAAV,EAAD,CAAb,GAAoC,UAA9C,CAFA,CADF;AAAA,OAZA;AAiBA;AAAA;WAAA;wBAAA;AACE,mBAAW,KAAK,CAAC,MAAN,CAAa,OAAb,EAAsB,KAAK,CAAC,KAA5B,CAAX;AAAA,QACA,QAAQ,CAAC,OAAT,CAAiB,KAAK,CAAC,OAAN,EAAjB,CADA;AAAA,QAEA,GAAG,CAAC,KAAJ,CAAU,WAAQ,CAAC,QAAQ,CAAC,SAAT,EAAD,CAAR,GAA8B,cAA9B,GAA2C,CAAC,SAAS,CAAC,SAAV,EAAD,CAA3C,GAAkE,IAA5E,CAFA;AAAA,qBAGA,IAAC,uBAAD,CAAwB,KAAxB,EAA+B,QAA/B,EAHA,CADF;AAAA;qBAlBF;KAAA;AAyBE,SAAG,CAAC,QAAD,CAAH,GAzBF;KADsB;EAAA,CAxExB;;AAAA,wBAqGA,gBAAe;AACb;AACE,SAAG,CAAC,KAAJ,CAAU,eAAV;AAAA,MACA,OAAO,MAAM,CAAC,QAAd,CAAuB,CAAC,EAAE,CAAC,EAAE,CAAC,MAAD,CAD7B;AAAA,MAGA,IAAC,MAAD,GAAS,MAAM,CAAC,EAAP,EAHT;aAIA,IAAC,4BAAD,GAA+B,MAAM,CAAC,SAAP,CAAiB,sBAAjB,EAAyC,IAAC,MAA1C,EAAiD;AAAA,QAC9E,SAAS,CAAC,CAAC,IAAF,CAAO,IAAC,6BAAR,EAAsC,IAAtC,CADqE;AAAA,QAE9E,SAAS,CAAC,CAAC,IAAF,CAAO,IAAC,6BAAR,EAAsC,IAAtC,CAFqE;OAAjD,EALjC;KAAA;AAWE,SAAG,CAAC,QAAD,CAAH,GAXF;KADa;EAAA,CArGf;;AAAA,wBAoHA,cAAa,SAAC,SAAD;AAAY,IAAX,IAAC,YAAD,SAAW,CAAZ;EAAA,CApHb;;AAAA,wBAsHA,aAAY,SAAC,IAAD;AACV;;MADW,OAAO;KAClB;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,YAAV,EAAwB,IAAxB;AAAA,MACA,mBAAmB,qBADnB;AAAA,MAEA,IAAI,CAAC,OAAL,CAAa,gBAAb,EAAgC,MAAhC,CAFA;AAGA,aAAW,WAAO,IAAP,CAAX,CAJF;KAAA;AAME,SAAG,CAAC,QAAD,CAAH,GANF;KADU;EAAA,CAtHZ;;AAAA,wBAgIA,+BAA8B;AAC5B;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,8BAAV;AAAA,MACA,uBAAuB,QAAQ,qCAAR,CADvB;AAAA,MAEA,MAA0B,QAAQ,cAAR,CAA1B,EAAE,yBAAF,EAAa,yBAFb;AAAA,MAGA,QAAQ,KAAK,CAAC,UAAN,CAAiB,QAAQ,CAAC,MAAT,IAAmB,EAApC,CAHR;AAAA,MAKA,MAAM,CAAC,IAAP,CAAY,sBAAZ,EAAoC,IAAC,MAArC,EAA6C,KAAK,CAAC,IAAnD,EAAyD,SAAC,GAAD;AACvD,WAAG,CAAC,KAAJ,CAAU,eAAV;AACA,YAAkB,GAAlB;iBAAA,GAAG,CAAC,KAAJ,CAAU,GAAV;SAFuD;MAAA,CAAzD,CALA;aASA,OAAO,CAAC,OAAR,CAAgB;eAAA;AACd;AAAA,kBAAQ,KAAC,gBAAe,CAAC,OAAjB,CAAyB;AAAA,YAAC,OAAO,WAAR;WAAzB,CAAR;AACA,cAAG,4DAA0B,CAAC,CAAC,QAAF,CAAW,SAAX,EAAsB,KAAK,CAAC,IAAI,CAAC,QAAjC,CAA7B;AACE,uBAAW,SAAU,MAAK,CAAC,IAAI,CAAC,QAAX,CAArB;AAAA,YACA,KAAC,YAAD,CAAa,QAAb,CADA,CADF;WADA;AAKA,+BAAG,KAAK,CAAE,IAAI,CAAC,kBAAZ,KAAwB,QAA3B;mBACE,WAAe,yBAAqB,IAArB,EAA2B;AAAA,cAAC,UAAU,QAAX;aAA3B,EADjB;WAAA,MAEK,qBAAG,KAAK,CAAE,IAAI,CAAC,kBAAZ,KAAwB,UAA3B;AACH,iBAAK,CAAC,QAAN,CAAe,oBAAf;mBACA,KAAK,CAAC,GAAN,CAAU,aAAV,EAFG;WARS;QAAA;MAAA,QAAhB,EAVF;KAAA;AAyBE,SAAG,CAAC,QAAD,CAAH,GAzBF;KAD4B;EAAA,CAhI9B;;AAAA,wBA6JA,+BAA8B,SAAC,WAAD;AAC5B;AACE,SAAG,CAAC,KAAJ,CAAU,8BAAV;aACA,GAAG,CAAC,KAAJ,CAAU,WAAV,EAFF;KAAA;AAIE,SAAG,CAAC,QAAD,CAAH,GAJF;KAD4B;EAAA,CA7J9B;;qBAAA;;GAFwB,aAX1B;;AAAA,MAkLM,CAAC,OAAP,GAAiB,WAAW,CAAC,GAAZ,EAlLjB;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;;AAAA;AAEe,wBAAC,MAAD,EAAU,OAAV;AACX,IADY,IAAC,UAAD,MACZ;AAAA,IADqB,IAAC,WAAD,OACrB;AAAA,WAAO,IAAC,OAAR,CAAe,CAAC,EAAE,CAAC,EAAE,CAAC,EAAtB,CAAyB,QAAzB;AAAA,IACA,OAAO,IAAC,QAAR,CAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAvB,CAA0B,QAA1B,CADA;AAAA,IAEA,IAAC,MAAD,GAAS;AAAA,MAAE,OAAO,IAAC,OAAM,CAAC,KAAjB;AAAA,MAAwB,QAAQ,CAAhC;AAAA,MAAmC,OAAO,CAA1C;AAAA,MAA6C,QAAQ,CAArD;AAAA,MAAwD,SAAS,CAAjE;AAAA,MAAoE,UAAU,CAA9E;KAFT;AAAA,IAGA,IAAC,SAAD,GAAY,EAHZ;AAAA,IAKA,IAAC,OAAM,CAAC,KAAR,GAAgB,IAAC,MALjB;AAAA,IAOA,IAAC,OAAM,CAAC,EAAR,CAAW,OAAX,EAAoB;aAAA;eAClB,KAAC,MAAK,CAAC,KAAP,GAAe,SADG;MAAA;IAAA,QAApB,CAPA;AAAA,IAUA,IAAC,OAAM,CAAC,EAAR,CAAW,OAAX,EAAoB;aAAA,SAAC,KAAD;AAClB,YAAmB,MAAS,CAAC,IAA7B;iBAAA,KAAC,MAAK,CAAC,MAAP;SADkB;MAAA;IAAA,QAApB,CAVA;AAAA,IAaA,IAAC,OAAM,CAAC,EAAR,CAAW,UAAX,EAAuB;aAAA,SAAC,IAAD;eACrB,KAAC,MAAK,CAAC,KAAP,GADqB;MAAA;IAAA,QAAvB,CAbA;AAAA,IAgBA,IAAC,OAAM,CAAC,EAAR,CAAW,MAAX,EAAmB;aAAA,SAAC,IAAD;AACjB;AAAA,iBAAS,IAAI,CAAC,IAAL,KAAc,CAAvB;AACA,YAAG,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,IAAL,EAAnB;AACE,cAAI,CAAC,KAAL,GAAa,MAAb,CADF;SAAA,MAEK,IAAG,IAAI,CAAC,QAAL,GAAgB,MAAnB;AACH,cAAI,CAAC,KAAL,GAAa,QAAb,CADG;SAAA;AAGH,cAAI,CAAC,KAAL,GAAa,MAAb,CAHG;SAHL;eAOA,KAAC,MAAK,CAAC,MAAP,GARiB;MAAA;IAAA,QAAnB,CAhBA;AAAA,IA0BA,IAAC,OAAM,CAAC,EAAR,CAAW,MAAX,EAAmB;aAAA,SAAC,IAAD,EAAO,GAAP;AACjB,aAAC,MAAK,CAAC,QAAP;AAAA,QACA,IAAI,CAAC,GAAL,GAAW,GADX;eAEA,KAAC,SAAQ,CAAC,IAAV,CAAe,IAAf,EAHiB;MAAA;IAAA,QAAnB,CA1BA;AAAA,IA+BA,IAAC,OAAM,CAAC,EAAR,CAAW,KAAX,EAAkB;aAAA;AAChB,aAAC,MAAK,CAAC,GAAP,GAAa,QAAb;eACA,KAAC,MAAK,CAAC,QAAP,GAAkB,KAAC,MAAK,CAAC,GAAP,GAAa,KAAC,MAAK,CAAC,MAFtB;MAAA;IAAA,QAAlB,CA/BA;AAAA,IAmCA,IAAC,OAAM,CAAC,EAAR,CAAW,SAAX,EAAsB;aAAA;eACpB,KAAC,MAAK,CAAC,OAAP,GADoB;MAAA;IAAA,QAAtB,CAnCA,CADW;EAAA,CAAb;;sBAAA;;IAFF;;AAAA,MA0CM,CAAC,OAAP,GAAiB,YA1CjB;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;;AAAA,cAAc,QAAQ,oBAAR,CAAd;;AAAA;AAee,oCAAC,YAAD,EAAgB,YAAhB,EAA+B,OAA/B;AACX,IADY,IAAC,gBAAD,YACZ;AAAA,IAD2B,IAAC,gBAAD,YAC3B;AAAA,IAD0C,IAAC,WAAD,OAC1C;AAAA,WAAO,IAAC,aAAR,CAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,EAA5B,CAA+B,QAA/B;AAAA,IACA,OAAO,IAAC,aAAR,CAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,EAA5B,CAA+B,QAA/B,CADA;AAAA,IAEA,OAAO,IAAC,QAAR,CAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAvB,CAA0B,QAA1B,CAFA;AAAA,IAIA,IAAC,YAAD,GAAe;AAAA,MAAC,OAAO,IAAC,aAAY,CAAC,KAAtB;AAAA,MAA6B,QAAQ,CAArC;AAAA,MAAwC,OAAO,CAA/C;AAAA,MAAkD,QAAQ,CAA1D;AAAA,MAA6D,SAAS,CAAtE;AAAA,MAAyE,UAAU,CAAnF;KAJf;AAAA,IAKA,IAAC,YAAD,GAAe;AAAA,MAAC,OAAO,IAAC,aAAY,CAAC,KAAtB;AAAA,MAA6B,QAAQ,CAArC;AAAA,MAAwC,OAAO,CAA/C;AAAA,MAAkD,QAAQ,CAA1D;AAAA,MAA6D,SAAS,CAAtE;AAAA,MAAyE,UAAU,CAAnF;KALf;AAAA,IAMA,IAAC,MAAD,GAAS;AAAA,MAAC,OAAO,IAAC,aAAY,CAAC,KAAd,GAAsB,IAAC,aAAY,CAAC,KAA5C;AAAA,MAAmD,QAAQ,CAA3D;AAAA,MAA8D,OAAO,CAArE;AAAA,MAAwE,QAAQ,CAAhF;AAAA,MAAmF,SAAS,CAA5F;AAAA,MAA+F,UAAU,CAAzG;KANT;AAAA,IAOA,IAAC,SAAD,GAAY,EAPZ;AAAA,IASA,IAAC,aAAY,CAAC,KAAd,GAAsB,IAAC,YATvB;AAAA,IAUA,IAAC,aAAY,CAAC,KAAd,GAAsB,IAAC,YAVvB;AAAA,IAYA,IAAC,qBAAD,CAAsB,QAAtB,CAZA;AAAA,IAaA,IAAC,qBAAD,CAAsB,QAAtB,CAbA;AAAA,IAgBA,WAAW,CAAC,EAAZ,CAAe,SAAf,EAA0B;aAAA;AACxB,cAAM,CAAC,WAAP,GAAqB;AAAA,UAAC,UAAU,KAAC,MAAK,CAAC,QAAlB;AAAA,UAA4B,MAAM,IAAlC;SAArB;AAAA,QACA,MAAM,CAAC,IAAP,GAAc,IADd;eAEA,MAAM,CAAC,QAAP,GAAkB,KAAC,MAAK,CAAC,SAHD;MAAA;IAAA,QAA1B,CAhBA,CADW;EAAA,CAAb;;AAAA,qCAsBA,uBAAsB,SAAC,KAAD;AAEpB,QAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,OAAvB,EAAgC;aAAA;AAC9B;AAAA,gBAAY,UAAZ;AAAA,QACA,KAAE,SAAM,OAAN,CAAc,CAAC,KAAjB,GAAyB,KADzB;;cAGM,CAAC,QAAS;SAHhB;AAIA;AAAA;;;;;WAJA;AAAA,QAUA,KAAC,YAAW,CAAC,KAAb,GAAqB,KAAC,aAAY,CAAC,KAVnC;AAAA,QAWA,KAAC,YAAW,CAAC,KAAb,GAAqB,KAAC,aAAY,CAAC,KAXnC;eAYA,KAAC,MAAK,CAAC,KAAP,GAAe,KAAC,YAAW,CAAC,KAAb,GAAqB,KAAC,YAAW,CAAC,MAbnB;MAAA;IAAA,QAAhC;AAAA,IAgBA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,OAAvB,EAAgC;aAAA,SAAC,KAAD;AAC9B,YAAG,MAAS,CAAC,IAAb;AACE,eAAC,MAAK,CAAC,MAAP;iBACA,KAAE,SAAM,OAAN,CAAc,CAAC,MAAjB,GAFF;SAD8B;MAAA;IAAA,QAAhC,CAhBA;AAAA,IAqBA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,UAAvB,EAAmC;aAAA,SAAC,IAAD;eACjC,KAAC,MAAK,CAAC,KAAP,GADiC;MAAA;IAAA,QAAnC,CArBA;AAAA,IAwBA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,MAAvB,EAA+B;aAAA,SAAC,IAAD;AAC7B;AAAA,iBAAS,IAAI,CAAC,IAAL,KAAc,CAAvB;AAEA,YAAG,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,IAAL,EAAnB;AACE,cAAI,CAAC,KAAL,GAAa,MAAb,CADF;SAAA,MAEK,IAAG,IAAI,CAAC,QAAL,GAAgB,MAAnB;AACH,cAAI,CAAC,KAAL,GAAa,QAAb,CADG;SAAA;AAGH,cAAI,CAAC,KAAL,GAAa,MAAb,CAHG;SAJL;AAAA,QASA,KAAE,SAAM,OAAN,CAAc,CAAC,MAAjB,EATA;eAUA,KAAC,MAAK,CAAC,MAAP,GAX6B;MAAA;IAAA,QAA/B,CAxBA;AAAA,IAqCA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,MAAvB,EAA+B;aAAA,SAAC,IAAD,EAAO,GAAP;;UAC7B,IAAI,CAAC,MAAO;SAAZ;AAAA,QACA,KAAC,SAAQ,CAAC,IAAV,CAAe,IAAf,CADA;AAAA,QAGA,KAAC,MAAK,CAAC,QAAP,EAHA;eAIA,KAAE,SAAM,OAAN,CAAc,CAAC,QAAjB,GAL6B;MAAA;IAAA,QAA/B,CArCA;AAAA,IA6CA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,KAAvB,EAA8B;aAAA;AAC5B;AAAA,cAAU,UAAV;AAAA,QAEA,KAAC,MAAK,CAAC,GAAP,GAAa,GAFb;AAAA,QAGA,KAAE,SAAM,OAAN,CAAc,CAAC,GAAjB,GAAuB,GAHvB;AAAA,QAKA,KAAC,MAAK,CAAC,QAAP,GAAkB,KAAC,MAAK,CAAC,GAAP,GAAa,KAAC,MAAK,CAAC,KALtC;eAMA,KAAE,SAAM,OAAN,CAAc,CAAC,QAAjB,GAA4B,KAAE,SAAM,OAAN,CAAc,CAAC,GAAjB,GAAuB,KAAE,SAAM,OAAN,CAAc,CAAC,MAPxC;MAAA;IAAA,QAA9B,CA7CA;WAsDA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,SAAvB,EAAkC;aAAA;AAChC,aAAC,MAAK,CAAC,OAAP;eACA,KAAE,SAAM,OAAN,CAAc,CAAC,OAAjB,GAFgC;MAAA;IAAA,QAAlC,EAxDoB;EAAA,CAtBtB;;kCAAA;;IAfF;;AAAA,MAkGM,CAAC,OAAP,GAAiB,wBAlGjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;AAAA,IAAkB,QAAQ,YAAR,EAAjB,CAAD;;AAAA,WACA,GAAkB,QAAQ,sBAAR,CADlB;;AAAA,cAEA,GAAkB,QAAQ,kBAAR,CAFlB;;AAAA,eAGkB,QAAQ,iCAAR,EAAjB,YAHD;;AAAA,eAIkB,QAAQ,QAAR,EAAjB,YAJD;;AAAA,GAMA,GAAU,iBAAa,sBAAb,EAAqC,MAArC,CANV;;AAAA;AAWe,gCAAC,aAAD,EAAgB,OAAhB;AACX,IADY,IAAC,gBAAD,aACZ;AAAA,IAD2B,IAAC,6BAAD,UAAW,EACtC;AAAA;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,aAAV;AAAA,MACA,IAAC,kBAAD,GAAyB,kBADzB;AAGA,UAAG,IAAC,QAAO,CAAC,QAAT,KAAqB,QAAxB;AACE,YAAC,aAAD,GAAoB,kBAApB;AAAA,QACA,IAAC,iBAAD,CAAkB,IAAC,aAAnB,EAAiC,IAAC,kBAAlC,CADA,CADF;OAHA;AAOA,UAAG,YAAe,CAAC,QAAnB;AACE,WAAG,CAAC,IAAJ,CAAS,kFAAT;AACA,eAFF;OAPA;AAAA,MAWA,IAAC,SAAD,GAAgB,eAAW,CAAC,QAAZ,CAAqB,IAAC,aAAtB,EAAoC,IAAC,kBAArC,EAAwD,IAAC,QAAzD,CAXhB;AAAA,MAcA,IAAC,aAAY,CAAC,EAAd,CAAiB,OAAjB,EAA0B;eACxB,MAAM,CAAC,cAAP,GAAwB,KADA;MAAA,CAA1B,CAdA;AAAA,MAiBA,IAAC,aAAY,CAAC,EAAd,CAAiB,KAAjB,EAAwB;eAAA;AACtB,gBAAM,CAAC,cAAP,GAAwB,KAAxB;AAAA,UACA,MAAM,CAAC,WAAP,GAAqB,IADrB;AAAA,UAGA,WAAW,CAAC,IAAZ,CAAiB,YAAjB,CAHA;AAAA,UAIA,KAAC,iBAAD,GAAoB,IAJpB;AAKA,cAAG,KAAC,iBAAJ;mBACE,WAAW,CAAC,IAAZ,CAAiB,SAAjB,EADF;WANsB;QAAA;MAAA,QAAxB,CAjBA;AAAA,MA0BA,IAAC,kBAAiB,CAAC,EAAnB,CAAsB,KAAtB,EAA6B;eAAA;AAC3B,eAAC,iBAAD,GAAoB,IAApB;AAAA,UACA,WAAW,CAAC,IAAZ,CAAiB,YAAjB,CADA;AAEA,cAAG,KAAC,iBAAJ;mBACE,WAAW,CAAC,IAAZ,CAAiB,SAAjB,EADF;WAH2B;QAAA;MAAA,QAA7B,CA1BA;AAAA,MAgCA,WAAW,CAAC,eAAe,CAAC,IAA5B,EAAkC,CAAC,OAAnC,CAA2C;AAAA,QACzC,OAAO,CAAC,CAAC,IAAF,CAAO,IAAC,oBAAR,EAA6B,IAA7B,CADkC;OAA3C,CAhCA,CADF;KAAA;AAsCE,SAAG,CAAC,QAAD,CAAH,GAtCF;KADW;EAAA,CAAb;;AAAA,iCA0CA,mBAAkB,SAAC,YAAD,EAAe,iBAAf;AAChB;AACE,SAAG,CAAC,KAAJ,CAAU,kBAAV;aACA,iBAAiB,CAAC,EAAlB,CAAqB,KAArB,EAA4B;eAAA;AAC1B,eAAK,CAAC,QAAN,CAAe,cAAf,EAA+B;AAAA,YAC7B,cAAc,YADe;WAA/B;iBAGA,KAAK,CAAC,GAAN,CAAU,aAAV,EAJ0B;QAAA;MAAA,QAA5B,EAFF;KAAA;AASE,SAAG,CAAC,QAAD,CAAH,GATF;KADgB;EAAA,CA1ClB;;AAAA,iCAuDA,sBAAqB,SAAC,GAAD;AACnB;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,qBAAV;AAAA,MACA,OAAO,GAAP,CAAW,CAAC,EAAE,CAAC,EAAE,CAAC,EAAlB,CAAqB,QAArB,CADA;AAAA,MAEA,OAAO,GAAG,CAAC,KAAX,CAAiB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAxB,CAA0B,QAA1B,CAFA;AAGA,UAAG,GAAG,CAAC,KAAJ,KAAa,WAAhB;AACE,eADF;OAHA;AAAA,MAKA,OAAO,GAAG,CAAC,IAAX,CAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAvB,CAA0B,QAA1B,CALA;AAAA,MAQA,GAAG,CAAC,IAAI,CAAC,SAAT,GAAqB;AAAG,eAAO,GAAG,CAAC,IAAI,CAAC,UAAhB,CAAH;MAAA,CARrB;AAAA,MASA,GAAG,CAAC,IAAI,CAAC,IAAT,GAAgB;AAAG,eAAO,GAAG,CAAC,IAAI,CAAC,KAAhB,CAAH;MAAA,CAThB;;WAUY,CAAE,QAAd,GAAyB;iBAAG,YAAY,IAAC,SAAhB;QAAA;OAVzB;AAYA,UAAG,GAAG,CAAC,IAAI,CAAC,MAAZ;AACE,WAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAhB,GAA4B;AAAG,iBAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAvB,CAAH;QAAA,CAA5B;AAAA,QACA,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAhB,GAAuB;AAAG,iBAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAvB,CAAH;QAAA,CADvB,CADF;OAZA;AAiBA,UAAG,GAAG,CAAC,KAAJ,KAAa,OAAhB;AACE,YAAC,kBAAiB,CAAC,KAAnB,GAA2B,GAAG,CAAC,IAA/B;AAAA,QACA,IAAC,kBAAiB,CAAC,KAAnB,GAA2B,GAAG,CAAC,IAAI,CAAC,KADpC,CADF;OAjBA;aAqBA,IAAC,kBAAiB,CAAC,IAAnB,CAAwB,GAAG,CAAC,KAA5B,EAAmC,GAAG,CAAC,IAAvC,EAA6C,GAAG,CAAC,IAAI,CAAC,GAAtD,EAtBF;KAAA;AAyBE,MADI,WACJ;aAAA,GAAG,CAAC,KAAJ,CAAU,EAAV,EAzBF;KAAA;AA2BE,SAAG,CAAC,QAAD,CAAH,GA3BF;KADmB;EAAA,CAvDrB;;8BAAA;;IAXF;;AAAA,MAiGM,CAAC,OAAP,GAAiB,oBAjGjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;6BAAA;;AAAA,cAA4B,QAAQ,oBAAR,CAA5B;;AAAA,eAC4B,QAAQ,iCAAR,EAA1B,YADF;;AAAA,wBAEA,GAA4B,QAAQ,4BAAR,CAF5B;;AAAA,GAIA,GAAU,iBAAa,iBAAb,EAAgC,MAAhC,CAJV;;AAAA;AAUE;;AAAa,2BAAC,YAAD,EAAgB,YAAhB,EAA+B,OAA/B;AACX,IADY,IAAC,gBAAD,YACZ;AAAA,IAD2B,IAAC,gBAAD,YAC3B;AAAA,IAD0C,IAAC,WAAD,OAC1C;AAAA;AAAA;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,aAAV;AAAA,MACA,iDAAM,IAAC,aAAP,EAAqB,IAAC,aAAtB,EAAoC,IAAC,QAArC,CADA;AAAA,MAEA,WAAW,CAAC,EAAZ,CAAe,SAAf,EAA0B;eAAA;iBAAG,KAAC,2BAAD,GAAH;QAAA;MAAA,QAA1B,CAFA,CADF;KAAA;AAME,SAAG,CAAC,QAAD,CAAH,GANF;KADW;EAAA,CAAb;;AASA;AAAA;;KATA;;AAAA,4BAYA,uBAAsB,SAAC,KAAD;AACpB;AACE,SAAG,CAAC,KAAJ,CAAU,sBAAV;AAAA,MAEA,0DAAM,KAAN,CAFA;AAAA,MAIA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,OAAvB,EAAgC;eAAA;iBAAG,KAAC,oBAAD,CAAqB,KAArB,EAAH;QAAA;MAAA,QAAhC,CAJA;AAAA,MAKA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,UAAvB,EAAmC;eAAA,SAAC,IAAD;iBAAS,KAAC,UAAD,CAAW,IAAX,EAAiB,KAAjB,EAAT;QAAA;MAAA,QAAnC,CALA;aAQA,IAAE,CAAG,KAAD,GAAO,QAAT,CAAiB,CAAC,EAApB,CAAuB,MAAvB,EAA+B;eAAA,SAAC,IAAD;AAAS,cAA2B,IAAI,CAAC,IAAL,KAAa,MAAxC;mBAAA,KAAC,UAAD,CAAW,IAAX,EAAiB,KAAjB;WAAT;QAAA;MAAA,QAA/B,EATF;KAAA;AAYE,SAAG,CAAC,QAAD,CAAH,GAZF;KADoB;EAAA,CAZtB;;AAAA,4BA4BA,sBAAqB,SAAC,KAAD;AACnB;AACE,SAAG,CAAC,KAAJ,CAAU,qBAAV,EAAiC,KAAjC;AACA,UAAU,IAAC,QAAO,CAAC,QAAT,KAAuB,QAAjC;AAAA;OADA;AAAA,MAGA,QAAQ,KAAM,GAAE,CAAC,WAAT,KAAyB,KAAK,CAAC,MAAN,CAAa,CAAb,CAHjC;AAAA,MAIA,OAAO,CAAC,GAAR,CAAY,sDAAZ,CAJA;AAAA,MAKA,OAAO,CAAC,GAAR,CAAY,wBAAsB,KAAtB,GAA4B,2BAAxC,CALA;aAMA,OAAO,CAAC,GAAR,CAAY,sDAAZ,EAPF;KAAA;AASE,SAAG,CAAC,QAAD,CAAH,GATF;KADmB;EAAA,CA5BrB;;AAAA,4BAyCA,YAAW,SAAC,IAAD,EAAO,KAAP;AACT;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,UAAV,EAAsB,IAAtB;AAAA,MACA,QAAQ,IAAI,CAAC,KAAL,IAAc,CAAI,IAAI,CAAC,OAAR,GAAqB,SAArB,SAAD,CADtB;AAKA,UAAG,IAAC,QAAO,CAAC,QAAT,KAAqB,QAAxB;AACE,gBAAQ,EAAR,CADF;OAAA;AAIE,gBAAQ,KAAM,GAAE,CAAC,WAAT,KAAyB,IAAjC,CAJF;OALA;AAAA,MAWA,OAAO,CAAC,GAAR,CAAY,KAAG,KAAH,GAAU,CAAC,IAAI,CAAC,SAAL,EAAD,CAAV,GAA4B,KAA5B,GAAiC,KAA7C,CAXA;AAaA,UAAG,IAAI,CAAC,KAAL,KAAc,QAAjB;AACE,eAAO,CAAC,GAAR,CAAY,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAT,IAAkB,IAAI,CAAC,GAAxB,CAAnB,EADF;OAbA;aAgBA,OAAO,CAAC,GAAR,CAAY,EAAZ,EAjBF;KAAA;AAmBE,SAAG,CAAC,QAAD,CAAH,GAnBF;KADS;EAAA,CAzCX;;AAAA,4BAgEA,6BAA4B;AAC1B;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,4BAAV;AACA,UAAc,iEAAJ,IAAgC,mEAA1C;AAAA;OADA;AAAA,MAGA,OAAO,CAAC,GAAR,CAAY,sDAAZ,CAHA;AAAA,MAIA,OAAO,CAAC,GAAR,CAAY,oDAAZ,CAJA;AAAA,MAKA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,IAAC,MAAK,CAAC,MAA9B,CALA;AAAA,MAMA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,IAAC,MAAK,CAAC,QAA9B,CANA;AAAA,MAOA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,IAAC,MAAK,CAAC,OAA/B,CAPA;AAAA,MAQA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAC,MAAK,CAAC,KAA7B,CARA;AAAA,MASA,OAAO,CAAC,GAAR,CAAY,oDAAZ,CATA;aAUA,OAAO,CAAC,GAAR,CAAY,sDAAZ,EAXF;KAAA;AAaE,SAAG,CAAC,QAAD,CAAH,GAbF;KAD0B;EAAA,CAhE5B;;yBAAA;;GAH6B,yBAP/B;;AAAA,MA2FM,CAAC,OAAP,GAAiB,eA3FjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;6BAAA;;AAAA,eAA4B,QAAQ,iCAAR,EAA3B,YAAD;;AAAA,iBACA,GAA4B,QAAQ,QAAR,CAD5B;;AAAA,wBAEA,GAA4B,QAAQ,4BAAR,CAF5B;;AAAA,WAGA,GAAc,QAAQ,oBAAR,CAHd;;AAAA,GAKA,GAAU,iBAAa,cAAb,EAA6B,MAA7B,CALV;;AAAA;AASE;;AAAa,wBAAC,YAAD,EAAgB,YAAhB,EAA+B,OAA/B;AACX,IADY,IAAC,gBAAD,YACZ;AAAA,IAD2B,IAAC,gBAAD,YAC3B;AAAA,IAD0C,IAAC,6BAAD,UAAW,EACrD;AAAA;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,aAAV;AAAA,MACA,IAAC,gBAAD,EADA;AAAA,MAGA,IAAC,SAAD,GAAgB,sBAAkB,IAAC,aAAnB,CAHhB;AAAA,MAIA,IAAC,eAAD,GAAsB,sBAAkB,IAAC,aAAnB,EAAiC;AAAA,QACrD,iBAAiB,SADoC;OAAjC,CAJtB;AAAA,MAOA,8CAAM,IAAC,aAAP,EAAqB,IAAC,aAAtB,EAAoC,IAAC,QAArC,CAPA,CADF;KAAA;AAUE,SAAG,CAAC,QAAD,CAAH,GAVF;KADW;EAAA,CAAb;;AAaA;AAAA;;;;;KAbA;;AAAA,yBAmBA,kBAAiB;AACf;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,iBAAV;AAAA,MACA,MAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADN;AAAA,MAEA,GAAG,CAAC,SAAJ,GAAgB,eAFhB;AAAA,MAIA,GAAG,CAAC,SAAJ,GAAgB,uRAJhB;aAoBA,QAAQ,CAAC,IAAI,CAAC,WAAd,CAA0B,GAA1B,EArBF;KAAA;AAuBE,SAAG,CAAC,QAAD,CAAH,GAvBF;KADe;EAAA,CAnBjB;;sBAAA;;GAFyB,yBAP3B;;AAAA,MAwDM,CAAC,OAAP,GAAiB,YAxDjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;6BAAA;;AAAA,IAAiB,QAAQ,YAAR,EAAhB,CAAD;;AAAA,YACA,GAAiB,QAAQ,gBAAR,CADjB;;AAAA,eAEiB,QAAQ,iCAAR,EAAhB,YAFD;;AAAA,GAIA,GAAU,iBAAa,uBAAb,EAAsC,MAAtC,CAJV;;AAAA;AAQE;;AAAA,uBAAC,UAAD,GAAY,IAAZ;;AAEa,iCAAC,MAAD,EAAS,OAAT;AACX;AAAA;AAAA;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,aAAV,EAAyB,SAAzB;AAAA,MACA,OAAO,OAAO,CAAC,eAAf,EAAgC,yBAAhC,CAA0D,CAAC,EAAE,CAAC,EAAE,CAAC,EAAjE,CAAoE,QAApE,CADA;AAAA,MAIA,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,eAAe,CAAC,IAApC,CAJA;AAAA,MAMA,uDAAM,MAAN,EAAc,OAAd,CANA;AAAA,MASA,IAAC,UAAD,GAAa,OAAO,CAAC,eAAe,CAAC,SATrC;AAAA,MAUA,OAAO,IAAC,UAAR,EAAmB,YAAnB,CAAgC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAvC,CAA0C,QAA1C,CAVA;AAAA,MAWA,OAAO,IAAC,UAAS,CAAC,KAAlB,EAAyB,kBAAzB,CAA4C,CAAC,EAAE,CAAC,EAAE,CAAC,CAAnD,CAAqD,UAArD,CAXA;AAAA,MAYA,OAAO,IAAC,UAAS,CAAC,KAAlB,EAAyB,kBAAzB,CAA4C,CAAC,EAAE,CAAC,EAAE,CAAC,CAAnD,CAAqD,UAArD,CAZA;AAAA,MAaA,OAAO,IAAC,UAAS,CAAC,MAAlB,EAA0B,mBAA1B,CAA8C,CAAC,EAAE,CAAC,EAAE,CAAC,CAArD,CAAuD,UAAvD,CAbA;AAAA,MAgBA,IAAC,UAAS,CAAC,MAAX,CAAkB;eAAA;iBAChB,KAAC,QAAD,GAAW,KADK;QAAA;MAAA,QAAlB,CAhBA;AAAA,MAkBA,IAAC,QAAD,GAAW,KAlBX;AAAA,MAmBA,IAAC,SAAD,GAAY,CAnBZ;AAAA,MAsBA,IAAC,MAAD,GAAS,MAAM,CAAC,eAAP,CAAuB,IAAC,MAAxB,EAA+B,IAA/B,EAAqC,IAArC,CAtBT;AAAA,MAwBA,MAA6B,QAAQ,SAAR,CAA7B,EAAC,yBAAD,EAAY,iCAxBZ;AAAA,MAyBA,gBAAgB,OAAO,CAAC,GAAG,CAAC,cAAZ,IAA8B,aAzB9C;AA0BA,UAAG,iBAAkB,EAAK,CAAC,QAAF,CAAW,SAAX,EAAsB,aAAtB,CAAzB;AACE,WAAG,CAAC,IAAJ,CAAS,iBAAe,aAAf,GAA6B,qBAA7B,GAAkD,aAAlD,GAAgE,YAAzE;AAAA,QACA,gBAAgB,aADhB,CADF;OA1BA;AAAA,MAgCA,IAAC,MAAD,CAAO,WAAP,EAAoB;AAAA,QAAE,UAAU,aAAZ;AAAA,QAA6B,UAAU,OAAO,CAAC,GAAG,CAAC,eAAZ,IAA+B,UAAtE;OAApB,CAhCA;AAAA,MAkCA,IAAC,OAAM,CAAC,EAAR,CAAW,OAAX,EAAoB;eAAA;AAClB;AACE,eAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,SAArB;mBAEA,KAAC,MAAD,CAAO,OAAP,EAAgB,KAAC,MAAjB,EAHF;WAAA;AAKE,eAAG,CAAC,QAAD,CAAH,GALF;WADkB;QAAA;MAAA,QAApB,CAlCA;AAAA,MA0CA,IAAC,OAAM,CAAC,EAAR,CAAW,OAAX,EAAoB;eAAA,SAAC,KAAD;AAClB;AACE,eAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,SAArB;mBAIA,KAAC,MAAD,CAAO,OAAP,EAAgB,KAAC,WAAD,CAAY,KAAZ,CAAhB,EALF;WAAA;AAOE,eAAG,CAAC,QAAD,CAAH,GAPF;WADkB;QAAA;MAAA,QAApB,CA1CA;AAAA,MAoDA,IAAC,OAAM,CAAC,EAAR,CAAW,WAAX,EAAwB;eAAA,SAAC,KAAD;AACtB;AACE,eAAG,CAAC,KAAJ,CAAU,YAAV,EAAwB,SAAxB;mBACA,KAAC,MAAD,CAAO,WAAP,EAAoB,KAAC,WAAD,CAAY,KAAZ,CAApB,EAFF;WAAA;AAIE,eAAG,CAAC,QAAD,CAAH,GAJF;WADsB;QAAA;MAAA,QAAxB,CApDA;AAAA,MA2DA,IAAC,OAAM,CAAC,EAAR,CAAW,UAAX,EAAuB;eAAA,SAAC,IAAD;AACrB;AACE,eAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,SAAvB;mBACA,KAAC,MAAD,CAAO,UAAP,EAAmB,KAAC,UAAD,CAAW,IAAX,CAAnB,EAFF;WAAA;AAIE,eAAG,CAAC,QAAD,CAAH,GAJF;WADqB;QAAA;MAAA,QAAvB,CA3DA;AAAA,MAkEA,IAAC,OAAM,CAAC,EAAR,CAAW,MAAX,EAAmB;eAAA,SAAC,IAAD;AACjB;AACE,eAAG,CAAC,KAAJ,CAAU,QAAV,EAAoB,SAApB;mBACA,KAAC,MAAD,CAAO,MAAP,EAAe,KAAC,UAAD,CAAW,IAAX,CAAf,EAFF;WAAA;AAIE,eAAG,CAAC,QAAD,CAAH,GAJF;WADiB;QAAA;MAAA,QAAnB,CAlEA;AAAA,MAyEA,IAAC,OAAM,CAAC,EAAR,CAAW,MAAX,EAAmB;eAAA,SAAC,IAAD,EAAO,KAAP;AACjB;AACE,eAAG,CAAC,KAAJ,CAAU,QAAV,EAAoB,SAApB;mBACA,KAAC,MAAD,CAAO,MAAP,EAAe,KAAC,UAAD,CAAW,IAAX,CAAf,EAFF;WAAA;AAIE,eAAG,CAAC,QAAD,CAAH,GAJF;WADiB;QAAA;MAAA,QAAnB,CAzEA;AAAA,MAgFA,IAAC,OAAM,CAAC,EAAR,CAAW,KAAX,EAAkB;eAAA;AAChB;AACE,eAAG,CAAC,KAAJ,CAAU,OAAV,EAAmB,SAAnB;mBACA,KAAC,MAAD,CAAO,KAAP,EAAc,KAAC,MAAf,EAFF;WAAA;AAIE,eAAG,CAAC,QAAD,CAAH,GAJF;WADgB;QAAA;MAAA,QAAlB,CAhFA;AAAA,MAuFA,IAAC,OAAM,CAAC,EAAR,CAAW,SAAX,EAAsB;eAAA,SAAC,IAAD;AACpB;AACE,eAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,SAAvB;AAAA,YACA,GAAG,CAAC,KAAJ,CAAU,MAAV,EAAkB,IAAlB,CADA;mBAEA,KAAC,MAAD,CAAO,SAAP,EAAkB,KAAC,UAAD,CAAW,IAAX,CAAlB,EAHF;WAAA;AAKE,eAAG,CAAC,QAAD,CAAH,GALF;WADoB;QAAA;MAAA,QAAtB,CAvFA,CADF;KAAA;AAgGE,SAAG,CAAC,QAAD,CAAH,GAhGF;KADW;EAAA,CAFb;;AAAA,kCAsGA,QAAO,SAAC,KAAD,EAAQ,IAAR;AACL;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,OAAV,EAAmB,SAAnB;AAEA,UAAU,IAAC,QAAD,KAAY,IAAtB;AAAA;OAFA;AAAA,MAGA,IAAC,SAAD,EAHA;AAAA,MAIA,MACE;AAAA,aAAK,KAAG,IAAC,SAAT;AAAA,QACA,OAAO,KADP;AAAA,QAEA,MAAM,IAFN;OALF;aAQA,IAAC,UAAS,CAAC,KAAX,CAAiB,sBAAjB,EAAyC,GAAG,CAAC,GAA7C,EAAkD,GAAlD,EATF;KAAA;AAWE,MADI,WACJ;AAAA,SAAG,CAAC,KAAJ,CAAU,mCAAV;AAAA,MACA,GAAG,CAAC,KAAJ,CAAU,QAAV,EAAqB,EAAE,CAAC,KAAH,IAAY,EAAE,CAAC,OAApC,CADA;aAEA,GAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,GAAvB,EAbF;KAAA;AAeE,SAAG,CAAC,QAAD,CAAH,GAfF;KADK;EAAA,CAtGP;;AAyHA;AAAA;;;;;;;KAzHA;;AAAA,kCAiIA,YAAW,SAAC,IAAD;AACT;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,SAAvB;AAAA,MAEA,aAAa,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA0B,OAA1B,EAAmC,SAAnC,EACX,UADW,EACC,OADD,EACU,MADV,EACkB,UADlB,EAC8B,OAD9B,EACuC,MADvC,CAFb;AAIA,aAAQ,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,IAAP,EAAa,UAAb,CAAT,EAAkC;AAAA,QACxC,YAAY,IAAI,CAAC,SAAL,EAD4B;AAAA,QAExC,QAAQ,IAAC,WAAD,CAAY,IAAI,CAAC,MAAjB,CAFgC;AAAA,QAIxC,iCAAW,CAAE,QAAT,WAJoC;AAAA,QAKxC,KAAK,IAAC,UAAD,CAAW,IAAI,CAAC,GAAhB,CALmC;AAAA,QAMxC,UAAU,IAN8B;OAAlC,CAAR,CALF;KAAA;AAcE,MADI,WACJ;aAAA,GAAG,CAAC,KAAJ,CAAU,EAAV,EAdF;KAAA;AAiBE,SAAG,CAAC,QAAD,CAAH,GAjBF;KADS;EAAA,CAjIX;;AAAA,kCAsJA,aAAY,SAAC,KAAD;AACV;AAAA;AACE,SAAG,CAAC,KAAJ,CAAU,YAAV,EAAwB,SAAxB;AACA,aAAO,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,CAAd,CAAT,EAAqD;AAAA,QAC1D,YAAY,KAAK,CAAC,SAAN,EAD8C;AAAA,QAE1D,UAAU,IAFgD;OAArD,CAAP,CAFF;KAAA;AAOE,MADI,WACJ;aAAA,GAAG,CAAC,KAAJ,CAAU,EAAV,EAPF;KAAA;AASE,SAAG,CAAC,QAAD,CAAH,GATF;KADU;EAAA,CAtJZ;;AAkKA;AAAA;;;;KAlKA;;AAAA,kCAwKA,YAAW,SAAC,GAAD;AACT,QAAU,IAAV;AAAA;KAAA;AACA;AAAA;;;;OADA;AAMA,WAAO,CAAC,CAAC,IAAF,CAAO,GAAP,EAAY,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAAZ,CAAP,CAPS;EAAA,CAxKX;;+BAAA;;GAFkC,aANpC;;AAAA,MA2LM,CAAC,OAAP,GAAiB,qBA3LjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAAA,eAAkB,QAAQ,iCAAR,EAAjB,YAAD;;AAAA,GACA,GAAU,iBAAa,gBAAb,EAA+B,MAA/B,CADV;;AAAA;AAKc,0BAAC,aAAD,EAAiB,OAAjB;AAEV;AAAA,IAFW,IAAC,iBAAD,aAEX;AAAA,gEAAsC,CAAE,qBAAxC;AAAA,IACA,OAAO,YAAP,EAAqB,cAArB,CAAoC,CAAC,EAAE,CAAC,EAAE,CAAC,EAD3C;AAAA,IAIA,YAAY,CAAC,KAAb,GAAqB,IAAC,cAAa,CAAC,KAJpC;AAAA,IAMA,IAAC,cAAa,CAAC,EAAf,CAAkB,OAAlB,EAA2B;aAAA;AACzB;AACE,aAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,SAArB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,OAArC,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SADyB;MAAA;IAAA,QAA3B,CANA;AAAA,IAaA,IAAC,cAAa,CAAC,EAAf,CAAkB,OAAlB,EAA2B;aAAA,SAAC,KAAD;AACzB;AACE,aAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,SAArB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,OAArC,EAA6C,KAA7C,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SADyB;MAAA;IAAA,QAA3B,CAbA;AAAA,IAoBA,IAAC,cAAa,CAAC,EAAf,CAAkB,WAAlB,EAA+B;aAAA,SAAC,KAAD;AAC7B;AACE,aAAG,CAAC,KAAJ,CAAU,YAAV,EAAwB,SAAxB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,WAArC,EAAiD,KAAjD,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SAD6B;MAAA;IAAA,QAA/B,CApBA;AAAA,IA2BA,IAAC,cAAa,CAAC,EAAf,CAAkB,UAAlB,EAA8B;aAAA,SAAC,IAAD;AAC5B;AACE,aAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,SAAvB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,UAArC,EAAiD,IAAjD,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SAD4B;MAAA;IAAA,QAA9B,CA3BA;AAAA,IAkCA,IAAC,cAAa,CAAC,EAAf,CAAkB,MAAlB,EAA0B;aAAA,SAAC,IAAD;AACxB;AACE,aAAG,CAAC,KAAJ,CAAU,QAAV,EAAoB,SAApB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,MAArC,EAA6C,IAA7C,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SADwB;MAAA;IAAA,QAA1B,CAlCA;AAAA,IAyCA,IAAC,cAAa,CAAC,EAAf,CAAkB,MAAlB,EAA0B;aAAA,SAAC,IAAD,EAAO,KAAP;AACxB;AACE,aAAG,CAAC,KAAJ,CAAU,QAAV,EAAoB,SAApB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,MAArC,EAA6C,IAA7C,EAAmD,KAAnD,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SADwB;MAAA;IAAA,QAA1B,CAzCA;AAAA,IAgDA,IAAC,cAAa,CAAC,EAAf,CAAkB,KAAlB,EAAyB;aAAA;AACvB;AACE,aAAG,CAAC,KAAJ,CAAU,OAAV,EAAmB,SAAnB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,KAArC,EAFF;SAAA;AAIE,aAAG,CAAC,QAAD,CAAH,GAJF;SADuB;MAAA;IAAA,QAAzB,CAhDA;AAAA,IAuDA,IAAC,cAAa,CAAC,EAAf,CAAkB,SAAlB,EAA6B;aAAA,SAAC,IAAD;AAC3B;AACE,aAAG,CAAC,KAAJ,CAAU,WAAV,EAAuB,SAAvB;iBACA,YAAY,CAAC,IAAI,CAAC,IAAlB,CAAuB,YAAvB,EAAqC,SAArC,EAAgD,IAAhD,EAFF;SAAA;AAKE,aAAG,CAAC,QAAD,CAAH,GALF;SAD2B;MAAA;IAAA,QAA7B,CAvDA,CAFU;EAAA,CAAZ;;wBAAA;;IALF;;AAAA,MAuEM,CAAC,OAAP,GAAiB,cAvEjB;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;6BAAA;;AAAA,cAAkB,QAAQ,oBAAR,CAAlB;;AAAA,eACA,GAAsB,QAAQ,mBAAR,CADtB;;AAAA;AAKE;;AAAA,eAAC,QAAD,GAAU,OAAV;;AAAA,0BACA,cAAa,0BADb;;AAGY,yBAAC,YAAD,EAAgB,YAAhB,EAA+B,OAA/B;AAEV,IAFW,IAAC,gBAAD,YAEX;AAAA,IAF0B,IAAC,gBAAD,YAE1B;AAAA,IAFyC,IAAC,WAAD,OAEzC;AAAA,QAAC,YAAD,GAAe,EAAf;AAAA,IACA,IAAC,YAAD,GAAe,EADf;AAAA,IAKA,WAAW,CAAC,EAAZ,CAAe,SAAf,EAA0B;aAAA;eAAG,KAAC,eAAD,GAAH;MAAA;IAAA,QAA1B,CALA;AAAA,IAOA,+CAAM,IAAC,aAAP,EAAqB,IAAC,aAAtB,EAAoC,IAAC,QAArC,CAPA,CAFU;EAAA,CAHZ;;AAeA;AAAA;;KAfA;;AAAA,0BAkBA,uBAAqB,SAAC,KAAD;AAEnB,4DAAM,KAAN;AAAA,IAEA,IAAE,SAAQ,QAAR,CAAiB,CAAC,EAApB,CAAuB,SAAvB,EAAkC;aAAA,SAAC,IAAD;eAChC,KAAE,SAAM,OAAN,CAAc,CAAC,IAAjB,CAAsB,IAAtB,EADgC;MAAA;IAAA,QAAlC,CAFA;AAAA,IAKA,IAAE,SAAQ,QAAR,CAAiB,CAAC,EAApB,CAAuB,MAAvB,EAA+B;aAAA,SAAC,IAAD;eAC7B,KAAE,SAAM,OAAN,CAAc,CAAC,IAAjB,CAAsB,IAAtB,EAD6B;MAAA;IAAA,QAA/B,CALA;WAQA,IAAE,SAAQ,QAAR,CAAiB,CAAC,EAApB,CAAuB,MAAvB,EAA+B;aAAA,SAAC,IAAD;eAC7B,KAAE,SAAM,OAAN,CAAc,CAAC,IAAjB,CAAsB,IAAtB,EAD6B;MAAA;IAAA,QAA/B,EAVmB;EAAA,CAlBrB;;AAAA,0BAgCA,iBAAgB;AAEd;AAAA,gBAAY;AAAA,MACV,MAAM,aADI;AAAA,MAEV,OAAO,IAAC,MAAK,CAAC,KAFJ;AAAA,MAGV,UAAU,IAAC,MAAK,CAAC,QAHP;AAAA,MAIV,QAAQ,IAAC,MAAK,CAAC,QAJL;AAAA,MAKV,WAAW,CAAC,QAAD,CAAU,CAAC,WAAX,EALD;AAAA,MAMV,MAAM,IAAC,MAAK,CAAC,QAAP,GAAiB,IAAjB,IAAyB,CANrB;AAAA,MAOV,SAAS,IAAC,MAAK,CAAC,OAPN;KAAZ;AAAA,IAUA,IAAC,MAAD,CAAO,IAAC,UAAD,CAAW,WAAX,EAAwB,SAAxB,EAAmC,KAAnC,CAAP,CAVA;AAAA,IAYA,IAAC,YAAW,CAAC,OAAb,CAAqB;aAAA,SAAC,IAAD;eACnB,KAAC,cAAD,CAAe,IAAf,EAAqB,QAArB,EADmB;MAAA;IAAA,QAArB,CAZA;AAAA,IAeA,IAAC,YAAW,CAAC,OAAb,CAAqB;aAAA,SAAC,IAAD;eACnB,KAAC,cAAD,CAAe,IAAf,EAAqB,QAArB,EADmB;MAAA;IAAA,QAArB,CAfA;WAkBA,IAAC,MAAD,CAAO,cAAP,EApBc;EAAA,CAhChB;;AAuDA;AAAA;;;;;;;;KAvDA;;AAAA,0BAgEA,YAAW,SAAC,IAAD,EAAO,KAAP,EAAmB,KAAnB,EAA0B,OAA1B;AACT;;MADgB,QAAQ;KACxB;AAAA,UAAS,KAAH,GAAc,IAAd,GAAwB,GAA9B;AAAA,IACA,QAAQ,EADR;AAAA,IAEA,MAAM,MAFN;AAIA;AACE,UAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAhC,CAAqC,KAArC,EAA4C,GAA5C,CAAH;AACE,aAAK,CAAC,IAAN,CAAW,MAAM,IAAN,GAAa,IAAC,OAAD,CAAQ,KAAM,KAAd,CAAb,GAAmC,GAA9C,EADF;OADF;AAAA,KAJA;AAAA,IAQA,MAAM,MAAM,IAAN,GAAa,CAAI,KAAK,CAAC,MAAT,GAAqB,MAAM,KAAK,CAAC,IAAN,CAAW,GAAX,CAA3B,GAAgD,EAAjD,CAAb,GAAoE,GAR1E;AAUA,QAAG,OAAH;AACE,aAAO,UAAU,IAAV,GAAiB,IAAjB,GAAwB,GAA/B,CADF;KAVA;AAaA,WAAO,GAAP,CAdS;EAAA,CAhEX;;AAgFA;AAAA;;KAhFA;;AAAA,0BAoFA,QAAO,SAAC,GAAD;WACL,cAAc,IAAC,OAAD,CAAQ,GAAR,CAAd,GAA6B,MADxB;EAAA,CApFP;;AAuFA;AAAA;;;;;KAvFA;;AAAA,0BA8FA,OAAK,SAAC,QAAD,EAAW,EAAX;WACD,GAAG,QAAH,EADC;EAAA,CA9FL;;AAiGA;AAAA;;;;KAjGA;;AAAA,0BAuGA,QAAM,SAAC,IAAD;WACJ,OAAO,CAAC,GAAR,CAAY,IAAC,YAAD,GAAe,IAA3B,EADI;EAAA,CAvGN;;AA0GA;AAAA;;;;KA1GA;;AAAA,0BAgHA,gBAAc,SAAC,IAAD,EAAO,KAAP;AACZ;AAAA,YACE;AAAA,iBAAc,KAAD,GAAO,GAAP,GAAS,CAAC,IAAI,CAAC,MAAM,CAAC,SAAZ,EAAD,CAAtB;AAAA,MACA,MAAM,IAAI,CAAC,KADX;AAAA,MAEA,MAAM,IAAI,CAAC,QAAL,GAAgB,IAAhB,IAAwB,CAF9B;KADF;AAKA,QAAG,IAAI,CAAC,KAAL,KAAc,QAAjB;AACE,YAAM,IAAI,CAAC,GAAX;AAAA,MACA,QAAQ,IAAC,YAAD,CAAa,GAAG,CAAC,KAAjB,CADR;AAAA,MAEA,IAAC,MAAD,CAAO,IAAC,UAAD,CAAW,UAAX,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,IAAC,UAAD,CAAW,SAAX,EAAsB,EAAtB,EAA0B,KAA1B,EAAiC,IAAC,MAAD,CAAO,IAAC,OAAD,CAAQ,GAAG,CAAC,OAAZ,IAAuB,IAAvB,GAA8B,KAArC,CAAjC,CAArC,CAAP,CAFA,CADF;KAAA,MAIK,IAAG,IAAI,CAAC,OAAR;AACH,UAAC,MAAD,CAAO,IAAC,UAAD,CAAW,UAAX,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,IAAC,UAAD,CAAW,SAAX,EAAsB,EAAtB,EAA0B,IAA1B,CAArC,CAAP,EADG;KAAA;AAGH,UAAC,MAAD,CAAO,IAAC,UAAD,CAAW,UAAX,EAAuB,KAAvB,EAA8B,IAA9B,CAAP,EAHG;KAVO;EAAA,CAhHd;;AAiIA;AAAA;;;;;;KAjIA;;AAAA,0BAyIA,SAAQ,SAAC,IAAD;WACN,OAAO,IAAP,CACE,CAAC,OADH,CACW,IADX,EACiB,OADjB,CAEE,CAAC,OAFH,CAEW,IAFX,EAEiB,QAFjB,CAGE,CAAC,OAHH,CAGW,IAHX,EAGiB,MAHjB,CAIE,CAAC,OAJH,CAIW,IAJX,EAIiB,MAJjB,EADM;EAAA,CAzIR;;AAiJA;AAAA;;;;;;KAjJA;;AAAA,0BAwJA,cAAa,SAAC,KAAD;;MAAC,QAAQ;KAEpB;AAAA,WAAO,KAAK,CAAC,KAAN,CAAY,IAAZ,CACL,CAAC,GADI,CACC;aAAA,SAAC,CAAD;eAAO,KAAC,YAAD,GAAe,KAAC,OAAD,CAAQ,CAAR,EAAtB;MAAA;IAAA,QADD,CAEL,CAAC,IAFI,CAEC,IAFD,CAAP,CAFW;EAAA,CAxJb;;uBAAA;;GAF0B,gBAH5B;;AAAA,MAoKM,CAAC,OAAP,GAAiB,aApKjB;;;;;;;;;;;;ACAA,wB,CAEA;;4BAGA,IAAIQ,OAAON,QAAQ,6BAAR,CAAX;;AACA,IAAIO,QAAQP,QAAQ,oBAAR,CAAZ;;AACA,IAAIQ,WAAWR,QAAQ,+BAAR,CAAf;;AACA,IAAIS,WAAWT,QAAQ,sBAAR,CAAf;;AACA,IAAIU,SAASH,MAAMG,MAAnB,C,CACA;;+BAIA;AACA,IAAIC,OAAON,OAAOM,IAAlB;AACA,IAAIC,aAAaP,OAAOO,UAAxB;AACA,IAAIC,cAAcR,OAAOQ,WAAzB;AACA,IAAIC,eAAeT,OAAOS,YAA1B;AACA,IAAIC,gBAAgBV,OAAOU,aAA3B,C,CACA,sD,CAEA;;;AAIAC,UAAUpC,OAAOoC,OAAP,GAAiBC,IAA3B,C,CAEA;;;;;;;AAOA,SAASA,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC7Bb,OAAKc,IAAL,CAAU,IAAV,EAAgBF,MAAhB;AACAC,YAAUA,WAAW,EAArB;AACAA,UAAQE,eAAR,GAA0BF,QAAQE,eAAR,IAA2B,EAArD,CAH6B,CAK7B;;;AAGA,MAAIC,gBAAgB,aAAWH,QAAQE,eAAnB,GAAmC,cAAnC,GAClB,uBADkB,GAEhB,oEAFgB,GAGhB,4DAHgB,GAIhB,gEAJgB,GAKhB,iDALgB,GAMhB,OANJ;AASA,MAAIE,OAAO,IAAX;AAAA,MACIC,QAAQ,KAAKA,KADjB;AAAA,MAEIC,OAAOC,SAASJ,aAAT,CAFX;AAAA,MAGIK,QAAQF,KAAKG,oBAAL,CAA0B,IAA1B,CAHZ;AAAA,MAIIC,SAASF,MAAM,CAAN,EAASC,oBAAT,CAA8B,IAA9B,EAAoC,CAApC,CAJb;AAAA,MAKIE,aAAaH,MAAM,CAAN,EAASC,oBAAT,CAA8B,GAA9B,EAAmC,CAAnC,CALjB;AAAA,MAMIG,WAAWJ,MAAM,CAAN,EAASC,oBAAT,CAA8B,IAA9B,EAAoC,CAApC,CANf;AAAA,MAOII,eAAeL,MAAM,CAAN,EAASC,oBAAT,CAA8B,GAA9B,EAAmC,CAAnC,CAPnB;AAAA,MAQIK,WAAWN,MAAM,CAAN,EAASC,oBAAT,CAA8B,IAA9B,EAAoC,CAApC,CARf;AAAA,MASIM,SAAST,KAAKG,oBAAL,CAA0B,QAA1B,EAAoC,CAApC,CATb;AAAA,MAUIO,SAAST,SAAS,aAAWP,QAAQE,eAAnB,GAAmC,eAAnC,GAClB,6BADS,CAVb;AAAA,MAYIe,QAAQ,CAACD,MAAD,CAZZ;AAAA,MAaIE,QAbJ;AAAA,MAcIC,GAdJ;AAAA,MAeIC,OAAOC,SAASC,cAAT,CAAwBtB,QAAQE,eAAR,GAAwB,OAAhD,CAfX;;AAiBA,MAAIa,OAAOQ,UAAX,EAAuB;AACrB,QAAIC,QAAQC,OAAOC,gBAAP,IAA2B,CAAvC;AACAX,WAAOY,KAAP,CAAaC,KAAb,GAAqBb,OAAOa,KAA5B;AACAb,WAAOY,KAAP,CAAaE,MAAb,GAAsBd,OAAOc,MAA7B;AACAd,WAAOa,KAAP,IAAgBJ,KAAhB;AACAT,WAAOc,MAAP,IAAiBL,KAAjB;AACAL,UAAMJ,OAAOQ,UAAP,CAAkB,IAAlB,CAAN;AACAJ,QAAIW,KAAJ,CAAUN,KAAV,EAAiBA,KAAjB;AACAN,eAAW,IAAI7B,QAAJ,EAAX;AACD;;AAED,MAAI,CAAC+B,IAAL,EAAW;AACT,WAAOW,MAAM/B,QAAQE,eAAR,GAAwB,4CAA9B,CAAP;AACD,GA/C4B,CAiD7B;;;AACA8B,KAAGrB,UAAH,EAAe,OAAf,EAAwB,YAAW;AACjCsB;AACA,QAAIC,OAAQ,MAAD,CAASC,IAAT,CAAcnB,OAAOoB,SAArB,IAAkC,EAAlC,GAAuC,OAAlD;AACApB,WAAOoB,SAAP,GAAmBpB,OAAOoB,SAAP,CAAiBC,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,IAA6CH,IAAhE;;AACA,QAAIlB,OAAOoB,SAAP,CAAiBE,IAAjB,EAAJ,EAA6B;AAC3BC,wBAAkB,WAAlB;AACD;AACF,GAPD,EAlD6B,CA2D7B;;AACAP,KAAGnB,YAAH,EAAiB,OAAjB,EAA0B,YAAW;AACnCoB;AACA,QAAIC,OAAQ,MAAD,CAASC,IAAT,CAAcnB,OAAOoB,SAArB,IAAkC,EAAlC,GAAuC,OAAlD;AACApB,WAAOoB,SAAP,GAAmBpB,OAAOoB,SAAP,CAAiBC,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,IAA6CH,IAAhE;;AACA,QAAIlB,OAAOoB,SAAP,CAAiBE,IAAjB,EAAJ,EAA6B;AAC3BC,wBAAkB,WAAlB;AACD;AACF,GAPD;AASAnB,OAAKoB,WAAL,CAAiBlC,IAAjB;AACAc,OAAKoB,WAAL,CAAiBxB,MAAjB;;AAEA,MAAIE,QAAJ,EAAc;AACZA,aAASuB,IAAT,CAAc,EAAd;AACD;;AAED1C,SAAOiC,EAAP,CAAU,OAAV,EAAmB,UAASU,KAAT,EAAgB;AACjC,QAAIA,MAAMtB,IAAV,EAAgB;AACd;AACD,KAHgC,CAKjC;;;AACA,QAAIuB,MAAMvC,KAAKwC,QAAL,CAAcF,KAAd,CAAV;AACA,QAAIG,KAAKtC,SAAS,qDAAT,EAAgEoC,GAAhE,EAAqEpD,OAAOmD,MAAMI,KAAb,CAArE,CAAT,CAPiC,CASjC;;AACA7B,UAAM,CAAN,EAASuB,WAAT,CAAqBK,EAArB;AACA5B,UAAM8B,OAAN,CAAc1B,SAAS2B,aAAT,CAAuB,IAAvB,CAAd;AACAH,OAAGL,WAAH,CAAevB,MAAM,CAAN,CAAf;AACD,GAbD;AAeAlB,SAAOiC,EAAP,CAAU,WAAV,EAAuB,UAASU,KAAT,EAAgB;AACrC,QAAIA,MAAMtB,IAAV,EAAgB;AACd;AACD;;AACDH,UAAMgC,KAAN;AACD,GALD;AAOAlD,SAAOiC,EAAP,CAAU,MAAV,EAAkB,UAASG,IAAT,EAAe;AAC/BA,SAAKe,IAAL,GAAYf,KAAKe,IAAL,IAAaf,KAAKgB,EAAL,CAAQC,QAAR,EAAzB,CAD+B,CAE/B;AACA;;AACA,QAAIjB,KAAKkB,IAAL,KAAc,MAAlB,EAA0B;AACxBtD,aAAOuD,IAAP,CAAY,UAAZ,EAAwBnB,IAAxB;AACD;AACF,GAPD;AASApC,SAAOiC,EAAP,CAAU,UAAV,EAAsB,UAASG,IAAT,EAAe;AACnC;AACA,QAAIoB,UAAUlD,MAAMmD,KAAN,GAAc,KAAKC,KAAnB,GAA2B,GAA3B,GAAiC,CAA/C;;AACA,QAAIvC,QAAJ,EAAc;AACZA,eAASwC,MAAT,CAAgBH,OAAhB,EAAyBI,IAAzB,CAA8BxC,GAA9B;AACD,KALkC,CAOnC;;;AACA,QAAIyC,KAAK,IAAIpE,IAAJ,KAAaa,MAAMwD,KAA5B;AACAC,SAAKpD,MAAL,EAAaL,MAAMK,MAAnB;AACAoD,SAAKlD,QAAL,EAAeP,MAAMO,QAArB;AACAkD,SAAKhD,QAAL,EAAe,CAAC8C,KAAK,IAAN,EAAYG,OAAZ,CAAoB,CAApB,CAAf,EAXmC,CAanC;;AACA,QAAIlB,EAAJ;;AACA,QAAIV,KAAK6B,KAAL,KAAe,QAAnB,EAA6B;AAC3B,UAAIrB,MAAMvC,KAAK6D,OAAL,CAAa9B,IAAb,CAAV;AACAU,WAAKtC,SAAS,+GAAT,EAA0H4B,KAAK+B,KAA/H,EAAsI/B,KAAKW,KAA3I,EAAkJX,KAAKrB,QAAvJ,EAAiK6B,GAAjK,CAAL;AACD,KAHD,MAGO,IAAIR,KAAKgC,OAAT,EAAkB;AACvBtB,WAAKtC,SAAS,gDAAT,EAA2D4B,KAAKW,KAAhE,CAAL;AACD,KAFM,MAEA;AACLD,WAAKtC,SAAS,0EAAT,EAAqF4B,KAAKW,KAA1F,EAAiG1C,KAAK6D,OAAL,CAAa9B,IAAb,CAAjG,CAAL;AACA,UAAIiC,WAAJ,CAFK,CAEY;;AACjB,UAAIC,UAAUlC,KAAKmC,GAAL,CAASlB,QAAT,EAAd,CAHK,CAKL;AACA;;AACA,UAAIiB,YAAY,gBAAhB,EAAkC;AAChCA,kBAAUlC,KAAKmC,GAAL,CAASD,OAAnB;AACD;;AAED,UAAIlC,KAAKmC,GAAL,CAASrD,KAAb,EAAoB;AAClB,YAAIsD,iBAAiBpC,KAAKmC,GAAL,CAASrD,KAAT,CAAeuD,OAAf,CAAuBrC,KAAKmC,GAAL,CAASD,OAAhC,CAArB;;AACA,YAAIE,mBAAmB,CAAC,CAAxB,EAA2B;AACzBH,wBAAcjC,KAAKmC,GAAL,CAASrD,KAAvB;AACD,SAFD,MAEO;AACLmD,wBAAcjC,KAAKmC,GAAL,CAASrD,KAAT,CAAewD,MAAf,CAAsBtC,KAAKmC,GAAL,CAASD,OAAT,CAAiBK,MAAjB,GAA0BH,cAAhD,CAAd;AACD;AACF,OAPD,MAOO,IAAIpC,KAAKmC,GAAL,CAASK,SAAT,IAAsBxC,KAAKmC,GAAL,CAASM,IAAT,KAAkBC,SAA5C,EAAuD;AAC5D;AACAT,sBAAc,QAAQjC,KAAKmC,GAAL,CAASK,SAAjB,GAA6B,GAA7B,GAAmCxC,KAAKmC,GAAL,CAASM,IAA5C,GAAmD,GAAjE;AACD;;AAEDR,oBAAcA,eAAe,EAA7B;;AAEA,UAAIjC,KAAKmC,GAAL,CAASQ,WAAT,IAAwBV,WAA5B,EAAyC;AACvCvB,WAAGL,WAAH,CAAejC,SAAS,+DAAT,EAA0E4B,KAAKmC,GAAL,CAASQ,WAAnF,EAAgGV,WAAhG,CAAf;AACD,OAFD,MAEO,IAAIjC,KAAKmC,GAAL,CAASQ,WAAb,EAA0B;AAC/BjC,WAAGL,WAAH,CAAejC,SAAS,kCAAT,EAA6C4B,KAAKmC,GAAL,CAASQ,WAAtD,CAAf;AACD,OAFM,MAEA;AACLjC,WAAGL,WAAH,CAAejC,SAAS,+BAAT,EAA0C8D,OAA1C,EAAmDD,WAAnD,CAAf;AACD;AACF,KApDkC,CAsDnC;AACA;;;AACA,QAAI,CAACjC,KAAKgC,OAAV,EAAmB;AACjB,UAAIY,KAAKlC,GAAGpC,oBAAH,CAAwB,IAAxB,EAA8B,CAA9B,CAAT;AAEAuB,SAAG+C,EAAH,EAAO,OAAP,EAAgB,YAAW;AACzBC,YAAIrD,KAAJ,CAAUsD,OAAV,GAAoBD,IAAIrD,KAAJ,CAAUsD,OAAV,KAAsB,MAAtB,GAA+B,OAA/B,GAAyC,MAA7D;AACD,OAFD;AAIA,UAAID,MAAMzE,SAAS,4BAAT,EAAuCnB,MAAM8F,KAAN,CAAY/C,KAAKe,IAAjB,CAAvC,CAAV;AACAL,SAAGL,WAAH,CAAewC,GAAf;AACAA,UAAIrD,KAAJ,CAAUsD,OAAV,GAAoB,MAApB;AACD,KAlEkC,CAoEnC;;;AACA,QAAIhE,MAAM,CAAN,CAAJ,EAAc;AACZA,YAAM,CAAN,EAASuB,WAAT,CAAqBK,EAArB;AACD;AACF,GAxED;AAyED,C,CAED;;;;;;;AAMA,SAASsC,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,MAAIC,SAAS5D,OAAO6D,QAAP,CAAgBD,MAA7B,CADkB,CAGlB;;AACA,MAAIA,MAAJ,EAAY;AACVA,aAASA,OAAOhD,OAAP,CAAe,mBAAf,EAAoC,EAApC,EAAwCA,OAAxC,CAAgD,IAAhD,EAAsD,GAAtD,CAAT;AACD;;AAED,SAAOZ,OAAO6D,QAAP,CAAgBC,QAAhB,IAA4BF,SAASA,SAAS,GAAlB,GAAwB,GAApD,IAA2D,OAA3D,GAAqEG,mBAAmBlG,SAAS8F,CAAT,CAAnB,CAA5E;AACD,C,CAED;;;;;;AAKAtF,KAAK2F,SAAL,CAAe7C,QAAf,GAA0B,UAASF,KAAT,EAAgB;AACxC,SAAOyC,QAAQzC,MAAMgD,SAAN,EAAR,CAAP;AACD,CAFD,C,CAIA;;;;;;AAKA5F,KAAK2F,SAAL,CAAexB,OAAf,GAAyB,UAAS9B,IAAT,EAAe;AACtC,SAAOgD,QAAQhD,KAAKuD,SAAL,EAAR,CAAP;AACD,CAFD,C,CAIA;;;;;;AAKA,SAAS3D,KAAT,CAAe4D,GAAf,EAAoB;AAClBtE,WAAS6B,IAAT,CAAcV,WAAd,CAA0BjC,SAAS,mCAAT,EAA8CoF,GAA9C,CAA1B;AACD,C,CAED;;;;;;AAKA,SAASpF,QAAT,CAAkBqF,IAAlB,EAAwB;AACtB,MAAIC,OAAOC,SAAX;AACA,MAAIC,MAAM1E,SAAS2B,aAAT,CAAuB,KAAvB,CAAV;AACA,MAAIgD,IAAI,CAAR;AAEAD,MAAIE,SAAJ,GAAgBL,KAAKvD,OAAL,CAAa,UAAb,EAAyB,UAAS6D,CAAT,EAAY7C,IAAZ,EAAkB;AACzD,YAAQA,IAAR;AACE,WAAK,GAAL;AAAU,eAAO8C,OAAON,KAAKG,GAAL,CAAP,CAAP;;AACV,WAAK,GAAL;AAAU,eAAOzG,OAAOsG,KAAKG,GAAL,CAAP,CAAP;AACV;AAHF;AAKD,GANe,CAAhB;AAQA,SAAOD,IAAIK,UAAX;AACD,C,CAED;;;;;;;AAMA,SAAS7D,iBAAT,CAA2B8D,SAA3B,EAAsC;AACpC,MAAIC,SAASjF,SAASkF,sBAAT,CAAgC,OAAhC,CAAb;;AACA,OAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIM,OAAO5B,MAA3B,EAAmCsB,GAAnC,EAAwC;AACtC,QAAIQ,MAAMF,OAAON,CAAP,EAAUO,sBAAV,CAAiCF,SAAjC,CAAV;;AACA,QAAI,CAACG,IAAI9B,MAAT,EAAiB;AACf4B,aAAON,CAAP,EAAU5D,SAAV,IAAuB,SAAvB;AACD;AACF;AACF,C,CAED;;;;AAGA,SAASH,MAAT,GAAkB;AAChB,MAAIuE,MAAMnF,SAASkF,sBAAT,CAAgC,cAAhC,CAAV;;AACA,OAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIQ,IAAI9B,MAAxB,EAAgC,EAAEsB,CAAlC,EAAqC;AACnCQ,QAAIR,CAAJ,EAAO5D,SAAP,GAAmBoE,IAAIR,CAAJ,EAAO5D,SAAP,CAAiBC,OAAjB,CAAyB,cAAzB,EAAyC,OAAzC,CAAnB;AACD;AACF,C,CAED;;;;;;;AAMA,SAASyB,IAAT,CAAcjB,EAAd,EAAkB4D,QAAlB,EAA4B;AAC1B,MAAI5D,GAAG6D,WAAP,EAAoB;AAClB7D,OAAG6D,WAAH,GAAiBD,QAAjB;AACD,GAFD,MAEO;AACL5D,OAAG8D,SAAH,GAAeF,QAAf;AACD;AACF,C,CAED;;;;AAGA,SAASzE,EAAT,CAAYa,EAAZ,EAAgB+D,KAAhB,EAAuBzD,EAAvB,EAA2B;AACzB,MAAIN,GAAGgE,gBAAP,EAAyB;AACvBhE,OAAGgE,gBAAH,CAAoBD,KAApB,EAA2BzD,EAA3B,EAA+B,KAA/B;AACD,GAFD,MAEO;AACLN,OAAGiE,WAAH,CAAe,OAAOF,KAAtB,EAA6BzD,EAA7B;AACD;AACF,6H;;;;;;;;;;;AC3UD1F,OAAOC,MAAP,CAAc;AAACqJ,iBAAc;AAAA,WAAIA,aAAJ;AAAA,GAAf;AAAiCC,oBAAiB;AAAA,WAAIA,gBAAJ;AAAA,GAAlD;AAAuEC,kBAAe;AAAA,WAAIA,cAAJ;AAAA,GAAtF;AAAyGC,aAAU;AAAA,WAAIA,SAAJ;AAAA,GAAnH;AAAiIC,aAAU;AAAA,WAAIA,SAAJ;AAAA;AAA3I,CAAd;AAAyK,IAAIC,wBAAJ;AAAoB3J,OAAOmB,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAAA,uBAASC,CAAT,EAAW;AAACsI,sBAAgBtI,CAAhB;AAAkB;AAA9B,CAA1C,EAA0E,CAA1E;AAA6E,IAAIuI,sBAAJ;AAAkB5J,OAAOmB,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA,uBAASC,CAAT,EAAW;AAACuI,oBAAcvI,CAAd;AAAgB;AAA5B,CAAxC,EAAsE,CAAtE;AAAyE,IAAIf,qBAAJ;AAAiBN,OAAOmB,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAAA,uBAASC,CAAT,EAAW;AAACf,mBAAae,CAAb;AAAe;AAA3B,CAAvC,EAAoE,CAApE;AAK/W,IAAMiI,gBAAgB,MAAtB;AACA,IAAMC,mBAAmB,SAAzB;AACA,IAAMC,iBAAiB,OAAvB;AACA,IAAMC,YAAY,CAACH,aAAD,EAAgBC,gBAAhB,EAAkCC,cAAlC,CAAlB;AACP,IAAIE,YAAY,EAAhB;AACAA,UAAUJ,aAAV,IAA2BhJ,YAA3B;AACAoJ,UAAUH,gBAAV,IAA8BI,eAA9B;AACAD,UAAUF,cAAV,IAA4BI,aAA5B,mF;;;;;;;;;;;ACZA,IAAIC,sBAAJ;AAAkB7J,OAAOmB,KAAP,CAAaC,QAAQ,mCAAR,CAAb,EAA0D;AAACyI,eAAD,YAAexI,CAAf,EAAiB;AAACwI,oBAAcxI,CAAd;AAAgB;AAAlC,CAA1D,EAA8F,CAA9F;AAAiG,IAAIyI,yBAAJ;AAAqB9J,OAAOmB,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA,uBAASC,CAAT,EAAW;AAACyI,uBAAiBzI,CAAjB;AAAmB;AAA/B,CAA3C,EAA4E,CAA5E;;AAGxI,IAAG0I,OAAOC,QAAV,EAAmB;AACjBF;AACD;;AACD,IAAIC,OAAOE,QAAX,EAAoB;AAClBxI,SAAOyI,KAAP,GAAeL,aAAf;AACD,2H;;;;;;;;;;;ACRD,IAAMM,UAAQnK,MAAd;AAAqB,IAAIoK,sBAAJ;AAAkBD,QAAQhJ,KAAR,CAAcC,QAAQ,gBAAR,CAAd,EAAwC;AAACgJ,eAAD,YAAe/I,CAAf,EAAiB;AAAC+I,oBAAc/I,CAAd;AAAgB;AAAlC,CAAxC,EAA4E,CAA5E;AAAvC8I,QAAQE,aAAR,CAMe,YAAI;AAEjBC,UAAQC,OAAR,GAAkB,IAAlB;;AAEAnJ,UAAQ,mBAAR;;AAEAgJ,gBAAc;AACZI,kBAAc;AACZ,gBAAU,UAAUC,CAAV,EAAaC,CAAb,EAAgB1K,MAAhB,EAAwB;AAChCA,eAAOoC,OAAP,GAAiB;AAAEuI,kBAAQ,YAAI;AAAE,mBAAO,KAAP;AAAa;AAA7B,SAAjB;AACD;AAHW;AADF,GAAd;AAQAP,gBAAc;AACZI,kBAAc;AACZ,sBAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB1K,MAAhB,EAAwB;AACtCA,eAAOoC,OAAP,GAAiB;AACfsC,gBAAM;AAAC,oBAAO;AAAR;AADS,SAAjB;AAGD;AALW;AADF,GAAd;AAWD,CA/BD,2H;;;;;;;;;;;ACAA;;GAIA,IAAIiD,IAAI,IAAR;AACA,IAAIiD,IAAIjD,IAAI,EAAZ;AACA,IAAIkD,IAAID,IAAI,EAAZ;AACA,IAAIE,IAAID,IAAI,EAAZ;AACA,IAAIE,IAAID,IAAI,MAAZ,C,CAEA;;;;;;;;;;;;;AAYA9K,OAAOoC,OAAP,GAAiB,UAAS4I,GAAT,EAAczI,OAAd,EAAuB;AACtCA,YAAUA,WAAW,EAArB;;AACA,MAAI,OAAOyI,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOC,MAAMD,GAAN,CAAP;AACD,GAJqC,CAKtC;;;AACA,SAAOzI,QAAQ,MAAR,IAAkB2I,WAAWF,GAAX,CAAlB,GAAoCG,YAAYH,GAAZ,CAA3C;AACD,CAPD,C,CASA;;;;;;;;AAOA,SAASC,KAAT,CAAeG,GAAf,EAAoB;AAClB,MAAIC,QAAS,4EAAD,CAA+EC,IAA/E,CAAoFF,GAApF,CAAZ;;AACA,MAAI,CAACC,KAAL,EAAY;AACV;AACD;;AACD,MAAIE,IAAIC,WAAWH,MAAM,CAAN,CAAX,CAAR;AACA,MAAIzF,OAAO,CAACyF,MAAM,CAAN,KAAY,IAAb,EAAmBI,WAAnB,EAAX;;AACA,UAAQ7F,IAAR;AACE,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,GAAL;AACE,aAAO2F,IAAIR,CAAX;;AACF,SAAK,MAAL;AACA,SAAK,KAAL;AACA,SAAK,GAAL;AACE,aAAOQ,IAAIT,CAAX;;AACF,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,GAAL;AACE,aAAOS,IAAIV,CAAX;;AACF,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,GAAL;AACE,aAAOU,IAAIX,CAAX;;AACF,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,GAAL;AACE,aAAOW,IAAI5D,CAAX;;AACF,SAAK,IAAL;AACE,aAAO4D,CAAP;;AACF,YAvBF,CAwBI;AAxBJ;AA0BD,C,CAED;;;;;;;;AAOA,SAASJ,WAAT,CAAqBhF,EAArB,EAAyB;AACvB,MAAIA,MAAM2E,CAAV,EAAa;AACX,WAAOY,KAAKC,KAAL,CAAWxF,KAAK2E,CAAhB,IAAqB,GAA5B;AACD;;AACD,MAAI3E,MAAM0E,CAAV,EAAa;AACX,WAAOa,KAAKC,KAAL,CAAWxF,KAAK0E,CAAhB,IAAqB,GAA5B;AACD;;AACD,MAAI1E,MAAMyE,CAAV,EAAa;AACX,WAAOc,KAAKC,KAAL,CAAWxF,KAAKyE,CAAhB,IAAqB,GAA5B;AACD;;AACD,MAAIzE,MAAMwB,CAAV,EAAa;AACX,WAAO+D,KAAKC,KAAL,CAAWxF,KAAKwB,CAAhB,IAAqB,GAA5B;AACD;;AACD,SAAOxB,KAAK,IAAZ;AACD,C,CAED;;;;;;;;AAOA,SAAS+E,UAAT,CAAoB/E,EAApB,EAAwB;AACtB,SAAOyF,OAAOzF,EAAP,EAAW2E,CAAX,EAAc,KAAd,KACFc,OAAOzF,EAAP,EAAW0E,CAAX,EAAc,MAAd,CADE,IAEFe,OAAOzF,EAAP,EAAWyE,CAAX,EAAc,QAAd,CAFE,IAGFgB,OAAOzF,EAAP,EAAWwB,CAAX,EAAc,QAAd,CAHE,IAIFxB,KAAK,KAJV;AAKD,C,CAED;;;;;;;;;AAQA,SAASyF,MAAT,CAAgBzF,EAAhB,EAAoBoF,CAApB,EAAuB9G,IAAvB,EAA6B;AAC3B,MAAI0B,KAAKoF,CAAT,EAAY;AACV;AACD;;AACD,MAAIpF,KAAKoF,IAAI,GAAb,EAAkB;AAChB,WAAOG,KAAKG,KAAL,CAAW1F,KAAKoF,CAAhB,IAAqB,GAArB,GAA2B9G,IAAlC;AACD;;AACD,SAAOiH,KAAKI,IAAL,CAAU3F,KAAKoF,CAAf,IAAoB,GAApB,GAA0B9G,IAA1B,GAAiC,GAAxC;AACD,6H;;;;;;;;;;;AC/HD,wB,CAEA;;4BAIA,IAAIsH,WAAW3K,QAAQ,MAAR,EAAgB2K,QAA/B;;AACA,IAAIC,QAAQ5K,QAAQ,OAAR,EAAiB,aAAjB,CAAZ;;AACA,IAAI6K,SAAS7K,QAAQ,IAAR,EAAc8K,UAAd,IAA4B9K,QAAQ,MAAR,EAAgB8K,UAAzD;;AACA,IAAIC,OAAO/K,QAAQ,MAAR,CAAX;;AACA,IAAIgL,OAAOhL,QAAQ,MAAR,EAAgBgL,IAA3B;;AACA,IAAIC,cAAcjL,QAAQ,IAAR,EAAciL,WAAhC;;AACA,IAAIC,WAAWlL,QAAQ,IAAR,EAAckL,QAA7B;;AACA,IAAIC,YAAYnL,QAAQ,IAAR,EAAcmL,SAA9B,C,CAEA;;;;AAIA,IAAIC,SAAS,CAAC,cAAD,EAAiB,MAAjB,CAAb;AAEApK,QAAQqK,QAAR,GAAmBrL,QAAQ,MAAR,EAAgBqL,QAAnC,C,CAEA;;;;;;;;AAOArK,QAAQN,MAAR,GAAiB,UAASqG,IAAT,EAAe;AAC9B,SAAOO,OAAOP,IAAP,EACJvD,OADI,CACI,IADJ,EACU,OADV,EAEJA,OAFI,CAEI,IAFJ,EAEU,QAFV,EAGJA,OAHI,CAGI,IAHJ,EAGU,MAHV,EAIJA,OAJI,CAII,IAJJ,EAIU,MAJV,CAAP;AAKD,CAND,C,CAQA;;;;;;;;;AAQAxC,QAAQsK,OAAR,GAAkB,UAASC,GAAT,EAAcjH,EAAd,EAAkBkH,KAAlB,EAAyB;AACzC,OAAK,IAAIrE,IAAI,CAAR,EAAWsE,IAAIF,IAAI1F,MAAxB,EAAgCsB,IAAIsE,CAApC,EAAuCtE,GAAvC,EAA4C;AAC1C7C,OAAGlD,IAAH,CAAQoK,KAAR,EAAeD,IAAIpE,CAAJ,CAAf,EAAuBA,CAAvB;AACD;AACF,CAJD,C,CAMA;;;;;;;;AAOAnG,QAAQ0K,QAAR,GAAmB,UAASC,GAAT,EAAc;AAC/B,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD,CAFD,C,CAIA;;;;;;;;;;AASA3K,QAAQ4K,GAAR,GAAc,UAASL,GAAT,EAAcjH,EAAd,EAAkBkH,KAAlB,EAAyB;AACrC,MAAIK,SAAS,EAAb;;AACA,OAAK,IAAI1E,IAAI,CAAR,EAAWsE,IAAIF,IAAI1F,MAAxB,EAAgCsB,IAAIsE,CAApC,EAAuCtE,GAAvC,EAA4C;AAC1C0E,WAAOC,IAAP,CAAYxH,GAAGlD,IAAH,CAAQoK,KAAR,EAAeD,IAAIpE,CAAJ,CAAf,EAAuBA,CAAvB,EAA0BoE,GAA1B,CAAZ;AACD;;AACD,SAAOM,MAAP;AACD,CAND,C,CAQA;;;;;;;;;;AASA7K,QAAQ2E,OAAR,GAAkB,UAAS4F,GAAT,EAAcI,GAAd,EAAmB3G,KAAnB,EAA0B;AAC1C,OAAK,IAAImC,IAAInC,SAAS,CAAjB,EAAoByG,IAAIF,IAAI1F,MAAjC,EAAyCsB,IAAIsE,CAA7C,EAAgDtE,GAAhD,EAAqD;AACnD,QAAIoE,IAAIpE,CAAJ,MAAWwE,GAAf,EAAoB;AAClB,aAAOxE,CAAP;AACD;AACF;;AACD,SAAO,CAAC,CAAR;AACD,CAPD,C,CASA;;;;;;;;;;AASAnG,QAAQ+K,MAAR,GAAiB,UAASR,GAAT,EAAcjH,EAAd,EAAkBsF,GAAlB,EAAuB;AACtC,MAAIoC,OAAOpC,GAAX;;AAEA,OAAK,IAAIzC,IAAI,CAAR,EAAWsE,IAAIF,IAAI1F,MAAxB,EAAgCsB,IAAIsE,CAApC,EAAuCtE,GAAvC,EAA4C;AAC1C6E,WAAO1H,GAAG0H,IAAH,EAAST,IAAIpE,CAAJ,CAAT,EAAiBA,CAAjB,EAAoBoE,GAApB,CAAP;AACD;;AAED,SAAOS,IAAP;AACD,CARD,C,CAUA;;;;;;;;;AAQAhL,QAAQiL,MAAR,GAAiB,UAASV,GAAT,EAAcjH,EAAd,EAAkB;AACjC,MAAI4H,MAAM,EAAV;;AAEA,OAAK,IAAI/E,IAAI,CAAR,EAAWsE,IAAIF,IAAI1F,MAAxB,EAAgCsB,IAAIsE,CAApC,EAAuCtE,GAAvC,EAA4C;AAC1C,QAAIyC,MAAM2B,IAAIpE,CAAJ,CAAV;;AACA,QAAI7C,GAAGsF,GAAH,EAAQzC,CAAR,EAAWoE,GAAX,CAAJ,EAAqB;AACnBW,UAAIJ,IAAJ,CAASlC,GAAT;AACD;AACF;;AAED,SAAOsC,GAAP;AACD,CAXD,C,CAaA;;;;;;;;AAOAlL,QAAQmL,IAAR,GAAe,OAAOC,OAAOD,IAAd,KAAuB,UAAvB,GAAoCC,OAAOD,IAA3C,GAAkD,UAASR,GAAT,EAAc;AAC7E,MAAIQ,OAAO,EAAX;AACA,MAAIE,MAAMD,OAAOxF,SAAP,CAAiB0F,cAA3B,CAF6E,CAElC;;AAE3C,OAAK,IAAIC,GAAT,2CAAgBZ,GAAhB,GAAqB;AACnB,QAAIU,IAAIjL,IAAJ,CAASuK,GAAT,EAAcY,GAAd,CAAJ,EAAwB;AACtBJ,WAAKL,IAAL,CAAUS,GAAV;AACD;AACF;;AAED,SAAOJ,IAAP;AACD,CAXD,C,CAaA;;;;;;;;;AAQAnL,QAAQjB,KAAR,GAAgB,UAASyM,KAAT,EAAgBlI,EAAhB,EAAoB;AAClC,MAAInD,UAAU;AAAEsL,cAAU;AAAZ,GAAd;AACAD,QAAMlB,OAAN,CAAc,UAASoB,IAAT,EAAe;AAC3B9B,UAAM,SAAN,EAAiB8B,IAAjB;AACAvB,cAAUuB,IAAV,EAAgBvL,OAAhB,EAAyB,UAASwL,IAAT,EAAeC,IAAf,EAAqB;AAC5C,UAAIA,KAAKC,KAAL,GAAaF,KAAKE,KAAtB,EAA6B;AAC3BvI,WAAGoI,IAAH;AACD;AACF,KAJD;AAKD,GAPD;AAQD,CAVD,C,CAYA;;;;;;;;AAOA,IAAII,UAAU,OAAOC,MAAMD,OAAb,KAAyB,UAAzB,GAAsCC,MAAMD,OAA5C,GAAsD,UAASnB,GAAT,EAAc;AAChF,SAAOS,OAAOxF,SAAP,CAAiBrC,QAAjB,CAA0BnD,IAA1B,CAA+BuK,GAA/B,MAAwC,gBAA/C;AACD,CAFD;AAIA3K,QAAQ8L,OAAR,GAAkBA,OAAlB,C,CAEA;;;;;;AAKA,IAAI,OAAOE,MAAP,KAAkB,WAAlB,IAAiCA,OAAOpG,SAA5C,EAAuD;AACrDoG,SAAOpG,SAAP,CAAiBqG,MAAjB,GAA0BD,OAAOpG,SAAP,CAAiBqG,MAAjB,IAA2B,YAAW;AAC9D,WAAOF,MAAMnG,SAAN,CAAgBsG,KAAhB,CAAsB9L,IAAtB,CAA2B,IAA3B,EAAiC,CAAjC,CAAP;AACD,GAFD;AAGD,C,CAED;;;;;;;;AAOA,SAAS+L,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAO,CAAC,CAAChC,OAAOzF,OAAP,CAAeyH,IAAf,CAAT;AACD,C,CAED;;;;;;;;;;AASApM,QAAQwL,KAAR,GAAgB,UAASa,GAAT,EAAcC,GAAd,EAAmBpB,GAAnB,EAAwB;AACtCA,QAAMA,OAAO,EAAb;AACAoB,QAAMA,OAAO,CAAC,IAAD,CAAb;AAEA,MAAIC,KAAK,IAAIC,MAAJ,CAAW,SAASF,IAAItC,IAAJ,CAAS,GAAT,CAAT,GAAyB,IAApC,CAAT;AAEAC,cAAYoC,GAAZ,EACGpB,MADH,CACUkB,OADV,EAEG7B,OAFH,CAEW,UAAS8B,IAAT,EAAe;AACtBA,WAAOpC,KAAKqC,GAAL,EAAUD,IAAV,CAAP;;AACA,QAAIlC,SAASkC,IAAT,EAAeK,WAAf,EAAJ,EAAkC;AAChCzM,cAAQwL,KAAR,CAAcY,IAAd,EAAoBE,GAApB,EAAyBpB,GAAzB;AACD,KAFD,MAEO,IAAIkB,KAAKnD,KAAL,CAAWsD,EAAX,CAAJ,EAAoB;AACzBrB,UAAIJ,IAAJ,CAASsB,IAAT;AACD;AACF,GATH;AAWA,SAAOlB,GAAP;AACD,CAlBD,C,CAoBA;;;;;;;;AAOAlL,QAAQ0M,IAAR,GAAe,UAAS1D,GAAT,EAAc;AAC3B,SAAOA,IACJK,WADI,GAEJ7G,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,SAHJ,EAGe,EAHf,CAAP;AAID,CALD,C,CAOA;;;;;;;AAMAxC,QAAQqF,KAAR,GAAgB,UAAS2D,GAAT,EAAc;AAC5BA,QAAMA,IACHxG,OADG,CACK,yBADL,EACgC,IADhC,EACsCA,OADtC,CAC8C,SAD9C,EACyD,EADzD,EAEHA,OAFG,CAEK,wCAFL,EAE+C,EAF/C,EAGHA,OAHG,CAGK,QAHL,EAGe,EAHf,CAAN;AAKA,MAAImK,SAAS3D,IAAIC,KAAJ,CAAU,UAAV,EAAsB,CAAtB,EAAyBpE,MAAtC;AACA,MAAI+H,OAAO5D,IAAIC,KAAJ,CAAU,WAAV,EAAuB,CAAvB,EAA0BpE,MAArC;AACA,MAAI0H,KAAK,IAAIC,MAAJ,CAAW,UAAUI,OAAO,IAAP,GAAc,GAAxB,IAA+B,GAA/B,IAAsCA,OAAOA,IAAP,GAAcD,MAApD,IAA8D,GAAzE,EAA8E,IAA9E,CAAT;AAEA3D,QAAMA,IAAIxG,OAAJ,CAAY+J,EAAZ,EAAgB,EAAhB,CAAN;AAEA,SAAOvM,QAAQyC,IAAR,CAAauG,GAAb,CAAP;AACD,CAbD,C,CAeA;;;;;;;;AAOAhJ,QAAQyC,IAAR,GAAe,UAASuG,GAAT,EAAc;AAC3B,SAAOA,IAAIxG,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,CAAP;AACD,CAFD,C,CAIA;;;;;;;;AAOAxC,QAAQ6M,UAAR,GAAqB,UAASC,EAAT,EAAa;AAChC,SAAO9M,QAAQ+K,MAAR,CAAe+B,GAAGtK,OAAH,CAAW,GAAX,EAAgB,EAAhB,EAAoBuK,KAApB,CAA0B,GAA1B,CAAf,EAA+C,UAASpC,GAAT,EAAcqC,IAAd,EAAoB;AACxE,QAAI7G,IAAI6G,KAAKrI,OAAL,CAAa,GAAb,CAAR;AACA,QAAI4G,MAAMyB,KAAKd,KAAL,CAAW,CAAX,EAAc/F,CAAd,CAAV;AACA,QAAIyC,MAAMoE,KAAKd,KAAL,CAAW,EAAE/F,CAAb,CAAV;AAEAwE,QAAIY,GAAJ,IAAW0B,mBAAmBrE,GAAnB,CAAX;AACA,WAAO+B,GAAP;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD,CATD,C,CAWA;;;;;;;;AAOA,SAASuC,SAAT,CAAmBC,EAAnB,EAAuB;AACrB,SAAOA,GACJ3K,OADI,CACI,IADJ,EACU,MADV,EAEJA,OAFI,CAEI,IAFJ,EAEU,MAFV,EAGJA,OAHI,CAGI,YAHJ,EAGkB,mCAHlB,EAIJA,OAJI,CAII,WAJJ,EAIiB,gCAJjB,EAKJA,OALI,CAKI,cALJ,EAKoB,gCALpB,EAMJA,OANI,CAMI,SANJ,EAMe,gCANf,EAOJA,OAPI,CAOI,oBAPJ,EAO0B,+DAP1B,EAQJA,OARI,CAQI,+CARJ,EAQqD,iCARrD,CAAP;AASD,C,CAED;;;;;;;AAMAxC,QAAQoN,aAAR,GAAwB,UAAS/K,IAAT,EAAe;AACrC,MAAIgL,OAAO7L,SAASC,cAAT,CAAwB,OAAxB,EAAiCb,oBAAjC,CAAsDyB,IAAtD,CAAX;;AACA,OAAK,IAAI8D,IAAI,CAAR,EAAWmH,MAAMD,KAAKxI,MAA3B,EAAmCsB,IAAImH,GAAvC,EAA4C,EAAEnH,CAA9C,EAAiD;AAC/CkH,SAAKlH,CAAL,EAAQC,SAAR,GAAoB8G,UAAUG,KAAKlH,CAAL,EAAQC,SAAlB,CAApB;AACD;AACF,CALD,C,CAOA;;;;;;;;;;;;;;;AAcA,SAASmH,mBAAT,CAA6BC,KAA7B,EAAoChK,IAApC,EAA0C;AACxCA,SAAOA,QAAQxD,QAAQwD,IAAR,CAAagK,KAAb,CAAf;;AAEA,UAAQhK,IAAR;AACE,SAAK,UAAL;AACE,aAAO,YAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAP;;AACF,SAAK,OAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAOgK,MAAMjK,QAAN,EAAP;AARJ;AAUD,C,CAED;;;;;;;;;;;;;;;;;;;;;AAoBAvD,QAAQwD,IAAR;AAAe,WAASA,IAAT,CAAcgK,KAAd,EAAqB;AAClC,QAAIA,UAAUxI,SAAd,EAAyB;AACvB,aAAO,WAAP;AACD,KAFD,MAEO,IAAIwI,UAAU,IAAd,EAAoB;AACzB,aAAO,MAAP;AACD,KAFM,MAEA,IAAI,OAAOxB,MAAP,KAAkB,WAAlB,IAAiCA,OAAOyB,QAAP,CAAgBD,KAAhB,CAArC,EAA6D;AAClE,aAAO,QAAP;AACD;;AACD,WAAOpC,OAAOxF,SAAP,CAAiBrC,QAAjB,CAA0BnD,IAA1B,CAA+BoN,KAA/B,EACJhL,OADI,CACI,iBADJ,EACuB,IADvB,EAEJ6G,WAFI,EAAP;AAGD;;AAXD,SAAwB7F,IAAxB;AAAA,I,CAaA;;;;;;;;;;;;;;;;AAeAxD,QAAQ0N,SAAR,GAAoB,UAASF,KAAT,EAAgB;AAClC,MAAIhK,OAAOxD,QAAQwD,IAAR,CAAagK,KAAb,CAAX;;AAEA,MAAI,CAAC,CAACxN,QAAQ2E,OAAR,CAAgB,CAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,CAAhB,EAAiDnB,IAAjD,CAAN,EAA8D;AAC5D,QAAIA,SAAS,QAAb,EAAuB;AACrB,aAAOmK,cAAcH,KAAd,CAAP;AACD;;AACD,QAAII,OAAOJ,MAAMvB,MAAN,EAAX,CAJ4D,CAK5D;;AACA,WAAO0B,cAAcC,KAAKC,IAAL,IAAaD,KAAKpK,IAAlB,GAAyBoK,KAAKC,IAA9B,GAAqCD,IAAnD,EAAyD,CAAzD,EACJpL,OADI,CACI,UADJ,EACgB,IADhB,CAAP;AAED;;AAED,OAAK,IAAIsL,IAAT,2CAAiBN,KAAjB,GAAwB;AACtB,QAAIpC,OAAOxF,SAAP,CAAiB0F,cAAjB,CAAgClL,IAAhC,CAAqCoN,KAArC,EAA4CM,IAA5C,CAAJ,EAAuD;AACrD,aAAOH,cAAc3N,QAAQ+N,YAAR,CAAqBP,KAArB,CAAd,EAA2C,CAA3C,EAA8ChL,OAA9C,CAAsD,UAAtD,EAAkE,IAAlE,CAAP;AACD;AACF;;AAED,SAAO+K,oBAAoBC,KAApB,EAA2BhK,IAA3B,CAAP;AACD,CApBD,C,CAsBA;;;;;;;;;;AASA,SAASmK,aAAT,CAAuBK,MAAvB,EAA+BrB,MAA/B,EAAuCsB,KAAvC,EAA8C;AAC5C,MAAI,OAAOtB,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA,WAAOuB,WAAWF,MAAX,CAAP;AACD;;AAEDC,UAAQA,SAAS,CAAjB;AACA,MAAIE,QAAQxB,SAASsB,KAArB;AACA,MAAIjF,MAAM8C,QAAQkC,MAAR,IAAkB,GAAlB,GAAwB,GAAlC;AACA,MAAII,MAAMtC,QAAQkC,MAAR,IAAkB,GAAlB,GAAwB,GAAlC;AACA,MAAInJ,SAASmJ,OAAOnJ,MAAP,IAAiB7E,QAAQmL,IAAR,CAAa6C,MAAb,EAAqBnJ,MAAnD,CAV4C,CAW5C;;AACA,WAASwJ,MAAT,CAAgB9I,CAAhB,EAAmB4D,CAAnB,EAAsB;AACpB,WAAO,IAAI4C,KAAJ,CAAU5C,CAAV,EAAaa,IAAb,CAAkBzE,CAAlB,CAAP;AACD;;AAED,WAAS2I,UAAT,CAAoBtF,GAApB,EAAyB;AACvB,YAAQ5I,QAAQwD,IAAR,CAAaoF,GAAb,CAAR;AACE,WAAK,MAAL;AACA,WAAK,WAAL;AACEA,cAAM,MAAMA,GAAN,GAAY,GAAlB;AACA;;AACF,WAAK,OAAL;AACA,WAAK,QAAL;AACEA,cAAM+E,cAAc/E,GAAd,EAAmB+D,MAAnB,EAA2BsB,QAAQ,CAAnC,CAAN;AACA;;AACF,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACErF,cAAMA,QAAQ,CAAR,IAAc,IAAIA,GAAL,KAAc,CAAC0F,QAA5B,CAAqC;AAArC,UACF,IADE,GAEF1F,IAAIrF,QAAJ,EAFJ;AAGA;;AACF,WAAK,MAAL;AACE,YAAIgL,QAAQC,MAAM5F,IAAI6F,OAAJ,EAAN,EAA4B;AAA5B,UACR7F,IAAIrF,QAAJ,EADQ,GAERqF,IAAI8F,WAAJ,EAFJ;AAGA9F,cAAM,YAAY2F,KAAZ,GAAoB,GAA1B;AACA;;AACF,WAAK,QAAL;AACE,YAAIX,OAAOhF,IAAIqD,MAAJ,EAAX,CADF,CAEE;;AACA2B,eAAOA,KAAKC,IAAL,IAAaD,KAAKpK,IAAlB,GAAyBoK,KAAKC,IAA9B,GAAqCD,IAA5C;AACAhF,cAAM,cAAc+E,cAAcC,IAAd,EAAoB,CAApB,EAAuBK,QAAQ,CAA/B,CAAd,GAAkD,GAAxD;AACA;;AACF;AACErF,cAAOA,QAAQ,YAAR,IAAwBA,QAAQ,YAAjC,GACFA,GADE,GAEF+F,KAAKjB,SAAL,CAAe9E,GAAf,CAFJ;AAEyB;AA/B7B;;AAiCA,WAAOA,GAAP;AACD;;AAED,OAAK,IAAIzC,CAAT,2CAAc6H,MAAd,GAAsB;AACpB,QAAI,CAACA,OAAO1C,cAAP,CAAsBnF,CAAtB,CAAL,EAA+B;AAC7B,eAD6B,CACnB;AACX;;AACD,MAAEtB,MAAF;AACAmE,WAAO,QAAQqF,OAAO,GAAP,EAAYF,KAAZ,CAAR,IACFrC,QAAQkC,MAAR,IAAkB,EAAlB,GAAuB,MAAM7H,CAAN,GAAU,KAD/B,EACsC;AADtC,MAEH+H,WAAWF,OAAO7H,CAAP,CAAX,CAFG,CAEuC;AAFvC,OAGFtB,SAAS,GAAT,GAAe,EAHb,CAAP,CALoB,CAQyB;AAC9C;;AAED,SAAOmE,IACL;AADK,KAEFA,IAAInE,MAAJ,KAAe,CAAf,GAAmB,OAAOwJ,OAAO,GAAP,EAAY,EAAEF,KAAd,CAAP,GAA8BC,GAAjD,GAAuDA,GAFrD,CAAP;AAGD,C,CAED;;;;;;;;AAOApO,QAAQyN,QAAR,GAAmB,UAASD,KAAT,EAAgB;AACjC,SAAO,OAAOxB,MAAP,KAAkB,WAAlB,IAAiCA,OAAOyB,QAAP,CAAgBD,KAAhB,CAAxC;AACD,CAFD,C,CAIA;;;;;;;;;;;;;;;;;;;AAkBAxN,QAAQ+N,YAAR,GAAuB,UAASP,KAAT,EAAgBpM,KAAhB,EAAuB;AAC5C,MAAIwN,gBAAJ,CAD4C,CAE5C;AACA,MAAId,IAAJ,CAH4C,CAI5C;AACA,MAAItK,OAAOxD,QAAQwD,IAAR,CAAagK,KAAb,CAAX;;AACA,WAASqB,SAAT,CAAmBrB,KAAnB,EAA0BlK,EAA1B,EAA8B;AAC5BlC,UAAM0J,IAAN,CAAW0C,KAAX;AACAlK;AACAlC,UAAM0N,GAAN;AACD;;AAED1N,UAAQA,SAAS,EAAjB;;AAEA,MAAIpB,QAAQ2E,OAAR,CAAgBvD,KAAhB,EAAuBoM,KAAvB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,WAAO,YAAP;AACD;;AAED,UAAQhK,IAAR;AACE,SAAK,WAAL;AACA,SAAK,QAAL;AACA,SAAK,MAAL;AACEoL,yBAAmBpB,KAAnB;AACA;;AACF,SAAK,OAAL;AACEqB,gBAAUrB,KAAV,EAAiB,YAAW;AAC1BoB,2BAAmB5O,QAAQ4K,GAAR,CAAY4C,KAAZ,EAAmB,UAASuB,IAAT,EAAe;AACnD,iBAAO/O,QAAQ+N,YAAR,CAAqBgB,IAArB,EAA2B3N,KAA3B,CAAP;AACD,SAFkB,CAAnB;AAGD,OAJD;AAKA;;AACF,SAAK,UAAL;AACE,uCACA,KAAK0M,IAAL,2CAAaN,KAAb,GAAoB;AAClBoB,2BAAmB,EAAnB;AACA;AACD,OALH,CAME;;AACA,UAAI,CAACA,gBAAL,EAAuB;AACrBA,2BAAmBrB,oBAAoBC,KAApB,EAA2BhK,IAA3B,CAAnB;AACA;AACD;;AACH;;AACA,SAAK,QAAL;AACEoL,yBAAmBA,oBAAoB,EAAvC;AACAC,gBAAUrB,KAAV,EAAiB,YAAW;AAC1BxN,gBAAQsK,OAAR,CAAgBtK,QAAQmL,IAAR,CAAaqC,KAAb,EAAoBwB,IAApB,EAAhB,EAA4C,UAASzD,GAAT,EAAc;AACxDqD,2BAAiBrD,GAAjB,IAAwBvL,QAAQ+N,YAAR,CAAqBP,MAAMjC,GAAN,CAArB,EAAiCnK,KAAjC,CAAxB;AACD,SAFD;AAGD,OAJD;AAKA;;AACF,SAAK,MAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACEwN,yBAAmBpB,KAAnB;AACA;;AACF;AACEoB,yBAAmBpB,QAAQ,EAA3B;AAxCJ;;AA2CA,SAAOoB,gBAAP;AACD,CA9DD,C,CAgEA;;;;;;;;;;AASA5O,QAAQiP,WAAR;AAAsB,WAASA,WAAT,CAAqB7C,IAArB,EAA2B8C,UAA3B,EAAuCC,SAAvC,EAAkD;AACtE,QAAI3D,QAAQ,EAAZ;AACA,QAAIe,KAAK,IAAIC,MAAJ,CAAW,SAAS0C,WAAWlF,IAAX,CAAgB,GAAhB,CAAT,GAAgC,IAA3C,CAAT;;AAEA,QAAI,CAACH,OAAOuC,IAAP,CAAL,EAAmB;AACjB,UAAIvC,OAAOuC,OAAO,KAAd,CAAJ,EAA0B;AACxBA,gBAAQ,KAAR;AACD,OAFD,MAEO;AACLZ,gBAAQzB,KAAKqF,IAAL,CAAUhD,IAAV,CAAR;;AACA,YAAI,CAACZ,MAAM3G,MAAX,EAAmB;AACjB,gBAAM,IAAIwK,KAAJ,CAAU,uCAAuCjD,IAAvC,GAA8C,GAAxD,CAAN;AACD;;AACD,eAAOZ,KAAP;AACD;AACF;;AAED,QAAI;AACF,UAAI/K,OAAOyJ,SAASkC,IAAT,CAAX;;AACA,UAAI3L,KAAK6O,MAAL,EAAJ,EAAmB;AACjB,eAAOlD,IAAP;AACD;AACF,KALD,CAKE,OAAO3H,GAAP,EAAY;AACZ;AACA;AACD;;AAEDwF,gBAAYmC,IAAZ,EAAkB9B,OAAlB,CAA0B,UAASoB,IAAT,EAAe;AACvCA,aAAO1B,KAAKoC,IAAL,EAAWV,IAAX,CAAP;;AACA,UAAI;AACF,YAAIjL,OAAOyJ,SAASwB,IAAT,CAAX;;AACA,YAAIjL,KAAKgM,WAAL,EAAJ,EAAwB;AACtB,cAAI0C,SAAJ,EAAe;AACb3D,oBAAQA,MAAM+D,MAAN,CAAaN,YAAYvD,IAAZ,EAAkBwD,UAAlB,EAA8BC,SAA9B,CAAb,CAAR;AACD;;AACD;AACD;AACF,OARD,CAQE,OAAO1K,GAAP,EAAY;AACZ;AACA;AACD;;AACD,UAAI,CAAChE,KAAK6O,MAAL,EAAD,IAAkB,CAAC/C,GAAGjK,IAAH,CAAQoJ,IAAR,CAAnB,IAAoC/B,SAAS+B,IAAT,EAAe,CAAf,MAAsB,GAA9D,EAAmE;AACjE;AACD;;AACDF,YAAMV,IAAN,CAAWY,IAAX;AACD,KAlBD;AAoBA,WAAOF,KAAP;AACD;;AA/CD,SAA+ByD,WAA/B;AAAA,I,CAiDA;;;;;;AAMAjP,QAAQwP,cAAR,GAAyB,YAAW;AAClC,SAAO,IAAIH,KAAJ,CAAU,gEAAV,CAAP;AACD,CAFD,C,CAIA;;;;;;;AAOArP,QAAQyP,QAAR,GAAmB,UAAShL,GAAT,EAAc;AAC/B,SAAOA,OAAOzE,QAAQwP,cAAR,EAAd;AACD,CAFD,C,CAIA;;;;;;;;;;AASAxP,QAAQ0P,gBAAR,GAA2B,YAAW;AACpC;AACA,MAAIC,QAAQ,GAAZ;AACA,MAAIC,KAAK,OAAOpO,QAAP,KAAoB,WAApB,GAAkC;AAAEqO,UAAM;AAAR,GAAlC,GAAmD;AAAE1H,aAAS;AAAX,GAA5D;AACA,MAAI2H,MAAMF,GAAGC,IAAH,GACJ3H,QAAQ4H,GAAR,KAAgBH,KADZ,GAEJ,CAAC,OAAOlK,QAAP,KAAoB,WAApB,GAAkC7D,OAAO6D,QAAzC,GAAoDA,QAArD,EAA+DsK,IAA/D,CAAoEvN,OAApE,CAA4E,WAA5E,EAAyF,GAAzF,CAFN;;AAIA,WAASwN,eAAT,CAAyBjL,IAAzB,EAA+B;AAC7B,WAAQ,CAACA,KAAKJ,OAAL,CAAa,iBAAiBgL,KAAjB,GAAyB,OAAzB,GAAmCA,KAAhD,CAAF,IACD,CAAC5K,KAAKJ,OAAL,CAAa,eAAegL,KAAf,GAAuB,SAAvB,GAAmCA,KAAhD,CADA,IAED,CAAC5K,KAAKJ,OAAL,CAAa,eAAegL,KAAf,GAAuB,OAAvB,GAAiCA,KAA9C,CAFA,IAGD,CAAC5K,KAAKJ,OAAL,CAAagL,QAAQ,UAArB,CAHP;AAID;;AAED,WAASM,cAAT,CAAwBlL,IAAxB,EAA8B;AAC5B,WAAQ,CAACA,KAAKJ,OAAL,CAAa,aAAb,CAAF,IACD,CAACI,KAAKJ,OAAL,CAAa,aAAb,CADA,IAED,CAACI,KAAKJ,OAAL,CAAa,WAAb,CAFA,IAGD,CAACI,KAAKJ,OAAL,CAAa,aAAb,CAHA,IAID,CAACI,KAAKJ,OAAL,CAAa,0CAAb,CAJA,IAKF,KALL;AAMD;;AAED,SAAO,UAASvD,KAAT,EAAgB;AACrBA,YAAQA,MAAM2L,KAAN,CAAY,IAAZ,CAAR;AAEA3L,YAAQpB,QAAQ+K,MAAR,CAAe3J,KAAf,EAAsB,UAAS8O,IAAT,EAAenL,IAAf,EAAqB;AACjD,UAAIiL,gBAAgBjL,IAAhB,CAAJ,EAA2B;AACzB,eAAOmL,IAAP;AACD;;AAED,UAAIN,GAAGC,IAAH,IAAWI,eAAelL,IAAf,CAAf,EAAqC;AACnC,eAAOmL,IAAP;AACD,OAPgD,CASjD;;;AACAA,WAAKpF,IAAL,CAAU/F,KAAKvC,OAAL,CAAasN,GAAb,EAAkB,EAAlB,CAAV;AACA,aAAOI,IAAP;AACD,KAZO,EAYL,EAZK,CAAR;AAcA,WAAO9O,MAAM4I,IAAN,CAAW,IAAX,CAAP;AACD,GAlBD;AAmBD,CA3CD,4H;;;;;;;;;;;ACxrBA;;GAIApM,OAAOoC,OAAP,GAAiBR,QAAjB,C,CAEA;;;;AAGA,SAASA,QAAT,GAAoB;AAClB,OAAKkE,OAAL,GAAe,CAAf;AACA,OAAKd,IAAL,CAAU,CAAV;AACA,OAAKuN,QAAL,CAAc,EAAd;AACA,OAAKC,IAAL,CAAU,8BAAV;AACD,C,CAED;;;;;;;;AAOA5Q,SAASoG,SAAT,CAAmBhD,IAAnB,GAA0B,UAASA,IAAT,EAAe;AACvC,OAAKyN,KAAL,GAAazN,IAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;;AAOApD,SAASoG,SAAT,CAAmB3B,IAAnB,GAA0B,UAASA,IAAT,EAAe;AACvC,OAAKqM,KAAL,GAAarM,IAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;;AAOAzE,SAASoG,SAAT,CAAmBuK,QAAnB,GAA8B,UAASvN,IAAT,EAAe;AAC3C,OAAK2N,SAAL,GAAiB3N,IAAjB;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMApD,SAASoG,SAAT,CAAmBwK,IAAnB,GAA0B,UAASI,MAAT,EAAiB;AACzC,OAAKC,KAAL,GAAaD,MAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMAhR,SAASoG,SAAT,CAAmB/B,MAAnB,GAA4B,UAASsF,CAAT,EAAY;AACtC,OAAKzF,OAAL,GAAeyF,CAAf;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMA3J,SAASoG,SAAT,CAAmB9B,IAAnB,GAA0B,UAASxC,GAAT,EAAc;AACtC,MAAI;AACF,QAAIoC,UAAU4F,KAAKoH,GAAL,CAAS,KAAKhN,OAAd,EAAuB,GAAvB,CAAd;AACA,QAAId,OAAO,KAAKyN,KAAhB;AACA,QAAIM,OAAO/N,OAAO,CAAlB;AACA,QAAIgO,IAAID,IAAR;AACA,QAAIhI,IAAIgI,IAAR;AACA,QAAIE,MAAMF,OAAO,CAAjB;AACA,QAAIR,WAAW,KAAKI,SAApB;AAEAjP,QAAI8O,IAAJ,GAAWD,WAAW,KAAX,GAAmB,KAAKM,KAAnC;AAEA,QAAIK,QAAQxH,KAAKyH,EAAL,GAAU,CAAV,IAAerN,UAAU,GAAzB,CAAZ;AACApC,QAAI0P,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBpO,IAApB,EAA0BA,IAA1B,EAZE,CAcF;;AACAtB,QAAI2P,WAAJ,GAAkB,SAAlB;AACA3P,QAAI4P,SAAJ;AACA5P,QAAI6P,GAAJ,CAAQP,CAAR,EAAWjI,CAAX,EAAckI,GAAd,EAAmB,CAAnB,EAAsBC,KAAtB,EAA6B,KAA7B;AACAxP,QAAI8P,MAAJ,GAlBE,CAoBF;;AACA9P,QAAI2P,WAAJ,GAAkB,MAAlB;AACA3P,QAAI4P,SAAJ;AACA5P,QAAI6P,GAAJ,CAAQP,CAAR,EAAWjI,CAAX,EAAckI,MAAM,CAApB,EAAuB,CAAvB,EAA0BC,KAA1B,EAAiC,IAAjC;AACAxP,QAAI8P,MAAJ,GAxBE,CA0BF;;AACA,QAAInN,OAAO,KAAKqM,KAAL,IAAc,CAAC5M,UAAU,CAAX,IAAgB,GAAzC;AACA,QAAI2N,IAAI/P,IAAIgQ,WAAJ,CAAgBrN,IAAhB,EAAsBlC,KAA9B;AAEAT,QAAIiQ,QAAJ,CAAatN,IAAb,EAAmB2M,IAAIS,IAAI,CAAR,GAAY,CAA/B,EAAkC1I,IAAIwH,WAAW,CAAf,GAAmB,CAArD;AACD,GA/BD,CA+BE,OAAO1L,GAAP,EAAY,CACZ;AACD;;AACD,SAAO,IAAP;AACD,CApCD,4H;;;;;;;;;;;AChFA;;GAIA,IAAI+M,MAAMxS,QAAQ,KAAR,CAAV;;AACA,IAAIyS,OAAOzS,QAAQ,MAAR,CAAX;;AACA,IAAI+E,KAAK/E,QAAQ,OAAR,CAAT;;AACA,IAAIO,QAAQP,QAAQ,UAAR,CAAZ;;AACA,IAAI0S,gBAAgBxJ,QAAQC,OAAR,GAAkB,IAAlB,GAAyBnJ,QAAQ,gBAAR,CAA7C,C,CAEA;;;AAIAgB,UAAUpC,OAAOoC,OAAP,GAAiBV,IAA3B,C,CAEA;;;qCAKA;AACA,IAAIK,OAAON,OAAOM,IAAlB;AACA,IAAIC,aAAaP,OAAOO,UAAxB;AACA,IAAIC,cAAcR,OAAOQ,WAAzB;AACA,IAAIC,eAAeT,OAAOS,YAA1B;AACA,IAAIC,gBAAgBV,OAAOU,aAA3B,C,CACA,sD,CAEA;;;AAIA,IAAIwI,SAASiJ,IAAIjJ,MAAJ,CAAW,CAAX,KAAiBiJ,IAAIjJ,MAAJ,CAAW,CAAX,CAA9B,C,CAEA;;;AAIAvI,QAAQ2R,SAAR,GAAoB,CAACzJ,QAAQC,OAAT,KAAqBuJ,iBAAkBxJ,QAAQ0J,GAAR,CAAYC,YAAZ,KAA6B7M,SAApE,CAApB,C,CAEA;;;AAIAhF,QAAQ8R,WAAR,GAAsB,KAAtB,C,CAEA;;;AAIA9R,QAAQ+R,MAAR,GAAiB;AACfC,QAAM,EADS;AAEfC,QAAM,EAFS;AAGf,iBAAe,EAHA;AAIf,iBAAe,EAJA;AAKf,mBAAiB,EALF;AAMf3N,WAAS,EANM;AAOfzB,SAAO,CAPQ;AAQf,iBAAe,CARA;AASf,mBAAiB,EATF;AAUf,iBAAe,EAVA;AAWfqP,aAAW,EAXI;AAYfC,QAAM,EAZS;AAafC,UAAQ,EAbO;AAcfC,QAAM,EAdS;AAefC,SAAO,EAfQ;AAgBfC,SAAO,EAhBQ;AAiBf,iBAAe,EAjBA;AAkBf,gBAAc,EAlBC;AAmBf,kBAAgB;AAnBD,CAAjB,C,CAsBA;;;AAIAvS,QAAQwS,OAAR,GAAkB;AAChBC,MAAI,GADY;AAEhBhO,OAAK,GAFW;AAGhBiO,OAAK;AAHW,CAAlB,C,CAMA;;AACA,IAAIxK,QAAQyK,QAAR,KAAqB,OAAzB,EAAkC;AAChC3S,UAAQwS,OAAR,CAAgBC,EAAhB,GAAqB,QAArB;AACAzS,UAAQwS,OAAR,CAAgB/N,GAAhB,GAAsB,MAAtB;AACAzE,UAAQwS,OAAR,CAAgBE,GAAhB,GAAsB,GAAtB;AACD,C,CAED;;;;;;;;;;;;AAWA,IAAIE,QAAQ5S,QAAQ4S,KAAR,GAAgB,UAASpP,IAAT,EAAewF,GAAf,EAAoB;AAC9C,MAAI,CAAChJ,QAAQ2R,SAAb,EAAwB;AACtB,WAAOrL,OAAO0C,GAAP,CAAP;AACD;;AACD,SAAO,UAAYhJ,QAAQ+R,MAAR,CAAevO,IAAf,CAAZ,GAAmC,GAAnC,GAAyCwF,GAAzC,GAA+C,SAAtD;AACD,CALD,C,CAOA;;;;AAIAhJ,QAAQ4B,MAAR,GAAiB;AACfG,SAAO;AADQ,CAAjB;;AAIA,IAAIwG,MAAJ,EAAY;AACVvI,UAAQ4B,MAAR,CAAeG,KAAf,GAAuBmG,QAAQ2K,MAAR,CAAeC,aAAf,GACjB5K,QAAQ2K,MAAR,CAAeC,aAAf,CAA6B,CAA7B,EAAgC,CAAhC,CADiB,GAEjBtB,IAAIsB,aAAJ,GAAoB,CAApB,CAFN;AAGD,C,CAED;;;;AAIA9S,QAAQ+S,MAAR,GAAiB;AACfC,QAAM,YAAW;AACfzK,cAAUL,QAAQ2K,MAAR,CAAeI,KAAf,CAAqB,WAArB,CAAV;AACD,GAHc;AAKfC,QAAM,YAAW;AACf3K,cAAUL,QAAQ2K,MAAR,CAAeI,KAAf,CAAqB,WAArB,CAAV;AACD,GAPc;AASfE,cAAY,YAAW;AACrB5K,cAAUL,QAAQ2K,MAAR,CAAeI,KAAf,CAAqB,SAArB,CAAV;AACD,GAXc;AAafG,mBAAiB,YAAW;AAC1B7K,cAAUL,QAAQ2K,MAAR,CAAeI,KAAf,CAAqB,SAArB,CAAV;AACD,GAfc;AAiBfI,MAAI,YAAW;AACb,QAAI9K,MAAJ,EAAY;AACVvI,cAAQ+S,MAAR,CAAeI,UAAf;AACAnT,cAAQ+S,MAAR,CAAeK,eAAf;AACD,KAHD,MAGO;AACLlL,cAAQ2K,MAAR,CAAeI,KAAf,CAAqB,IAArB;AACD;AACF;AAxBc,CAAjB,C,CA2BA;;;;;;;AAOAjT,QAAQkQ,IAAR,GAAe,UAASnP,QAAT,EAAmB;AAChCuS,UAAQC,GAAR;AACAxS,WAASuJ,OAAT,CAAiB,UAAShI,IAAT,EAAe6D,CAAf,EAAkB;AACjC;AACA,QAAIqN,MAAMZ,MAAM,aAAN,EAAqB,aAArB,IACNA,MAAM,eAAN,EAAuB,SAAvB,CADM,GAENA,MAAM,aAAN,EAAqB,QAArB,CAFJ,CAFiC,CAMjC;;AACA,QAAI9M,GAAJ;AACA,QAAIrB,MAAMnC,KAAKmC,GAAf;AACA,QAAID,OAAJ;;AACA,QAAIC,IAAID,OAAR,EAAiB;AACfA,gBAAUC,IAAID,OAAd;AACD,KAFD,MAEO,IAAI,OAAOC,IAAIgP,OAAX,KAAuB,UAA3B,EAAuC;AAC5CjP,gBAAUC,IAAIgP,OAAJ,KAAgB,EAA1B;AACD,KAFM,MAEA;AACLjP,gBAAU,EAAV;AACD;;AACD,QAAIpD,QAAQqD,IAAIrD,KAAJ,IAAaoD,OAAzB;AACA,QAAIkP,QAAQtS,MAAMuD,OAAN,CAAcH,OAAd,CAAZ;AACA,QAAImP,SAASlP,IAAIkP,MAAjB;AACA,QAAIC,WAAWnP,IAAImP,QAAnB;AACA,QAAIlU,SAAS,IAAb;;AAEA,QAAIgU,UAAU,CAAC,CAAf,EAAkB;AAChB5N,YAAMtB,OAAN;AACD,KAFD,MAEO;AACLkP,eAASlP,QAAQK,MAAjB;AACAiB,YAAM1E,MAAM8K,KAAN,CAAY,CAAZ,EAAewH,KAAf,CAAN,CAFK,CAGL;;AACAtS,cAAQA,MAAM8K,KAAN,CAAYwH,QAAQ,CAApB,CAAR;AACD,KA9BgC,CAgCjC;;;AACA,QAAIjP,IAAIoP,QAAR,EAAkB;AAChB/N,YAAM,cAAcA,GAApB;AACD,KAnCgC,CAoCjC;;;AACA,QAAIrB,IAAIqP,QAAJ,KAAiB,KAAjB,IAA0BC,SAASJ,MAAT,EAAiBC,QAAjB,CAA1B,IAAwDA,aAAa5O,SAAzE,EAAoF;AAClFtF,eAAS,KAAT;;AACA,UAAI,EAAEH,MAAMmL,QAAN,CAAeiJ,MAAf,KAA0BpU,MAAMmL,QAAN,CAAekJ,QAAf,CAA5B,CAAJ,EAA2D;AACzDnP,YAAIkP,MAAJ,GAAaA,SAASpU,MAAMmO,SAAN,CAAgBiG,MAAhB,CAAtB;AACAlP,YAAImP,QAAJ,GAAeA,WAAWrU,MAAMmO,SAAN,CAAgBkG,QAAhB,CAA1B;AACD;;AAEDJ,YAAMZ,MAAM,aAAN,EAAqB,eAArB,IAAwCA,MAAM,aAAN,EAAqB,QAArB,CAA9C;AACA,UAAI3J,QAAQzE,QAAQyE,KAAR,CAAc,oBAAd,CAAZ;AACAnD,YAAM,aAAa8M,MAAM,eAAN,EAAuB3J,QAAQA,MAAM,CAAN,CAAR,GAAmBnD,GAA1C,CAAnB;;AAEA,UAAI9F,QAAQ8R,WAAZ,EAAyB;AACvBhM,eAAOkO,WAAWvP,GAAX,EAAgB/E,MAAhB,CAAP;AACD,OAFD,MAEO;AACLoG,eAAOmO,YAAYxP,GAAZ,EAAiB/E,MAAjB,CAAP;AACD;AACF,KArDgC,CAuDjC;;;AACA0B,YAAQA,MAAMoB,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR;AAEA8Q,YAAQC,GAAR,CAAYC,GAAZ,EAAkBrN,IAAI,CAAtB,EAA0B7D,KAAKuD,SAAL,EAA1B,EAA4CC,GAA5C,EAAiD1E,KAAjD;AACD,GA3DD;AA4DD,CA9DD,C,CAgEA;;;;;;;;;;;;AAYA,SAAS9B,IAAT,CAAcY,MAAd,EAAsB;AACpB,MAAIM,QAAQ,KAAKA,KAAL,GAAa;AAAEiG,YAAQ,CAAV;AAAa9C,WAAO,CAApB;AAAuB9C,YAAQ,CAA/B;AAAkCyD,aAAS,CAA3C;AAA8CvD,cAAU;AAAxD,GAAzB;AACA,MAAIA,WAAW,KAAKA,QAAL,GAAgB,EAA/B;;AAEA,MAAI,CAACb,MAAL,EAAa;AACX;AACD;;AACD,OAAKA,MAAL,GAAcA,MAAd;AAEAA,SAAOM,KAAP,GAAeA,KAAf;AAEAN,SAAOiC,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5B3B,UAAMwD,KAAN,GAAc,IAAIrE,IAAJ,EAAd;AACD,GAFD;AAIAO,SAAOiC,EAAP,CAAU,OAAV,EAAmB,UAASU,KAAT,EAAgB;AACjCrC,UAAMiG,MAAN,GAAejG,MAAMiG,MAAN,IAAgB,CAA/B;AACA5D,UAAMtB,IAAN,IAAcf,MAAMiG,MAAN,EAAd;AACD,GAHD;AAKAvG,SAAOiC,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC/B3B,UAAMmD,KAAN,GAAcnD,MAAMmD,KAAN,IAAe,CAA7B;AACAnD,UAAMmD,KAAN;AACD,GAHD;AAKAzD,SAAOiC,EAAP,CAAU,MAAV,EAAkB,UAASG,IAAT,EAAe;AAC/B9B,UAAMK,MAAN,GAAeL,MAAMK,MAAN,IAAgB,CAA/B;;AAEA,QAAIyB,KAAKrB,QAAL,GAAgBqB,KAAK+P,IAAL,EAApB,EAAiC;AAC/B/P,WAAK+B,KAAL,GAAa,MAAb;AACD,KAFD,MAEO,IAAI/B,KAAKrB,QAAL,GAAgBqB,KAAK+P,IAAL,KAAc,CAAlC,EAAqC;AAC1C/P,WAAK+B,KAAL,GAAa,QAAb;AACD,KAFM,MAEA;AACL/B,WAAK+B,KAAL,GAAa,MAAb;AACD;;AAED7D,UAAMK,MAAN;AACD,GAZD;AAcAX,SAAOiC,EAAP,CAAU,MAAV,EAAkB,UAASG,IAAT,EAAemC,GAAf,EAAoB;AACpCjE,UAAMO,QAAN,GAAiBP,MAAMO,QAAN,IAAkB,CAAnC;AACAP,UAAMO,QAAN;AACAuB,SAAKmC,GAAL,GAAWA,GAAX;AACA1D,aAAS+J,IAAT,CAAcxI,IAAd;AACD,GALD;AAOApC,SAAOiC,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1B3B,UAAM4N,GAAN,GAAY,IAAIzO,IAAJ,EAAZ;AACAa,UAAMS,QAAN,GAAiB,IAAItB,IAAJ,KAAaa,MAAMwD,KAApC;AACD,GAHD;AAKA9D,SAAOiC,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC9B3B,UAAM8D,OAAN;AACD,GAFD;AAGD,C,CAED;;;;;;;AAMAhF,KAAKsG,SAAL,CAAesO,QAAf,GAA0B,YAAW;AACnC,MAAI1T,QAAQ,KAAKA,KAAjB;AACA,MAAIgT,GAAJ;AAEAF,UAAQC,GAAR,GAJmC,CAMnC;;AACAC,QAAMZ,MAAM,aAAN,EAAqB,GAArB,IACFA,MAAM,OAAN,EAAe,aAAf,CADE,GAEFA,MAAM,OAAN,EAAe,OAAf,CAFJ;AAIAU,UAAQC,GAAR,CAAYC,GAAZ,EACEhT,MAAMK,MAAN,IAAgB,CADlB,EAEEkD,GAAGvD,MAAMS,QAAT,CAFF,EAXmC,CAenC;;AACA,MAAIT,MAAM8D,OAAV,EAAmB;AACjBkP,UAAMZ,MAAM,SAAN,EAAiB,GAAjB,IACFA,MAAM,SAAN,EAAiB,aAAjB,CADJ;AAGAU,YAAQC,GAAR,CAAYC,GAAZ,EAAiBhT,MAAM8D,OAAvB;AACD,GArBkC,CAuBnC;;;AACA,MAAI9D,MAAMO,QAAV,EAAoB;AAClByS,UAAMZ,MAAM,MAAN,EAAc,cAAd,CAAN;AAEAU,YAAQC,GAAR,CAAYC,GAAZ,EAAiBhT,MAAMO,QAAvB;AAEAzB,SAAK4Q,IAAL,CAAU,KAAKnP,QAAf;AACAuS,YAAQC,GAAR;AACD;;AAEDD,UAAQC,GAAR;AACD,CAlCD,C,CAoCA;;;;;;;;;AAQA,SAASY,GAAT,CAAanL,GAAb,EAAkBsE,GAAlB,EAAuB;AACrBtE,QAAM1C,OAAO0C,GAAP,CAAN;AACA,SAAO+C,MAAMuB,MAAMtE,IAAInE,MAAV,GAAmB,CAAzB,EAA4BmF,IAA5B,CAAiC,GAAjC,IAAwChB,GAA/C;AACD,C,CAED;;;;;;;;;AAQA,SAASgL,UAAT,CAAoBvP,GAApB,EAAyB/E,MAAzB,EAAiC;AAC/B,MAAIoG,MAAMsO,UAAU3P,GAAV,EAAe,gBAAf,EAAiC/E,MAAjC,CAAV,CAD+B,CAG/B;;AACA,MAAI2U,QAAQvO,IAAIiH,KAAJ,CAAU,IAAV,CAAZ;;AACA,MAAIsH,MAAMxP,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAI9C,QAAQuE,OAAO+N,MAAMxP,MAAb,EAAqBA,MAAjC;AACAiB,UAAMuO,MAAMzJ,GAAN,CAAU,UAAS5B,GAAT,EAAc7C,CAAd,EAAiB;AAC/B,aAAOgO,IAAI,EAAEhO,CAAN,EAASpE,KAAT,IAAkB,IAAlB,GAAyB,GAAzB,GAA+BiH,GAAtC;AACD,KAFK,EAEHgB,IAFG,CAEE,IAFF,CAAN;AAGD,GAV8B,CAY/B;;;AACAlE,QAAM,OACF8M,MAAM,cAAN,EAAsB,QAAtB,CADE,GAEF,GAFE,GAGFA,MAAM,YAAN,EAAoB,UAApB,CAHE,GAIF,MAJE,GAKF9M,GALE,GAMF,IANJ,CAb+B,CAqB/B;;AACAA,QAAMA,IAAItD,OAAJ,CAAY,KAAZ,EAAmB,QAAnB,CAAN;AACA,SAAOsD,GAAP;AACD,C,CAED;;;;;;;;;AAQA,SAASmO,WAAT,CAAqBxP,GAArB,EAA0B/E,MAA1B,EAAkC;AAChC,MAAI4U,SAAS,QAAb;;AACA,WAASC,OAAT,CAAiBxP,IAAjB,EAAuB;AACrB,QAAIrF,MAAJ,EAAY;AACVqF,aAAOyP,iBAAiBzP,IAAjB,CAAP;AACD;;AACD,QAAIA,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,aAAOuP,SAASG,WAAW,YAAX,EAAyB1P,IAAzB,CAAhB;AACD;;AACD,QAAIA,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,aAAOuP,SAASG,WAAW,cAAX,EAA2B1P,IAA3B,CAAhB;AACD;;AACD,QAAIA,KAAKkE,KAAL,CAAW,MAAX,CAAJ,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,QAAIlE,KAAKkE,KAAL,CAAW,eAAX,CAAJ,EAAiC;AAC/B,aAAO,IAAP;AACD;;AACD,WAAOqL,SAASvP,IAAhB;AACD;;AACD,WAAS2P,QAAT,CAAkB3P,IAAlB,EAAwB;AACtB,WAAO,OAAOA,IAAP,KAAgB,WAAhB,IAA+BA,SAAS,IAA/C;AACD;;AACD,MAAIe,MAAM2L,KAAKkD,WAAL,CAAiB,QAAjB,EAA2BlQ,IAAIkP,MAA/B,EAAuClP,IAAImP,QAA3C,CAAV;AACA,MAAIS,QAAQvO,IAAIiH,KAAJ,CAAU,IAAV,EAAgB6H,MAAhB,CAAuB,CAAvB,CAAZ;AACA,SAAO,aACHH,WAAW,YAAX,EAAyB,YAAzB,CADG,GACsC,GADtC,GAEHA,WAAW,cAAX,EAA2B,UAA3B,CAFG,GAGH,MAHG,GAIHJ,MAAMzJ,GAAN,CAAU2J,OAAV,EAAmBtJ,MAAnB,CAA0ByJ,QAA1B,EAAoC1K,IAApC,CAAyC,IAAzC,CAJJ;AAKD,C,CAED;;;;;;;;;;AASA,SAASoK,SAAT,CAAmB3P,GAAnB,EAAwBjB,IAAxB,EAA8B9D,MAA9B,EAAsC;AACpC,MAAIiU,SAASjU,SAAS8U,iBAAiB/P,IAAIkP,MAArB,CAAT,GAAwClP,IAAIkP,MAAzD;AACA,MAAIC,WAAWlU,SAAS8U,iBAAiB/P,IAAImP,QAArB,CAAT,GAA0CnP,IAAImP,QAA7D;AACA,SAAOnC,KAAK,SAASjO,IAAd,EAAoBmQ,MAApB,EAA4BC,QAA5B,EAAsChJ,GAAtC,CAA0C,UAAS5B,GAAT,EAAc;AAC7D,QAAIA,IAAI6L,KAAR,EAAe;AACb,aAAOJ,WAAW,YAAX,EAAyBzL,IAAIwE,KAA7B,CAAP;AACD;;AACD,QAAIxE,IAAI8L,OAAR,EAAiB;AACf,aAAOL,WAAW,cAAX,EAA2BzL,IAAIwE,KAA/B,CAAP;AACD;;AACD,WAAOxE,IAAIwE,KAAX;AACD,GARM,EAQJxD,IARI,CAQC,EARD,CAAP;AASD,C,CAED;;;;;;;;AAOA,SAASwK,gBAAT,CAA0BzP,IAA1B,EAAgC;AAC9B,SAAOA,KAAKvC,OAAL,CAAa,KAAb,EAAoB,OAApB,EACJA,OADI,CACI,KADJ,EACW,MADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,QAFX,CAAP;AAGD,C,CAED;;;;;;;;;AAQA,SAASiS,UAAT,CAAoBpS,IAApB,EAA0B2G,GAA1B,EAA+B;AAC7B,SAAOA,IAAI+D,KAAJ,CAAU,IAAV,EAAgBnC,GAAhB,CAAoB,UAAS5B,GAAT,EAAc;AACvC,WAAO4J,MAAMvQ,IAAN,EAAY2G,GAAZ,CAAP;AACD,GAFM,EAEJgB,IAFI,CAEC,IAFD,CAAP;AAGD,C,CAED;;;;AAGA,IAAI+K,cAAc3J,OAAOxF,SAAP,CAAiBrC,QAAnC,C,CAEA;;;;;;;;;AAQA,SAASwQ,QAAT,CAAkBiB,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,SAAOF,YAAY3U,IAAZ,CAAiB4U,CAAjB,MAAwBD,YAAY3U,IAAZ,CAAiB6U,CAAjB,CAA/B;AACD,6H","file":"/packages/practicalmeteor_mocha.js","sourcesContent":["import \"./setup\"\nimport MochaRunner  from \"./lib/MochaRunner\"\nimport BaseReporter from \"./reporters/BaseReporter\"\nimport ClientServerBaseReporter from \"./reporters/ClientServerBaseReporter\"\nimport HtmlReporter from \"./reporters/HtmlReporter\"\nimport {hideOtherCSS, hideApp} from 'meteor/tmeasday:test-reporter-helpers';\n\nexport const runTests = () => {\n  hideApp('.mocha-wrapper');\n  hideOtherCSS();\n  MochaRunner.runEverywhere()\n};\n\nlet { before, after, beforeEach, afterEach,\n      describe, xdescribe, it, xit, specify,\n      xspecify, xcontext, context } = global;\n\nexport {MochaRunner}\nexport {BaseReporter, ClientServerBaseReporter, HtmlReporter}\nexport { before, after, beforeEach, afterEach,\ndescribe, xdescribe, it, xit, specify,\nxspecify, xcontext, context };\n","{_}                   = require(\"underscore\")\nTest                  = require(\"mocha/lib/test\")\nSuite                 = require(\"mocha/lib/suite\")\nutils                 = require(\"mocha/lib/utils\")\n{Mongo}               = require(\"meteor/mongo\")\n{Mocha}               = require(\"meteor/practicalmeteor:mocha-core\")\n{EventEmitter}        = require(\"events\")\n{ObjectLogger}        = require(\"meteor/practicalmeteor:loglevel\")\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\")\nlog = new ObjectLogger('MochaRunner', 'info')\n\nclass MochaRunner extends EventEmitter\n\n  @instance: null\n\n  @get: ->\n    MochaRunner.instance ?= new MochaRunner()\n\n  VERSION: \"2.4.5_6\"\n  serverRunEvents: null\n  publishers: {}\n\n\n  constructor: ->\n    try\n      log.enter 'constructor'\n      @utils = utils;\n      @serverRunEvents = new Mongo.Collection('mochaServerRunEvents')\n      if Meteor.isServer\n        Meteor.methods({\n          \"mocha/runServerTests\": @runServerTests.bind(@)\n        })\n        @publish()\n\n    finally\n      log.return()\n\n\n  publish: ->\n    try\n      log.enter(\"publish\")\n      self = @\n      Meteor.publish 'mochaServerRunEvents', (runId)->\n        try\n          log.enter 'publish.mochaServerRunEvents'\n          check(runId, String);\n          expect(@ready).to.be.a('function')\n          self.publishers[runId] ?= @\n          @ready()\n          # You can't return any other value but a Cursor, otherwise it will throw an exception\n          return undefined\n        catch ex\n          log.error ex.stack if ex.stack?\n          throw new Meteor.Error('unknown-error', (if ex.message? then ex.message else undefined), (if ex.stack? then ex.stack else undefined))\n        finally\n          log.return()\n    finally\n      log.return()\n\n\n  runServerTests: (runId, grep)=>\n    try\n      log.enter(\"runServerTests\", runId)\n      check(runId, String);\n      check(grep, Match.Optional(Match.OneOf(null, String)));\n      expect(runId).to.be.a(\"string\")\n      expect(@publishers[runId], \"publisher\").to.be.an(\"object\")\n      expect(Meteor.isServer).to.be.true\n      mochaRunner = new Mocha()\n      @_addTestsToMochaRunner(mocha.suite, mochaRunner.suite)\n\n      mochaRunner.reporter(MeteorPublishReporter, {\n        grep: @escapeGrep(grep)\n        publisher: @publishers[runId]\n      })\n\n      log.info \"Starting server side tests with run id #{runId}\"\n      mochaRunner.run (failures)->\n        log.warn 'failures:', failures\n\n    finally\n      log.return()\n\n\n  # Recursive function that starts with global suites and adds all sub suites within each global suite\n  _addTestsToMochaRunner: (fromSuite, toSuite)->\n    try\n      log.enter(\"_addTestToMochaRunner\")\n\n      addHooks = (hookName)->\n        for hook in fromSuite[\"_#{hookName}\"]\n          toSuite[hookName](hook.title, hook.fn)\n        log.debug(\"Hook #{hookName} for '#{fromSuite.fullTitle()}' added.\")\n\n      addHooks(\"beforeAll\")\n      addHooks(\"afterAll\")\n      addHooks(\"beforeEach\")\n      addHooks(\"afterEach\")\n\n      for test in fromSuite.tests\n        test = new Test(test.title, test.fn)\n        toSuite.addTest(test)\n        log.debug(\"Tests for '#{fromSuite.fullTitle()}' added.\")\n\n      for suite in fromSuite.suites\n        newSuite = Suite.create(toSuite, suite.title)\n        newSuite.timeout(suite.timeout())\n        log.debug(\"Suite #{newSuite.fullTitle()}  added to '#{fromSuite.fullTitle()}'.\")\n        @_addTestsToMochaRunner(suite, newSuite)\n\n    finally\n      log.return()\n\n\n  runEverywhere: ->\n    try\n      log.enter 'runEverywhere'\n      expect(Meteor.isClient).to.be.true\n\n      @runId = Random.id()\n      @serverRunSubscriptionHandle = Meteor.subscribe 'mochaServerRunEvents', @runId, {\n        onReady: _.bind(@onServerRunSubscriptionReady, @)\n        onError: _.bind(@onServerRunSubscriptionError, @)\n      }\n\n    finally\n      log.return()\n\n\n  setReporter: (@reporter)->\n\n  escapeGrep: (grep = '')->\n    try\n      log.enter(\"escapeGrep\", grep)\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n      grep.replace(matchOperatorsRe,  '\\\\$&')\n      return new RegExp(grep)\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionReady: =>\n    try\n      log.enter 'onServerRunSubscriptionReady'\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\")\n      { REPORTERS, reporters} = require(\"../reporters\")\n      query = utils.parseQuery(location.search || '');\n\n      Meteor.call \"mocha/runServerTests\", @runId,  query.grep, (err)->\n        log.debug \"tests started\"\n        log.error(err) if err\n\n      Tracker.autorun =>\n        event = @serverRunEvents.findOne({event: \"run mocha\"})\n        if event?.data.reporter? and _.contains(REPORTERS, event.data.reporter)\n          reporter = reporters[event.data.reporter]\n          @setReporter reporter\n\n        if event?.data.runOrder is \"serial\"\n          reporter = new ClientServerReporter(null, {runOrder: \"serial\"})\n        else if event?.data.runOrder is \"parallel\"\n          mocha.reporter(ClientServerReporter)\n          mocha.run(->)\n\n\n\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionError: (meteorError)->\n    try\n      log.enter 'onServerRunSubscriptionError'\n      log.error meteorError\n    finally\n      log.return()\n\n\nmodule.exports = MochaRunner.get()\n","#/**\n# * Initialize a new `Base` reporter.\n# *\n# * All other reporters generally\n# * inherit from this reporter, providing\n# * stats such as test duration, number\n# * of tests passed / failed etc.\n#*\n#* @param {Runner} runner\n#* @api public\n#*/\n\nclass BaseReporter\n\n  constructor: (@runner, @options)->\n    expect(@runner).to.be.an 'object'\n    expect(@options).to.be.an 'object'\n    @stats = { total: @runner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }\n    @failures = []\n\n    @runner.stats = @stats\n\n    @runner.on 'start', =>\n      @stats.start = new Date\n\n    @runner.on 'suite', (suite)=>\n      @stats.suites++ if not suite.root\n\n    @runner.on 'test end', (test)=>\n      @stats.tests++\n\n    @runner.on 'pass', (test)=>\n      medium = test.slow() / 2\n      if test.duration > test.slow()\n        test.speed = 'slow'\n      else if test.duration > medium\n        test.speed = 'medium'\n      else\n        test.speed = 'fast'\n      @stats.passes++\n\n    @runner.on 'fail', (test, err)=>\n      @stats.failures++;\n      test.err = err\n      @failures.push(test)\n\n    @runner.on 'end', =>\n      @stats.end = new Date\n      @stats.duration = @stats.end - @stats.start\n\n    @runner.on 'pending', =>\n      @stats.pending++\n\n\nmodule.exports = BaseReporter\n","MochaRunner = require(\"../lib/MochaRunner\")\n#/**\n# * All other reporters generally\n# * inherit from this reporter, providing\n# * stats such as test duration, number\n# * of tests passed / failed etc.\n#*\n#* @param {Runner} clientRunner\n#* @param {Runner} serverRunner\n#* @api public\n#*/\n\nclass ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    expect(@clientRunner).to.be.an 'object'\n    expect(@serverRunner).to.be.an 'object'\n    expect(@options).to.be.an 'object'\n\n    @clientStats = {total: @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @serverStats = {total: @serverRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @stats = {total: @serverRunner.total + @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @failures = []\n\n    @clientRunner.stats = @clientStats\n    @serverRunner.stats = @serverStats\n\n    @registerRunnerEvents(\"server\")\n    @registerRunnerEvents(\"client\")\n\n    # Exposes global variables to indicate when tests are done. For example spacejam use this global vars\n    MochaRunner.on \"end all\", =>\n      window.TEST_STATUS = {FAILURES: @stats.failures, DONE: true}\n      window.DONE = true\n      window.FAILURES = @stats.failures\n\n  registerRunnerEvents: (where)->\n\n    @[\"#{where}Runner\"].on 'start', =>\n      start = new Date()\n      @[where+\"Stats\"].start = start\n      # The start time will be the first of the runners that started running\n      @stats.start ?= start\n      ###\n        The total and other stats of the server runner are sent with the 'start' event,\n        so we need to update the total of the stats.\n        Also when running in 'serial' mode (server test first and then client tests),\n        clientRunner.total is undefined because client starts running after server tests end.\n      ###\n      @clientStats.total = @clientRunner.total\n      @serverStats.total = @serverRunner.total\n      @stats.total = @clientStats.total + @serverStats.total\n\n\n    @[\"#{where}Runner\"].on 'suite', (suite)=>\n      if not suite.root\n        @stats.suites++\n        @[where+\"Stats\"].suites++\n\n    @[\"#{where}Runner\"].on 'test end', (test)=>\n      @stats.tests++\n\n    @[\"#{where}Runner\"].on 'pass', (test)=>\n      medium = test.slow() / 2\n\n      if test.duration > test.slow()\n        test.speed = 'slow'\n      else if test.duration > medium\n        test.speed = 'medium'\n      else\n        test.speed = 'fast'\n\n      @[where+\"Stats\"].passes++\n      @stats.passes++\n\n    @[\"#{where}Runner\"].on 'fail', (test, err)=>\n      test.err ?= err\n      @failures.push(test)\n\n      @stats.failures++;\n      @[where+\"Stats\"].failures++;\n\n\n    @[\"#{where}Runner\"].on 'end', =>\n      end = new Date()\n\n      @stats.end = end\n      @[where+\"Stats\"].end = end\n\n      @stats.duration = @stats.end - @stats.start\n      @[where+\"Stats\"].duration = @[where+\"Stats\"].end - @[where+\"Stats\"].start\n\n    @[\"#{where}Runner\"].on 'pending', =>\n      @stats.pending++\n      @[where+\"Stats\"].pending++\n\n\nmodule.exports = ClientServerBaseReporter\n","{_}             = require(\"underscore\")\nMochaRunner     = require(\"./../lib/MochaRunner\")\nMirrorReporter  = require('./MirrorReporter')\n{ObjectLogger}  = require(\"meteor/practicalmeteor:loglevel\")\n{EventEmitter}  = require(\"events\")\n\nlog = new ObjectLogger('ClientServerReporter', 'info')\n\nclass ClientServerReporter\n\n\n  constructor: (@clientRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @serverRunnerProxy = new EventEmitter()\n\n      if @options.runOrder is \"serial\"\n        @clientRunner = new EventEmitter()\n        @runTestsSerially(@clientRunner, @serverRunnerProxy)\n\n      if not MochaRunner.reporter\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\")\n        return\n\n      @reporter = new MochaRunner.reporter(@clientRunner, @serverRunnerProxy, @options)\n\n      # Exposes global states of tests\n      @clientRunner.on \"start\", ->\n        window.mochaIsRunning = true\n\n      @clientRunner.on \"end\", =>\n        window.mochaIsRunning = false\n        window.mochaIsDone = true\n\n        MochaRunner.emit(\"end client\")\n        @clientTestsEnded = true\n        if @serverTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      @serverRunnerProxy.on 'end', =>\n        @serverTestsEnded = true\n        MochaRunner.emit(\"end server\")\n        if @clientTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      MochaRunner.serverRunEvents.find().observe({\n        added: _.bind(@onServerRunnerEvent, @)\n      })\n\n    finally\n      log.return()\n\n\n  runTestsSerially: (clientRunner, serverRunnerProxy)=>\n    try\n      log.enter(\"runTestsSerially\",)\n      serverRunnerProxy.on \"end\", =>\n        mocha.reporter(MirrorReporter, {\n          clientRunner: clientRunner\n        })\n        mocha.run(->)\n\n    finally\n      log.return()\n\n\n  onServerRunnerEvent: (doc)->\n    try\n      log.enter('onServerRunnerEvent')\n      expect(doc).to.be.an('object')\n      expect(doc.event).to.be.a('string')\n      if doc.event is \"run mocha\"\n        return\n      expect(doc.data).to.be.an('object')\n\n      # Required by the standard mocha reporters\n      doc.data.fullTitle = -> return doc.data._fullTitle\n      doc.data.slow = -> return doc.data._slow\n      doc.data.err?.toString = -> \"Error: \" + @message\n\n      if doc.data.parent\n        doc.data.parent.fullTitle = -> return doc.data.parent._fullTitle\n        doc.data.parent.slow = -> return doc.data.parent._slow\n\n\n      if doc.event is 'start'\n        @serverRunnerProxy.stats = doc.data\n        @serverRunnerProxy.total = doc.data.total\n\n      @serverRunnerProxy.emit(doc.event, doc.data, doc.data.err)\n\n    catch ex\n      log.error ex\n    finally\n      log.return()\n\n\nmodule.exports = ClientServerReporter\n","MochaRunner               = require(\"../lib/MochaRunner\")\n{ ObjectLogger }          = require(\"meteor/practicalmeteor:loglevel\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\n\nlog = new ObjectLogger('ConsoleReporter', 'info')\n\n\nclass ConsoleReporter extends  ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    try\n      log.enter('constructor')\n      super(@clientRunner, @serverRunner, @options)\n      MochaRunner.on \"end all\", => @finishAndPrintTestsSummary()\n\n    finally\n      log.return()\n\n  ###\n    Overwriting from ClientServerBaseReporter\n  ###\n  registerRunnerEvents: (where)->\n    try\n      log.enter(\"registerRunnerEvents\")\n      # Call super.registerRunnerEvents to register events from ClientServerBaseReporter first\n      super(where)\n\n      @[\"#{where}Runner\"].on \"start\", => @printReporterHeader(where)\n      @[\"#{where}Runner\"].on 'test end', (test)=> @printTest(test, where)\n\n      # Log for errors with hooks\n      @[\"#{where}Runner\"].on \"fail\", (hook)=> @printTest(hook, where) if hook.type is 'hook'\n\n    finally\n      log.return()\n\n\n  printReporterHeader: (where)=>\n    try\n      log.enter(\"printReporterHeader\", where)\n      return if @options.runOrder isnt 'serial'\n      # i.e client = Client\n      where = where[0].toUpperCase() + where.substr(1)\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"------------------ #{where} tests ------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\n  printTest: (test, where)->\n    try\n      log.enter(\"prinTest\", test)\n      state = test.state or (if test.pending then \"pending\")\n\n      # Since the test are running in parallel we don't need\n      # to specify where they are client or   server tests.\n      if @options.runOrder is 'serial'\n        where = \"\"\n      else\n        # Get first chart 's' or 'c' for client/server\n        where = where[0].toUpperCase() + \": \"\n\n      console.log(\"#{where}#{test.fullTitle()} : #{state}\")\n\n      if test.state is \"failed\"\n        console.log(\"  \" + (test.err.stack || test.err))\n\n      console.log(\"\")\n    finally\n      log.return()\n\n\n  finishAndPrintTestsSummary: ()=>\n    try\n      log.enter(\"finishAndPrintTestsSummary\")\n      return if not @clientStats?.total? or not @serverStats?.total?\n\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"---------------------RESULTS----------------------\")\n      console.log(\"PASSED:\", @stats.passes)\n      console.log(\"FAILED:\", @stats.failures)\n      console.log(\"SKIPPED:\", @stats.pending)\n      console.log(\"TOTAL:\", @stats.total)\n      console.log(\"--------------------------------------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\nmodule.exports = ConsoleReporter\n\n","{ObjectLogger}            = require(\"meteor/practicalmeteor:loglevel\")\nMochaHtmlReporter         = require(\"./html\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\nMochaRunner = require(\"../lib/MochaRunner\")\n\nlog = new ObjectLogger('HtmlReporter', 'info')\n\nclass HtmlReporter extends ClientServerBaseReporter\n\n  constructor: (@clientRunner, @serverRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @addReporterHtml()\n\n      @reporter = new MochaHtmlReporter(@clientRunner)\n      @serverReporter = new MochaHtmlReporter(@serverRunner, {\n        elementIdPrefix: 'server-'\n      })\n      super(@clientRunner, @serverRunner, @options)\n    finally\n      log.return()\n\n  ###\n    Adds the html required by the mocha HTML reporter to the body of the html\n    document. We modified the mocha HTML reporter to be able to display 2 reporters\n    at the same time, one for client tests and one for server tests.\n    TODO: Create a single meteor reactive reporter.\n  ###\n  addReporterHtml: ()=>\n    try\n      log.enter(\"addReporterHtml\")\n      div = document.createElement('div')\n      div.className = 'mocha-wrapper'\n\n      div.innerHTML = '<div class=\"content\">\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Client tests</h1>\n\n          <div id=\"mocha\" class=\"mocha\"></div>\n        </div>\n\n        <div class=\"divider\"></div>\n\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Server tests</h1>\n\n          <div id=\"server-mocha\" class=\"mocha\"></div>\n        </div>\n      </div>'\n\n      document.body.appendChild(div)\n    finally\n      log.return()\n\n\n\nmodule.exports = HtmlReporter\n","{_}            = require(\"underscore\")\nBaseReporter   = require(\"./BaseReporter\")\n{ObjectLogger} = require(\"meteor/practicalmeteor:loglevel\")\n\nlog = new ObjectLogger('MeteorPublishReporter', 'info')\n\nclass MeteorPublishReporter extends BaseReporter\n\n  @publisher: null \n\n  constructor: (runner, options)->\n    try\n      log.enter 'constructor', arguments\n      expect(options.reporterOptions, 'options.reporterOptions').to.be.an('object')\n\n      # Update runner tests\n      runner.grep(options.reporterOptions.grep)\n\n      super(runner, options)\n\n#      @publisher = practical.mocha.MeteorPublishReporter.publisher\n      @publisher = options.reporterOptions.publisher\n      expect(@publisher, '@publisher').to.be.an('object')\n      expect(@publisher.ready, '@publisher.ready').to.be.a('function')\n      expect(@publisher.added, '@publisher.added').to.be.a('function')\n      expect(@publisher.onStop, '@publisher.onStop').to.be.a('function')\n\n\n      @publisher.onStop =>\n        @stopped = true\n      @stopped = false\n      @sequence = 0\n\n      # Make sure we always run within a Fiber\n      @added = Meteor.bindEnvironment(@added, null, @)\n\n      {REPORTERS, HTML_REPORTER} = require(\"./index\")\n      mochaReporter = process.env.MOCHA_REPORTER || HTML_REPORTER\n      if mochaReporter and not _.contains(REPORTERS, mochaReporter)\n        log.info \"Can't find '#{mochaReporter}' reporter. Using '#{HTML_REPORTER}' instead.\"\n        mochaReporter = HTML_REPORTER\n# \n#      # Specify how to run tests 'serial' or 'parallel'\n#      # Running in 'serial' will start server tests first and then client tests\n      @added 'run mocha', { reporter: mochaReporter,   runOrder: process.env.MOCHA_RUN_ORDER || 'parallel' }\n\n      @runner.on 'start', =>\n        try\n          log.enter 'onStart', arguments\n#          @added 'start', {total: @stats.total}\n          @added 'start', @stats\n        finally\n          log.return()\n\n      @runner.on 'suite', (suite)=>\n        try\n          log.enter 'onSuite', arguments\n#          log.info \"suite:\", suite.title\n#          @added 'suite', {title: suite.title, _fullTitle: suite.fullTitle(), root: suite.root}\n\n          @added 'suite', @cleanSuite(suite)\n        finally\n          log.return()\n\n      @runner.on 'suite end', (suite)=>\n        try\n          log.enter 'onSuiteEnd', arguments\n          @added 'suite end', @cleanSuite(suite)\n        finally\n          log.return()\n\n      @runner.on 'test end', (test)=>\n        try\n          log.enter 'onTestEnd', arguments\n          @added 'test end', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'pass', (test)=>\n        try\n          log.enter 'onPass', arguments\n          @added 'pass', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'fail', (test, error)=>\n        try\n          log.enter 'onFail', arguments\n          @added 'fail', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'end', =>\n        try\n          log.enter 'onEnd', arguments\n          @added 'end', @stats\n        finally\n          log.return()\n\n      @runner.on 'pending', (test)=>\n        try\n          log.enter 'onPending', arguments\n          log.debug \"test\", test\n          @added 'pending', @cleanTest(test)\n        finally\n          log.return()\n    finally\n      log.return()\n\n\n  added: (event, data)=>\n    try\n      log.enter 'added', arguments\n#      log.info event, data\n      return if @stopped is true\n      @sequence++\n      doc =\n        _id: \"#{@sequence}\"\n        event: event\n        data: data\n      @publisher.added('mochaServerRunEvents', doc._id, doc)\n    catch ex\n      log.error \"Can't send report data to client.\"\n      log.error \"Error:\", (ex.stack || ex.message)\n      log.error \"Document:\", doc\n    finally\n      log.return()\n\n\n  ###*\n  # Return a plain-object representation of `test`\n  # free of cyclic properties etc.\n  #\n  # @param {Object} test\n  # @return {Object}\n  # @api private\n  ###\n  cleanTest: (test)->\n    try\n      log.enter(\"cleanTest\", arguments)\n\n      properties = [\"title\", \"type\", \"state\",\"speed\", \"pending\",\n        \"duration\", \"async\", \"sync\", \"_timeout\", \"_slow\", \"body\"]\n      return  _.extend(_.pick(test, properties),{\n        _fullTitle: test.fullTitle()\n        parent: @cleanSuite(test.parent)\n        # So we can show the server side test code in the reporter. This property is null ff the test or suite is pending\n        fn: test.fn?.toString()\n        err: @errorJSON(test.err)\n        isServer: true\n      })\n    catch ex\n      log.error(ex)\n\n    finally\n      log.return()\n\n\n  cleanSuite: (suite)->\n    try\n      log.enter(\"cleanSuite\", arguments)\n      return _.extend(_.pick(suite, [\"title\", \"root\", \"pending\"]),{\n        _fullTitle: suite.fullTitle()\n        isServer: true\n      })\n    catch ex\n      log.error(ex)\n    finally\n      log.return()\n\n  ###*\n  # Transform `error` into a JSON object.\n  # @param {Error} err\n  # @return {Object}\n  ###\n\n  errorJSON: (err) =>\n    return if not err\n    ###\n      Only picking the defaults properties define by ECMAScript to avoid problems\n      with custom error that may have properties that can't be stringify such as functions.\n      See https://goo.gl/bsZh3B and https://goo.gl/AFp6KB\n    ###\n    return _.pick(err, [\"name\", \"message\", \"stack\"])\n\n\n\nmodule.exports = MeteorPublishReporter\n","{ObjectLogger}  = require(\"meteor/practicalmeteor:loglevel\")\nlog = new ObjectLogger('MirrorReporter', 'info')\n\nclass MirrorReporter\n\n  constructor:(@mochaReporter, options)->\n\n    clientRunner = options.reporterOptions?.clientRunner\n    expect(clientRunner, \"clientRunner\").to.be.ok\n\n    # The in order to calculate the progress\n    clientRunner.total = @mochaReporter.total\n\n    @mochaReporter.on 'start', =>\n      try\n        log.enter 'onStart', arguments\n        clientRunner.emit.call(clientRunner, 'start')\n      finally\n        log.return()\n\n    @mochaReporter.on 'suite', (suite)=>\n      try\n        log.enter 'onSuite', arguments\n        clientRunner.emit.call(clientRunner, 'suite',suite)\n      finally\n        log.return()\n\n    @mochaReporter.on 'suite end', (suite)=>\n      try\n        log.enter 'onSuiteEnd', arguments\n        clientRunner.emit.call(clientRunner, 'suite end',suite)\n      finally\n        log.return()\n\n    @mochaReporter.on 'test end', (test)=>\n      try\n        log.enter 'onTestEnd', arguments\n        clientRunner.emit.call(clientRunner, 'test end', test)\n      finally\n        log.return()\n\n    @mochaReporter.on 'pass', (test)=>\n      try\n        log.enter 'onPass', arguments\n        clientRunner.emit.call(clientRunner, 'pass', test)\n      finally\n        log.return()\n\n    @mochaReporter.on 'fail', (test, error)=>\n      try\n        log.enter 'onFail', arguments\n        clientRunner.emit.call(clientRunner, 'fail', test, error)\n      finally\n        log.return()\n\n    @mochaReporter.on 'end', =>\n      try\n        log.enter 'onEnd', arguments\n        clientRunner.emit.call(clientRunner, 'end')\n      finally\n        log.return()\n\n    @mochaReporter.on 'pending', (test)=>\n      try\n        log.enter 'onPending', arguments\n        clientRunner.emit.call(clientRunner, 'pending', test)\n\n      finally\n        log.return()\n\n\nmodule.exports = MirrorReporter\n","MochaRunner     = require(\"../lib/MochaRunner\")\nConsoleReporter     = require(\"./ConsoleReporter\")\n\nclass XUnitReporter extends ConsoleReporter\n\n  @VERSION: \"0.1.0\"\n  xUnitPrefix: \"##_meteor_magic##xunit: \"\n\n  constructor:(@clientRunner, @serverRunner, @options)->\n\n    @clientTests = []\n    @serverTests = []\n\n    # ConsoleReporter exposes global variables that indicates when the tests has finished,\n    # so we register the event to print the test suite before ConsoleReporter register its event\n    MochaRunner.on \"end all\", => @printTestSuite()\n\n    super(@clientRunner, @serverRunner, @options)\n\n\n  ###\n    Overwrite from ConsoleReporter\n  ###\n  registerRunnerEvents:(where)->\n\n    super(where)\n\n    @[where + \"Runner\"].on 'pending', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'pass', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'fail', (test) =>\n      @[where+\"Tests\"].push test\n\n\n  printTestSuite: ->\n\n    testSuite = {\n      name: 'Mocha Tests'\n      tests: @stats.total\n      failures: @stats.failures\n      errors: @stats.failures\n      timestamp: (new Date).toUTCString()\n      time: @stats.duration/ 1000 or 0\n      skipped: @stats.pending\n    }\n\n    @write @createTag('testsuite', testSuite, false)\n\n    @clientTests.forEach (test) =>\n      @printTestCase test, \"Client\"\n\n    @serverTests.forEach (test) =>\n      @printTestCase test, \"Server\"\n\n    @write '</testsuite>'\n\n\n  ###*\n  # HTML tag helper.\n  #\n  # @param name\n  # @param attrs\n  # @param close\n  # @param content\n  # @return {string}\n  ###\n  createTag: (name, attrs = {}, close, content) ->\n    end = if close then '/>' else '>'\n    pairs = []\n    tag = undefined\n\n    for key of attrs\n      if Object.prototype.hasOwnProperty.call(attrs, key)\n        pairs.push key + '=\"' + @escape(attrs[key]) + '\"'\n\n    tag = '<' + name + (if pairs.length then ' ' + pairs.join(' ') else '') + end\n\n    if content\n      tag += content + '</' + name + end\n\n    return tag\n\n  ###*\n  # Return cdata escaped CDATA `str`.\n  ###\n\n  cdata: (str) ->\n    '<![CDATA[' + @escape(str) + ']]>'\n\n  ###*\n  # Override done to close the stream (if it's a file).\n  #\n  # @param failures\n  # @param {Function} fn\n  ###\n\n  done:(failures, fn) ->\n      fn failures\n\n  ###*\n  # Write out the given line.\n  #\n  # @param {string} line\n  ###\n\n  write:(line) ->\n    console.log @xUnitPrefix + line\n\n  ###*\n  # Output tag for the given `test.`\n  #\n  # @param {Test} test\n  ###\n\n  printTestCase:(test, where) ->\n    attrs =\n      classname: \"#{where} #{test.parent.fullTitle()}\"\n      name: test.title\n      time: test.duration / 1000 or 0\n\n    if test.state == 'failed'\n      err = test.err\n      stack = @escapeStack(err.stack)\n      @write @createTag('testcase', attrs, false, @createTag('failure', {}, false, @cdata(@escape(err.message) + '\\n' + stack)))\n    else if test.pending\n      @write @createTag('testcase', attrs, false, @createTag('skipped', {}, true))\n    else\n      @write @createTag('testcase', attrs, true)\n    return\n\n\n  ###*\n  # Escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} html\n  # @return {string}\n  ###\n\n  escape: (html) ->\n    String(html)\n      .replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace />/g, '&gt;'\n\n\n  ###*\n  # For each line add the @xUnitPrefix and escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} stack\n  # @return {string}\n  ###\n  escapeStack: (stack = \"\")->\n\n    return stack.split(\"\\n\")\n      .map( (s) => @xUnitPrefix + @escape(s))\n      .join(\"\\n\")\n\n\nmodule.exports = XUnitReporter","/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\nvar Base = require('../../../lib/reporters/base');\nvar utils = require('../../../lib/utils');\nvar Progress = require('../../../lib/browser/progress');\nvar escapeRe = require('escape-string-regexp');\nvar escape = utils.escape;\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTML(runner, options) {\n  Base.call(this, runner);\n  options = options || {};\n  options.elementIdPrefix = options.elementIdPrefix || \"\";\n\n  /**\n   * Stats template.\n   */\n  var statsTemplate = '<ul id=\"'+options.elementIdPrefix+'mocha-stats\"' +\n    ' class=\"mocha-stats\">'\n    + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\n    + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'\n    + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'\n    + '<li class=\"duration\">duration: <em>0</em>s</li>'\n    + '</ul>';\n\n\n  var self = this\n    , stats = this.stats\n    , stat = fragment(statsTemplate)\n    , items = stat.getElementsByTagName('li')\n    , passes = items[1].getElementsByTagName('em')[0]\n    , passesLink = items[1].getElementsByTagName('a')[0]\n    , failures = items[2].getElementsByTagName('em')[0]\n    , failuresLink = items[2].getElementsByTagName('a')[0]\n    , duration = items[3].getElementsByTagName('em')[0]\n    , canvas = stat.getElementsByTagName('canvas')[0]\n    , report = fragment('<ul id=\"'+options.elementIdPrefix+'mocha-report\"' +\n      ' class=\"mocha-report\"></ul>')\n    , stack = [report]\n    , progress\n    , ctx\n    , root = document.getElementById(options.elementIdPrefix+'mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress();\n  }\n\n  if (!root) {\n    return error(options.elementIdPrefix+'mocha div missing, add it to your document');\n  }\n\n  // pass toggle\n  on(passesLink, 'click', function() {\n    unhide();\n    var name = (/pass/).test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test pass');\n    }\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function() {\n    unhide();\n    var name = (/fail/).test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test fail');\n    }\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) {\n    progress.size(40);\n  }\n\n  runner.on('suite', function(suite) {\n    if (suite.root) {\n      return;\n    }\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function(suite) {\n    if (suite.root) {\n      return;\n    }\n    stack.shift();\n  });\n\n  runner.on('fail', function(test) {\n    test.body = test.body || test.fn.toString();\n    // For type = 'test' its possible that the test failed due to multiple\n    // done() calls. So report the issue here.\n    if (test.type === 'hook') {\n      runner.emit('test end', test);\n    }\n  });\n\n  runner.on('test end', function(test) {\n    // TODO: add to stats\n    var percent = stats.tests / this.total * 100 | 0;\n    if (progress) {\n      progress.update(percent).draw(ctx);\n    }\n\n    // update stats\n    var ms = new Date() - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n\n    // test\n    var el;\n    if (test.state === 'passed') {\n      var url = self.testURL(test);\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    } else {\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline\n      var message = test.err.toString();\n\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n      // check for the result of the stringifying.\n      if (message === '[object Error]') {\n        message = test.err.message;\n      }\n\n      if (test.err.stack) {\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);\n        if (indexOfMessage === -1) {\n          stackString = test.err.stack;\n        } else {\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);\n        }\n      } else if (test.err.sourceURL && test.err.line !== undefined) {\n        // Safari doesn't give you a stack. Let's at least provide a source line.\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';\n      }\n\n      stackString = stackString || '';\n\n      if (test.err.htmlMessage && stackString) {\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));\n      } else {\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));\n      }\n    }\n\n    // toggle code\n    // TODO: defer\n    if (!test.pending) {\n      var h2 = el.getElementsByTagName('h2')[0];\n\n      on(h2, 'click', function() {\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';\n      });\n\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));\n      el.appendChild(pre);\n      pre.style.display = 'none';\n    }\n\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) {\n      stack[0].appendChild(el);\n    }\n  });\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n *\n * @param {string} s\n * @return {string} A new URL.\n */\nfunction makeUrl(s) {\n  var search = window.location.search;\n\n  // Remove previous grep query parameter if present\n  if (search) {\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');\n  }\n\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));\n}\n\n/**\n * Provide suite URL.\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function(suite) {\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL.\n *\n * @param {Object} [test]\n */\nHTML.prototype.testURL = function(test) {\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Display error `msg`.\n *\n * @param {string} msg\n */\nfunction error(msg) {\n  document.body.appendChild(fragment('<div class=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n *\n * @param {string} html\n */\nfunction fragment(html) {\n  var args = arguments;\n  var div = document.createElement('div');\n  var i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n      // no default\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n *\n * @param {text} classname\n */\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (!els.length) {\n      suites[i].className += ' hidden';\n    }\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set an element's text contents.\n *\n * @param {HTMLElement} el\n * @param {string} contents\n */\nfunction text(el, contents) {\n  if (el.textContent) {\n    el.textContent = contents;\n  } else {\n    el.innerText = contents;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n","import ConsoleReporter from \"./ConsoleReporter\"\nimport XunitReporter from \"./XunitReporter\"\nimport  HtmlReporter from \"./HtmlReporter\"\n\n\nexport const HTML_REPORTER = 'html';\nexport const CONSOLE_REPORTER = 'console';\nexport const XUNIT_REPORTER = 'xunit';\nexport const REPORTERS = [HTML_REPORTER, CONSOLE_REPORTER, XUNIT_REPORTER];\nlet reporters = { };\nreporters[HTML_REPORTER] = HtmlReporter;\nreporters[CONSOLE_REPORTER] = ConsoleReporter;\nreporters[XUNIT_REPORTER] = XunitReporter;\nexport { reporters }\n","import { mochaInstance } from \"meteor/practicalmeteor:mocha-core\"\nimport setupMochaClient from \"./setupMochaClient\"\n\nif(Meteor.isClient){\n  setupMochaClient()\n}\nif (Meteor.isServer){\n  global.mocha = mochaInstance;\n}","import {meteorInstall} from \"meteor/modules\"\n\n// Here we are creating stubs packages to be availabe on the client side.\n// This must be called before require('mocha')\n// See an example from https://goo.gl/us9YVR\n\nexport default ()=>{\n\n  process.browser = true;\n  \n  require(\"meteor-node-stubs\");\n\n  meteorInstall({\n    node_modules: {\n      \"tty.js\": function (r, e, module) {\n        module.exports = { isatty: ()=>{ return false}}\n      }\n    }\n  });\n\n  meteorInstall({\n    node_modules: {\n      \"constants.js\": function (r, e, module) {\n        module.exports = {\n          test: {'test':'test'}\n        }\n      }\n    }\n  });\n\n\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @api public\n * @param {string|number} val\n * @param {Object} options\n * @return {string|number}\n */\nmodule.exports = function(val, options) {\n  options = options || {};\n  if (typeof val === 'string') {\n    return parse(val);\n  }\n  // https://github.com/mochajs/mocha/pull/1035\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @api private\n * @param {string} str\n * @return {number}\n */\nfunction parse(str) {\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n    default:\n      // No default case\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction shortFormat(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n *\n * @api private\n * @param {number} ms\n * @param {number} n\n * @param {string} name\n */\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar basename = require('path').basename;\nvar debug = require('debug')('mocha:watch');\nvar exists = require('fs').existsSync || require('path').existsSync;\nvar glob = require('glob');\nvar join = require('path').join;\nvar readdirSync = require('fs').readdirSync;\nvar statSync = require('fs').statSync;\nvar watchFile = require('fs').watchFile;\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\nexports.inherits = require('util').inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @api private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n */\nexports.forEach = function(arr, fn, scope) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    fn.call(scope, arr[i], i);\n  }\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @api private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function(obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n * @return {Array}\n */\nexports.map = function(arr, fn, scope) {\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    result.push(fn.call(scope, arr[i], i, arr));\n  }\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Object} obj to find index of\n * @param {number} start\n * @return {number}\n */\nexports.indexOf = function(arr, obj, start) {\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} val Initial value.\n * @return {*}\n */\nexports.reduce = function(arr, fn, val) {\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.filter = function(arr, fn) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) {\n      ret.push(val);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Array} keys\n */\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {\n  var keys = [];\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @api private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function(files, fn) {\n  var options = { interval: 100 };\n  files.forEach(function(file) {\n    debug('file %s', file);\n    watchFile(file, options, function(curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Array.isArray (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Boolean}\n */\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexports.isArray = isArray;\n\n/**\n * Buffer.prototype.toJSON polyfill.\n *\n * @type {Function}\n */\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {\n    return Array.prototype.slice.call(this, 0);\n  };\n}\n\n/**\n * Ignored files.\n *\n * @api private\n * @param {string} path\n * @return {boolean}\n */\nfunction ignored(path) {\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @api private\n * @param {string} dir\n * @param {string[]} [ext=['.js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function(dir, ext, ret) {\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  readdirSync(dir)\n    .filter(ignored)\n    .forEach(function(path) {\n      path = join(dir, path);\n      if (statSync(path).isDirectory()) {\n        exports.files(path, ext, ret);\n      } else if (path.match(re)) {\n        ret.push(path);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function(str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.trim = function(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @api private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function(qs) {\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {\n    var i = pair.indexOf('=');\n    var key = pair.slice(0, i);\n    var val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @api private\n * @param {string} js\n * @return {string}\n */\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @api private\n * @param {string} name\n */\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @api private\n * @param {*} value The value to inspect.\n * @param {string} [type] The type of the value, if known.\n * @returns {string}\n */\nfunction emptyRepresentation(value, type) {\n  type = type || exports.type(value);\n\n  switch (type) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @api private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string}\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n */\nexports.type = function type(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString.call(value)\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\n    .toLowerCase();\n};\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @api private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function(value) {\n  var type = exports.type(value);\n\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {\n    if (type !== 'buffer') {\n      return jsonStringify(value);\n    }\n    var json = value.toJSON();\n    // Based on the toJSON result\n    return jsonStringify(json.data && json.type ? json.data : json, 2)\n      .replace(/,(\\n|$)/g, '$1');\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, type);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @api private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify(object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = isArray(object) ? '[' : '{';\n  var end = isArray(object) ? ']' : '}';\n  var length = object.length || exports.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat(s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify(val) {\n    switch (exports.type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'number':\n        val = val === 0 && (1 / val) === -Infinity // `-0`\n          ? '-0'\n          : val.toString();\n        break;\n      case 'date':\n        var sDate = isNaN(val.getTime())        // Invalid date\n          ? val.toString()\n          : val.toISOString();\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val = (val === '[Function]' || val === '[Circular]')\n          ? val\n          : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!object.hasOwnProperty(i)) {\n      continue; // not my business\n    }\n    --length;\n    str += '\\n ' + repeat(' ', space)\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key\n      + _stringify(object[i])                     // value\n      + (length ? ',' : '');                     // comma\n  }\n\n  return str\n    // [], {}\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);\n}\n\n/**\n * Test if a value is a buffer.\n *\n * @api private\n * @param {*} value The value to test.\n * @return {boolean} True if `value` is a buffer, otherwise false\n */\nexports.isBuffer = function(value) {\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);\n};\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @api private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function(value, stack) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  var type = exports.type(value);\n  function withStack(value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (exports.indexOf(stack, value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (type) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function() {\n        canonicalizedObj = exports.map(value, function(item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, type);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function() {\n        exports.forEach(exports.keys(value).sort(), function(key) {\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n        });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value + '';\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Lookup file names at the given `path`.\n *\n * @api public\n * @param {string} path Base path to start searching from.\n * @param {string[]} extensions File extensions to look for.\n * @param {boolean} recursive Whether or not to recurse into subdirectories.\n * @return {string[]} An array of paths.\n */\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) {\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      }\n      return files;\n    }\n  }\n\n  try {\n    var stat = statSync(path);\n    if (stat.isFile()) {\n      return path;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  readdirSync(path).forEach(function(file) {\n    file = join(path, file);\n    try {\n      var stat = statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {\n      return;\n    }\n    files.push(file);\n  });\n\n  return files;\n};\n\n/**\n * Generate an undefined error with a message warning the user.\n *\n * @return {Error}\n */\n\nexports.undefinedError = function() {\n  return new Error('Caught undefined error, did you throw without specifying what?');\n};\n\n/**\n * Generate an undefined error if `err` is not defined.\n *\n * @param {Error} err\n * @return {Error}\n */\n\nexports.getError = function(err) {\n  return err || exports.undefinedError();\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function() {\n  // TODO: Replace with `process.browser`\n  var slash = '/';\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };\n  var cwd = is.node\n      ? process.cwd() + slash\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n\n  function isMochaInternal(line) {\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))\n      || (~line.indexOf('components' + slash + 'mocha' + slash))\n      || (~line.indexOf(slash + 'mocha.js'));\n  }\n\n  function isNodeInternal(line) {\n    return (~line.indexOf('(timers.js:'))\n      || (~line.indexOf('(events.js:'))\n      || (~line.indexOf('(node.js:'))\n      || (~line.indexOf('(module.js:'))\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))\n      || false;\n  }\n\n  return function(stack) {\n    stack = stack.split('\\n');\n\n    stack = exports.reduce(stack, function(list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      list.push(line.replace(cwd, ''));\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n","/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function(size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @api public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function(text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function(size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function(family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function(n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function(ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n","/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar ms = require('../ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Save timer references to avoid Sinon interfering.\n * See: https://github.com/mochajs/mocha/issues/237\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {string} type\n * @param {string} str\n * @return {string}\n * @api private\n */\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures) {\n  console.log();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message) {\n      message = err.message;\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = stack.indexOf(message);\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function() {\n    stats.start = new Date();\n  });\n\n  runner.on('suite', function(suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function() {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n\n  runner.on('pending', function() {\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @api private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} Diff\n */\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between two strings.\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} The diff.\n */\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/\\@\\@/)) {\n      return null;\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n    + colorLines('diff added', '+ expected') + ' '\n    + colorLines('diff removed', '- actual')\n    + '\\n\\n'\n    + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @api private\n * @param {Error} err\n * @param {string} type\n * @param {boolean} escape\n * @return {string}\n */\nfunction errorDiff(err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @api private\n * @param {string} line\n * @return {string}\n */\nfunction escapeInvisibles(line) {\n  return line.replace(/\\t/g, '<tab>')\n    .replace(/\\r/g, '<CR>')\n    .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @api private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check that a / b have the same type.\n *\n * @api private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n"]}}]