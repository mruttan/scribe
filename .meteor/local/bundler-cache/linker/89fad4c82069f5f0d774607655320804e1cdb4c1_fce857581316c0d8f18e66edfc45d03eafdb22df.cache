[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar mochaInstance, setupGlobals;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"practicalmeteor:mocha-core\":{\"server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/practicalmeteor_mocha-core/server.js                                       //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.export({                                                                        // 1\n  mochaInstance: function () {                                                         // 1\n    return mochaInstance;                                                              // 1\n  },                                                                                   // 1\n  setupGlobals: function () {                                                          // 1\n    return setupGlobals;                                                               // 1\n  },                                                                                   // 1\n  Mocha: function () {                                                                 // 1\n    return Mocha;                                                                      // 1\n  }                                                                                    // 1\n});                                                                                    // 1\nvar Fiber = void 0;                                                                    // 1\nmodule.watch(require(\"fibers\"), {                                                      // 1\n  \"default\": function (v) {                                                            // 1\n    Fiber = v;                                                                         // 1\n  }                                                                                    // 1\n}, 0);                                                                                 // 1\nmodule.watch(require(\"./setup\"));                                                      // 1\nvar Mocha = void 0;                                                                    // 1\nmodule.watch(require(\"mocha\"), {                                                       // 1\n  \"default\": function (v) {                                                            // 1\n    Mocha = v;                                                                         // 1\n  }                                                                                    // 1\n}, 1);                                                                                 // 1\nmodule.watch(require(\"./cleanup\"));                                                    // 1\n                                                                                       //\nfunction setupGlobals(mocha) {                                                         // 6\n  var mochaExports = {};                                                               // 7\n  mocha.suite.emit('pre-require', mochaExports, undefined, mocha); // 1. patch up it and hooks functions so it plays nice w/ fibers\n  // 2. trick to allow binding the suite instance as `this` value                      // 11\n  // inside of suites blocks, to allow e.g. to set custom timeouts.                    // 12\n                                                                                       //\n  var wrapRunnable = function (fn) {                                                   // 13\n    //In Meteor, these blocks will all be invoking Meteor code and must                // 14\n    //run within a fiber. We must therefore wrap each with something like              // 15\n    //bindEnvironment. The function passed off to mocha must have length               // 16\n    //greater than zero if we want mocha to run it asynchronously. That's              // 17\n    //why it uses the Fibers                                                           // 18\n    //We're actually having mocha run all tests asynchronously. This                   // 20\n    //is because mocha cannot tell when a synchronous fiber test has                   // 21\n    //finished, because the test runner runs outside a fiber.                          // 22\n    //It is possible that the mocha test runner could be run from within a             // 24\n    //fiber, but it was unclear to me how that could be done without                   // 25\n    //forking mocha itself.                                                            // 26\n    var wrappedFunction = function (done) {                                            // 28\n      var self = this._runnable;                                                       // 29\n                                                                                       //\n      var run = function () {                                                          // 30\n        try {                                                                          // 31\n          // Sync call                                                                 // 32\n          if (fn.length == 0) {                                                        // 33\n            var result = fn.call(self);                                                // 34\n                                                                                       //\n            if (result && typeof result.then === 'function') {                         // 35\n              self.resetTimeout();                                                     // 36\n              result.then(function () {                                                // 37\n                done(); // Return null so libraries like bluebird do not warn about    // 39\n                // subsequently constructed Promises.                                  // 41\n                                                                                       //\n                return null;                                                           // 42\n              }, function (reason) {                                                   // 43\n                done(reason || new Error('Promise rejected with no or falsy reason'));\n              });                                                                      // 46\n            } else {                                                                   // 47\n              if (self.asyncOnly) {                                                    // 48\n                return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n              }                                                                        // 50\n                                                                                       //\n              done();                                                                  // 52\n            }                                                                          // 53\n          } else {                                                                     // 54\n            fn.call(self, done);                                                       // 56\n          }                                                                            // 57\n        } catch (error) {                                                              // 58\n          done(error);                                                                 // 59\n        }                                                                              // 60\n      };                                                                               // 61\n                                                                                       //\n      if (Fiber.current) return run();                                                 // 63\n      Fiber(run).run();                                                                // 64\n    }; // Show original function source code                                           // 65\n                                                                                       //\n                                                                                       //\n    wrappedFunction.toString = function () {                                           // 68\n      return fn.toString();                                                            // 68\n    };                                                                                 // 68\n                                                                                       //\n    return wrappedFunction;                                                            // 69\n  };                                                                                   // 70\n                                                                                       //\n  mochaExports[\"__org_it\"] = mochaExports[\"it\"];                                       // 72\n                                                                                       //\n  mochaExports['it'] = function (name, func) {                                         // 73\n    // You can create pending tests without a function                                 // 74\n    // http://mochajs.org/#pending-tests                                               // 75\n    // i.e pending test                                                                // 76\n    // it('this is a pending test');                                                   // 77\n    if (func) {                                                                        // 78\n      func = wrapRunnable(func);                                                       // 79\n    }                                                                                  // 80\n                                                                                       //\n    return mochaExports[\"__org_it\"](name, func);                                       // 81\n  };                                                                                   // 82\n                                                                                       //\n  mochaExports.it.skip = mochaExports[\"__org_it\"].skip;                                // 83\n                                                                                       //\n  mochaExports.it.only = function (name, func) {                                       // 84\n    mochaExports[\"__org_it\"].only(name, wrapRunnable(func));                           // 85\n  };                                                                                   // 86\n                                                                                       //\n  var hooks = [\"before\", \"beforeEach\", \"after\", \"afterEach\"];                          // 89\n  hooks.forEach(function (hook) {                                                      // 90\n    mochaExports[\"__org_\" + hook] = mochaExports[hook];                                // 91\n                                                                                       //\n    mochaExports[hook] = function (func) {                                             // 92\n      return mochaExports[\"__org_\" + hook](wrapRunnable(func));                        // 93\n    };                                                                                 // 94\n  });                                                                                  // 95\n  Object.keys(mochaExports).forEach(function (key) {                                   // 97\n    // We don't want original function to be export to global namespace                // 98\n    if (key.indexOf(\"__org_\") > -1 || key.indexOf(\"run\") > -1) {                       // 99\n      return;                                                                          // 100\n    }                                                                                  // 101\n                                                                                       //\n    global[key] = mochaExports[key];                                                   // 102\n  });                                                                                  // 103\n}                                                                                      // 105\n                                                                                       //\n; // Initialize a new `Mocha` test runner instance that test driver packages           // 105\n// can use to ensure they work well with other test driver packages.                   // 108\n                                                                                       //\nvar mochaInstance = new Mocha({                                                        // 109\n  ui: 'bdd',                                                                           // 110\n  ignoreLeaks: true                                                                    // 111\n});                                                                                    // 109\nsetupGlobals(mochaInstance);                                                           // 113\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cleanup.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/practicalmeteor_mocha-core/cleanup.js                                      //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Since setting process.browser = true is counter-intuitive and may result in strange errors with other libraries that depend on this, we have to set this to undefined. See https://goo.gl/WOFnnS\nprocess.browser = undefined;                                                           // 2\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setup.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/practicalmeteor_mocha-core/setup.js                                        //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Mocha it's evaluating if 'process.browser' to add some 'paths' to module using 'module.paths', the problem its that meteor's modules don't have the property 'paths' and its failing to start. See  https://goo.gl/aNO5IM and https://goo.gl/YiNBmL for more details\nprocess.browser = true;                                                                // 2\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"mocha\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/package.json //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nexports.name = \"mocha\";\nexports.version = \"2.4.5\";\nexports.main = \"./index\";\n\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/index.js          //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.exports = process.env.COV\n  ? require('./lib-cov/mocha')\n  : require('./lib/mocha');\n\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/practicalmeteor:mocha-core/server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:mocha-core'] = exports, {\n  mochaInstance: mochaInstance,\n  setupGlobals: setupGlobals\n});\n\n})();\n","servePath":"/packages/practicalmeteor_mocha-core.js","sourceMap":{"version":3,"sources":["packages/practicalmeteor:mocha-core/server.js","packages/practicalmeteor:mocha-core/cleanup.js","packages/practicalmeteor:mocha-core/setup.js"],"names":["module","export","mochaInstance","setupGlobals","Mocha","Fiber","watch","require","v","mocha","mochaExports","suite","emit","undefined","wrapRunnable","fn","wrappedFunction","done","self","_runnable","run","length","result","call","then","resetTimeout","reason","Error","asyncOnly","error","current","toString","name","func","it","skip","only","hooks","forEach","hook","Object","keys","key","indexOf","global","ui","ignoreLeaks","process","browser"],"mappings":"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","file":"/packages/practicalmeteor_mocha-core.js","sourcesContent":["import Fiber from 'fibers';\nimport \"./setup\"\nimport Mocha from 'mocha';\nimport \"./cleanup\"\n\nfunction setupGlobals(mocha) {\n  var mochaExports = {};\n  mocha.suite.emit('pre-require', mochaExports, undefined, mocha);\n\n  // 1. patch up it and hooks functions so it plays nice w/ fibers\n  // 2. trick to allow binding the suite instance as `this` value\n  // inside of suites blocks, to allow e.g. to set custom timeouts.\n  var wrapRunnable = function (fn) {\n    //In Meteor, these blocks will all be invoking Meteor code and must\n    //run within a fiber. We must therefore wrap each with something like\n    //bindEnvironment. The function passed off to mocha must have length\n    //greater than zero if we want mocha to run it asynchronously. That's\n    //why it uses the Fibers\n\n    //We're actually having mocha run all tests asynchronously. This\n    //is because mocha cannot tell when a synchronous fiber test has\n    //finished, because the test runner runs outside a fiber.\n\n    //It is possible that the mocha test runner could be run from within a\n    //fiber, but it was unclear to me how that could be done without\n    //forking mocha itself.\n\n    const wrappedFunction = function (done) {\n      var self = this._runnable;\n      var run = function() {\n        try {\n          // Sync call\n          if (fn.length == 0) {\n            var result = fn.call(self);\n            if (result && typeof result.then === 'function') {\n              self.resetTimeout();\n              result\n                .then(function() {\n                    done();\n                    // Return null so libraries like bluebird do not warn about\n                    // subsequently constructed Promises.\n                    return null;\n                  },\n                  function(reason) {\n                    done(reason || new Error('Promise rejected with no or falsy reason'));\n                  });\n            } else {\n              if (self.asyncOnly) {\n                return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n              }\n\n              done();\n            }\n          }\n          else {\n            fn.call(self, done);\n          }\n        } catch (error) {\n          done(error);\n        }\n      };\n\n      if (Fiber.current) return run();\n      Fiber(run).run();\n    };\n\n    // Show original function source code\n    wrappedFunction.toString = function () { return fn.toString() };\n    return wrappedFunction;\n  };\n\n  mochaExports[\"__org_it\"] = mochaExports[\"it\"];\n  mochaExports['it'] = function (name, func) {\n    // You can create pending tests without a function\n    // http://mochajs.org/#pending-tests\n    // i.e pending test\n    // it('this is a pending test');\n    if (func) {\n      func = wrapRunnable(func);\n    }\n    return mochaExports[\"__org_it\"](name, func);\n  };\n  mochaExports.it.skip = mochaExports[\"__org_it\"].skip;\n  mochaExports.it.only = (name, func) => {\n    mochaExports[\"__org_it\"].only(name, wrapRunnable(func));\n  };\n\n\n  let hooks = [\"before\", \"beforeEach\", \"after\", \"afterEach\"];\n  hooks.forEach((hook)=> {\n    mochaExports[`__org_${hook}`] = mochaExports[hook];\n    mochaExports[hook] = (func)=> {\n     return  mochaExports[`__org_${hook}`](wrapRunnable(func));\n    }\n  });\n\n  Object.keys(mochaExports).forEach((key)=>{\n    // We don't want original function to be export to global namespace\n    if(key.indexOf(\"__org_\") > -1 || key.indexOf(\"run\") > -1){\n      return;\n    }\n    global[key] = mochaExports[key];\n  })\n\n};\n\n// Initialize a new `Mocha` test runner instance that test driver packages\n// can use to ensure they work well with other test driver packages.\nconst mochaInstance = new Mocha({\n  ui: 'bdd',\n  ignoreLeaks: true\n});\nsetupGlobals(mochaInstance);\n \nexport { mochaInstance, setupGlobals, Mocha };\n","// Since setting process.browser = true is counter-intuitive and may result in strange errors with other libraries that depend on this, we have to set this to undefined. See https://goo.gl/WOFnnS\nprocess.browser = undefined;","// Mocha it's evaluating if 'process.browser' to add some 'paths' to module using 'module.paths', the problem its that meteor's modules don't have the property 'paths' and its failing to start. See  https://goo.gl/aNO5IM and https://goo.gl/YiNBmL for more details\nprocess.browser = true;"]}}]