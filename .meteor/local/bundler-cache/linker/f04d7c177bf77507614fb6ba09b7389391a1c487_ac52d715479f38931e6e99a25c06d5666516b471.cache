[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\n\n/* Package-scope variables */\nvar Loglevel, log, __coffeescriptShare, loglevel, ObjectLogger;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/practicalmeteor_loglevel/packages/practicalmeteor_loglevel.js                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/practicalmeteor:loglevel/loglevel-1.2.0.js                                              //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/*! loglevel - v1.2.0 - https://github.com/pimterry/loglevel - (c) 2014 Tim Perry - licensed MIT */ // 1\n                                                                                                    // 2\nLoglevel = function (options) {                                                                     // 3\n    var self = {};                                                                                  // 4\n    if(options && options.prefix) {                                                                 // 5\n        self.prefix = options.prefix;                                                               // 6\n    } else {                                                                                        // 7\n        self.prefix = '';                                                                           // 8\n    }                                                                                               // 9\n    if(options && options.level) {                                                                  // 10\n        self.level = options.level;                                                                 // 11\n    } else {                                                                                        // 12\n        self.level = 'info';                                                                        // 13\n    }                                                                                               // 14\n    var noop = function() {};                                                                       // 15\n    var undefinedType = \"undefined\";                                                                // 16\n                                                                                                    // 17\n    function realMethod(methodName) {                                                               // 18\n        if (typeof console === undefinedType) {                                                     // 19\n            return false; // We can't build a real method without a console to log to               // 20\n        } else if (console[methodName] !== undefined) {                                             // 21\n            return bindMethod(console, methodName);                                                 // 22\n        } else if (console.log !== undefined) {                                                     // 23\n            return bindMethod(console, 'log');                                                      // 24\n        } else {                                                                                    // 25\n            return noop;                                                                            // 26\n        }                                                                                           // 27\n    }                                                                                               // 28\n                                                                                                    // 29\n    function bindMethod(obj, methodName) {                                                          // 30\n        var method = obj[methodName];                                                               // 31\n        if (typeof method.bind === 'function') {                                                    // 32\n            return method.bind(obj, self.prefix);                                                   // 33\n        } else {                                                                                    // 34\n            try {                                                                                   // 35\n                return Function.prototype.bind.call(method, obj, self.prefix);                      // 36\n            } catch (e) {                                                                           // 37\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping                       // 38\n                return function() {                                                                 // 39\n                    return Function.prototype.apply.apply(method, [obj, arguments]);                // 40\n                };                                                                                  // 41\n            }                                                                                       // 42\n        }                                                                                           // 43\n    }                                                                                               // 44\n                                                                                                    // 45\n    function enableLoggingWhenConsoleArrives(methodName, level) {                                   // 46\n        return function () {                                                                        // 47\n            if (typeof console !== undefinedType) {                                                 // 48\n                replaceLoggingMethods(level);                                                       // 49\n                self[methodName].apply(self, arguments);                                            // 50\n            }                                                                                       // 51\n        };                                                                                          // 52\n    }                                                                                               // 53\n                                                                                                    // 54\n    var logMethods = [                                                                              // 55\n        \"trace\",                                                                                    // 56\n        \"fine\",                                                                                     // 57\n        \"debug\",                                                                                    // 58\n        \"info\",                                                                                     // 59\n        \"warn\",                                                                                     // 60\n        \"error\"                                                                                     // 61\n    ];                                                                                              // 62\n                                                                                                    // 63\n    function replaceLoggingMethods(level) {                                                         // 64\n        for (var i = 0; i < logMethods.length; i++) {                                               // 65\n            var methodName = logMethods[i];                                                         // 66\n            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);          // 67\n        }                                                                                           // 68\n    }                                                                                               // 69\n                                                                                                    // 70\n    function persistLevelIfPossible(levelNum) {                                                     // 71\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();                           // 72\n                                                                                                    // 73\n        // Use localStorage if available                                                            // 74\n        try {                                                                                       // 75\n            window.localStorage['loglevel'] = levelName;                                            // 76\n            return;                                                                                 // 77\n        } catch (ignore) {}                                                                         // 78\n                                                                                                    // 79\n        // Use session cookie as fallback                                                           // 80\n        try {                                                                                       // 81\n            window.document.cookie = \"loglevel=\" + levelName + \";\";                                 // 82\n        } catch (ignore) {}                                                                         // 83\n    }                                                                                               // 84\n                                                                                                    // 85\n    function loadPersistedLevel() {                                                                 // 86\n        var storedLevel;                                                                            // 87\n                                                                                                    // 88\n        try {                                                                                       // 89\n            storedLevel = window.localStorage['loglevel'];                                          // 90\n        } catch (ignore) {}                                                                         // 91\n                                                                                                    // 92\n        if (typeof storedLevel === undefinedType) {                                                 // 93\n            try {                                                                                   // 94\n                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];                   // 95\n            } catch (ignore) {}                                                                     // 96\n        }                                                                                           // 97\n                                                                                                    // 98\n        if (self.levels[storedLevel] === undefined) {                                               // 99\n            storedLevel = \"WARN\";                                                                   // 100\n        }                                                                                           // 101\n                                                                                                    // 102\n        self.setLevel(self.levels[storedLevel]);                                                    // 103\n    }                                                                                               // 104\n                                                                                                    // 105\n    /*                                                                                              // 106\n     *                                                                                              // 107\n     * Public API                                                                                   // 108\n     *                                                                                              // 109\n     */                                                                                             // 110\n                                                                                                    // 111\n    self.levels = { \"TRACE\": 0, \"FINE\": 1, \"DEBUG\": 2, \"INFO\": 3, \"WARN\": 4,                        // 112\n        \"ERROR\": 5, \"SILENT\": 6};                                                                   // 113\n                                                                                                    // 114\n    self.methodFactory = function (methodName, level) {                                             // 115\n        return realMethod(methodName) ||                                                            // 116\n            enableLoggingWhenConsoleArrives(methodName, level);                                     // 117\n    };                                                                                              // 118\n                                                                                                    // 119\n    self.setLevel = function (level) {                                                              // 120\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {          // 121\n            level = self.levels[level.toUpperCase()];                                               // 122\n        }                                                                                           // 123\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {               // 124\n            //persistLevelIfPossible(level);                                                        // 125\n            self.level = level;                                                                     // 126\n            replaceLoggingMethods(level);                                                           // 127\n            if (typeof console === undefinedType && level < self.levels.SILENT) {                   // 128\n                return \"No console available for logging\";                                          // 129\n            }                                                                                       // 130\n        } else {                                                                                    // 131\n            throw \"log.setLevel() called with invalid level: \" + level;                             // 132\n        }                                                                                           // 133\n    };                                                                                              // 134\n                                                                                                    // 135\n    self.enableAll = function() {                                                                   // 136\n        self.setLevel(self.levels.TRACE);                                                           // 137\n    };                                                                                              // 138\n                                                                                                    // 139\n    self.disableAll = function() {                                                                  // 140\n        self.setLevel(self.levels.SILENT);                                                          // 141\n    };                                                                                              // 142\n                                                                                                    // 143\n    // Grab the current global log variable in case of overwrite                                    // 144\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;                          // 145\n    self.noConflict = function() {                                                                  // 146\n        if (typeof window !== undefinedType &&                                                      // 147\n            window.log === self) {                                                                  // 148\n            window.log = _log;                                                                      // 149\n        }                                                                                           // 150\n                                                                                                    // 151\n        return self;                                                                                // 152\n    };                                                                                              // 153\n                                                                                                    // 154\n    self.setPrefix = function(prefix) {                                                             // 155\n        if(typeof prefix === undefinedType || prefix === null) {                                    // 156\n            prefix = '';                                                                            // 157\n        }                                                                                           // 158\n        self.prefix = prefix;                                                                       // 159\n        self.setLevel(self.level);                                                                  // 160\n    };                                                                                              // 161\n                                                                                                    // 162\n    //loadPersistedLevel();                                                                         // 163\n    self.setLevel(self.level);                                                                      // 164\n    return self;                                                                                    // 165\n};                                                                                                  // 166\n                                                                                                    // 167\nlog = Loglevel({prefix: 'practicalmeteor:loglevel:'});                                              // 168\n                                                                                                    // 169\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/practicalmeteor:loglevel/LoggerFactory.coffee.js                                        //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n             \n\nif (this.practical == null) {\n  this.practical = {};\n}\n\npractical.LoggerFactory = (function() {\n  var instance;\n\n  function LoggerFactory() {}\n\n  instance = null;\n\n  LoggerFactory.get = function() {\n    return instance != null ? instance : instance = new practical.LoggerFactory();\n  };\n\n  LoggerFactory.prototype._getSettingsLoglevel = function(namespace, defaultLevel) {\n    var globalLevel, level;\n    if (namespace == null) {\n      namespace = '';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    expect(namespace).to.be.a('string');\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);\n    globalLevel = this._getNamespaceLoglevel('global');\n    if (globalLevel != null) {\n      return globalLevel;\n    }\n    if (namespace.length > 0) {\n      level = this._getNamespaceLoglevel(namespace);\n    }\n    if (level == null) {\n      level = this._getNamespaceLoglevel('default');\n    }\n    return level != null ? level : level = defaultLevel;\n  };\n\n  LoggerFactory.prototype._getNamespaceLoglevel = function(namespace) {\n    var level, serverLevel, _ref, _ref1, _ref2, _ref3, _ref4;\n    expect(namespace).to.be.a('string').that.has.length.above(0);\n    level = (_ref = Meteor.settings) != null ? (_ref1 = _ref[\"public\"]) != null ? (_ref2 = _ref1.loglevel) != null ? _ref2[namespace] : void 0 : void 0 : void 0;\n    if (Meteor.isServer) {\n      serverLevel = (_ref3 = Meteor.settings) != null ? (_ref4 = _ref3.loglevel) != null ? _ref4[namespace] : void 0 : void 0;\n      if (serverLevel != null) {\n        level = serverLevel;\n      }\n    }\n    return level;\n  };\n\n  LoggerFactory.prototype.createLogger = function(namespace, defaultLevel) {\n    var options;\n    if (namespace == null) {\n      namespace = '';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    log.debug('LoggerFactory.createLogger()', arguments);\n    expect(namespace).to.be.a('string');\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);\n    expect(Loglevel).to.be.a('function');\n    options = {};\n    if (namespace.length > 0) {\n      options.prefix = namespace + ':';\n    }\n    options.level = this._getSettingsLoglevel(namespace, defaultLevel);\n    return Loglevel(options);\n  };\n\n  LoggerFactory.prototype.createPackageLogger = function(packageName, defaultLevel) {\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    return this.createLogger(packageName, defaultLevel);\n  };\n\n  LoggerFactory.prototype.createAppLogger = function(appName, defaultLevel) {\n    if (appName == null) {\n      appName = 'app';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    return this.createLogger(appName, defaultLevel);\n  };\n\n  return LoggerFactory;\n\n})();\n\nloglevel = practical.LoggerFactory.get();\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/practicalmeteor:loglevel/ObjectLogger.coffee.js                                         //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar              \n  __slice = [].slice;\n\nObjectLogger = (function() {\n  function ObjectLogger(className, defaultLevel) {\n    this.className = className;\n    this.defaultLevel = defaultLevel != null ? defaultLevel : 'info';\n    this.log = loglevel.createLogger(this.className, this.defaultLevel);\n    this.callStack = [];\n    this.log.enter = this.bindMethod(this.enter, 'debug');\n    this.log.fineEnter = this.bindMethod(this.enter, 'fine');\n    this.log[\"return\"] = this.bindMethod(this[\"return\"], 'debug');\n    this.log.fineReturn = this.bindMethod(this[\"return\"], 'fine');\n    return this.log;\n  }\n\n  ObjectLogger.prototype.enter = function() {\n    var args, level, methodName;\n    level = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    if (args.length === 0) {\n      throw new Error('ObjectLogger: No method name provided to enter');\n    }\n    methodName = args.shift();\n    this.callStack.unshift(methodName);\n    this.log.setPrefix(\"\" + this.className + \".\" + methodName + \":\");\n    args.unshift('ENTER');\n    return this.log[level].apply(this.log, args);\n  };\n\n  ObjectLogger.prototype[\"return\"] = function(level) {\n    var methodName;\n    this.log[level].call(this.log, 'RETURN');\n    this.callStack.shift();\n    if (this.callStack.length > 0) {\n      methodName = this.callStack[0];\n      return this.log.setPrefix(\"\" + this.className + \".\" + methodName + \":\");\n    }\n  };\n\n  ObjectLogger.prototype.bindMethod = function(method, level) {\n    var e;\n    if (typeof method.bind === 'function') {\n      return method.bind(this, level);\n    } else {\n      try {\n        return Function.prototype.bind.call(method, this, level);\n      } catch (_error) {\n        e = _error;\n        return (function(_this) {\n          return function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            args.unshift(level);\n            return Function.prototype.apply.apply(method, [_this, args]);\n          };\n        })(this);\n      }\n    }\n  };\n\n  return ObjectLogger;\n\n})();\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:loglevel'] = {}, {\n  loglevel: loglevel,\n  ObjectLogger: ObjectLogger\n});\n\n})();\n","servePath":"/packages/practicalmeteor_loglevel.js"}]