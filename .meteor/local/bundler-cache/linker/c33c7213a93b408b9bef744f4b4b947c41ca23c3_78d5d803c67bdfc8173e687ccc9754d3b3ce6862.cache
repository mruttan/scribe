[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar exports;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"practicalmeteor:mocha-core\":{\"client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha-core/client.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  mocha: function () {                                                                                                 // 1\n    return mocha;                                                                                                      // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nmodule.watch(require(\"mocha/mocha.js\"));                                                                               // 1\n// This defines \"describe\", \"it\", etc.                                                                                 // 4\nmocha.setup({                                                                                                          // 5\n  ui: 'bdd'                                                                                                            // 6\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"mocha\":{\"mocha.js\":function(require,exports,module,__filename,__dirname){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/mocha.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){                                                                                                   // 2\nmodule.exports = process.env.COV                                                                                       // 3\n  ? require('./lib-cov/mocha')                                                                                         // 4\n  : require('./lib/mocha');                                                                                            // 5\n                                                                                                                       // 6\n}).call(this,require('_process'))                                                                                      // 7\n},{\"./lib-cov/mocha\":undefined,\"./lib/mocha\":14,\"_process\":51}],2:[function(require,module,exports){                   // 8\n/* eslint-disable no-unused-vars */                                                                                    // 9\nmodule.exports = function(type) {                                                                                      // 10\n  return function() {};                                                                                                // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\n},{}],3:[function(require,module,exports){                                                                             // 14\n/**                                                                                                                    // 15\n * Module exports.                                                                                                     // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nexports.EventEmitter = EventEmitter;                                                                                   // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Object#hasOwnProperty reference.                                                                                    // 22\n */                                                                                                                    // 23\nvar objToString = Object.prototype.toString;                                                                           // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Check if a value is an array.                                                                                       // 27\n *                                                                                                                     // 28\n * @api private                                                                                                        // 29\n * @param {*} val The value to test.                                                                                   // 30\n * @return {boolean} true if the value is a boolean, otherwise false.                                                  // 31\n */                                                                                                                    // 32\nfunction isArray(val) {                                                                                                // 33\n  return objToString.call(val) === '[object Array]';                                                                   // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Event emitter constructor.                                                                                          // 38\n *                                                                                                                     // 39\n * @api public                                                                                                         // 40\n */                                                                                                                    // 41\nfunction EventEmitter() {}                                                                                             // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Add a listener.                                                                                                     // 45\n *                                                                                                                     // 46\n * @api public                                                                                                         // 47\n * @param {string} name Event name.                                                                                    // 48\n * @param {Function} fn Event handler.                                                                                 // 49\n * @return {EventEmitter} Emitter instance.                                                                            // 50\n */                                                                                                                    // 51\nEventEmitter.prototype.on = function(name, fn) {                                                                       // 52\n  if (!this.$events) {                                                                                                 // 53\n    this.$events = {};                                                                                                 // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  if (!this.$events[name]) {                                                                                           // 57\n    this.$events[name] = fn;                                                                                           // 58\n  } else if (isArray(this.$events[name])) {                                                                            // 59\n    this.$events[name].push(fn);                                                                                       // 60\n  } else {                                                                                                             // 61\n    this.$events[name] = [this.$events[name], fn];                                                                     // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  return this;                                                                                                         // 65\n};                                                                                                                     // 66\n                                                                                                                       // 67\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Adds a volatile listener.                                                                                           // 71\n *                                                                                                                     // 72\n * @api public                                                                                                         // 73\n * @param {string} name Event name.                                                                                    // 74\n * @param {Function} fn Event handler.                                                                                 // 75\n * @return {EventEmitter} Emitter instance.                                                                            // 76\n */                                                                                                                    // 77\nEventEmitter.prototype.once = function(name, fn) {                                                                     // 78\n  var self = this;                                                                                                     // 79\n                                                                                                                       // 80\n  function on() {                                                                                                      // 81\n    self.removeListener(name, on);                                                                                     // 82\n    fn.apply(this, arguments);                                                                                         // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  on.listener = fn;                                                                                                    // 86\n  this.on(name, on);                                                                                                   // 87\n                                                                                                                       // 88\n  return this;                                                                                                         // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Remove a listener.                                                                                                  // 93\n *                                                                                                                     // 94\n * @api public                                                                                                         // 95\n * @param {string} name Event name.                                                                                    // 96\n * @param {Function} fn Event handler.                                                                                 // 97\n * @return {EventEmitter} Emitter instance.                                                                            // 98\n */                                                                                                                    // 99\nEventEmitter.prototype.removeListener = function(name, fn) {                                                           // 100\n  if (this.$events && this.$events[name]) {                                                                            // 101\n    var list = this.$events[name];                                                                                     // 102\n                                                                                                                       // 103\n    if (isArray(list)) {                                                                                               // 104\n      var pos = -1;                                                                                                    // 105\n                                                                                                                       // 106\n      for (var i = 0, l = list.length; i < l; i++) {                                                                   // 107\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {                                         // 108\n          pos = i;                                                                                                     // 109\n          break;                                                                                                       // 110\n        }                                                                                                              // 111\n      }                                                                                                                // 112\n                                                                                                                       // 113\n      if (pos < 0) {                                                                                                   // 114\n        return this;                                                                                                   // 115\n      }                                                                                                                // 116\n                                                                                                                       // 117\n      list.splice(pos, 1);                                                                                             // 118\n                                                                                                                       // 119\n      if (!list.length) {                                                                                              // 120\n        delete this.$events[name];                                                                                     // 121\n      }                                                                                                                // 122\n    } else if (list === fn || (list.listener && list.listener === fn)) {                                               // 123\n      delete this.$events[name];                                                                                       // 124\n    }                                                                                                                  // 125\n  }                                                                                                                    // 126\n                                                                                                                       // 127\n  return this;                                                                                                         // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Remove all listeners for an event.                                                                                  // 132\n *                                                                                                                     // 133\n * @api public                                                                                                         // 134\n * @param {string} name Event name.                                                                                    // 135\n * @return {EventEmitter} Emitter instance.                                                                            // 136\n */                                                                                                                    // 137\nEventEmitter.prototype.removeAllListeners = function(name) {                                                           // 138\n  if (name === undefined) {                                                                                            // 139\n    this.$events = {};                                                                                                 // 140\n    return this;                                                                                                       // 141\n  }                                                                                                                    // 142\n                                                                                                                       // 143\n  if (this.$events && this.$events[name]) {                                                                            // 144\n    this.$events[name] = null;                                                                                         // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  return this;                                                                                                         // 148\n};                                                                                                                     // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Get all listeners for a given event.                                                                                // 152\n *                                                                                                                     // 153\n * @api public                                                                                                         // 154\n * @param {string} name Event name.                                                                                    // 155\n * @return {EventEmitter} Emitter instance.                                                                            // 156\n */                                                                                                                    // 157\nEventEmitter.prototype.listeners = function(name) {                                                                    // 158\n  if (!this.$events) {                                                                                                 // 159\n    this.$events = {};                                                                                                 // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  if (!this.$events[name]) {                                                                                           // 163\n    this.$events[name] = [];                                                                                           // 164\n  }                                                                                                                    // 165\n                                                                                                                       // 166\n  if (!isArray(this.$events[name])) {                                                                                  // 167\n    this.$events[name] = [this.$events[name]];                                                                         // 168\n  }                                                                                                                    // 169\n                                                                                                                       // 170\n  return this.$events[name];                                                                                           // 171\n};                                                                                                                     // 172\n                                                                                                                       // 173\n/**                                                                                                                    // 174\n * Emit an event.                                                                                                      // 175\n *                                                                                                                     // 176\n * @api public                                                                                                         // 177\n * @param {string} name Event name.                                                                                    // 178\n * @return {boolean} true if at least one handler was invoked, else false.                                             // 179\n */                                                                                                                    // 180\nEventEmitter.prototype.emit = function(name) {                                                                         // 181\n  if (!this.$events) {                                                                                                 // 182\n    return false;                                                                                                      // 183\n  }                                                                                                                    // 184\n                                                                                                                       // 185\n  var handler = this.$events[name];                                                                                    // 186\n                                                                                                                       // 187\n  if (!handler) {                                                                                                      // 188\n    return false;                                                                                                      // 189\n  }                                                                                                                    // 190\n                                                                                                                       // 191\n  var args = Array.prototype.slice.call(arguments, 1);                                                                 // 192\n                                                                                                                       // 193\n  if (typeof handler === 'function') {                                                                                 // 194\n    handler.apply(this, args);                                                                                         // 195\n  } else if (isArray(handler)) {                                                                                       // 196\n    var listeners = handler.slice();                                                                                   // 197\n                                                                                                                       // 198\n    for (var i = 0, l = listeners.length; i < l; i++) {                                                                // 199\n      listeners[i].apply(this, args);                                                                                  // 200\n    }                                                                                                                  // 201\n  } else {                                                                                                             // 202\n    return false;                                                                                                      // 203\n  }                                                                                                                    // 204\n                                                                                                                       // 205\n  return true;                                                                                                         // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n},{}],4:[function(require,module,exports){                                                                             // 209\n/**                                                                                                                    // 210\n * Expose `Progress`.                                                                                                  // 211\n */                                                                                                                    // 212\n                                                                                                                       // 213\nmodule.exports = Progress;                                                                                             // 214\n                                                                                                                       // 215\n/**                                                                                                                    // 216\n * Initialize a new `Progress` indicator.                                                                              // 217\n */                                                                                                                    // 218\nfunction Progress() {                                                                                                  // 219\n  this.percent = 0;                                                                                                    // 220\n  this.size(0);                                                                                                        // 221\n  this.fontSize(11);                                                                                                   // 222\n  this.font('helvetica, arial, sans-serif');                                                                           // 223\n}                                                                                                                      // 224\n                                                                                                                       // 225\n/**                                                                                                                    // 226\n * Set progress size to `size`.                                                                                        // 227\n *                                                                                                                     // 228\n * @api public                                                                                                         // 229\n * @param {number} size                                                                                                // 230\n * @return {Progress} Progress instance.                                                                               // 231\n */                                                                                                                    // 232\nProgress.prototype.size = function(size) {                                                                             // 233\n  this._size = size;                                                                                                   // 234\n  return this;                                                                                                         // 235\n};                                                                                                                     // 236\n                                                                                                                       // 237\n/**                                                                                                                    // 238\n * Set text to `text`.                                                                                                 // 239\n *                                                                                                                     // 240\n * @api public                                                                                                         // 241\n * @param {string} text                                                                                                // 242\n * @return {Progress} Progress instance.                                                                               // 243\n */                                                                                                                    // 244\nProgress.prototype.text = function(text) {                                                                             // 245\n  this._text = text;                                                                                                   // 246\n  return this;                                                                                                         // 247\n};                                                                                                                     // 248\n                                                                                                                       // 249\n/**                                                                                                                    // 250\n * Set font size to `size`.                                                                                            // 251\n *                                                                                                                     // 252\n * @api public                                                                                                         // 253\n * @param {number} size                                                                                                // 254\n * @return {Progress} Progress instance.                                                                               // 255\n */                                                                                                                    // 256\nProgress.prototype.fontSize = function(size) {                                                                         // 257\n  this._fontSize = size;                                                                                               // 258\n  return this;                                                                                                         // 259\n};                                                                                                                     // 260\n                                                                                                                       // 261\n/**                                                                                                                    // 262\n * Set font to `family`.                                                                                               // 263\n *                                                                                                                     // 264\n * @param {string} family                                                                                              // 265\n * @return {Progress} Progress instance.                                                                               // 266\n */                                                                                                                    // 267\nProgress.prototype.font = function(family) {                                                                           // 268\n  this._font = family;                                                                                                 // 269\n  return this;                                                                                                         // 270\n};                                                                                                                     // 271\n                                                                                                                       // 272\n/**                                                                                                                    // 273\n * Update percentage to `n`.                                                                                           // 274\n *                                                                                                                     // 275\n * @param {number} n                                                                                                   // 276\n * @return {Progress} Progress instance.                                                                               // 277\n */                                                                                                                    // 278\nProgress.prototype.update = function(n) {                                                                              // 279\n  this.percent = n;                                                                                                    // 280\n  return this;                                                                                                         // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\n/**                                                                                                                    // 284\n * Draw on `ctx`.                                                                                                      // 285\n *                                                                                                                     // 286\n * @param {CanvasRenderingContext2d} ctx                                                                               // 287\n * @return {Progress} Progress instance.                                                                               // 288\n */                                                                                                                    // 289\nProgress.prototype.draw = function(ctx) {                                                                              // 290\n  try {                                                                                                                // 291\n    var percent = Math.min(this.percent, 100);                                                                         // 292\n    var size = this._size;                                                                                             // 293\n    var half = size / 2;                                                                                               // 294\n    var x = half;                                                                                                      // 295\n    var y = half;                                                                                                      // 296\n    var rad = half - 1;                                                                                                // 297\n    var fontSize = this._fontSize;                                                                                     // 298\n                                                                                                                       // 299\n    ctx.font = fontSize + 'px ' + this._font;                                                                          // 300\n                                                                                                                       // 301\n    var angle = Math.PI * 2 * (percent / 100);                                                                         // 302\n    ctx.clearRect(0, 0, size, size);                                                                                   // 303\n                                                                                                                       // 304\n    // outer circle                                                                                                    // 305\n    ctx.strokeStyle = '#9f9f9f';                                                                                       // 306\n    ctx.beginPath();                                                                                                   // 307\n    ctx.arc(x, y, rad, 0, angle, false);                                                                               // 308\n    ctx.stroke();                                                                                                      // 309\n                                                                                                                       // 310\n    // inner circle                                                                                                    // 311\n    ctx.strokeStyle = '#eee';                                                                                          // 312\n    ctx.beginPath();                                                                                                   // 313\n    ctx.arc(x, y, rad - 1, 0, angle, true);                                                                            // 314\n    ctx.stroke();                                                                                                      // 315\n                                                                                                                       // 316\n    // text                                                                                                            // 317\n    var text = this._text || (percent | 0) + '%';                                                                      // 318\n    var w = ctx.measureText(text).width;                                                                               // 319\n                                                                                                                       // 320\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);                                                           // 321\n  } catch (err) {                                                                                                      // 322\n    // don't fail if we can't render progress                                                                          // 323\n  }                                                                                                                    // 324\n  return this;                                                                                                         // 325\n};                                                                                                                     // 326\n                                                                                                                       // 327\n},{}],5:[function(require,module,exports){                                                                             // 328\n(function (global){                                                                                                    // 329\nexports.isatty = function isatty() {                                                                                   // 330\n  return true;                                                                                                         // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\nexports.getWindowSize = function getWindowSize() {                                                                     // 334\n  if ('innerHeight' in global) {                                                                                       // 335\n    return [global.innerHeight, global.innerWidth];                                                                    // 336\n  }                                                                                                                    // 337\n  // In a Web Worker, the DOM Window is not available.                                                                 // 338\n  return [640, 480];                                                                                                   // 339\n};                                                                                                                     // 340\n                                                                                                                       // 341\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],6:[function(require,module,exports){                                                                             // 343\n/**                                                                                                                    // 344\n * Expose `Context`.                                                                                                   // 345\n */                                                                                                                    // 346\n                                                                                                                       // 347\nmodule.exports = Context;                                                                                              // 348\n                                                                                                                       // 349\n/**                                                                                                                    // 350\n * Initialize a new `Context`.                                                                                         // 351\n *                                                                                                                     // 352\n * @api private                                                                                                        // 353\n */                                                                                                                    // 354\nfunction Context() {}                                                                                                  // 355\n                                                                                                                       // 356\n/**                                                                                                                    // 357\n * Set or get the context `Runnable` to `runnable`.                                                                    // 358\n *                                                                                                                     // 359\n * @api private                                                                                                        // 360\n * @param {Runnable} runnable                                                                                          // 361\n * @return {Context}                                                                                                   // 362\n */                                                                                                                    // 363\nContext.prototype.runnable = function(runnable) {                                                                      // 364\n  if (!arguments.length) {                                                                                             // 365\n    return this._runnable;                                                                                             // 366\n  }                                                                                                                    // 367\n  this.test = this._runnable = runnable;                                                                               // 368\n  return this;                                                                                                         // 369\n};                                                                                                                     // 370\n                                                                                                                       // 371\n/**                                                                                                                    // 372\n * Set test timeout `ms`.                                                                                              // 373\n *                                                                                                                     // 374\n * @api private                                                                                                        // 375\n * @param {number} ms                                                                                                  // 376\n * @return {Context} self                                                                                              // 377\n */                                                                                                                    // 378\nContext.prototype.timeout = function(ms) {                                                                             // 379\n  if (!arguments.length) {                                                                                             // 380\n    return this.runnable().timeout();                                                                                  // 381\n  }                                                                                                                    // 382\n  this.runnable().timeout(ms);                                                                                         // 383\n  return this;                                                                                                         // 384\n};                                                                                                                     // 385\n                                                                                                                       // 386\n/**                                                                                                                    // 387\n * Set test timeout `enabled`.                                                                                         // 388\n *                                                                                                                     // 389\n * @api private                                                                                                        // 390\n * @param {boolean} enabled                                                                                            // 391\n * @return {Context} self                                                                                              // 392\n */                                                                                                                    // 393\nContext.prototype.enableTimeouts = function(enabled) {                                                                 // 394\n  this.runnable().enableTimeouts(enabled);                                                                             // 395\n  return this;                                                                                                         // 396\n};                                                                                                                     // 397\n                                                                                                                       // 398\n/**                                                                                                                    // 399\n * Set test slowness threshold `ms`.                                                                                   // 400\n *                                                                                                                     // 401\n * @api private                                                                                                        // 402\n * @param {number} ms                                                                                                  // 403\n * @return {Context} self                                                                                              // 404\n */                                                                                                                    // 405\nContext.prototype.slow = function(ms) {                                                                                // 406\n  this.runnable().slow(ms);                                                                                            // 407\n  return this;                                                                                                         // 408\n};                                                                                                                     // 409\n                                                                                                                       // 410\n/**                                                                                                                    // 411\n * Mark a test as skipped.                                                                                             // 412\n *                                                                                                                     // 413\n * @api private                                                                                                        // 414\n * @return {Context} self                                                                                              // 415\n */                                                                                                                    // 416\nContext.prototype.skip = function() {                                                                                  // 417\n  this.runnable().skip();                                                                                              // 418\n  return this;                                                                                                         // 419\n};                                                                                                                     // 420\n                                                                                                                       // 421\n/**                                                                                                                    // 422\n * Allow a number of retries on failed tests                                                                           // 423\n *                                                                                                                     // 424\n * @api private                                                                                                        // 425\n * @param {number} n                                                                                                   // 426\n * @return {Context} self                                                                                              // 427\n */                                                                                                                    // 428\nContext.prototype.retries = function(n) {                                                                              // 429\n  if (!arguments.length) {                                                                                             // 430\n    return this.runnable().retries();                                                                                  // 431\n  }                                                                                                                    // 432\n  this.runnable().retries(n);                                                                                          // 433\n  return this;                                                                                                         // 434\n};                                                                                                                     // 435\n                                                                                                                       // 436\n/**                                                                                                                    // 437\n * Inspect the context void of `._runnable`.                                                                           // 438\n *                                                                                                                     // 439\n * @api private                                                                                                        // 440\n * @return {string}                                                                                                    // 441\n */                                                                                                                    // 442\nContext.prototype.inspect = function() {                                                                               // 443\n  return JSON.stringify(this, function(key, val) {                                                                     // 444\n    return key === 'runnable' || key === 'test' ? undefined : val;                                                     // 445\n  }, 2);                                                                                                               // 446\n};                                                                                                                     // 447\n                                                                                                                       // 448\n},{}],7:[function(require,module,exports){                                                                             // 449\n/**                                                                                                                    // 450\n * Module dependencies.                                                                                                // 451\n */                                                                                                                    // 452\n                                                                                                                       // 453\nvar Runnable = require('./runnable');                                                                                  // 454\nvar inherits = require('./utils').inherits;                                                                            // 455\n                                                                                                                       // 456\n/**                                                                                                                    // 457\n * Expose `Hook`.                                                                                                      // 458\n */                                                                                                                    // 459\n                                                                                                                       // 460\nmodule.exports = Hook;                                                                                                 // 461\n                                                                                                                       // 462\n/**                                                                                                                    // 463\n * Initialize a new `Hook` with the given `title` and callback `fn`.                                                   // 464\n *                                                                                                                     // 465\n * @param {String} title                                                                                               // 466\n * @param {Function} fn                                                                                                // 467\n * @api private                                                                                                        // 468\n */                                                                                                                    // 469\nfunction Hook(title, fn) {                                                                                             // 470\n  Runnable.call(this, title, fn);                                                                                      // 471\n  this.type = 'hook';                                                                                                  // 472\n}                                                                                                                      // 473\n                                                                                                                       // 474\n/**                                                                                                                    // 475\n * Inherit from `Runnable.prototype`.                                                                                  // 476\n */                                                                                                                    // 477\ninherits(Hook, Runnable);                                                                                              // 478\n                                                                                                                       // 479\n/**                                                                                                                    // 480\n * Get or set the test `err`.                                                                                          // 481\n *                                                                                                                     // 482\n * @param {Error} err                                                                                                  // 483\n * @return {Error}                                                                                                     // 484\n * @api public                                                                                                         // 485\n */                                                                                                                    // 486\nHook.prototype.error = function(err) {                                                                                 // 487\n  if (!arguments.length) {                                                                                             // 488\n    err = this._error;                                                                                                 // 489\n    this._error = null;                                                                                                // 490\n    return err;                                                                                                        // 491\n  }                                                                                                                    // 492\n                                                                                                                       // 493\n  this._error = err;                                                                                                   // 494\n};                                                                                                                     // 495\n                                                                                                                       // 496\n},{\"./runnable\":35,\"./utils\":39}],8:[function(require,module,exports){                                                 // 497\n/**                                                                                                                    // 498\n * Module dependencies.                                                                                                // 499\n */                                                                                                                    // 500\n                                                                                                                       // 501\nvar Suite = require('../suite');                                                                                       // 502\nvar Test = require('../test');                                                                                         // 503\nvar escapeRe = require('escape-string-regexp');                                                                        // 504\n                                                                                                                       // 505\n/**                                                                                                                    // 506\n * BDD-style interface:                                                                                                // 507\n *                                                                                                                     // 508\n *      describe('Array', function() {                                                                                 // 509\n *        describe('#indexOf()', function() {                                                                          // 510\n *          it('should return -1 when not present', function() {                                                       // 511\n *            // ...                                                                                                   // 512\n *          });                                                                                                        // 513\n *                                                                                                                     // 514\n *          it('should return the index when present', function() {                                                    // 515\n *            // ...                                                                                                   // 516\n *          });                                                                                                        // 517\n *        });                                                                                                          // 518\n *      });                                                                                                            // 519\n *                                                                                                                     // 520\n * @param {Suite} suite Root suite.                                                                                    // 521\n */                                                                                                                    // 522\nmodule.exports = function(suite) {                                                                                     // 523\n  var suites = [suite];                                                                                                // 524\n                                                                                                                       // 525\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 526\n    var common = require('./common')(suites, context);                                                                 // 527\n                                                                                                                       // 528\n    context.before = common.before;                                                                                    // 529\n    context.after = common.after;                                                                                      // 530\n    context.beforeEach = common.beforeEach;                                                                            // 531\n    context.afterEach = common.afterEach;                                                                              // 532\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 533\n    /**                                                                                                                // 534\n     * Describe a \"suite\" with the given `title`                                                                       // 535\n     * and callback `fn` containing nested suites                                                                      // 536\n     * and/or tests.                                                                                                   // 537\n     */                                                                                                                // 538\n                                                                                                                       // 539\n    context.describe = context.context = function(title, fn) {                                                         // 540\n      var suite = Suite.create(suites[0], title);                                                                      // 541\n      suite.file = file;                                                                                               // 542\n      suites.unshift(suite);                                                                                           // 543\n      fn.call(suite);                                                                                                  // 544\n      suites.shift();                                                                                                  // 545\n      return suite;                                                                                                    // 546\n    };                                                                                                                 // 547\n                                                                                                                       // 548\n    /**                                                                                                                // 549\n     * Pending describe.                                                                                               // 550\n     */                                                                                                                // 551\n                                                                                                                       // 552\n    context.xdescribe = context.xcontext = context.describe.skip = function(title, fn) {                               // 553\n      var suite = Suite.create(suites[0], title);                                                                      // 554\n      suite.pending = true;                                                                                            // 555\n      suites.unshift(suite);                                                                                           // 556\n      fn.call(suite);                                                                                                  // 557\n      suites.shift();                                                                                                  // 558\n    };                                                                                                                 // 559\n                                                                                                                       // 560\n    /**                                                                                                                // 561\n     * Exclusive suite.                                                                                                // 562\n     */                                                                                                                // 563\n                                                                                                                       // 564\n    context.describe.only = function(title, fn) {                                                                      // 565\n      var suite = context.describe(title, fn);                                                                         // 566\n      mocha.grep(suite.fullTitle());                                                                                   // 567\n      return suite;                                                                                                    // 568\n    };                                                                                                                 // 569\n                                                                                                                       // 570\n    /**                                                                                                                // 571\n     * Describe a specification or test-case                                                                           // 572\n     * with the given `title` and callback `fn`                                                                        // 573\n     * acting as a thunk.                                                                                              // 574\n     */                                                                                                                // 575\n                                                                                                                       // 576\n    var it = context.it = context.specify = function(title, fn) {                                                      // 577\n      var suite = suites[0];                                                                                           // 578\n      if (suite.pending) {                                                                                             // 579\n        fn = null;                                                                                                     // 580\n      }                                                                                                                // 581\n      var test = new Test(title, fn);                                                                                  // 582\n      test.file = file;                                                                                                // 583\n      suite.addTest(test);                                                                                             // 584\n      return test;                                                                                                     // 585\n    };                                                                                                                 // 586\n                                                                                                                       // 587\n    /**                                                                                                                // 588\n     * Exclusive test-case.                                                                                            // 589\n     */                                                                                                                // 590\n                                                                                                                       // 591\n    context.it.only = function(title, fn) {                                                                            // 592\n      var test = it(title, fn);                                                                                        // 593\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 594\n      mocha.grep(new RegExp(reString));                                                                                // 595\n      return test;                                                                                                     // 596\n    };                                                                                                                 // 597\n                                                                                                                       // 598\n    /**                                                                                                                // 599\n     * Pending test case.                                                                                              // 600\n     */                                                                                                                // 601\n                                                                                                                       // 602\n    context.xit = context.xspecify = context.it.skip = function(title) {                                               // 603\n      context.it(title);                                                                                               // 604\n    };                                                                                                                 // 605\n                                                                                                                       // 606\n    /**                                                                                                                // 607\n     * Number of attempts to retry.                                                                                    // 608\n     */                                                                                                                // 609\n    context.it.retries = function(n) {                                                                                 // 610\n      context.retries(n);                                                                                              // 611\n    };                                                                                                                 // 612\n  });                                                                                                                  // 613\n};                                                                                                                     // 614\n                                                                                                                       // 615\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],9:[function(require,module,exports){            // 616\n'use strict';                                                                                                          // 617\n                                                                                                                       // 618\n/**                                                                                                                    // 619\n * Functions common to more than one interface.                                                                        // 620\n *                                                                                                                     // 621\n * @param {Suite[]} suites                                                                                             // 622\n * @param {Context} context                                                                                            // 623\n * @return {Object} An object containing common functions.                                                             // 624\n */                                                                                                                    // 625\nmodule.exports = function(suites, context) {                                                                           // 626\n  return {                                                                                                             // 627\n    /**                                                                                                                // 628\n     * This is only present if flag --delay is passed into Mocha. It triggers                                          // 629\n     * root suite execution.                                                                                           // 630\n     *                                                                                                                 // 631\n     * @param {Suite} suite The root wuite.                                                                            // 632\n     * @return {Function} A function which runs the root suite                                                         // 633\n     */                                                                                                                // 634\n    runWithSuite: function runWithSuite(suite) {                                                                       // 635\n      return function run() {                                                                                          // 636\n        suite.run();                                                                                                   // 637\n      };                                                                                                               // 638\n    },                                                                                                                 // 639\n                                                                                                                       // 640\n    /**                                                                                                                // 641\n     * Execute before running tests.                                                                                   // 642\n     *                                                                                                                 // 643\n     * @param {string} name                                                                                            // 644\n     * @param {Function} fn                                                                                            // 645\n     */                                                                                                                // 646\n    before: function(name, fn) {                                                                                       // 647\n      suites[0].beforeAll(name, fn);                                                                                   // 648\n    },                                                                                                                 // 649\n                                                                                                                       // 650\n    /**                                                                                                                // 651\n     * Execute after running tests.                                                                                    // 652\n     *                                                                                                                 // 653\n     * @param {string} name                                                                                            // 654\n     * @param {Function} fn                                                                                            // 655\n     */                                                                                                                // 656\n    after: function(name, fn) {                                                                                        // 657\n      suites[0].afterAll(name, fn);                                                                                    // 658\n    },                                                                                                                 // 659\n                                                                                                                       // 660\n    /**                                                                                                                // 661\n     * Execute before each test case.                                                                                  // 662\n     *                                                                                                                 // 663\n     * @param {string} name                                                                                            // 664\n     * @param {Function} fn                                                                                            // 665\n     */                                                                                                                // 666\n    beforeEach: function(name, fn) {                                                                                   // 667\n      suites[0].beforeEach(name, fn);                                                                                  // 668\n    },                                                                                                                 // 669\n                                                                                                                       // 670\n    /**                                                                                                                // 671\n     * Execute after each test case.                                                                                   // 672\n     *                                                                                                                 // 673\n     * @param {string} name                                                                                            // 674\n     * @param {Function} fn                                                                                            // 675\n     */                                                                                                                // 676\n    afterEach: function(name, fn) {                                                                                    // 677\n      suites[0].afterEach(name, fn);                                                                                   // 678\n    },                                                                                                                 // 679\n                                                                                                                       // 680\n    test: {                                                                                                            // 681\n      /**                                                                                                              // 682\n       * Pending test case.                                                                                            // 683\n       *                                                                                                               // 684\n       * @param {string} title                                                                                         // 685\n       */                                                                                                              // 686\n      skip: function(title) {                                                                                          // 687\n        context.test(title);                                                                                           // 688\n      },                                                                                                               // 689\n                                                                                                                       // 690\n      /**                                                                                                              // 691\n       * Number of retry attempts                                                                                      // 692\n       *                                                                                                               // 693\n       * @param {string} n                                                                                             // 694\n       */                                                                                                              // 695\n      retries: function(n) {                                                                                           // 696\n        context.retries(n);                                                                                            // 697\n      }                                                                                                                // 698\n    }                                                                                                                  // 699\n  };                                                                                                                   // 700\n};                                                                                                                     // 701\n                                                                                                                       // 702\n},{}],10:[function(require,module,exports){                                                                            // 703\n/**                                                                                                                    // 704\n * Module dependencies.                                                                                                // 705\n */                                                                                                                    // 706\n                                                                                                                       // 707\nvar Suite = require('../suite');                                                                                       // 708\nvar Test = require('../test');                                                                                         // 709\n                                                                                                                       // 710\n/**                                                                                                                    // 711\n * TDD-style interface:                                                                                                // 712\n *                                                                                                                     // 713\n *     exports.Array = {                                                                                               // 714\n *       '#indexOf()': {                                                                                               // 715\n *         'should return -1 when the value is not present': function() {                                              // 716\n *                                                                                                                     // 717\n *         },                                                                                                          // 718\n *                                                                                                                     // 719\n *         'should return the correct index when the value is present': function() {                                   // 720\n *                                                                                                                     // 721\n *         }                                                                                                           // 722\n *       }                                                                                                             // 723\n *     };                                                                                                              // 724\n *                                                                                                                     // 725\n * @param {Suite} suite Root suite.                                                                                    // 726\n */                                                                                                                    // 727\nmodule.exports = function(suite) {                                                                                     // 728\n  var suites = [suite];                                                                                                // 729\n                                                                                                                       // 730\n  suite.on('require', visit);                                                                                          // 731\n                                                                                                                       // 732\n  function visit(obj, file) {                                                                                          // 733\n    var suite;                                                                                                         // 734\n    for (var key in obj) {                                                                                             // 735\n      if (typeof obj[key] === 'function') {                                                                            // 736\n        var fn = obj[key];                                                                                             // 737\n        switch (key) {                                                                                                 // 738\n          case 'before':                                                                                               // 739\n            suites[0].beforeAll(fn);                                                                                   // 740\n            break;                                                                                                     // 741\n          case 'after':                                                                                                // 742\n            suites[0].afterAll(fn);                                                                                    // 743\n            break;                                                                                                     // 744\n          case 'beforeEach':                                                                                           // 745\n            suites[0].beforeEach(fn);                                                                                  // 746\n            break;                                                                                                     // 747\n          case 'afterEach':                                                                                            // 748\n            suites[0].afterEach(fn);                                                                                   // 749\n            break;                                                                                                     // 750\n          default:                                                                                                     // 751\n            var test = new Test(key, fn);                                                                              // 752\n            test.file = file;                                                                                          // 753\n            suites[0].addTest(test);                                                                                   // 754\n        }                                                                                                              // 755\n      } else {                                                                                                         // 756\n        suite = Suite.create(suites[0], key);                                                                          // 757\n        suites.unshift(suite);                                                                                         // 758\n        visit(obj[key], file);                                                                                         // 759\n        suites.shift();                                                                                                // 760\n      }                                                                                                                // 761\n    }                                                                                                                  // 762\n  }                                                                                                                    // 763\n};                                                                                                                     // 764\n                                                                                                                       // 765\n},{\"../suite\":37,\"../test\":38}],11:[function(require,module,exports){                                                  // 766\nexports.bdd = require('./bdd');                                                                                        // 767\nexports.tdd = require('./tdd');                                                                                        // 768\nexports.qunit = require('./qunit');                                                                                    // 769\nexports.exports = require('./exports');                                                                                // 770\n                                                                                                                       // 771\n},{\"./bdd\":8,\"./exports\":10,\"./qunit\":12,\"./tdd\":13}],12:[function(require,module,exports){                            // 772\n/**                                                                                                                    // 773\n * Module dependencies.                                                                                                // 774\n */                                                                                                                    // 775\n                                                                                                                       // 776\nvar Suite = require('../suite');                                                                                       // 777\nvar Test = require('../test');                                                                                         // 778\nvar escapeRe = require('escape-string-regexp');                                                                        // 779\n                                                                                                                       // 780\n/**                                                                                                                    // 781\n * QUnit-style interface:                                                                                              // 782\n *                                                                                                                     // 783\n *     suite('Array');                                                                                                 // 784\n *                                                                                                                     // 785\n *     test('#length', function() {                                                                                    // 786\n *       var arr = [1,2,3];                                                                                            // 787\n *       ok(arr.length == 3);                                                                                          // 788\n *     });                                                                                                             // 789\n *                                                                                                                     // 790\n *     test('#indexOf()', function() {                                                                                 // 791\n *       var arr = [1,2,3];                                                                                            // 792\n *       ok(arr.indexOf(1) == 0);                                                                                      // 793\n *       ok(arr.indexOf(2) == 1);                                                                                      // 794\n *       ok(arr.indexOf(3) == 2);                                                                                      // 795\n *     });                                                                                                             // 796\n *                                                                                                                     // 797\n *     suite('String');                                                                                                // 798\n *                                                                                                                     // 799\n *     test('#length', function() {                                                                                    // 800\n *       ok('foo'.length == 3);                                                                                        // 801\n *     });                                                                                                             // 802\n *                                                                                                                     // 803\n * @param {Suite} suite Root suite.                                                                                    // 804\n */                                                                                                                    // 805\nmodule.exports = function(suite) {                                                                                     // 806\n  var suites = [suite];                                                                                                // 807\n                                                                                                                       // 808\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 809\n    var common = require('./common')(suites, context);                                                                 // 810\n                                                                                                                       // 811\n    context.before = common.before;                                                                                    // 812\n    context.after = common.after;                                                                                      // 813\n    context.beforeEach = common.beforeEach;                                                                            // 814\n    context.afterEach = common.afterEach;                                                                              // 815\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 816\n    /**                                                                                                                // 817\n     * Describe a \"suite\" with the given `title`.                                                                      // 818\n     */                                                                                                                // 819\n                                                                                                                       // 820\n    context.suite = function(title) {                                                                                  // 821\n      if (suites.length > 1) {                                                                                         // 822\n        suites.shift();                                                                                                // 823\n      }                                                                                                                // 824\n      var suite = Suite.create(suites[0], title);                                                                      // 825\n      suite.file = file;                                                                                               // 826\n      suites.unshift(suite);                                                                                           // 827\n      return suite;                                                                                                    // 828\n    };                                                                                                                 // 829\n                                                                                                                       // 830\n    /**                                                                                                                // 831\n     * Exclusive test-case.                                                                                            // 832\n     */                                                                                                                // 833\n                                                                                                                       // 834\n    context.suite.only = function(title, fn) {                                                                         // 835\n      var suite = context.suite(title, fn);                                                                            // 836\n      mocha.grep(suite.fullTitle());                                                                                   // 837\n    };                                                                                                                 // 838\n                                                                                                                       // 839\n    /**                                                                                                                // 840\n     * Describe a specification or test-case                                                                           // 841\n     * with the given `title` and callback `fn`                                                                        // 842\n     * acting as a thunk.                                                                                              // 843\n     */                                                                                                                // 844\n                                                                                                                       // 845\n    context.test = function(title, fn) {                                                                               // 846\n      var test = new Test(title, fn);                                                                                  // 847\n      test.file = file;                                                                                                // 848\n      suites[0].addTest(test);                                                                                         // 849\n      return test;                                                                                                     // 850\n    };                                                                                                                 // 851\n                                                                                                                       // 852\n    /**                                                                                                                // 853\n     * Exclusive test-case.                                                                                            // 854\n     */                                                                                                                // 855\n                                                                                                                       // 856\n    context.test.only = function(title, fn) {                                                                          // 857\n      var test = context.test(title, fn);                                                                              // 858\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 859\n      mocha.grep(new RegExp(reString));                                                                                // 860\n    };                                                                                                                 // 861\n                                                                                                                       // 862\n    context.test.skip = common.test.skip;                                                                              // 863\n    context.test.retries = common.test.retries;                                                                        // 864\n  });                                                                                                                  // 865\n};                                                                                                                     // 866\n                                                                                                                       // 867\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],13:[function(require,module,exports){           // 868\n/**                                                                                                                    // 869\n * Module dependencies.                                                                                                // 870\n */                                                                                                                    // 871\n                                                                                                                       // 872\nvar Suite = require('../suite');                                                                                       // 873\nvar Test = require('../test');                                                                                         // 874\nvar escapeRe = require('escape-string-regexp');                                                                        // 875\n                                                                                                                       // 876\n/**                                                                                                                    // 877\n * TDD-style interface:                                                                                                // 878\n *                                                                                                                     // 879\n *      suite('Array', function() {                                                                                    // 880\n *        suite('#indexOf()', function() {                                                                             // 881\n *          suiteSetup(function() {                                                                                    // 882\n *                                                                                                                     // 883\n *          });                                                                                                        // 884\n *                                                                                                                     // 885\n *          test('should return -1 when not present', function() {                                                     // 886\n *                                                                                                                     // 887\n *          });                                                                                                        // 888\n *                                                                                                                     // 889\n *          test('should return the index when present', function() {                                                  // 890\n *                                                                                                                     // 891\n *          });                                                                                                        // 892\n *                                                                                                                     // 893\n *          suiteTeardown(function() {                                                                                 // 894\n *                                                                                                                     // 895\n *          });                                                                                                        // 896\n *        });                                                                                                          // 897\n *      });                                                                                                            // 898\n *                                                                                                                     // 899\n * @param {Suite} suite Root suite.                                                                                    // 900\n */                                                                                                                    // 901\nmodule.exports = function(suite) {                                                                                     // 902\n  var suites = [suite];                                                                                                // 903\n                                                                                                                       // 904\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 905\n    var common = require('./common')(suites, context);                                                                 // 906\n                                                                                                                       // 907\n    context.setup = common.beforeEach;                                                                                 // 908\n    context.teardown = common.afterEach;                                                                               // 909\n    context.suiteSetup = common.before;                                                                                // 910\n    context.suiteTeardown = common.after;                                                                              // 911\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 912\n                                                                                                                       // 913\n    /**                                                                                                                // 914\n     * Describe a \"suite\" with the given `title` and callback `fn` containing                                          // 915\n     * nested suites and/or tests.                                                                                     // 916\n     */                                                                                                                // 917\n    context.suite = function(title, fn) {                                                                              // 918\n      var suite = Suite.create(suites[0], title);                                                                      // 919\n      suite.file = file;                                                                                               // 920\n      suites.unshift(suite);                                                                                           // 921\n      fn.call(suite);                                                                                                  // 922\n      suites.shift();                                                                                                  // 923\n      return suite;                                                                                                    // 924\n    };                                                                                                                 // 925\n                                                                                                                       // 926\n    /**                                                                                                                // 927\n     * Pending suite.                                                                                                  // 928\n     */                                                                                                                // 929\n    context.suite.skip = function(title, fn) {                                                                         // 930\n      var suite = Suite.create(suites[0], title);                                                                      // 931\n      suite.pending = true;                                                                                            // 932\n      suites.unshift(suite);                                                                                           // 933\n      fn.call(suite);                                                                                                  // 934\n      suites.shift();                                                                                                  // 935\n    };                                                                                                                 // 936\n                                                                                                                       // 937\n    /**                                                                                                                // 938\n     * Exclusive test-case.                                                                                            // 939\n     */                                                                                                                // 940\n    context.suite.only = function(title, fn) {                                                                         // 941\n      var suite = context.suite(title, fn);                                                                            // 942\n      mocha.grep(suite.fullTitle());                                                                                   // 943\n    };                                                                                                                 // 944\n                                                                                                                       // 945\n    /**                                                                                                                // 946\n     * Describe a specification or test-case with the given `title` and                                                // 947\n     * callback `fn` acting as a thunk.                                                                                // 948\n     */                                                                                                                // 949\n    context.test = function(title, fn) {                                                                               // 950\n      var suite = suites[0];                                                                                           // 951\n      if (suite.pending) {                                                                                             // 952\n        fn = null;                                                                                                     // 953\n      }                                                                                                                // 954\n      var test = new Test(title, fn);                                                                                  // 955\n      test.file = file;                                                                                                // 956\n      suite.addTest(test);                                                                                             // 957\n      return test;                                                                                                     // 958\n    };                                                                                                                 // 959\n                                                                                                                       // 960\n    /**                                                                                                                // 961\n     * Exclusive test-case.                                                                                            // 962\n     */                                                                                                                // 963\n                                                                                                                       // 964\n    context.test.only = function(title, fn) {                                                                          // 965\n      var test = context.test(title, fn);                                                                              // 966\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 967\n      mocha.grep(new RegExp(reString));                                                                                // 968\n    };                                                                                                                 // 969\n                                                                                                                       // 970\n    context.test.skip = common.test.skip;                                                                              // 971\n    context.test.retries = common.test.retries;                                                                        // 972\n  });                                                                                                                  // 973\n};                                                                                                                     // 974\n                                                                                                                       // 975\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],14:[function(require,module,exports){           // 976\n(function (process,global,__dirname){                                                                                  // 977\n/*!                                                                                                                    // 978\n * mocha                                                                                                               // 979\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>                                                               // 980\n * MIT Licensed                                                                                                        // 981\n */                                                                                                                    // 982\n                                                                                                                       // 983\n/**                                                                                                                    // 984\n * Module dependencies.                                                                                                // 985\n */                                                                                                                    // 986\n                                                                                                                       // 987\nvar escapeRe = require('escape-string-regexp');                                                                        // 988\nvar path = require('path');                                                                                            // 989\nvar reporters = require('./reporters');                                                                                // 990\nvar utils = require('./utils');                                                                                        // 991\n                                                                                                                       // 992\n/**                                                                                                                    // 993\n * Expose `Mocha`.                                                                                                     // 994\n */                                                                                                                    // 995\n                                                                                                                       // 996\nexports = module.exports = Mocha;                                                                                      // 997\n                                                                                                                       // 998\n/**                                                                                                                    // 999\n * To require local UIs and reporters when running in node.                                                            // 1000\n */                                                                                                                    // 1001\n                                                                                                                       // 1002\nif (!process.browser) {                                                                                                // 1003\n  var cwd = process.cwd();                                                                                             // 1004\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));                                                              // 1005\n}                                                                                                                      // 1006\n                                                                                                                       // 1007\n/**                                                                                                                    // 1008\n * Expose internals.                                                                                                   // 1009\n */                                                                                                                    // 1010\n                                                                                                                       // 1011\nexports.utils = utils;                                                                                                 // 1012\nexports.interfaces = require('./interfaces');                                                                          // 1013\nexports.reporters = reporters;                                                                                         // 1014\nexports.Runnable = require('./runnable');                                                                              // 1015\nexports.Context = require('./context');                                                                                // 1016\nexports.Runner = require('./runner');                                                                                  // 1017\nexports.Suite = require('./suite');                                                                                    // 1018\nexports.Hook = require('./hook');                                                                                      // 1019\nexports.Test = require('./test');                                                                                      // 1020\n                                                                                                                       // 1021\n/**                                                                                                                    // 1022\n * Return image `name` path.                                                                                           // 1023\n *                                                                                                                     // 1024\n * @api private                                                                                                        // 1025\n * @param {string} name                                                                                                // 1026\n * @return {string}                                                                                                    // 1027\n */                                                                                                                    // 1028\nfunction image(name) {                                                                                                 // 1029\n  return path.join(__dirname, '../images', name + '.png');                                                             // 1030\n}                                                                                                                      // 1031\n                                                                                                                       // 1032\n/**                                                                                                                    // 1033\n * Set up mocha with `options`.                                                                                        // 1034\n *                                                                                                                     // 1035\n * Options:                                                                                                            // 1036\n *                                                                                                                     // 1037\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc                                                                           // 1038\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`                                                // 1039\n *   - `globals` array of accepted globals                                                                             // 1040\n *   - `timeout` timeout in milliseconds                                                                               // 1041\n *   - `retries` number of times to retry failed tests                                                                 // 1042\n *   - `bail` bail on the first test failure                                                                           // 1043\n *   - `slow` milliseconds to wait before considering a test slow                                                      // 1044\n *   - `ignoreLeaks` ignore global leaks                                                                               // 1045\n *   - `fullTrace` display the full stack-trace on failing                                                             // 1046\n *   - `grep` string or regexp to filter tests with                                                                    // 1047\n *                                                                                                                     // 1048\n * @param {Object} options                                                                                             // 1049\n * @api public                                                                                                         // 1050\n */                                                                                                                    // 1051\nfunction Mocha(options) {                                                                                              // 1052\n  options = options || {};                                                                                             // 1053\n  this.files = [];                                                                                                     // 1054\n  this.options = options;                                                                                              // 1055\n  if (options.grep) {                                                                                                  // 1056\n    this.grep(new RegExp(options.grep));                                                                               // 1057\n  }                                                                                                                    // 1058\n  if (options.fgrep) {                                                                                                 // 1059\n    this.grep(options.fgrep);                                                                                          // 1060\n  }                                                                                                                    // 1061\n  this.suite = new exports.Suite('', new exports.Context());                                                           // 1062\n  this.ui(options.ui);                                                                                                 // 1063\n  this.bail(options.bail);                                                                                             // 1064\n  this.reporter(options.reporter, options.reporterOptions);                                                            // 1065\n  if (typeof options.timeout !== 'undefined' && options.timeout !== null) {                                            // 1066\n    this.timeout(options.timeout);                                                                                     // 1067\n  }                                                                                                                    // 1068\n  if (typeof options.retries !== 'undefined' && options.retries !== null) {                                            // 1069\n    this.retries(options.retries);                                                                                     // 1070\n  }                                                                                                                    // 1071\n  this.useColors(options.useColors);                                                                                   // 1072\n  if (options.enableTimeouts !== null) {                                                                               // 1073\n    this.enableTimeouts(options.enableTimeouts);                                                                       // 1074\n  }                                                                                                                    // 1075\n  if (options.slow) {                                                                                                  // 1076\n    this.slow(options.slow);                                                                                           // 1077\n  }                                                                                                                    // 1078\n                                                                                                                       // 1079\n  this.suite.on('pre-require', function(context) {                                                                     // 1080\n    exports.afterEach = context.afterEach || context.teardown;                                                         // 1081\n    exports.after = context.after || context.suiteTeardown;                                                            // 1082\n    exports.beforeEach = context.beforeEach || context.setup;                                                          // 1083\n    exports.before = context.before || context.suiteSetup;                                                             // 1084\n    exports.describe = context.describe || context.suite;                                                              // 1085\n    exports.it = context.it || context.test;                                                                           // 1086\n    exports.setup = context.setup || context.beforeEach;                                                               // 1087\n    exports.suiteSetup = context.suiteSetup || context.before;                                                         // 1088\n    exports.suiteTeardown = context.suiteTeardown || context.after;                                                    // 1089\n    exports.suite = context.suite || context.describe;                                                                 // 1090\n    exports.teardown = context.teardown || context.afterEach;                                                          // 1091\n    exports.test = context.test || context.it;                                                                         // 1092\n    exports.run = context.run;                                                                                         // 1093\n  });                                                                                                                  // 1094\n}                                                                                                                      // 1095\n                                                                                                                       // 1096\n/**                                                                                                                    // 1097\n * Enable or disable bailing on the first failure.                                                                     // 1098\n *                                                                                                                     // 1099\n * @api public                                                                                                         // 1100\n * @param {boolean} [bail]                                                                                             // 1101\n */                                                                                                                    // 1102\nMocha.prototype.bail = function(bail) {                                                                                // 1103\n  if (!arguments.length) {                                                                                             // 1104\n    bail = true;                                                                                                       // 1105\n  }                                                                                                                    // 1106\n  this.suite.bail(bail);                                                                                               // 1107\n  return this;                                                                                                         // 1108\n};                                                                                                                     // 1109\n                                                                                                                       // 1110\n/**                                                                                                                    // 1111\n * Add test `file`.                                                                                                    // 1112\n *                                                                                                                     // 1113\n * @api public                                                                                                         // 1114\n * @param {string} file                                                                                                // 1115\n */                                                                                                                    // 1116\nMocha.prototype.addFile = function(file) {                                                                             // 1117\n  this.files.push(file);                                                                                               // 1118\n  return this;                                                                                                         // 1119\n};                                                                                                                     // 1120\n                                                                                                                       // 1121\n/**                                                                                                                    // 1122\n * Set reporter to `reporter`, defaults to \"spec\".                                                                     // 1123\n *                                                                                                                     // 1124\n * @param {String|Function} reporter name or constructor                                                               // 1125\n * @param {Object} reporterOptions optional options                                                                    // 1126\n * @api public                                                                                                         // 1127\n * @param {string|Function} reporter name or constructor                                                               // 1128\n * @param {Object} reporterOptions optional options                                                                    // 1129\n */                                                                                                                    // 1130\nMocha.prototype.reporter = function(reporter, reporterOptions) {                                                       // 1131\n  if (typeof reporter === 'function') {                                                                                // 1132\n    this._reporter = reporter;                                                                                         // 1133\n  } else {                                                                                                             // 1134\n    reporter = reporter || 'spec';                                                                                     // 1135\n    var _reporter;                                                                                                     // 1136\n    // Try to load a built-in reporter.                                                                                // 1137\n    if (reporters[reporter]) {                                                                                         // 1138\n      _reporter = reporters[reporter];                                                                                 // 1139\n    }                                                                                                                  // 1140\n    // Try to load reporters from process.cwd() and node_modules                                                       // 1141\n    if (!_reporter) {                                                                                                  // 1142\n      try {                                                                                                            // 1143\n        _reporter = require(reporter);                                                                                 // 1144\n      } catch (err) {                                                                                                  // 1145\n        err.message.indexOf('Cannot find module') !== -1                                                               // 1146\n          ? console.warn('\"' + reporter + '\" reporter not found')                                                      // 1147\n          : console.warn('\"' + reporter + '\" reporter blew up with error:\\n' + err.stack);                             // 1148\n      }                                                                                                                // 1149\n    }                                                                                                                  // 1150\n    if (!_reporter && reporter === 'teamcity') {                                                                       // 1151\n      console.warn('The Teamcity reporter was moved to a package named '                                               // 1152\n        + 'mocha-teamcity-reporter '                                                                                   // 1153\n        + '(https://npmjs.org/package/mocha-teamcity-reporter).');                                                     // 1154\n    }                                                                                                                  // 1155\n    if (!_reporter) {                                                                                                  // 1156\n      throw new Error('invalid reporter \"' + reporter + '\"');                                                          // 1157\n    }                                                                                                                  // 1158\n    this._reporter = _reporter;                                                                                        // 1159\n  }                                                                                                                    // 1160\n  this.options.reporterOptions = reporterOptions;                                                                      // 1161\n  return this;                                                                                                         // 1162\n};                                                                                                                     // 1163\n                                                                                                                       // 1164\n/**                                                                                                                    // 1165\n * Set test UI `name`, defaults to \"bdd\".                                                                              // 1166\n *                                                                                                                     // 1167\n * @api public                                                                                                         // 1168\n * @param {string} bdd                                                                                                 // 1169\n */                                                                                                                    // 1170\nMocha.prototype.ui = function(name) {                                                                                  // 1171\n  name = name || 'bdd';                                                                                                // 1172\n  this._ui = exports.interfaces[name];                                                                                 // 1173\n  if (!this._ui) {                                                                                                     // 1174\n    try {                                                                                                              // 1175\n      this._ui = require(name);                                                                                        // 1176\n    } catch (err) {                                                                                                    // 1177\n      throw new Error('invalid interface \"' + name + '\"');                                                             // 1178\n    }                                                                                                                  // 1179\n  }                                                                                                                    // 1180\n  this._ui = this._ui(this.suite);                                                                                     // 1181\n  return this;                                                                                                         // 1182\n};                                                                                                                     // 1183\n                                                                                                                       // 1184\n/**                                                                                                                    // 1185\n * Load registered files.                                                                                              // 1186\n *                                                                                                                     // 1187\n * @api private                                                                                                        // 1188\n */                                                                                                                    // 1189\nMocha.prototype.loadFiles = function(fn) {                                                                             // 1190\n  var self = this;                                                                                                     // 1191\n  var suite = this.suite;                                                                                              // 1192\n  this.files.forEach(function(file) {                                                                                  // 1193\n    file = path.resolve(file);                                                                                         // 1194\n    suite.emit('pre-require', global, file, self);                                                                     // 1195\n    suite.emit('require', require(file), file, self);                                                                  // 1196\n    suite.emit('post-require', global, file, self);                                                                    // 1197\n  });                                                                                                                  // 1198\n  fn && fn();                                                                                                          // 1199\n};                                                                                                                     // 1200\n                                                                                                                       // 1201\n/**                                                                                                                    // 1202\n * Enable growl support.                                                                                               // 1203\n *                                                                                                                     // 1204\n * @api private                                                                                                        // 1205\n */                                                                                                                    // 1206\nMocha.prototype._growl = function(runner, reporter) {                                                                  // 1207\n  var notify = require('growl');                                                                                       // 1208\n                                                                                                                       // 1209\n  runner.on('end', function() {                                                                                        // 1210\n    var stats = reporter.stats;                                                                                        // 1211\n    if (stats.failures) {                                                                                              // 1212\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';                                              // 1213\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });                                          // 1214\n    } else {                                                                                                           // 1215\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {                                             // 1216\n        name: 'mocha',                                                                                                 // 1217\n        title: 'Passed',                                                                                               // 1218\n        image: image('ok')                                                                                             // 1219\n      });                                                                                                              // 1220\n    }                                                                                                                  // 1221\n  });                                                                                                                  // 1222\n};                                                                                                                     // 1223\n                                                                                                                       // 1224\n/**                                                                                                                    // 1225\n * Add regexp to grep, if `re` is a string it is escaped.                                                              // 1226\n *                                                                                                                     // 1227\n * @param {RegExp|String} re                                                                                           // 1228\n * @return {Mocha}                                                                                                     // 1229\n * @api public                                                                                                         // 1230\n * @param {RegExp|string} re                                                                                           // 1231\n * @return {Mocha}                                                                                                     // 1232\n */                                                                                                                    // 1233\nMocha.prototype.grep = function(re) {                                                                                  // 1234\n  this.options.grep = typeof re === 'string' ? new RegExp(escapeRe(re)) : re;                                          // 1235\n  return this;                                                                                                         // 1236\n};                                                                                                                     // 1237\n                                                                                                                       // 1238\n/**                                                                                                                    // 1239\n * Invert `.grep()` matches.                                                                                           // 1240\n *                                                                                                                     // 1241\n * @return {Mocha}                                                                                                     // 1242\n * @api public                                                                                                         // 1243\n */                                                                                                                    // 1244\nMocha.prototype.invert = function() {                                                                                  // 1245\n  this.options.invert = true;                                                                                          // 1246\n  return this;                                                                                                         // 1247\n};                                                                                                                     // 1248\n                                                                                                                       // 1249\n/**                                                                                                                    // 1250\n * Ignore global leaks.                                                                                                // 1251\n *                                                                                                                     // 1252\n * @param {Boolean} ignore                                                                                             // 1253\n * @return {Mocha}                                                                                                     // 1254\n * @api public                                                                                                         // 1255\n * @param {boolean} ignore                                                                                             // 1256\n * @return {Mocha}                                                                                                     // 1257\n */                                                                                                                    // 1258\nMocha.prototype.ignoreLeaks = function(ignore) {                                                                       // 1259\n  this.options.ignoreLeaks = Boolean(ignore);                                                                          // 1260\n  return this;                                                                                                         // 1261\n};                                                                                                                     // 1262\n                                                                                                                       // 1263\n/**                                                                                                                    // 1264\n * Enable global leak checking.                                                                                        // 1265\n *                                                                                                                     // 1266\n * @return {Mocha}                                                                                                     // 1267\n * @api public                                                                                                         // 1268\n */                                                                                                                    // 1269\nMocha.prototype.checkLeaks = function() {                                                                              // 1270\n  this.options.ignoreLeaks = false;                                                                                    // 1271\n  return this;                                                                                                         // 1272\n};                                                                                                                     // 1273\n                                                                                                                       // 1274\n/**                                                                                                                    // 1275\n * Display long stack-trace on failing                                                                                 // 1276\n *                                                                                                                     // 1277\n * @return {Mocha}                                                                                                     // 1278\n * @api public                                                                                                         // 1279\n */                                                                                                                    // 1280\nMocha.prototype.fullTrace = function() {                                                                               // 1281\n  this.options.fullStackTrace = true;                                                                                  // 1282\n  return this;                                                                                                         // 1283\n};                                                                                                                     // 1284\n                                                                                                                       // 1285\n/**                                                                                                                    // 1286\n * Enable growl support.                                                                                               // 1287\n *                                                                                                                     // 1288\n * @return {Mocha}                                                                                                     // 1289\n * @api public                                                                                                         // 1290\n */                                                                                                                    // 1291\nMocha.prototype.growl = function() {                                                                                   // 1292\n  this.options.growl = true;                                                                                           // 1293\n  return this;                                                                                                         // 1294\n};                                                                                                                     // 1295\n                                                                                                                       // 1296\n/**                                                                                                                    // 1297\n * Ignore `globals` array or string.                                                                                   // 1298\n *                                                                                                                     // 1299\n * @param {Array|String} globals                                                                                       // 1300\n * @return {Mocha}                                                                                                     // 1301\n * @api public                                                                                                         // 1302\n * @param {Array|string} globals                                                                                       // 1303\n * @return {Mocha}                                                                                                     // 1304\n */                                                                                                                    // 1305\nMocha.prototype.globals = function(globals) {                                                                          // 1306\n  this.options.globals = (this.options.globals || []).concat(globals);                                                 // 1307\n  return this;                                                                                                         // 1308\n};                                                                                                                     // 1309\n                                                                                                                       // 1310\n/**                                                                                                                    // 1311\n * Emit color output.                                                                                                  // 1312\n *                                                                                                                     // 1313\n * @param {Boolean} colors                                                                                             // 1314\n * @return {Mocha}                                                                                                     // 1315\n * @api public                                                                                                         // 1316\n * @param {boolean} colors                                                                                             // 1317\n * @return {Mocha}                                                                                                     // 1318\n */                                                                                                                    // 1319\nMocha.prototype.useColors = function(colors) {                                                                         // 1320\n  if (colors !== undefined) {                                                                                          // 1321\n    this.options.useColors = colors;                                                                                   // 1322\n  }                                                                                                                    // 1323\n  return this;                                                                                                         // 1324\n};                                                                                                                     // 1325\n                                                                                                                       // 1326\n/**                                                                                                                    // 1327\n * Use inline diffs rather than +/-.                                                                                   // 1328\n *                                                                                                                     // 1329\n * @param {Boolean} inlineDiffs                                                                                        // 1330\n * @return {Mocha}                                                                                                     // 1331\n * @api public                                                                                                         // 1332\n * @param {boolean} inlineDiffs                                                                                        // 1333\n * @return {Mocha}                                                                                                     // 1334\n */                                                                                                                    // 1335\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {                                                               // 1336\n  this.options.useInlineDiffs = inlineDiffs !== undefined && inlineDiffs;                                              // 1337\n  return this;                                                                                                         // 1338\n};                                                                                                                     // 1339\n                                                                                                                       // 1340\n/**                                                                                                                    // 1341\n * Set the timeout in milliseconds.                                                                                    // 1342\n *                                                                                                                     // 1343\n * @param {Number} timeout                                                                                             // 1344\n * @return {Mocha}                                                                                                     // 1345\n * @api public                                                                                                         // 1346\n * @param {number} timeout                                                                                             // 1347\n * @return {Mocha}                                                                                                     // 1348\n */                                                                                                                    // 1349\nMocha.prototype.timeout = function(timeout) {                                                                          // 1350\n  this.suite.timeout(timeout);                                                                                         // 1351\n  return this;                                                                                                         // 1352\n};                                                                                                                     // 1353\n                                                                                                                       // 1354\n/**                                                                                                                    // 1355\n * Set the number of times to retry failed tests.                                                                      // 1356\n *                                                                                                                     // 1357\n * @param {Number} retry times                                                                                         // 1358\n * @return {Mocha}                                                                                                     // 1359\n * @api public                                                                                                         // 1360\n */                                                                                                                    // 1361\nMocha.prototype.retries = function(n) {                                                                                // 1362\n  this.suite.retries(n);                                                                                               // 1363\n  return this;                                                                                                         // 1364\n};                                                                                                                     // 1365\n                                                                                                                       // 1366\n/**                                                                                                                    // 1367\n * Set slowness threshold in milliseconds.                                                                             // 1368\n *                                                                                                                     // 1369\n * @param {Number} slow                                                                                                // 1370\n * @return {Mocha}                                                                                                     // 1371\n * @api public                                                                                                         // 1372\n * @param {number} slow                                                                                                // 1373\n * @return {Mocha}                                                                                                     // 1374\n */                                                                                                                    // 1375\nMocha.prototype.slow = function(slow) {                                                                                // 1376\n  this.suite.slow(slow);                                                                                               // 1377\n  return this;                                                                                                         // 1378\n};                                                                                                                     // 1379\n                                                                                                                       // 1380\n/**                                                                                                                    // 1381\n * Enable timeouts.                                                                                                    // 1382\n *                                                                                                                     // 1383\n * @param {Boolean} enabled                                                                                            // 1384\n * @return {Mocha}                                                                                                     // 1385\n * @api public                                                                                                         // 1386\n * @param {boolean} enabled                                                                                            // 1387\n * @return {Mocha}                                                                                                     // 1388\n */                                                                                                                    // 1389\nMocha.prototype.enableTimeouts = function(enabled) {                                                                   // 1390\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined ? enabled : true);                               // 1391\n  return this;                                                                                                         // 1392\n};                                                                                                                     // 1393\n                                                                                                                       // 1394\n/**                                                                                                                    // 1395\n * Makes all tests async (accepting a callback)                                                                        // 1396\n *                                                                                                                     // 1397\n * @return {Mocha}                                                                                                     // 1398\n * @api public                                                                                                         // 1399\n */                                                                                                                    // 1400\nMocha.prototype.asyncOnly = function() {                                                                               // 1401\n  this.options.asyncOnly = true;                                                                                       // 1402\n  return this;                                                                                                         // 1403\n};                                                                                                                     // 1404\n                                                                                                                       // 1405\n/**                                                                                                                    // 1406\n * Disable syntax highlighting (in browser).                                                                           // 1407\n *                                                                                                                     // 1408\n * @api public                                                                                                         // 1409\n */                                                                                                                    // 1410\nMocha.prototype.noHighlighting = function() {                                                                          // 1411\n  this.options.noHighlighting = true;                                                                                  // 1412\n  return this;                                                                                                         // 1413\n};                                                                                                                     // 1414\n                                                                                                                       // 1415\n/**                                                                                                                    // 1416\n * Enable uncaught errors to propagate (in browser).                                                                   // 1417\n *                                                                                                                     // 1418\n * @return {Mocha}                                                                                                     // 1419\n * @api public                                                                                                         // 1420\n */                                                                                                                    // 1421\nMocha.prototype.allowUncaught = function() {                                                                           // 1422\n  this.options.allowUncaught = true;                                                                                   // 1423\n  return this;                                                                                                         // 1424\n};                                                                                                                     // 1425\n                                                                                                                       // 1426\n/**                                                                                                                    // 1427\n * Delay root suite execution.                                                                                         // 1428\n * @returns {Mocha}                                                                                                    // 1429\n */                                                                                                                    // 1430\nMocha.prototype.delay = function delay() {                                                                             // 1431\n  this.options.delay = true;                                                                                           // 1432\n  return this;                                                                                                         // 1433\n};                                                                                                                     // 1434\n                                                                                                                       // 1435\n/**                                                                                                                    // 1436\n * Run tests and invoke `fn()` when complete.                                                                          // 1437\n *                                                                                                                     // 1438\n * @api public                                                                                                         // 1439\n * @param {Function} fn                                                                                                // 1440\n * @return {Runner}                                                                                                    // 1441\n */                                                                                                                    // 1442\nMocha.prototype.run = function(fn) {                                                                                   // 1443\n  if (this.files.length) {                                                                                             // 1444\n    this.loadFiles();                                                                                                  // 1445\n  }                                                                                                                    // 1446\n  var suite = this.suite;                                                                                              // 1447\n  var options = this.options;                                                                                          // 1448\n  options.files = this.files;                                                                                          // 1449\n  var runner = new exports.Runner(suite, options.delay);                                                               // 1450\n  var reporter = new this._reporter(runner, options);                                                                  // 1451\n  runner.ignoreLeaks = options.ignoreLeaks !== false;                                                                  // 1452\n  runner.fullStackTrace = options.fullStackTrace;                                                                      // 1453\n  runner.asyncOnly = options.asyncOnly;                                                                                // 1454\n  runner.allowUncaught = options.allowUncaught;                                                                        // 1455\n  if (options.grep) {                                                                                                  // 1456\n    runner.grep(options.grep, options.invert);                                                                         // 1457\n  }                                                                                                                    // 1458\n  if (options.globals) {                                                                                               // 1459\n    runner.globals(options.globals);                                                                                   // 1460\n  }                                                                                                                    // 1461\n  if (options.growl) {                                                                                                 // 1462\n    this._growl(runner, reporter);                                                                                     // 1463\n  }                                                                                                                    // 1464\n  if (options.useColors !== undefined) {                                                                               // 1465\n    exports.reporters.Base.useColors = options.useColors;                                                              // 1466\n  }                                                                                                                    // 1467\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;                                                         // 1468\n                                                                                                                       // 1469\n  function done(failures) {                                                                                            // 1470\n    if (reporter.done) {                                                                                               // 1471\n      reporter.done(failures, fn);                                                                                     // 1472\n    } else {                                                                                                           // 1473\n      fn && fn(failures);                                                                                              // 1474\n    }                                                                                                                  // 1475\n  }                                                                                                                    // 1476\n                                                                                                                       // 1477\n  return runner.run(done);                                                                                             // 1478\n};                                                                                                                     // 1479\n                                                                                                                       // 1480\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},\"/lib\")\n},{\"./context\":6,\"./hook\":7,\"./interfaces\":11,\"./reporters\":22,\"./runnable\":35,\"./runner\":36,\"./suite\":37,\"./test\":38,\"./utils\":39,\"_process\":51,\"escape-string-regexp\":68,\"growl\":69,\"path\":41}],15:[function(require,module,exports){\n/**                                                                                                                    // 1483\n * Helpers.                                                                                                            // 1484\n */                                                                                                                    // 1485\n                                                                                                                       // 1486\nvar s = 1000;                                                                                                          // 1487\nvar m = s * 60;                                                                                                        // 1488\nvar h = m * 60;                                                                                                        // 1489\nvar d = h * 24;                                                                                                        // 1490\nvar y = d * 365.25;                                                                                                    // 1491\n                                                                                                                       // 1492\n/**                                                                                                                    // 1493\n * Parse or format the given `val`.                                                                                    // 1494\n *                                                                                                                     // 1495\n * Options:                                                                                                            // 1496\n *                                                                                                                     // 1497\n *  - `long` verbose formatting [false]                                                                                // 1498\n *                                                                                                                     // 1499\n * @api public                                                                                                         // 1500\n * @param {string|number} val                                                                                          // 1501\n * @param {Object} options                                                                                             // 1502\n * @return {string|number}                                                                                             // 1503\n */                                                                                                                    // 1504\nmodule.exports = function(val, options) {                                                                              // 1505\n  options = options || {};                                                                                             // 1506\n  if (typeof val === 'string') {                                                                                       // 1507\n    return parse(val);                                                                                                 // 1508\n  }                                                                                                                    // 1509\n  // https://github.com/mochajs/mocha/pull/1035                                                                        // 1510\n  return options['long'] ? longFormat(val) : shortFormat(val);                                                         // 1511\n};                                                                                                                     // 1512\n                                                                                                                       // 1513\n/**                                                                                                                    // 1514\n * Parse the given `str` and return milliseconds.                                                                      // 1515\n *                                                                                                                     // 1516\n * @api private                                                                                                        // 1517\n * @param {string} str                                                                                                 // 1518\n * @return {number}                                                                                                    // 1519\n */                                                                                                                    // 1520\nfunction parse(str) {                                                                                                  // 1521\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);                // 1522\n  if (!match) {                                                                                                        // 1523\n    return;                                                                                                            // 1524\n  }                                                                                                                    // 1525\n  var n = parseFloat(match[1]);                                                                                        // 1526\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 1527\n  switch (type) {                                                                                                      // 1528\n    case 'years':                                                                                                      // 1529\n    case 'year':                                                                                                       // 1530\n    case 'y':                                                                                                          // 1531\n      return n * y;                                                                                                    // 1532\n    case 'days':                                                                                                       // 1533\n    case 'day':                                                                                                        // 1534\n    case 'd':                                                                                                          // 1535\n      return n * d;                                                                                                    // 1536\n    case 'hours':                                                                                                      // 1537\n    case 'hour':                                                                                                       // 1538\n    case 'h':                                                                                                          // 1539\n      return n * h;                                                                                                    // 1540\n    case 'minutes':                                                                                                    // 1541\n    case 'minute':                                                                                                     // 1542\n    case 'm':                                                                                                          // 1543\n      return n * m;                                                                                                    // 1544\n    case 'seconds':                                                                                                    // 1545\n    case 'second':                                                                                                     // 1546\n    case 's':                                                                                                          // 1547\n      return n * s;                                                                                                    // 1548\n    case 'ms':                                                                                                         // 1549\n      return n;                                                                                                        // 1550\n    default:                                                                                                           // 1551\n      // No default case                                                                                               // 1552\n  }                                                                                                                    // 1553\n}                                                                                                                      // 1554\n                                                                                                                       // 1555\n/**                                                                                                                    // 1556\n * Short format for `ms`.                                                                                              // 1557\n *                                                                                                                     // 1558\n * @api private                                                                                                        // 1559\n * @param {number} ms                                                                                                  // 1560\n * @return {string}                                                                                                    // 1561\n */                                                                                                                    // 1562\nfunction shortFormat(ms) {                                                                                             // 1563\n  if (ms >= d) {                                                                                                       // 1564\n    return Math.round(ms / d) + 'd';                                                                                   // 1565\n  }                                                                                                                    // 1566\n  if (ms >= h) {                                                                                                       // 1567\n    return Math.round(ms / h) + 'h';                                                                                   // 1568\n  }                                                                                                                    // 1569\n  if (ms >= m) {                                                                                                       // 1570\n    return Math.round(ms / m) + 'm';                                                                                   // 1571\n  }                                                                                                                    // 1572\n  if (ms >= s) {                                                                                                       // 1573\n    return Math.round(ms / s) + 's';                                                                                   // 1574\n  }                                                                                                                    // 1575\n  return ms + 'ms';                                                                                                    // 1576\n}                                                                                                                      // 1577\n                                                                                                                       // 1578\n/**                                                                                                                    // 1579\n * Long format for `ms`.                                                                                               // 1580\n *                                                                                                                     // 1581\n * @api private                                                                                                        // 1582\n * @param {number} ms                                                                                                  // 1583\n * @return {string}                                                                                                    // 1584\n */                                                                                                                    // 1585\nfunction longFormat(ms) {                                                                                              // 1586\n  return plural(ms, d, 'day')                                                                                          // 1587\n    || plural(ms, h, 'hour')                                                                                           // 1588\n    || plural(ms, m, 'minute')                                                                                         // 1589\n    || plural(ms, s, 'second')                                                                                         // 1590\n    || ms + ' ms';                                                                                                     // 1591\n}                                                                                                                      // 1592\n                                                                                                                       // 1593\n/**                                                                                                                    // 1594\n * Pluralization helper.                                                                                               // 1595\n *                                                                                                                     // 1596\n * @api private                                                                                                        // 1597\n * @param {number} ms                                                                                                  // 1598\n * @param {number} n                                                                                                   // 1599\n * @param {string} name                                                                                                // 1600\n */                                                                                                                    // 1601\nfunction plural(ms, n, name) {                                                                                         // 1602\n  if (ms < n) {                                                                                                        // 1603\n    return;                                                                                                            // 1604\n  }                                                                                                                    // 1605\n  if (ms < n * 1.5) {                                                                                                  // 1606\n    return Math.floor(ms / n) + ' ' + name;                                                                            // 1607\n  }                                                                                                                    // 1608\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 1609\n}                                                                                                                      // 1610\n                                                                                                                       // 1611\n},{}],16:[function(require,module,exports){                                                                            // 1612\n                                                                                                                       // 1613\n/**                                                                                                                    // 1614\n * Expose `Pending`.                                                                                                   // 1615\n */                                                                                                                    // 1616\n                                                                                                                       // 1617\nmodule.exports = Pending;                                                                                              // 1618\n                                                                                                                       // 1619\n/**                                                                                                                    // 1620\n * Initialize a new `Pending` error with the given message.                                                            // 1621\n *                                                                                                                     // 1622\n * @param {string} message                                                                                             // 1623\n */                                                                                                                    // 1624\nfunction Pending(message) {                                                                                            // 1625\n  this.message = message;                                                                                              // 1626\n}                                                                                                                      // 1627\n                                                                                                                       // 1628\n},{}],17:[function(require,module,exports){                                                                            // 1629\n(function (process,global){                                                                                            // 1630\n/**                                                                                                                    // 1631\n * Module dependencies.                                                                                                // 1632\n */                                                                                                                    // 1633\n                                                                                                                       // 1634\nvar tty = require('tty');                                                                                              // 1635\nvar diff = require('diff');                                                                                            // 1636\nvar ms = require('../ms');                                                                                             // 1637\nvar utils = require('../utils');                                                                                       // 1638\nvar supportsColor = process.browser ? null : require('supports-color');                                                // 1639\n                                                                                                                       // 1640\n/**                                                                                                                    // 1641\n * Expose `Base`.                                                                                                      // 1642\n */                                                                                                                    // 1643\n                                                                                                                       // 1644\nexports = module.exports = Base;                                                                                       // 1645\n                                                                                                                       // 1646\n/**                                                                                                                    // 1647\n * Save timer references to avoid Sinon interfering.                                                                   // 1648\n * See: https://github.com/mochajs/mocha/issues/237                                                                    // 1649\n */                                                                                                                    // 1650\n                                                                                                                       // 1651\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 1652\nvar Date = global.Date;                                                                                                // 1653\nvar setTimeout = global.setTimeout;                                                                                    // 1654\nvar setInterval = global.setInterval;                                                                                  // 1655\nvar clearTimeout = global.clearTimeout;                                                                                // 1656\nvar clearInterval = global.clearInterval;                                                                              // 1657\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 1658\n                                                                                                                       // 1659\n/**                                                                                                                    // 1660\n * Check if both stdio streams are associated with a tty.                                                              // 1661\n */                                                                                                                    // 1662\n                                                                                                                       // 1663\nvar isatty = tty.isatty(1) && tty.isatty(2);                                                                           // 1664\n                                                                                                                       // 1665\n/**                                                                                                                    // 1666\n * Enable coloring by default, except in the browser interface.                                                        // 1667\n */                                                                                                                    // 1668\n                                                                                                                       // 1669\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));                   // 1670\n                                                                                                                       // 1671\n/**                                                                                                                    // 1672\n * Inline diffs instead of +/-                                                                                         // 1673\n */                                                                                                                    // 1674\n                                                                                                                       // 1675\nexports.inlineDiffs = false;                                                                                           // 1676\n                                                                                                                       // 1677\n/**                                                                                                                    // 1678\n * Default color map.                                                                                                  // 1679\n */                                                                                                                    // 1680\n                                                                                                                       // 1681\nexports.colors = {                                                                                                     // 1682\n  pass: 90,                                                                                                            // 1683\n  fail: 31,                                                                                                            // 1684\n  'bright pass': 92,                                                                                                   // 1685\n  'bright fail': 91,                                                                                                   // 1686\n  'bright yellow': 93,                                                                                                 // 1687\n  pending: 36,                                                                                                         // 1688\n  suite: 0,                                                                                                            // 1689\n  'error title': 0,                                                                                                    // 1690\n  'error message': 31,                                                                                                 // 1691\n  'error stack': 90,                                                                                                   // 1692\n  checkmark: 32,                                                                                                       // 1693\n  fast: 90,                                                                                                            // 1694\n  medium: 33,                                                                                                          // 1695\n  slow: 31,                                                                                                            // 1696\n  green: 32,                                                                                                           // 1697\n  light: 90,                                                                                                           // 1698\n  'diff gutter': 90,                                                                                                   // 1699\n  'diff added': 32,                                                                                                    // 1700\n  'diff removed': 31                                                                                                   // 1701\n};                                                                                                                     // 1702\n                                                                                                                       // 1703\n/**                                                                                                                    // 1704\n * Default symbol map.                                                                                                 // 1705\n */                                                                                                                    // 1706\n                                                                                                                       // 1707\nexports.symbols = {                                                                                                    // 1708\n  ok: '✓',                                                                                                             // 1709\n  err: '✖',                                                                                                            // 1710\n  dot: '․'                                                                                                             // 1711\n};                                                                                                                     // 1712\n                                                                                                                       // 1713\n// With node.js on Windows: use symbols available in terminal default fonts                                            // 1714\nif (process.platform === 'win32') {                                                                                    // 1715\n  exports.symbols.ok = '\\u221A';                                                                                       // 1716\n  exports.symbols.err = '\\u00D7';                                                                                      // 1717\n  exports.symbols.dot = '.';                                                                                           // 1718\n}                                                                                                                      // 1719\n                                                                                                                       // 1720\n/**                                                                                                                    // 1721\n * Color `str` with the given `type`,                                                                                  // 1722\n * allowing colors to be disabled,                                                                                     // 1723\n * as well as user-defined color                                                                                       // 1724\n * schemes.                                                                                                            // 1725\n *                                                                                                                     // 1726\n * @param {string} type                                                                                                // 1727\n * @param {string} str                                                                                                 // 1728\n * @return {string}                                                                                                    // 1729\n * @api private                                                                                                        // 1730\n */                                                                                                                    // 1731\nvar color = exports.color = function(type, str) {                                                                      // 1732\n  if (!exports.useColors) {                                                                                            // 1733\n    return String(str);                                                                                                // 1734\n  }                                                                                                                    // 1735\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';                                                   // 1736\n};                                                                                                                     // 1737\n                                                                                                                       // 1738\n/**                                                                                                                    // 1739\n * Expose term window size, with some defaults for when stderr is not a tty.                                           // 1740\n */                                                                                                                    // 1741\n                                                                                                                       // 1742\nexports.window = {                                                                                                     // 1743\n  width: 75                                                                                                            // 1744\n};                                                                                                                     // 1745\n                                                                                                                       // 1746\nif (isatty) {                                                                                                          // 1747\n  exports.window.width = process.stdout.getWindowSize                                                                  // 1748\n      ? process.stdout.getWindowSize(1)[0]                                                                             // 1749\n      : tty.getWindowSize()[1];                                                                                        // 1750\n}                                                                                                                      // 1751\n                                                                                                                       // 1752\n/**                                                                                                                    // 1753\n * Expose some basic cursor interactions that are common among reporters.                                              // 1754\n */                                                                                                                    // 1755\n                                                                                                                       // 1756\nexports.cursor = {                                                                                                     // 1757\n  hide: function() {                                                                                                   // 1758\n    isatty && process.stdout.write('\\u001b[?25l');                                                                     // 1759\n  },                                                                                                                   // 1760\n                                                                                                                       // 1761\n  show: function() {                                                                                                   // 1762\n    isatty && process.stdout.write('\\u001b[?25h');                                                                     // 1763\n  },                                                                                                                   // 1764\n                                                                                                                       // 1765\n  deleteLine: function() {                                                                                             // 1766\n    isatty && process.stdout.write('\\u001b[2K');                                                                       // 1767\n  },                                                                                                                   // 1768\n                                                                                                                       // 1769\n  beginningOfLine: function() {                                                                                        // 1770\n    isatty && process.stdout.write('\\u001b[0G');                                                                       // 1771\n  },                                                                                                                   // 1772\n                                                                                                                       // 1773\n  CR: function() {                                                                                                     // 1774\n    if (isatty) {                                                                                                      // 1775\n      exports.cursor.deleteLine();                                                                                     // 1776\n      exports.cursor.beginningOfLine();                                                                                // 1777\n    } else {                                                                                                           // 1778\n      process.stdout.write('\\r');                                                                                      // 1779\n    }                                                                                                                  // 1780\n  }                                                                                                                    // 1781\n};                                                                                                                     // 1782\n                                                                                                                       // 1783\n/**                                                                                                                    // 1784\n * Outut the given `failures` as a list.                                                                               // 1785\n *                                                                                                                     // 1786\n * @param {Array} failures                                                                                             // 1787\n * @api public                                                                                                         // 1788\n */                                                                                                                    // 1789\n                                                                                                                       // 1790\nexports.list = function(failures) {                                                                                    // 1791\n  console.log();                                                                                                       // 1792\n  failures.forEach(function(test, i) {                                                                                 // 1793\n    // format                                                                                                          // 1794\n    var fmt = color('error title', '  %s) %s:\\n')                                                                      // 1795\n      + color('error message', '     %s')                                                                              // 1796\n      + color('error stack', '\\n%s\\n');                                                                                // 1797\n                                                                                                                       // 1798\n    // msg                                                                                                             // 1799\n    var msg;                                                                                                           // 1800\n    var err = test.err;                                                                                                // 1801\n    var message;                                                                                                       // 1802\n    if (err.message) {                                                                                                 // 1803\n      message = err.message;                                                                                           // 1804\n    } else if (typeof err.inspect === 'function') {                                                                    // 1805\n      message = err.inspect() + '';                                                                                    // 1806\n    } else {                                                                                                           // 1807\n      message = '';                                                                                                    // 1808\n    }                                                                                                                  // 1809\n    var stack = err.stack || message;                                                                                  // 1810\n    var index = stack.indexOf(message);                                                                                // 1811\n    var actual = err.actual;                                                                                           // 1812\n    var expected = err.expected;                                                                                       // 1813\n    var escape = true;                                                                                                 // 1814\n                                                                                                                       // 1815\n    if (index === -1) {                                                                                                // 1816\n      msg = message;                                                                                                   // 1817\n    } else {                                                                                                           // 1818\n      index += message.length;                                                                                         // 1819\n      msg = stack.slice(0, index);                                                                                     // 1820\n      // remove msg from stack                                                                                         // 1821\n      stack = stack.slice(index + 1);                                                                                  // 1822\n    }                                                                                                                  // 1823\n                                                                                                                       // 1824\n    // uncaught                                                                                                        // 1825\n    if (err.uncaught) {                                                                                                // 1826\n      msg = 'Uncaught ' + msg;                                                                                         // 1827\n    }                                                                                                                  // 1828\n    // explicitly show diff                                                                                            // 1829\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {                              // 1830\n      escape = false;                                                                                                  // 1831\n      if (!(utils.isString(actual) && utils.isString(expected))) {                                                     // 1832\n        err.actual = actual = utils.stringify(actual);                                                                 // 1833\n        err.expected = expected = utils.stringify(expected);                                                           // 1834\n      }                                                                                                                // 1835\n                                                                                                                       // 1836\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');                                    // 1837\n      var match = message.match(/^([^:]+): expected/);                                                                 // 1838\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);                                               // 1839\n                                                                                                                       // 1840\n      if (exports.inlineDiffs) {                                                                                       // 1841\n        msg += inlineDiff(err, escape);                                                                                // 1842\n      } else {                                                                                                         // 1843\n        msg += unifiedDiff(err, escape);                                                                               // 1844\n      }                                                                                                                // 1845\n    }                                                                                                                  // 1846\n                                                                                                                       // 1847\n    // indent stack trace                                                                                              // 1848\n    stack = stack.replace(/^/gm, '  ');                                                                                // 1849\n                                                                                                                       // 1850\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);                                                           // 1851\n  });                                                                                                                  // 1852\n};                                                                                                                     // 1853\n                                                                                                                       // 1854\n/**                                                                                                                    // 1855\n * Initialize a new `Base` reporter.                                                                                   // 1856\n *                                                                                                                     // 1857\n * All other reporters generally                                                                                       // 1858\n * inherit from this reporter, providing                                                                               // 1859\n * stats such as test duration, number                                                                                 // 1860\n * of tests passed / failed etc.                                                                                       // 1861\n *                                                                                                                     // 1862\n * @param {Runner} runner                                                                                              // 1863\n * @api public                                                                                                         // 1864\n */                                                                                                                    // 1865\n                                                                                                                       // 1866\nfunction Base(runner) {                                                                                                // 1867\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };                                // 1868\n  var failures = this.failures = [];                                                                                   // 1869\n                                                                                                                       // 1870\n  if (!runner) {                                                                                                       // 1871\n    return;                                                                                                            // 1872\n  }                                                                                                                    // 1873\n  this.runner = runner;                                                                                                // 1874\n                                                                                                                       // 1875\n  runner.stats = stats;                                                                                                // 1876\n                                                                                                                       // 1877\n  runner.on('start', function() {                                                                                      // 1878\n    stats.start = new Date();                                                                                          // 1879\n  });                                                                                                                  // 1880\n                                                                                                                       // 1881\n  runner.on('suite', function(suite) {                                                                                 // 1882\n    stats.suites = stats.suites || 0;                                                                                  // 1883\n    suite.root || stats.suites++;                                                                                      // 1884\n  });                                                                                                                  // 1885\n                                                                                                                       // 1886\n  runner.on('test end', function() {                                                                                   // 1887\n    stats.tests = stats.tests || 0;                                                                                    // 1888\n    stats.tests++;                                                                                                     // 1889\n  });                                                                                                                  // 1890\n                                                                                                                       // 1891\n  runner.on('pass', function(test) {                                                                                   // 1892\n    stats.passes = stats.passes || 0;                                                                                  // 1893\n                                                                                                                       // 1894\n    if (test.duration > test.slow()) {                                                                                 // 1895\n      test.speed = 'slow';                                                                                             // 1896\n    } else if (test.duration > test.slow() / 2) {                                                                      // 1897\n      test.speed = 'medium';                                                                                           // 1898\n    } else {                                                                                                           // 1899\n      test.speed = 'fast';                                                                                             // 1900\n    }                                                                                                                  // 1901\n                                                                                                                       // 1902\n    stats.passes++;                                                                                                    // 1903\n  });                                                                                                                  // 1904\n                                                                                                                       // 1905\n  runner.on('fail', function(test, err) {                                                                              // 1906\n    stats.failures = stats.failures || 0;                                                                              // 1907\n    stats.failures++;                                                                                                  // 1908\n    test.err = err;                                                                                                    // 1909\n    failures.push(test);                                                                                               // 1910\n  });                                                                                                                  // 1911\n                                                                                                                       // 1912\n  runner.on('end', function() {                                                                                        // 1913\n    stats.end = new Date();                                                                                            // 1914\n    stats.duration = new Date() - stats.start;                                                                         // 1915\n  });                                                                                                                  // 1916\n                                                                                                                       // 1917\n  runner.on('pending', function() {                                                                                    // 1918\n    stats.pending++;                                                                                                   // 1919\n  });                                                                                                                  // 1920\n}                                                                                                                      // 1921\n                                                                                                                       // 1922\n/**                                                                                                                    // 1923\n * Output common epilogue used by many of                                                                              // 1924\n * the bundled reporters.                                                                                              // 1925\n *                                                                                                                     // 1926\n * @api public                                                                                                         // 1927\n */                                                                                                                    // 1928\nBase.prototype.epilogue = function() {                                                                                 // 1929\n  var stats = this.stats;                                                                                              // 1930\n  var fmt;                                                                                                             // 1931\n                                                                                                                       // 1932\n  console.log();                                                                                                       // 1933\n                                                                                                                       // 1934\n  // passes                                                                                                            // 1935\n  fmt = color('bright pass', ' ')                                                                                      // 1936\n    + color('green', ' %d passing')                                                                                    // 1937\n    + color('light', ' (%s)');                                                                                         // 1938\n                                                                                                                       // 1939\n  console.log(fmt,                                                                                                     // 1940\n    stats.passes || 0,                                                                                                 // 1941\n    ms(stats.duration));                                                                                               // 1942\n                                                                                                                       // 1943\n  // pending                                                                                                           // 1944\n  if (stats.pending) {                                                                                                 // 1945\n    fmt = color('pending', ' ')                                                                                        // 1946\n      + color('pending', ' %d pending');                                                                               // 1947\n                                                                                                                       // 1948\n    console.log(fmt, stats.pending);                                                                                   // 1949\n  }                                                                                                                    // 1950\n                                                                                                                       // 1951\n  // failures                                                                                                          // 1952\n  if (stats.failures) {                                                                                                // 1953\n    fmt = color('fail', '  %d failing');                                                                               // 1954\n                                                                                                                       // 1955\n    console.log(fmt, stats.failures);                                                                                  // 1956\n                                                                                                                       // 1957\n    Base.list(this.failures);                                                                                          // 1958\n    console.log();                                                                                                     // 1959\n  }                                                                                                                    // 1960\n                                                                                                                       // 1961\n  console.log();                                                                                                       // 1962\n};                                                                                                                     // 1963\n                                                                                                                       // 1964\n/**                                                                                                                    // 1965\n * Pad the given `str` to `len`.                                                                                       // 1966\n *                                                                                                                     // 1967\n * @api private                                                                                                        // 1968\n * @param {string} str                                                                                                 // 1969\n * @param {string} len                                                                                                 // 1970\n * @return {string}                                                                                                    // 1971\n */                                                                                                                    // 1972\nfunction pad(str, len) {                                                                                               // 1973\n  str = String(str);                                                                                                   // 1974\n  return Array(len - str.length + 1).join(' ') + str;                                                                  // 1975\n}                                                                                                                      // 1976\n                                                                                                                       // 1977\n/**                                                                                                                    // 1978\n * Returns an inline diff between 2 strings with coloured ANSI output                                                  // 1979\n *                                                                                                                     // 1980\n * @api private                                                                                                        // 1981\n * @param {Error} err with actual/expected                                                                             // 1982\n * @param {boolean} escape                                                                                             // 1983\n * @return {string} Diff                                                                                               // 1984\n */                                                                                                                    // 1985\nfunction inlineDiff(err, escape) {                                                                                     // 1986\n  var msg = errorDiff(err, 'WordsWithSpace', escape);                                                                  // 1987\n                                                                                                                       // 1988\n  // linenos                                                                                                           // 1989\n  var lines = msg.split('\\n');                                                                                         // 1990\n  if (lines.length > 4) {                                                                                              // 1991\n    var width = String(lines.length).length;                                                                           // 1992\n    msg = lines.map(function(str, i) {                                                                                 // 1993\n      return pad(++i, width) + ' |' + ' ' + str;                                                                       // 1994\n    }).join('\\n');                                                                                                     // 1995\n  }                                                                                                                    // 1996\n                                                                                                                       // 1997\n  // legend                                                                                                            // 1998\n  msg = '\\n'                                                                                                           // 1999\n    + color('diff removed', 'actual')                                                                                  // 2000\n    + ' '                                                                                                              // 2001\n    + color('diff added', 'expected')                                                                                  // 2002\n    + '\\n\\n'                                                                                                           // 2003\n    + msg                                                                                                              // 2004\n    + '\\n';                                                                                                            // 2005\n                                                                                                                       // 2006\n  // indent                                                                                                            // 2007\n  msg = msg.replace(/^/gm, '      ');                                                                                  // 2008\n  return msg;                                                                                                          // 2009\n}                                                                                                                      // 2010\n                                                                                                                       // 2011\n/**                                                                                                                    // 2012\n * Returns a unified diff between two strings.                                                                         // 2013\n *                                                                                                                     // 2014\n * @api private                                                                                                        // 2015\n * @param {Error} err with actual/expected                                                                             // 2016\n * @param {boolean} escape                                                                                             // 2017\n * @return {string} The diff.                                                                                          // 2018\n */                                                                                                                    // 2019\nfunction unifiedDiff(err, escape) {                                                                                    // 2020\n  var indent = '      ';                                                                                               // 2021\n  function cleanUp(line) {                                                                                             // 2022\n    if (escape) {                                                                                                      // 2023\n      line = escapeInvisibles(line);                                                                                   // 2024\n    }                                                                                                                  // 2025\n    if (line[0] === '+') {                                                                                             // 2026\n      return indent + colorLines('diff added', line);                                                                  // 2027\n    }                                                                                                                  // 2028\n    if (line[0] === '-') {                                                                                             // 2029\n      return indent + colorLines('diff removed', line);                                                                // 2030\n    }                                                                                                                  // 2031\n    if (line.match(/\\@\\@/)) {                                                                                          // 2032\n      return null;                                                                                                     // 2033\n    }                                                                                                                  // 2034\n    if (line.match(/\\\\ No newline/)) {                                                                                 // 2035\n      return null;                                                                                                     // 2036\n    }                                                                                                                  // 2037\n    return indent + line;                                                                                              // 2038\n  }                                                                                                                    // 2039\n  function notBlank(line) {                                                                                            // 2040\n    return typeof line !== 'undefined' && line !== null;                                                               // 2041\n  }                                                                                                                    // 2042\n  var msg = diff.createPatch('string', err.actual, err.expected);                                                      // 2043\n  var lines = msg.split('\\n').splice(4);                                                                               // 2044\n  return '\\n      '                                                                                                    // 2045\n    + colorLines('diff added', '+ expected') + ' '                                                                     // 2046\n    + colorLines('diff removed', '- actual')                                                                           // 2047\n    + '\\n\\n'                                                                                                           // 2048\n    + lines.map(cleanUp).filter(notBlank).join('\\n');                                                                  // 2049\n}                                                                                                                      // 2050\n                                                                                                                       // 2051\n/**                                                                                                                    // 2052\n * Return a character diff for `err`.                                                                                  // 2053\n *                                                                                                                     // 2054\n * @api private                                                                                                        // 2055\n * @param {Error} err                                                                                                  // 2056\n * @param {string} type                                                                                                // 2057\n * @param {boolean} escape                                                                                             // 2058\n * @return {string}                                                                                                    // 2059\n */                                                                                                                    // 2060\nfunction errorDiff(err, type, escape) {                                                                                // 2061\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;                                                     // 2062\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;                                               // 2063\n  return diff['diff' + type](actual, expected).map(function(str) {                                                     // 2064\n    if (str.added) {                                                                                                   // 2065\n      return colorLines('diff added', str.value);                                                                      // 2066\n    }                                                                                                                  // 2067\n    if (str.removed) {                                                                                                 // 2068\n      return colorLines('diff removed', str.value);                                                                    // 2069\n    }                                                                                                                  // 2070\n    return str.value;                                                                                                  // 2071\n  }).join('');                                                                                                         // 2072\n}                                                                                                                      // 2073\n                                                                                                                       // 2074\n/**                                                                                                                    // 2075\n * Returns a string with all invisible characters in plain text                                                        // 2076\n *                                                                                                                     // 2077\n * @api private                                                                                                        // 2078\n * @param {string} line                                                                                                // 2079\n * @return {string}                                                                                                    // 2080\n */                                                                                                                    // 2081\nfunction escapeInvisibles(line) {                                                                                      // 2082\n  return line.replace(/\\t/g, '<tab>')                                                                                  // 2083\n    .replace(/\\r/g, '<CR>')                                                                                            // 2084\n    .replace(/\\n/g, '<LF>\\n');                                                                                         // 2085\n}                                                                                                                      // 2086\n                                                                                                                       // 2087\n/**                                                                                                                    // 2088\n * Color lines for `str`, using the color `name`.                                                                      // 2089\n *                                                                                                                     // 2090\n * @api private                                                                                                        // 2091\n * @param {string} name                                                                                                // 2092\n * @param {string} str                                                                                                 // 2093\n * @return {string}                                                                                                    // 2094\n */                                                                                                                    // 2095\nfunction colorLines(name, str) {                                                                                       // 2096\n  return str.split('\\n').map(function(str) {                                                                           // 2097\n    return color(name, str);                                                                                           // 2098\n  }).join('\\n');                                                                                                       // 2099\n}                                                                                                                      // 2100\n                                                                                                                       // 2101\n/**                                                                                                                    // 2102\n * Object#toString reference.                                                                                          // 2103\n */                                                                                                                    // 2104\nvar objToString = Object.prototype.toString;                                                                           // 2105\n                                                                                                                       // 2106\n/**                                                                                                                    // 2107\n * Check that a / b have the same type.                                                                                // 2108\n *                                                                                                                     // 2109\n * @api private                                                                                                        // 2110\n * @param {Object} a                                                                                                   // 2111\n * @param {Object} b                                                                                                   // 2112\n * @return {boolean}                                                                                                   // 2113\n */                                                                                                                    // 2114\nfunction sameType(a, b) {                                                                                              // 2115\n  return objToString.call(a) === objToString.call(b);                                                                  // 2116\n}                                                                                                                      // 2117\n                                                                                                                       // 2118\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../ms\":15,\"../utils\":39,\"_process\":51,\"diff\":67,\"supports-color\":41,\"tty\":5}],18:[function(require,module,exports){\n/**                                                                                                                    // 2121\n * Module dependencies.                                                                                                // 2122\n */                                                                                                                    // 2123\n                                                                                                                       // 2124\nvar Base = require('./base');                                                                                          // 2125\nvar utils = require('../utils');                                                                                       // 2126\n                                                                                                                       // 2127\n/**                                                                                                                    // 2128\n * Expose `Doc`.                                                                                                       // 2129\n */                                                                                                                    // 2130\n                                                                                                                       // 2131\nexports = module.exports = Doc;                                                                                        // 2132\n                                                                                                                       // 2133\n/**                                                                                                                    // 2134\n * Initialize a new `Doc` reporter.                                                                                    // 2135\n *                                                                                                                     // 2136\n * @param {Runner} runner                                                                                              // 2137\n * @api public                                                                                                         // 2138\n */                                                                                                                    // 2139\nfunction Doc(runner) {                                                                                                 // 2140\n  Base.call(this, runner);                                                                                             // 2141\n                                                                                                                       // 2142\n  var indents = 2;                                                                                                     // 2143\n                                                                                                                       // 2144\n  function indent() {                                                                                                  // 2145\n    return Array(indents).join('  ');                                                                                  // 2146\n  }                                                                                                                    // 2147\n                                                                                                                       // 2148\n  runner.on('suite', function(suite) {                                                                                 // 2149\n    if (suite.root) {                                                                                                  // 2150\n      return;                                                                                                          // 2151\n    }                                                                                                                  // 2152\n    ++indents;                                                                                                         // 2153\n    console.log('%s<section class=\"suite\">', indent());                                                                // 2154\n    ++indents;                                                                                                         // 2155\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));                                                 // 2156\n    console.log('%s<dl>', indent());                                                                                   // 2157\n  });                                                                                                                  // 2158\n                                                                                                                       // 2159\n  runner.on('suite end', function(suite) {                                                                             // 2160\n    if (suite.root) {                                                                                                  // 2161\n      return;                                                                                                          // 2162\n    }                                                                                                                  // 2163\n    console.log('%s</dl>', indent());                                                                                  // 2164\n    --indents;                                                                                                         // 2165\n    console.log('%s</section>', indent());                                                                             // 2166\n    --indents;                                                                                                         // 2167\n  });                                                                                                                  // 2168\n                                                                                                                       // 2169\n  runner.on('pass', function(test) {                                                                                   // 2170\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));                                                // 2171\n    var code = utils.escape(utils.clean(test.body));                                                                   // 2172\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);                                            // 2173\n  });                                                                                                                  // 2174\n                                                                                                                       // 2175\n  runner.on('fail', function(test, err) {                                                                              // 2176\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));                                  // 2177\n    var code = utils.escape(utils.clean(test.fn.body));                                                                // 2178\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);                              // 2179\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));                                         // 2180\n  });                                                                                                                  // 2181\n}                                                                                                                      // 2182\n                                                                                                                       // 2183\n},{\"../utils\":39,\"./base\":17}],19:[function(require,module,exports){                                                   // 2184\n(function (process){                                                                                                   // 2185\n/**                                                                                                                    // 2186\n * Module dependencies.                                                                                                // 2187\n */                                                                                                                    // 2188\n                                                                                                                       // 2189\nvar Base = require('./base');                                                                                          // 2190\nvar inherits = require('../utils').inherits;                                                                           // 2191\nvar color = Base.color;                                                                                                // 2192\n                                                                                                                       // 2193\n/**                                                                                                                    // 2194\n * Expose `Dot`.                                                                                                       // 2195\n */                                                                                                                    // 2196\n                                                                                                                       // 2197\nexports = module.exports = Dot;                                                                                        // 2198\n                                                                                                                       // 2199\n/**                                                                                                                    // 2200\n * Initialize a new `Dot` matrix test reporter.                                                                        // 2201\n *                                                                                                                     // 2202\n * @api public                                                                                                         // 2203\n * @param {Runner} runner                                                                                              // 2204\n */                                                                                                                    // 2205\nfunction Dot(runner) {                                                                                                 // 2206\n  Base.call(this, runner);                                                                                             // 2207\n                                                                                                                       // 2208\n  var self = this;                                                                                                     // 2209\n  var width = Base.window.width * .75 | 0;                                                                             // 2210\n  var n = -1;                                                                                                          // 2211\n                                                                                                                       // 2212\n  runner.on('start', function() {                                                                                      // 2213\n    process.stdout.write('\\n');                                                                                        // 2214\n  });                                                                                                                  // 2215\n                                                                                                                       // 2216\n  runner.on('pending', function() {                                                                                    // 2217\n    if (++n % width === 0) {                                                                                           // 2218\n      process.stdout.write('\\n  ');                                                                                    // 2219\n    }                                                                                                                  // 2220\n    process.stdout.write(color('pending', Base.symbols.dot));                                                          // 2221\n  });                                                                                                                  // 2222\n                                                                                                                       // 2223\n  runner.on('pass', function(test) {                                                                                   // 2224\n    if (++n % width === 0) {                                                                                           // 2225\n      process.stdout.write('\\n  ');                                                                                    // 2226\n    }                                                                                                                  // 2227\n    if (test.speed === 'slow') {                                                                                       // 2228\n      process.stdout.write(color('bright yellow', Base.symbols.dot));                                                  // 2229\n    } else {                                                                                                           // 2230\n      process.stdout.write(color(test.speed, Base.symbols.dot));                                                       // 2231\n    }                                                                                                                  // 2232\n  });                                                                                                                  // 2233\n                                                                                                                       // 2234\n  runner.on('fail', function() {                                                                                       // 2235\n    if (++n % width === 0) {                                                                                           // 2236\n      process.stdout.write('\\n  ');                                                                                    // 2237\n    }                                                                                                                  // 2238\n    process.stdout.write(color('fail', Base.symbols.dot));                                                             // 2239\n  });                                                                                                                  // 2240\n                                                                                                                       // 2241\n  runner.on('end', function() {                                                                                        // 2242\n    console.log();                                                                                                     // 2243\n    self.epilogue();                                                                                                   // 2244\n  });                                                                                                                  // 2245\n}                                                                                                                      // 2246\n                                                                                                                       // 2247\n/**                                                                                                                    // 2248\n * Inherit from `Base.prototype`.                                                                                      // 2249\n */                                                                                                                    // 2250\ninherits(Dot, Base);                                                                                                   // 2251\n                                                                                                                       // 2252\n}).call(this,require('_process'))                                                                                      // 2253\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],20:[function(require,module,exports){                                     // 2254\n(function (process,__dirname){                                                                                         // 2255\n/**                                                                                                                    // 2256\n * Module dependencies.                                                                                                // 2257\n */                                                                                                                    // 2258\n                                                                                                                       // 2259\nvar JSONCov = require('./json-cov');                                                                                   // 2260\nvar readFileSync = require('fs').readFileSync;                                                                         // 2261\nvar join = require('path').join;                                                                                       // 2262\n                                                                                                                       // 2263\n/**                                                                                                                    // 2264\n * Expose `HTMLCov`.                                                                                                   // 2265\n */                                                                                                                    // 2266\n                                                                                                                       // 2267\nexports = module.exports = HTMLCov;                                                                                    // 2268\n                                                                                                                       // 2269\n/**                                                                                                                    // 2270\n * Initialize a new `JsCoverage` reporter.                                                                             // 2271\n *                                                                                                                     // 2272\n * @api public                                                                                                         // 2273\n * @param {Runner} runner                                                                                              // 2274\n */                                                                                                                    // 2275\nfunction HTMLCov(runner) {                                                                                             // 2276\n  var jade = require('jade');                                                                                          // 2277\n  var file = join(__dirname, '/templates/coverage.jade');                                                              // 2278\n  var str = readFileSync(file, 'utf8');                                                                                // 2279\n  var fn = jade.compile(str, { filename: file });                                                                      // 2280\n  var self = this;                                                                                                     // 2281\n                                                                                                                       // 2282\n  JSONCov.call(this, runner, false);                                                                                   // 2283\n                                                                                                                       // 2284\n  runner.on('end', function() {                                                                                        // 2285\n    process.stdout.write(fn({                                                                                          // 2286\n      cov: self.cov,                                                                                                   // 2287\n      coverageClass: coverageClass                                                                                     // 2288\n    }));                                                                                                               // 2289\n  });                                                                                                                  // 2290\n}                                                                                                                      // 2291\n                                                                                                                       // 2292\n/**                                                                                                                    // 2293\n * Return coverage class for a given coverage percentage.                                                              // 2294\n *                                                                                                                     // 2295\n * @api private                                                                                                        // 2296\n * @param {number} coveragePctg                                                                                        // 2297\n * @return {string}                                                                                                    // 2298\n */                                                                                                                    // 2299\nfunction coverageClass(coveragePctg) {                                                                                 // 2300\n  if (coveragePctg >= 75) {                                                                                            // 2301\n    return 'high';                                                                                                     // 2302\n  }                                                                                                                    // 2303\n  if (coveragePctg >= 50) {                                                                                            // 2304\n    return 'medium';                                                                                                   // 2305\n  }                                                                                                                    // 2306\n  if (coveragePctg >= 25) {                                                                                            // 2307\n    return 'low';                                                                                                      // 2308\n  }                                                                                                                    // 2309\n  return 'terrible';                                                                                                   // 2310\n}                                                                                                                      // 2311\n                                                                                                                       // 2312\n}).call(this,require('_process'),\"/lib/reporters\")                                                                     // 2313\n},{\"./json-cov\":23,\"_process\":51,\"fs\":41,\"jade\":41,\"path\":41}],21:[function(require,module,exports){                   // 2314\n(function (global){                                                                                                    // 2315\n/* eslint-env browser */                                                                                               // 2316\n                                                                                                                       // 2317\n/**                                                                                                                    // 2318\n * Module dependencies.                                                                                                // 2319\n */                                                                                                                    // 2320\n                                                                                                                       // 2321\nvar Base = require('./base');                                                                                          // 2322\nvar utils = require('../utils');                                                                                       // 2323\nvar Progress = require('../browser/progress');                                                                         // 2324\nvar escapeRe = require('escape-string-regexp');                                                                        // 2325\nvar escape = utils.escape;                                                                                             // 2326\n                                                                                                                       // 2327\n/**                                                                                                                    // 2328\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 2329\n */                                                                                                                    // 2330\n                                                                                                                       // 2331\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 2332\nvar Date = global.Date;                                                                                                // 2333\nvar setTimeout = global.setTimeout;                                                                                    // 2334\nvar setInterval = global.setInterval;                                                                                  // 2335\nvar clearTimeout = global.clearTimeout;                                                                                // 2336\nvar clearInterval = global.clearInterval;                                                                              // 2337\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 2338\n                                                                                                                       // 2339\n/**                                                                                                                    // 2340\n * Expose `HTML`.                                                                                                      // 2341\n */                                                                                                                    // 2342\n                                                                                                                       // 2343\nexports = module.exports = HTML;                                                                                       // 2344\n                                                                                                                       // 2345\n/**                                                                                                                    // 2346\n * Stats template.                                                                                                     // 2347\n */                                                                                                                    // 2348\n                                                                                                                       // 2349\nvar statsTemplate = '<ul id=\"mocha-stats\">'                                                                            // 2350\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'                                               // 2351\n  + '<li class=\"passes\"><a href=\"javascript:void(0);\">passes:</a> <em>0</em></li>'                                     // 2352\n  + '<li class=\"failures\"><a href=\"javascript:void(0);\">failures:</a> <em>0</em></li>'                                 // 2353\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'                                                                  // 2354\n  + '</ul>';                                                                                                           // 2355\n                                                                                                                       // 2356\n/**                                                                                                                    // 2357\n * Initialize a new `HTML` reporter.                                                                                   // 2358\n *                                                                                                                     // 2359\n * @api public                                                                                                         // 2360\n * @param {Runner} runner                                                                                              // 2361\n */                                                                                                                    // 2362\nfunction HTML(runner) {                                                                                                // 2363\n  Base.call(this, runner);                                                                                             // 2364\n                                                                                                                       // 2365\n  var self = this;                                                                                                     // 2366\n  var stats = this.stats;                                                                                              // 2367\n  var stat = fragment(statsTemplate);                                                                                  // 2368\n  var items = stat.getElementsByTagName('li');                                                                         // 2369\n  var passes = items[1].getElementsByTagName('em')[0];                                                                 // 2370\n  var passesLink = items[1].getElementsByTagName('a')[0];                                                              // 2371\n  var failures = items[2].getElementsByTagName('em')[0];                                                               // 2372\n  var failuresLink = items[2].getElementsByTagName('a')[0];                                                            // 2373\n  var duration = items[3].getElementsByTagName('em')[0];                                                               // 2374\n  var canvas = stat.getElementsByTagName('canvas')[0];                                                                 // 2375\n  var report = fragment('<ul id=\"mocha-report\"></ul>');                                                                // 2376\n  var stack = [report];                                                                                                // 2377\n  var progress;                                                                                                        // 2378\n  var ctx;                                                                                                             // 2379\n  var root = document.getElementById('mocha');                                                                         // 2380\n                                                                                                                       // 2381\n  if (canvas.getContext) {                                                                                             // 2382\n    var ratio = window.devicePixelRatio || 1;                                                                          // 2383\n    canvas.style.width = canvas.width;                                                                                 // 2384\n    canvas.style.height = canvas.height;                                                                               // 2385\n    canvas.width *= ratio;                                                                                             // 2386\n    canvas.height *= ratio;                                                                                            // 2387\n    ctx = canvas.getContext('2d');                                                                                     // 2388\n    ctx.scale(ratio, ratio);                                                                                           // 2389\n    progress = new Progress();                                                                                         // 2390\n  }                                                                                                                    // 2391\n                                                                                                                       // 2392\n  if (!root) {                                                                                                         // 2393\n    return error('#mocha div missing, add it to your document');                                                       // 2394\n  }                                                                                                                    // 2395\n                                                                                                                       // 2396\n  // pass toggle                                                                                                       // 2397\n  on(passesLink, 'click', function() {                                                                                 // 2398\n    unhide();                                                                                                          // 2399\n    var name = (/pass/).test(report.className) ? '' : ' pass';                                                         // 2400\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 2401\n    if (report.className.trim()) {                                                                                     // 2402\n      hideSuitesWithout('test pass');                                                                                  // 2403\n    }                                                                                                                  // 2404\n  });                                                                                                                  // 2405\n                                                                                                                       // 2406\n  // failure toggle                                                                                                    // 2407\n  on(failuresLink, 'click', function() {                                                                               // 2408\n    unhide();                                                                                                          // 2409\n    var name = (/fail/).test(report.className) ? '' : ' fail';                                                         // 2410\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 2411\n    if (report.className.trim()) {                                                                                     // 2412\n      hideSuitesWithout('test fail');                                                                                  // 2413\n    }                                                                                                                  // 2414\n  });                                                                                                                  // 2415\n                                                                                                                       // 2416\n  root.appendChild(stat);                                                                                              // 2417\n  root.appendChild(report);                                                                                            // 2418\n                                                                                                                       // 2419\n  if (progress) {                                                                                                      // 2420\n    progress.size(40);                                                                                                 // 2421\n  }                                                                                                                    // 2422\n                                                                                                                       // 2423\n  runner.on('suite', function(suite) {                                                                                 // 2424\n    if (suite.root) {                                                                                                  // 2425\n      return;                                                                                                          // 2426\n    }                                                                                                                  // 2427\n                                                                                                                       // 2428\n    // suite                                                                                                           // 2429\n    var url = self.suiteURL(suite);                                                                                    // 2430\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));                // 2431\n                                                                                                                       // 2432\n    // container                                                                                                       // 2433\n    stack[0].appendChild(el);                                                                                          // 2434\n    stack.unshift(document.createElement('ul'));                                                                       // 2435\n    el.appendChild(stack[0]);                                                                                          // 2436\n  });                                                                                                                  // 2437\n                                                                                                                       // 2438\n  runner.on('suite end', function(suite) {                                                                             // 2439\n    if (suite.root) {                                                                                                  // 2440\n      return;                                                                                                          // 2441\n    }                                                                                                                  // 2442\n    stack.shift();                                                                                                     // 2443\n  });                                                                                                                  // 2444\n                                                                                                                       // 2445\n  runner.on('fail', function(test) {                                                                                   // 2446\n    // For type = 'test' its possible that the test failed due to multiple                                             // 2447\n    // done() calls. So report the issue here.                                                                         // 2448\n    if (test.type === 'hook'                                                                                           // 2449\n      || test.type === 'test') {                                                                                       // 2450\n      runner.emit('test end', test);                                                                                   // 2451\n    }                                                                                                                  // 2452\n  });                                                                                                                  // 2453\n                                                                                                                       // 2454\n  runner.on('test end', function(test) {                                                                               // 2455\n    // TODO: add to stats                                                                                              // 2456\n    var percent = stats.tests / this.total * 100 | 0;                                                                  // 2457\n    if (progress) {                                                                                                    // 2458\n      progress.update(percent).draw(ctx);                                                                              // 2459\n    }                                                                                                                  // 2460\n                                                                                                                       // 2461\n    // update stats                                                                                                    // 2462\n    var ms = new Date() - stats.start;                                                                                 // 2463\n    text(passes, stats.passes);                                                                                        // 2464\n    text(failures, stats.failures);                                                                                    // 2465\n    text(duration, (ms / 1000).toFixed(2));                                                                            // 2466\n                                                                                                                       // 2467\n    // test                                                                                                            // 2468\n    var el;                                                                                                            // 2469\n    if (test.state === 'passed') {                                                                                     // 2470\n      var url = self.testURL(test);                                                                                    // 2471\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {                                                                                         // 2473\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);                                     // 2474\n    } else {                                                                                                           // 2475\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline                                                               // 2477\n      var message = test.err.toString();                                                                               // 2478\n                                                                                                                       // 2479\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we                                           // 2480\n      // check for the result of the stringifying.                                                                     // 2481\n      if (message === '[object Error]') {                                                                              // 2482\n        message = test.err.message;                                                                                    // 2483\n      }                                                                                                                // 2484\n                                                                                                                       // 2485\n      if (test.err.stack) {                                                                                            // 2486\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);                                                 // 2487\n        if (indexOfMessage === -1) {                                                                                   // 2488\n          stackString = test.err.stack;                                                                                // 2489\n        } else {                                                                                                       // 2490\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);                               // 2491\n        }                                                                                                              // 2492\n      } else if (test.err.sourceURL && test.err.line !== undefined) {                                                  // 2493\n        // Safari doesn't give you a stack. Let's at least provide a source line.                                      // 2494\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';                                          // 2495\n      }                                                                                                                // 2496\n                                                                                                                       // 2497\n      stackString = stackString || '';                                                                                 // 2498\n                                                                                                                       // 2499\n      if (test.err.htmlMessage && stackString) {                                                                       // 2500\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {                                                                               // 2502\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));                            // 2503\n      } else {                                                                                                         // 2504\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));                               // 2505\n      }                                                                                                                // 2506\n    }                                                                                                                  // 2507\n                                                                                                                       // 2508\n    // toggle code                                                                                                     // 2509\n    // TODO: defer                                                                                                     // 2510\n    if (!test.pending) {                                                                                               // 2511\n      var h2 = el.getElementsByTagName('h2')[0];                                                                       // 2512\n                                                                                                                       // 2513\n      on(h2, 'click', function() {                                                                                     // 2514\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';                                           // 2515\n      });                                                                                                              // 2516\n                                                                                                                       // 2517\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));                                        // 2518\n      el.appendChild(pre);                                                                                             // 2519\n      pre.style.display = 'none';                                                                                      // 2520\n    }                                                                                                                  // 2521\n                                                                                                                       // 2522\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.                                 // 2523\n    if (stack[0]) {                                                                                                    // 2524\n      stack[0].appendChild(el);                                                                                        // 2525\n    }                                                                                                                  // 2526\n  });                                                                                                                  // 2527\n}                                                                                                                      // 2528\n                                                                                                                       // 2529\n/**                                                                                                                    // 2530\n * Makes a URL, preserving querystring (\"search\") parameters.                                                          // 2531\n *                                                                                                                     // 2532\n * @param {string} s                                                                                                   // 2533\n * @return {string} A new URL.                                                                                         // 2534\n */                                                                                                                    // 2535\nfunction makeUrl(s) {                                                                                                  // 2536\n  var search = window.location.search;                                                                                 // 2537\n                                                                                                                       // 2538\n  // Remove previous grep query parameter if present                                                                   // 2539\n  if (search) {                                                                                                        // 2540\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');                                               // 2541\n  }                                                                                                                    // 2542\n                                                                                                                       // 2543\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));         // 2544\n}                                                                                                                      // 2545\n                                                                                                                       // 2546\n/**                                                                                                                    // 2547\n * Provide suite URL.                                                                                                  // 2548\n *                                                                                                                     // 2549\n * @param {Object} [suite]                                                                                             // 2550\n */                                                                                                                    // 2551\nHTML.prototype.suiteURL = function(suite) {                                                                            // 2552\n  return makeUrl(suite.fullTitle());                                                                                   // 2553\n};                                                                                                                     // 2554\n                                                                                                                       // 2555\n/**                                                                                                                    // 2556\n * Provide test URL.                                                                                                   // 2557\n *                                                                                                                     // 2558\n * @param {Object} [test]                                                                                              // 2559\n */                                                                                                                    // 2560\nHTML.prototype.testURL = function(test) {                                                                              // 2561\n  return makeUrl(test.fullTitle());                                                                                    // 2562\n};                                                                                                                     // 2563\n                                                                                                                       // 2564\n/**                                                                                                                    // 2565\n * Display error `msg`.                                                                                                // 2566\n *                                                                                                                     // 2567\n * @param {string} msg                                                                                                 // 2568\n */                                                                                                                    // 2569\nfunction error(msg) {                                                                                                  // 2570\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));                                          // 2571\n}                                                                                                                      // 2572\n                                                                                                                       // 2573\n/**                                                                                                                    // 2574\n * Return a DOM fragment from `html`.                                                                                  // 2575\n *                                                                                                                     // 2576\n * @param {string} html                                                                                                // 2577\n */                                                                                                                    // 2578\nfunction fragment(html) {                                                                                              // 2579\n  var args = arguments;                                                                                                // 2580\n  var div = document.createElement('div');                                                                             // 2581\n  var i = 1;                                                                                                           // 2582\n                                                                                                                       // 2583\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {                                                         // 2584\n    switch (type) {                                                                                                    // 2585\n      case 's': return String(args[i++]);                                                                              // 2586\n      case 'e': return escape(args[i++]);                                                                              // 2587\n      // no default                                                                                                    // 2588\n    }                                                                                                                  // 2589\n  });                                                                                                                  // 2590\n                                                                                                                       // 2591\n  return div.firstChild;                                                                                               // 2592\n}                                                                                                                      // 2593\n                                                                                                                       // 2594\n/**                                                                                                                    // 2595\n * Check for suites that do not have elements                                                                          // 2596\n * with `classname`, and hide them.                                                                                    // 2597\n *                                                                                                                     // 2598\n * @param {text} classname                                                                                             // 2599\n */                                                                                                                    // 2600\nfunction hideSuitesWithout(classname) {                                                                                // 2601\n  var suites = document.getElementsByClassName('suite');                                                               // 2602\n  for (var i = 0; i < suites.length; i++) {                                                                            // 2603\n    var els = suites[i].getElementsByClassName(classname);                                                             // 2604\n    if (!els.length) {                                                                                                 // 2605\n      suites[i].className += ' hidden';                                                                                // 2606\n    }                                                                                                                  // 2607\n  }                                                                                                                    // 2608\n}                                                                                                                      // 2609\n                                                                                                                       // 2610\n/**                                                                                                                    // 2611\n * Unhide .hidden suites.                                                                                              // 2612\n */                                                                                                                    // 2613\nfunction unhide() {                                                                                                    // 2614\n  var els = document.getElementsByClassName('suite hidden');                                                           // 2615\n  for (var i = 0; i < els.length; ++i) {                                                                               // 2616\n    els[i].className = els[i].className.replace('suite hidden', 'suite');                                              // 2617\n  }                                                                                                                    // 2618\n}                                                                                                                      // 2619\n                                                                                                                       // 2620\n/**                                                                                                                    // 2621\n * Set an element's text contents.                                                                                     // 2622\n *                                                                                                                     // 2623\n * @param {HTMLElement} el                                                                                             // 2624\n * @param {string} contents                                                                                            // 2625\n */                                                                                                                    // 2626\nfunction text(el, contents) {                                                                                          // 2627\n  if (el.textContent) {                                                                                                // 2628\n    el.textContent = contents;                                                                                         // 2629\n  } else {                                                                                                             // 2630\n    el.innerText = contents;                                                                                           // 2631\n  }                                                                                                                    // 2632\n}                                                                                                                      // 2633\n                                                                                                                       // 2634\n/**                                                                                                                    // 2635\n * Listen on `event` with callback `fn`.                                                                               // 2636\n */                                                                                                                    // 2637\nfunction on(el, event, fn) {                                                                                           // 2638\n  if (el.addEventListener) {                                                                                           // 2639\n    el.addEventListener(event, fn, false);                                                                             // 2640\n  } else {                                                                                                             // 2641\n    el.attachEvent('on' + event, fn);                                                                                  // 2642\n  }                                                                                                                    // 2643\n}                                                                                                                      // 2644\n                                                                                                                       // 2645\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../browser/progress\":4,\"../utils\":39,\"./base\":17,\"escape-string-regexp\":68}],22:[function(require,module,exports){\n// Alias exports to a their normalized format Mocha#reporter to prevent a need                                         // 2648\n// for dynamic (try/catch) requires, which Browserify doesn't handle.                                                  // 2649\nexports.Base = exports.base = require('./base');                                                                       // 2650\nexports.Dot = exports.dot = require('./dot');                                                                          // 2651\nexports.Doc = exports.doc = require('./doc');                                                                          // 2652\nexports.TAP = exports.tap = require('./tap');                                                                          // 2653\nexports.JSON = exports.json = require('./json');                                                                       // 2654\nexports.HTML = exports.html = require('./html');                                                                       // 2655\nexports.List = exports.list = require('./list');                                                                       // 2656\nexports.Min = exports.min = require('./min');                                                                          // 2657\nexports.Spec = exports.spec = require('./spec');                                                                       // 2658\nexports.Nyan = exports.nyan = require('./nyan');                                                                       // 2659\nexports.XUnit = exports.xunit = require('./xunit');                                                                    // 2660\nexports.Markdown = exports.markdown = require('./markdown');                                                           // 2661\nexports.Progress = exports.progress = require('./progress');                                                           // 2662\nexports.Landing = exports.landing = require('./landing');                                                              // 2663\nexports.JSONCov = exports['json-cov'] = require('./json-cov');                                                         // 2664\nexports.HTMLCov = exports['html-cov'] = require('./html-cov');                                                         // 2665\nexports.JSONStream = exports['json-stream'] = require('./json-stream');                                                // 2666\n                                                                                                                       // 2667\n},{\"./base\":17,\"./doc\":18,\"./dot\":19,\"./html\":21,\"./html-cov\":20,\"./json\":25,\"./json-cov\":23,\"./json-stream\":24,\"./landing\":26,\"./list\":27,\"./markdown\":28,\"./min\":29,\"./nyan\":30,\"./progress\":31,\"./spec\":32,\"./tap\":33,\"./xunit\":34}],23:[function(require,module,exports){\n(function (process,global){                                                                                            // 2669\n/**                                                                                                                    // 2670\n * Module dependencies.                                                                                                // 2671\n */                                                                                                                    // 2672\n                                                                                                                       // 2673\nvar Base = require('./base');                                                                                          // 2674\n                                                                                                                       // 2675\n/**                                                                                                                    // 2676\n * Expose `JSONCov`.                                                                                                   // 2677\n */                                                                                                                    // 2678\n                                                                                                                       // 2679\nexports = module.exports = JSONCov;                                                                                    // 2680\n                                                                                                                       // 2681\n/**                                                                                                                    // 2682\n * Initialize a new `JsCoverage` reporter.                                                                             // 2683\n *                                                                                                                     // 2684\n * @api public                                                                                                         // 2685\n * @param {Runner} runner                                                                                              // 2686\n * @param {boolean} output                                                                                             // 2687\n */                                                                                                                    // 2688\nfunction JSONCov(runner, output) {                                                                                     // 2689\n  Base.call(this, runner);                                                                                             // 2690\n                                                                                                                       // 2691\n  output = arguments.length === 1 || output;                                                                           // 2692\n  var self = this;                                                                                                     // 2693\n  var tests = [];                                                                                                      // 2694\n  var failures = [];                                                                                                   // 2695\n  var passes = [];                                                                                                     // 2696\n                                                                                                                       // 2697\n  runner.on('test end', function(test) {                                                                               // 2698\n    tests.push(test);                                                                                                  // 2699\n  });                                                                                                                  // 2700\n                                                                                                                       // 2701\n  runner.on('pass', function(test) {                                                                                   // 2702\n    passes.push(test);                                                                                                 // 2703\n  });                                                                                                                  // 2704\n                                                                                                                       // 2705\n  runner.on('fail', function(test) {                                                                                   // 2706\n    failures.push(test);                                                                                               // 2707\n  });                                                                                                                  // 2708\n                                                                                                                       // 2709\n  runner.on('end', function() {                                                                                        // 2710\n    var cov = global._$jscoverage || {};                                                                               // 2711\n    var result = self.cov = map(cov);                                                                                  // 2712\n    result.stats = self.stats;                                                                                         // 2713\n    result.tests = tests.map(clean);                                                                                   // 2714\n    result.failures = failures.map(clean);                                                                             // 2715\n    result.passes = passes.map(clean);                                                                                 // 2716\n    if (!output) {                                                                                                     // 2717\n      return;                                                                                                          // 2718\n    }                                                                                                                  // 2719\n    process.stdout.write(JSON.stringify(result, null, 2));                                                             // 2720\n  });                                                                                                                  // 2721\n}                                                                                                                      // 2722\n                                                                                                                       // 2723\n/**                                                                                                                    // 2724\n * Map jscoverage data to a JSON structure                                                                             // 2725\n * suitable for reporting.                                                                                             // 2726\n *                                                                                                                     // 2727\n * @api private                                                                                                        // 2728\n * @param {Object} cov                                                                                                 // 2729\n * @return {Object}                                                                                                    // 2730\n */                                                                                                                    // 2731\n                                                                                                                       // 2732\nfunction map(cov) {                                                                                                    // 2733\n  var ret = {                                                                                                          // 2734\n    instrumentation: 'node-jscoverage',                                                                                // 2735\n    sloc: 0,                                                                                                           // 2736\n    hits: 0,                                                                                                           // 2737\n    misses: 0,                                                                                                         // 2738\n    coverage: 0,                                                                                                       // 2739\n    files: []                                                                                                          // 2740\n  };                                                                                                                   // 2741\n                                                                                                                       // 2742\n  for (var filename in cov) {                                                                                          // 2743\n    if (Object.prototype.hasOwnProperty.call(cov, filename)) {                                                         // 2744\n      var data = coverage(filename, cov[filename]);                                                                    // 2745\n      ret.files.push(data);                                                                                            // 2746\n      ret.hits += data.hits;                                                                                           // 2747\n      ret.misses += data.misses;                                                                                       // 2748\n      ret.sloc += data.sloc;                                                                                           // 2749\n    }                                                                                                                  // 2750\n  }                                                                                                                    // 2751\n                                                                                                                       // 2752\n  ret.files.sort(function(a, b) {                                                                                      // 2753\n    return a.filename.localeCompare(b.filename);                                                                       // 2754\n  });                                                                                                                  // 2755\n                                                                                                                       // 2756\n  if (ret.sloc > 0) {                                                                                                  // 2757\n    ret.coverage = (ret.hits / ret.sloc) * 100;                                                                        // 2758\n  }                                                                                                                    // 2759\n                                                                                                                       // 2760\n  return ret;                                                                                                          // 2761\n}                                                                                                                      // 2762\n                                                                                                                       // 2763\n/**                                                                                                                    // 2764\n * Map jscoverage data for a single source file                                                                        // 2765\n * to a JSON structure suitable for reporting.                                                                         // 2766\n *                                                                                                                     // 2767\n * @api private                                                                                                        // 2768\n * @param {string} filename name of the source file                                                                    // 2769\n * @param {Object} data jscoverage coverage data                                                                       // 2770\n * @return {Object}                                                                                                    // 2771\n */                                                                                                                    // 2772\nfunction coverage(filename, data) {                                                                                    // 2773\n  var ret = {                                                                                                          // 2774\n    filename: filename,                                                                                                // 2775\n    coverage: 0,                                                                                                       // 2776\n    hits: 0,                                                                                                           // 2777\n    misses: 0,                                                                                                         // 2778\n    sloc: 0,                                                                                                           // 2779\n    source: {}                                                                                                         // 2780\n  };                                                                                                                   // 2781\n                                                                                                                       // 2782\n  data.source.forEach(function(line, num) {                                                                            // 2783\n    num++;                                                                                                             // 2784\n                                                                                                                       // 2785\n    if (data[num] === 0) {                                                                                             // 2786\n      ret.misses++;                                                                                                    // 2787\n      ret.sloc++;                                                                                                      // 2788\n    } else if (data[num] !== undefined) {                                                                              // 2789\n      ret.hits++;                                                                                                      // 2790\n      ret.sloc++;                                                                                                      // 2791\n    }                                                                                                                  // 2792\n                                                                                                                       // 2793\n    ret.source[num] = {                                                                                                // 2794\n      source: line,                                                                                                    // 2795\n      coverage: data[num] === undefined ? '' : data[num]                                                               // 2796\n    };                                                                                                                 // 2797\n  });                                                                                                                  // 2798\n                                                                                                                       // 2799\n  ret.coverage = ret.hits / ret.sloc * 100;                                                                            // 2800\n                                                                                                                       // 2801\n  return ret;                                                                                                          // 2802\n}                                                                                                                      // 2803\n                                                                                                                       // 2804\n/**                                                                                                                    // 2805\n * Return a plain-object representation of `test`                                                                      // 2806\n * free of cyclic properties etc.                                                                                      // 2807\n *                                                                                                                     // 2808\n * @api private                                                                                                        // 2809\n * @param {Object} test                                                                                                // 2810\n * @return {Object}                                                                                                    // 2811\n */                                                                                                                    // 2812\nfunction clean(test) {                                                                                                 // 2813\n  return {                                                                                                             // 2814\n    duration: test.duration,                                                                                           // 2815\n    currentRetry: test.currentRetry(),                                                                                 // 2816\n    fullTitle: test.fullTitle(),                                                                                       // 2817\n    title: test.title                                                                                                  // 2818\n  };                                                                                                                   // 2819\n}                                                                                                                      // 2820\n                                                                                                                       // 2821\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./base\":17,\"_process\":51}],24:[function(require,module,exports){                                                   // 2823\n(function (process){                                                                                                   // 2824\n/**                                                                                                                    // 2825\n * Module dependencies.                                                                                                // 2826\n */                                                                                                                    // 2827\n                                                                                                                       // 2828\nvar Base = require('./base');                                                                                          // 2829\n                                                                                                                       // 2830\n/**                                                                                                                    // 2831\n * Expose `List`.                                                                                                      // 2832\n */                                                                                                                    // 2833\n                                                                                                                       // 2834\nexports = module.exports = List;                                                                                       // 2835\n                                                                                                                       // 2836\n/**                                                                                                                    // 2837\n * Initialize a new `List` test reporter.                                                                              // 2838\n *                                                                                                                     // 2839\n * @api public                                                                                                         // 2840\n * @param {Runner} runner                                                                                              // 2841\n */                                                                                                                    // 2842\nfunction List(runner) {                                                                                                // 2843\n  Base.call(this, runner);                                                                                             // 2844\n                                                                                                                       // 2845\n  var self = this;                                                                                                     // 2846\n  var total = runner.total;                                                                                            // 2847\n                                                                                                                       // 2848\n  runner.on('start', function() {                                                                                      // 2849\n    console.log(JSON.stringify(['start', { total: total }]));                                                          // 2850\n  });                                                                                                                  // 2851\n                                                                                                                       // 2852\n  runner.on('pass', function(test) {                                                                                   // 2853\n    console.log(JSON.stringify(['pass', clean(test)]));                                                                // 2854\n  });                                                                                                                  // 2855\n                                                                                                                       // 2856\n  runner.on('fail', function(test, err) {                                                                              // 2857\n    test = clean(test);                                                                                                // 2858\n    test.err = err.message;                                                                                            // 2859\n    test.stack = err.stack || null;                                                                                    // 2860\n    console.log(JSON.stringify(['fail', test]));                                                                       // 2861\n  });                                                                                                                  // 2862\n                                                                                                                       // 2863\n  runner.on('end', function() {                                                                                        // 2864\n    process.stdout.write(JSON.stringify(['end', self.stats]));                                                         // 2865\n  });                                                                                                                  // 2866\n}                                                                                                                      // 2867\n                                                                                                                       // 2868\n/**                                                                                                                    // 2869\n * Return a plain-object representation of `test`                                                                      // 2870\n * free of cyclic properties etc.                                                                                      // 2871\n *                                                                                                                     // 2872\n * @api private                                                                                                        // 2873\n * @param {Object} test                                                                                                // 2874\n * @return {Object}                                                                                                    // 2875\n */                                                                                                                    // 2876\nfunction clean(test) {                                                                                                 // 2877\n  return {                                                                                                             // 2878\n    title: test.title,                                                                                                 // 2879\n    fullTitle: test.fullTitle(),                                                                                       // 2880\n    duration: test.duration,                                                                                           // 2881\n    currentRetry: test.currentRetry()                                                                                  // 2882\n  };                                                                                                                   // 2883\n}                                                                                                                      // 2884\n                                                                                                                       // 2885\n}).call(this,require('_process'))                                                                                      // 2886\n},{\"./base\":17,\"_process\":51}],25:[function(require,module,exports){                                                   // 2887\n(function (process){                                                                                                   // 2888\n/**                                                                                                                    // 2889\n * Module dependencies.                                                                                                // 2890\n */                                                                                                                    // 2891\n                                                                                                                       // 2892\nvar Base = require('./base');                                                                                          // 2893\n                                                                                                                       // 2894\n/**                                                                                                                    // 2895\n * Expose `JSON`.                                                                                                      // 2896\n */                                                                                                                    // 2897\n                                                                                                                       // 2898\nexports = module.exports = JSONReporter;                                                                               // 2899\n                                                                                                                       // 2900\n/**                                                                                                                    // 2901\n * Initialize a new `JSON` reporter.                                                                                   // 2902\n *                                                                                                                     // 2903\n * @api public                                                                                                         // 2904\n * @param {Runner} runner                                                                                              // 2905\n */                                                                                                                    // 2906\nfunction JSONReporter(runner) {                                                                                        // 2907\n  Base.call(this, runner);                                                                                             // 2908\n                                                                                                                       // 2909\n  var self = this;                                                                                                     // 2910\n  var tests = [];                                                                                                      // 2911\n  var pending = [];                                                                                                    // 2912\n  var failures = [];                                                                                                   // 2913\n  var passes = [];                                                                                                     // 2914\n                                                                                                                       // 2915\n  runner.on('test end', function(test) {                                                                               // 2916\n    tests.push(test);                                                                                                  // 2917\n  });                                                                                                                  // 2918\n                                                                                                                       // 2919\n  runner.on('pass', function(test) {                                                                                   // 2920\n    passes.push(test);                                                                                                 // 2921\n  });                                                                                                                  // 2922\n                                                                                                                       // 2923\n  runner.on('fail', function(test) {                                                                                   // 2924\n    failures.push(test);                                                                                               // 2925\n  });                                                                                                                  // 2926\n                                                                                                                       // 2927\n  runner.on('pending', function(test) {                                                                                // 2928\n    pending.push(test);                                                                                                // 2929\n  });                                                                                                                  // 2930\n                                                                                                                       // 2931\n  runner.on('end', function() {                                                                                        // 2932\n    var obj = {                                                                                                        // 2933\n      stats: self.stats,                                                                                               // 2934\n      tests: tests.map(clean),                                                                                         // 2935\n      pending: pending.map(clean),                                                                                     // 2936\n      failures: failures.map(clean),                                                                                   // 2937\n      passes: passes.map(clean)                                                                                        // 2938\n    };                                                                                                                 // 2939\n                                                                                                                       // 2940\n    runner.testResults = obj;                                                                                          // 2941\n                                                                                                                       // 2942\n    process.stdout.write(JSON.stringify(obj, null, 2));                                                                // 2943\n  });                                                                                                                  // 2944\n}                                                                                                                      // 2945\n                                                                                                                       // 2946\n/**                                                                                                                    // 2947\n * Return a plain-object representation of `test`                                                                      // 2948\n * free of cyclic properties etc.                                                                                      // 2949\n *                                                                                                                     // 2950\n * @api private                                                                                                        // 2951\n * @param {Object} test                                                                                                // 2952\n * @return {Object}                                                                                                    // 2953\n */                                                                                                                    // 2954\nfunction clean(test) {                                                                                                 // 2955\n  return {                                                                                                             // 2956\n    title: test.title,                                                                                                 // 2957\n    fullTitle: test.fullTitle(),                                                                                       // 2958\n    duration: test.duration,                                                                                           // 2959\n    currentRetry: test.currentRetry(),                                                                                 // 2960\n    err: errorJSON(test.err || {})                                                                                     // 2961\n  };                                                                                                                   // 2962\n}                                                                                                                      // 2963\n                                                                                                                       // 2964\n/**                                                                                                                    // 2965\n * Transform `error` into a JSON object.                                                                               // 2966\n *                                                                                                                     // 2967\n * @api private                                                                                                        // 2968\n * @param {Error} err                                                                                                  // 2969\n * @return {Object}                                                                                                    // 2970\n */                                                                                                                    // 2971\nfunction errorJSON(err) {                                                                                              // 2972\n  var res = {};                                                                                                        // 2973\n  Object.getOwnPropertyNames(err).forEach(function(key) {                                                              // 2974\n    res[key] = err[key];                                                                                               // 2975\n  }, err);                                                                                                             // 2976\n  return res;                                                                                                          // 2977\n}                                                                                                                      // 2978\n                                                                                                                       // 2979\n}).call(this,require('_process'))                                                                                      // 2980\n},{\"./base\":17,\"_process\":51}],26:[function(require,module,exports){                                                   // 2981\n(function (process){                                                                                                   // 2982\n/**                                                                                                                    // 2983\n * Module dependencies.                                                                                                // 2984\n */                                                                                                                    // 2985\n                                                                                                                       // 2986\nvar Base = require('./base');                                                                                          // 2987\nvar inherits = require('../utils').inherits;                                                                           // 2988\nvar cursor = Base.cursor;                                                                                              // 2989\nvar color = Base.color;                                                                                                // 2990\n                                                                                                                       // 2991\n/**                                                                                                                    // 2992\n * Expose `Landing`.                                                                                                   // 2993\n */                                                                                                                    // 2994\n                                                                                                                       // 2995\nexports = module.exports = Landing;                                                                                    // 2996\n                                                                                                                       // 2997\n/**                                                                                                                    // 2998\n * Airplane color.                                                                                                     // 2999\n */                                                                                                                    // 3000\n                                                                                                                       // 3001\nBase.colors.plane = 0;                                                                                                 // 3002\n                                                                                                                       // 3003\n/**                                                                                                                    // 3004\n * Airplane crash color.                                                                                               // 3005\n */                                                                                                                    // 3006\n                                                                                                                       // 3007\nBase.colors['plane crash'] = 31;                                                                                       // 3008\n                                                                                                                       // 3009\n/**                                                                                                                    // 3010\n * Runway color.                                                                                                       // 3011\n */                                                                                                                    // 3012\n                                                                                                                       // 3013\nBase.colors.runway = 90;                                                                                               // 3014\n                                                                                                                       // 3015\n/**                                                                                                                    // 3016\n * Initialize a new `Landing` reporter.                                                                                // 3017\n *                                                                                                                     // 3018\n * @api public                                                                                                         // 3019\n * @param {Runner} runner                                                                                              // 3020\n */                                                                                                                    // 3021\nfunction Landing(runner) {                                                                                             // 3022\n  Base.call(this, runner);                                                                                             // 3023\n                                                                                                                       // 3024\n  var self = this;                                                                                                     // 3025\n  var width = Base.window.width * .75 | 0;                                                                             // 3026\n  var total = runner.total;                                                                                            // 3027\n  var stream = process.stdout;                                                                                         // 3028\n  var plane = color('plane', '✈');                                                                                     // 3029\n  var crashed = -1;                                                                                                    // 3030\n  var n = 0;                                                                                                           // 3031\n                                                                                                                       // 3032\n  function runway() {                                                                                                  // 3033\n    var buf = Array(width).join('-');                                                                                  // 3034\n    return '  ' + color('runway', buf);                                                                                // 3035\n  }                                                                                                                    // 3036\n                                                                                                                       // 3037\n  runner.on('start', function() {                                                                                      // 3038\n    stream.write('\\n\\n\\n  ');                                                                                          // 3039\n    cursor.hide();                                                                                                     // 3040\n  });                                                                                                                  // 3041\n                                                                                                                       // 3042\n  runner.on('test end', function(test) {                                                                               // 3043\n    // check if the plane crashed                                                                                      // 3044\n    var col = crashed === -1 ? width * ++n / total | 0 : crashed;                                                      // 3045\n                                                                                                                       // 3046\n    // show the crash                                                                                                  // 3047\n    if (test.state === 'failed') {                                                                                     // 3048\n      plane = color('plane crash', '✈');                                                                               // 3049\n      crashed = col;                                                                                                   // 3050\n    }                                                                                                                  // 3051\n                                                                                                                       // 3052\n    // render landing strip                                                                                            // 3053\n    stream.write('\\u001b[' + (width + 1) + 'D\\u001b[2A');                                                              // 3054\n    stream.write(runway());                                                                                            // 3055\n    stream.write('\\n  ');                                                                                              // 3056\n    stream.write(color('runway', Array(col).join('⋅')));                                                               // 3057\n    stream.write(plane);                                                                                               // 3058\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));                                                // 3059\n    stream.write(runway());                                                                                            // 3060\n    stream.write('\\u001b[0m');                                                                                         // 3061\n  });                                                                                                                  // 3062\n                                                                                                                       // 3063\n  runner.on('end', function() {                                                                                        // 3064\n    cursor.show();                                                                                                     // 3065\n    console.log();                                                                                                     // 3066\n    self.epilogue();                                                                                                   // 3067\n  });                                                                                                                  // 3068\n}                                                                                                                      // 3069\n                                                                                                                       // 3070\n/**                                                                                                                    // 3071\n * Inherit from `Base.prototype`.                                                                                      // 3072\n */                                                                                                                    // 3073\ninherits(Landing, Base);                                                                                               // 3074\n                                                                                                                       // 3075\n}).call(this,require('_process'))                                                                                      // 3076\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],27:[function(require,module,exports){                                     // 3077\n(function (process){                                                                                                   // 3078\n/**                                                                                                                    // 3079\n * Module dependencies.                                                                                                // 3080\n */                                                                                                                    // 3081\n                                                                                                                       // 3082\nvar Base = require('./base');                                                                                          // 3083\nvar inherits = require('../utils').inherits;                                                                           // 3084\nvar color = Base.color;                                                                                                // 3085\nvar cursor = Base.cursor;                                                                                              // 3086\n                                                                                                                       // 3087\n/**                                                                                                                    // 3088\n * Expose `List`.                                                                                                      // 3089\n */                                                                                                                    // 3090\n                                                                                                                       // 3091\nexports = module.exports = List;                                                                                       // 3092\n                                                                                                                       // 3093\n/**                                                                                                                    // 3094\n * Initialize a new `List` test reporter.                                                                              // 3095\n *                                                                                                                     // 3096\n * @api public                                                                                                         // 3097\n * @param {Runner} runner                                                                                              // 3098\n */                                                                                                                    // 3099\nfunction List(runner) {                                                                                                // 3100\n  Base.call(this, runner);                                                                                             // 3101\n                                                                                                                       // 3102\n  var self = this;                                                                                                     // 3103\n  var n = 0;                                                                                                           // 3104\n                                                                                                                       // 3105\n  runner.on('start', function() {                                                                                      // 3106\n    console.log();                                                                                                     // 3107\n  });                                                                                                                  // 3108\n                                                                                                                       // 3109\n  runner.on('test', function(test) {                                                                                   // 3110\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));                                             // 3111\n  });                                                                                                                  // 3112\n                                                                                                                       // 3113\n  runner.on('pending', function(test) {                                                                                // 3114\n    var fmt = color('checkmark', '  -')                                                                                // 3115\n      + color('pending', ' %s');                                                                                       // 3116\n    console.log(fmt, test.fullTitle());                                                                                // 3117\n  });                                                                                                                  // 3118\n                                                                                                                       // 3119\n  runner.on('pass', function(test) {                                                                                   // 3120\n    var fmt = color('checkmark', '  ' + Base.symbols.dot)                                                              // 3121\n      + color('pass', ' %s: ')                                                                                         // 3122\n      + color(test.speed, '%dms');                                                                                     // 3123\n    cursor.CR();                                                                                                       // 3124\n    console.log(fmt, test.fullTitle(), test.duration);                                                                 // 3125\n  });                                                                                                                  // 3126\n                                                                                                                       // 3127\n  runner.on('fail', function(test) {                                                                                   // 3128\n    cursor.CR();                                                                                                       // 3129\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());                                                     // 3130\n  });                                                                                                                  // 3131\n                                                                                                                       // 3132\n  runner.on('end', self.epilogue.bind(self));                                                                          // 3133\n}                                                                                                                      // 3134\n                                                                                                                       // 3135\n/**                                                                                                                    // 3136\n * Inherit from `Base.prototype`.                                                                                      // 3137\n */                                                                                                                    // 3138\ninherits(List, Base);                                                                                                  // 3139\n                                                                                                                       // 3140\n}).call(this,require('_process'))                                                                                      // 3141\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],28:[function(require,module,exports){                                     // 3142\n(function (process){                                                                                                   // 3143\n/**                                                                                                                    // 3144\n * Module dependencies.                                                                                                // 3145\n */                                                                                                                    // 3146\n                                                                                                                       // 3147\nvar Base = require('./base');                                                                                          // 3148\nvar utils = require('../utils');                                                                                       // 3149\n                                                                                                                       // 3150\n/**                                                                                                                    // 3151\n * Constants                                                                                                           // 3152\n */                                                                                                                    // 3153\n                                                                                                                       // 3154\nvar SUITE_PREFIX = '$';                                                                                                // 3155\n                                                                                                                       // 3156\n/**                                                                                                                    // 3157\n * Expose `Markdown`.                                                                                                  // 3158\n */                                                                                                                    // 3159\n                                                                                                                       // 3160\nexports = module.exports = Markdown;                                                                                   // 3161\n                                                                                                                       // 3162\n/**                                                                                                                    // 3163\n * Initialize a new `Markdown` reporter.                                                                               // 3164\n *                                                                                                                     // 3165\n * @api public                                                                                                         // 3166\n * @param {Runner} runner                                                                                              // 3167\n */                                                                                                                    // 3168\nfunction Markdown(runner) {                                                                                            // 3169\n  Base.call(this, runner);                                                                                             // 3170\n                                                                                                                       // 3171\n  var level = 0;                                                                                                       // 3172\n  var buf = '';                                                                                                        // 3173\n                                                                                                                       // 3174\n  function title(str) {                                                                                                // 3175\n    return Array(level).join('#') + ' ' + str;                                                                         // 3176\n  }                                                                                                                    // 3177\n                                                                                                                       // 3178\n  function mapTOC(suite, obj) {                                                                                        // 3179\n    var ret = obj;                                                                                                     // 3180\n    var key = SUITE_PREFIX + suite.title;                                                                              // 3181\n                                                                                                                       // 3182\n    obj = obj[key] = obj[key] || { suite: suite };                                                                     // 3183\n    suite.suites.forEach(function(suite) {                                                                             // 3184\n      mapTOC(suite, obj);                                                                                              // 3185\n    });                                                                                                                // 3186\n                                                                                                                       // 3187\n    return ret;                                                                                                        // 3188\n  }                                                                                                                    // 3189\n                                                                                                                       // 3190\n  function stringifyTOC(obj, level) {                                                                                  // 3191\n    ++level;                                                                                                           // 3192\n    var buf = '';                                                                                                      // 3193\n    var link;                                                                                                          // 3194\n    for (var key in obj) {                                                                                             // 3195\n      if (key === 'suite') {                                                                                           // 3196\n        continue;                                                                                                      // 3197\n      }                                                                                                                // 3198\n      if (key !== SUITE_PREFIX) {                                                                                      // 3199\n        link = ' - [' + key.substring(1) + ']';                                                                        // 3200\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';                                                 // 3201\n        buf += Array(level).join('  ') + link;                                                                         // 3202\n      }                                                                                                                // 3203\n      buf += stringifyTOC(obj[key], level);                                                                            // 3204\n    }                                                                                                                  // 3205\n    return buf;                                                                                                        // 3206\n  }                                                                                                                    // 3207\n                                                                                                                       // 3208\n  function generateTOC(suite) {                                                                                        // 3209\n    var obj = mapTOC(suite, {});                                                                                       // 3210\n    return stringifyTOC(obj, 0);                                                                                       // 3211\n  }                                                                                                                    // 3212\n                                                                                                                       // 3213\n  generateTOC(runner.suite);                                                                                           // 3214\n                                                                                                                       // 3215\n  runner.on('suite', function(suite) {                                                                                 // 3216\n    ++level;                                                                                                           // 3217\n    var slug = utils.slug(suite.fullTitle());                                                                          // 3218\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';                                                                       // 3219\n    buf += title(suite.title) + '\\n';                                                                                  // 3220\n  });                                                                                                                  // 3221\n                                                                                                                       // 3222\n  runner.on('suite end', function() {                                                                                  // 3223\n    --level;                                                                                                           // 3224\n  });                                                                                                                  // 3225\n                                                                                                                       // 3226\n  runner.on('pass', function(test) {                                                                                   // 3227\n    var code = utils.clean(test.body);                                                                                 // 3228\n    buf += test.title + '.\\n';                                                                                         // 3229\n    buf += '\\n```js\\n';                                                                                                // 3230\n    buf += code + '\\n';                                                                                                // 3231\n    buf += '```\\n\\n';                                                                                                  // 3232\n  });                                                                                                                  // 3233\n                                                                                                                       // 3234\n  runner.on('end', function() {                                                                                        // 3235\n    process.stdout.write('# TOC\\n');                                                                                   // 3236\n    process.stdout.write(generateTOC(runner.suite));                                                                   // 3237\n    process.stdout.write(buf);                                                                                         // 3238\n  });                                                                                                                  // 3239\n}                                                                                                                      // 3240\n                                                                                                                       // 3241\n}).call(this,require('_process'))                                                                                      // 3242\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],29:[function(require,module,exports){                                     // 3243\n(function (process){                                                                                                   // 3244\n/**                                                                                                                    // 3245\n * Module dependencies.                                                                                                // 3246\n */                                                                                                                    // 3247\n                                                                                                                       // 3248\nvar Base = require('./base');                                                                                          // 3249\nvar inherits = require('../utils').inherits;                                                                           // 3250\n                                                                                                                       // 3251\n/**                                                                                                                    // 3252\n * Expose `Min`.                                                                                                       // 3253\n */                                                                                                                    // 3254\n                                                                                                                       // 3255\nexports = module.exports = Min;                                                                                        // 3256\n                                                                                                                       // 3257\n/**                                                                                                                    // 3258\n * Initialize a new `Min` minimal test reporter (best used with --watch).                                              // 3259\n *                                                                                                                     // 3260\n * @api public                                                                                                         // 3261\n * @param {Runner} runner                                                                                              // 3262\n */                                                                                                                    // 3263\nfunction Min(runner) {                                                                                                 // 3264\n  Base.call(this, runner);                                                                                             // 3265\n                                                                                                                       // 3266\n  runner.on('start', function() {                                                                                      // 3267\n    // clear screen                                                                                                    // 3268\n    process.stdout.write('\\u001b[2J');                                                                                 // 3269\n    // set cursor position                                                                                             // 3270\n    process.stdout.write('\\u001b[1;3H');                                                                               // 3271\n  });                                                                                                                  // 3272\n                                                                                                                       // 3273\n  runner.on('end', this.epilogue.bind(this));                                                                          // 3274\n}                                                                                                                      // 3275\n                                                                                                                       // 3276\n/**                                                                                                                    // 3277\n * Inherit from `Base.prototype`.                                                                                      // 3278\n */                                                                                                                    // 3279\ninherits(Min, Base);                                                                                                   // 3280\n                                                                                                                       // 3281\n}).call(this,require('_process'))                                                                                      // 3282\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],30:[function(require,module,exports){                                     // 3283\n(function (process){                                                                                                   // 3284\n/**                                                                                                                    // 3285\n * Module dependencies.                                                                                                // 3286\n */                                                                                                                    // 3287\n                                                                                                                       // 3288\nvar Base = require('./base');                                                                                          // 3289\nvar inherits = require('../utils').inherits;                                                                           // 3290\n                                                                                                                       // 3291\n/**                                                                                                                    // 3292\n * Expose `Dot`.                                                                                                       // 3293\n */                                                                                                                    // 3294\n                                                                                                                       // 3295\nexports = module.exports = NyanCat;                                                                                    // 3296\n                                                                                                                       // 3297\n/**                                                                                                                    // 3298\n * Initialize a new `Dot` matrix test reporter.                                                                        // 3299\n *                                                                                                                     // 3300\n * @param {Runner} runner                                                                                              // 3301\n * @api public                                                                                                         // 3302\n */                                                                                                                    // 3303\n                                                                                                                       // 3304\nfunction NyanCat(runner) {                                                                                             // 3305\n  Base.call(this, runner);                                                                                             // 3306\n                                                                                                                       // 3307\n  var self = this;                                                                                                     // 3308\n  var width = Base.window.width * .75 | 0;                                                                             // 3309\n  var nyanCatWidth = this.nyanCatWidth = 11;                                                                           // 3310\n                                                                                                                       // 3311\n  this.colorIndex = 0;                                                                                                 // 3312\n  this.numberOfLines = 4;                                                                                              // 3313\n  this.rainbowColors = self.generateColors();                                                                          // 3314\n  this.scoreboardWidth = 5;                                                                                            // 3315\n  this.tick = 0;                                                                                                       // 3316\n  this.trajectories = [[], [], [], []];                                                                                // 3317\n  this.trajectoryWidthMax = (width - nyanCatWidth);                                                                    // 3318\n                                                                                                                       // 3319\n  runner.on('start', function() {                                                                                      // 3320\n    Base.cursor.hide();                                                                                                // 3321\n    self.draw();                                                                                                       // 3322\n  });                                                                                                                  // 3323\n                                                                                                                       // 3324\n  runner.on('pending', function() {                                                                                    // 3325\n    self.draw();                                                                                                       // 3326\n  });                                                                                                                  // 3327\n                                                                                                                       // 3328\n  runner.on('pass', function() {                                                                                       // 3329\n    self.draw();                                                                                                       // 3330\n  });                                                                                                                  // 3331\n                                                                                                                       // 3332\n  runner.on('fail', function() {                                                                                       // 3333\n    self.draw();                                                                                                       // 3334\n  });                                                                                                                  // 3335\n                                                                                                                       // 3336\n  runner.on('end', function() {                                                                                        // 3337\n    Base.cursor.show();                                                                                                // 3338\n    for (var i = 0; i < self.numberOfLines; i++) {                                                                     // 3339\n      write('\\n');                                                                                                     // 3340\n    }                                                                                                                  // 3341\n    self.epilogue();                                                                                                   // 3342\n  });                                                                                                                  // 3343\n}                                                                                                                      // 3344\n                                                                                                                       // 3345\n/**                                                                                                                    // 3346\n * Inherit from `Base.prototype`.                                                                                      // 3347\n */                                                                                                                    // 3348\ninherits(NyanCat, Base);                                                                                               // 3349\n                                                                                                                       // 3350\n/**                                                                                                                    // 3351\n * Draw the nyan cat                                                                                                   // 3352\n *                                                                                                                     // 3353\n * @api private                                                                                                        // 3354\n */                                                                                                                    // 3355\n                                                                                                                       // 3356\nNyanCat.prototype.draw = function() {                                                                                  // 3357\n  this.appendRainbow();                                                                                                // 3358\n  this.drawScoreboard();                                                                                               // 3359\n  this.drawRainbow();                                                                                                  // 3360\n  this.drawNyanCat();                                                                                                  // 3361\n  this.tick = !this.tick;                                                                                              // 3362\n};                                                                                                                     // 3363\n                                                                                                                       // 3364\n/**                                                                                                                    // 3365\n * Draw the \"scoreboard\" showing the number                                                                            // 3366\n * of passes, failures and pending tests.                                                                              // 3367\n *                                                                                                                     // 3368\n * @api private                                                                                                        // 3369\n */                                                                                                                    // 3370\n                                                                                                                       // 3371\nNyanCat.prototype.drawScoreboard = function() {                                                                        // 3372\n  var stats = this.stats;                                                                                              // 3373\n                                                                                                                       // 3374\n  function draw(type, n) {                                                                                             // 3375\n    write(' ');                                                                                                        // 3376\n    write(Base.color(type, n));                                                                                        // 3377\n    write('\\n');                                                                                                       // 3378\n  }                                                                                                                    // 3379\n                                                                                                                       // 3380\n  draw('green', stats.passes);                                                                                         // 3381\n  draw('fail', stats.failures);                                                                                        // 3382\n  draw('pending', stats.pending);                                                                                      // 3383\n  write('\\n');                                                                                                         // 3384\n                                                                                                                       // 3385\n  this.cursorUp(this.numberOfLines);                                                                                   // 3386\n};                                                                                                                     // 3387\n                                                                                                                       // 3388\n/**                                                                                                                    // 3389\n * Append the rainbow.                                                                                                 // 3390\n *                                                                                                                     // 3391\n * @api private                                                                                                        // 3392\n */                                                                                                                    // 3393\n                                                                                                                       // 3394\nNyanCat.prototype.appendRainbow = function() {                                                                         // 3395\n  var segment = this.tick ? '_' : '-';                                                                                 // 3396\n  var rainbowified = this.rainbowify(segment);                                                                         // 3397\n                                                                                                                       // 3398\n  for (var index = 0; index < this.numberOfLines; index++) {                                                           // 3399\n    var trajectory = this.trajectories[index];                                                                         // 3400\n    if (trajectory.length >= this.trajectoryWidthMax) {                                                                // 3401\n      trajectory.shift();                                                                                              // 3402\n    }                                                                                                                  // 3403\n    trajectory.push(rainbowified);                                                                                     // 3404\n  }                                                                                                                    // 3405\n};                                                                                                                     // 3406\n                                                                                                                       // 3407\n/**                                                                                                                    // 3408\n * Draw the rainbow.                                                                                                   // 3409\n *                                                                                                                     // 3410\n * @api private                                                                                                        // 3411\n */                                                                                                                    // 3412\n                                                                                                                       // 3413\nNyanCat.prototype.drawRainbow = function() {                                                                           // 3414\n  var self = this;                                                                                                     // 3415\n                                                                                                                       // 3416\n  this.trajectories.forEach(function(line) {                                                                           // 3417\n    write('\\u001b[' + self.scoreboardWidth + 'C');                                                                     // 3418\n    write(line.join(''));                                                                                              // 3419\n    write('\\n');                                                                                                       // 3420\n  });                                                                                                                  // 3421\n                                                                                                                       // 3422\n  this.cursorUp(this.numberOfLines);                                                                                   // 3423\n};                                                                                                                     // 3424\n                                                                                                                       // 3425\n/**                                                                                                                    // 3426\n * Draw the nyan cat                                                                                                   // 3427\n *                                                                                                                     // 3428\n * @api private                                                                                                        // 3429\n */                                                                                                                    // 3430\nNyanCat.prototype.drawNyanCat = function() {                                                                           // 3431\n  var self = this;                                                                                                     // 3432\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;                                                 // 3433\n  var dist = '\\u001b[' + startWidth + 'C';                                                                             // 3434\n  var padding = '';                                                                                                    // 3435\n                                                                                                                       // 3436\n  write(dist);                                                                                                         // 3437\n  write('_,------,');                                                                                                  // 3438\n  write('\\n');                                                                                                         // 3439\n                                                                                                                       // 3440\n  write(dist);                                                                                                         // 3441\n  padding = self.tick ? '  ' : '   ';                                                                                  // 3442\n  write('_|' + padding + '/\\\\_/\\\\ ');                                                                                  // 3443\n  write('\\n');                                                                                                         // 3444\n                                                                                                                       // 3445\n  write(dist);                                                                                                         // 3446\n  padding = self.tick ? '_' : '__';                                                                                    // 3447\n  var tail = self.tick ? '~' : '^';                                                                                    // 3448\n  write(tail + '|' + padding + this.face() + ' ');                                                                     // 3449\n  write('\\n');                                                                                                         // 3450\n                                                                                                                       // 3451\n  write(dist);                                                                                                         // 3452\n  padding = self.tick ? ' ' : '  ';                                                                                    // 3453\n  write(padding + '\"\"  \"\" ');                                                                                          // 3454\n  write('\\n');                                                                                                         // 3455\n                                                                                                                       // 3456\n  this.cursorUp(this.numberOfLines);                                                                                   // 3457\n};                                                                                                                     // 3458\n                                                                                                                       // 3459\n/**                                                                                                                    // 3460\n * Draw nyan cat face.                                                                                                 // 3461\n *                                                                                                                     // 3462\n * @api private                                                                                                        // 3463\n * @return {string}                                                                                                    // 3464\n */                                                                                                                    // 3465\n                                                                                                                       // 3466\nNyanCat.prototype.face = function() {                                                                                  // 3467\n  var stats = this.stats;                                                                                              // 3468\n  if (stats.failures) {                                                                                                // 3469\n    return '( x .x)';                                                                                                  // 3470\n  } else if (stats.pending) {                                                                                          // 3471\n    return '( o .o)';                                                                                                  // 3472\n  } else if (stats.passes) {                                                                                           // 3473\n    return '( ^ .^)';                                                                                                  // 3474\n  }                                                                                                                    // 3475\n  return '( - .-)';                                                                                                    // 3476\n};                                                                                                                     // 3477\n                                                                                                                       // 3478\n/**                                                                                                                    // 3479\n * Move cursor up `n`.                                                                                                 // 3480\n *                                                                                                                     // 3481\n * @api private                                                                                                        // 3482\n * @param {number} n                                                                                                   // 3483\n */                                                                                                                    // 3484\n                                                                                                                       // 3485\nNyanCat.prototype.cursorUp = function(n) {                                                                             // 3486\n  write('\\u001b[' + n + 'A');                                                                                          // 3487\n};                                                                                                                     // 3488\n                                                                                                                       // 3489\n/**                                                                                                                    // 3490\n * Move cursor down `n`.                                                                                               // 3491\n *                                                                                                                     // 3492\n * @api private                                                                                                        // 3493\n * @param {number} n                                                                                                   // 3494\n */                                                                                                                    // 3495\n                                                                                                                       // 3496\nNyanCat.prototype.cursorDown = function(n) {                                                                           // 3497\n  write('\\u001b[' + n + 'B');                                                                                          // 3498\n};                                                                                                                     // 3499\n                                                                                                                       // 3500\n/**                                                                                                                    // 3501\n * Generate rainbow colors.                                                                                            // 3502\n *                                                                                                                     // 3503\n * @api private                                                                                                        // 3504\n * @return {Array}                                                                                                     // 3505\n */                                                                                                                    // 3506\nNyanCat.prototype.generateColors = function() {                                                                        // 3507\n  var colors = [];                                                                                                     // 3508\n                                                                                                                       // 3509\n  for (var i = 0; i < (6 * 7); i++) {                                                                                  // 3510\n    var pi3 = Math.floor(Math.PI / 3);                                                                                 // 3511\n    var n = (i * (1.0 / 6));                                                                                           // 3512\n    var r = Math.floor(3 * Math.sin(n) + 3);                                                                           // 3513\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);                                                                 // 3514\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);                                                                 // 3515\n    colors.push(36 * r + 6 * g + b + 16);                                                                              // 3516\n  }                                                                                                                    // 3517\n                                                                                                                       // 3518\n  return colors;                                                                                                       // 3519\n};                                                                                                                     // 3520\n                                                                                                                       // 3521\n/**                                                                                                                    // 3522\n * Apply rainbow to the given `str`.                                                                                   // 3523\n *                                                                                                                     // 3524\n * @api private                                                                                                        // 3525\n * @param {string} str                                                                                                 // 3526\n * @return {string}                                                                                                    // 3527\n */                                                                                                                    // 3528\nNyanCat.prototype.rainbowify = function(str) {                                                                         // 3529\n  if (!Base.useColors) {                                                                                               // 3530\n    return str;                                                                                                        // 3531\n  }                                                                                                                    // 3532\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];                                         // 3533\n  this.colorIndex += 1;                                                                                                // 3534\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';                                                             // 3535\n};                                                                                                                     // 3536\n                                                                                                                       // 3537\n/**                                                                                                                    // 3538\n * Stdout helper.                                                                                                      // 3539\n *                                                                                                                     // 3540\n * @param {string} string A message to write to stdout.                                                                // 3541\n */                                                                                                                    // 3542\nfunction write(string) {                                                                                               // 3543\n  process.stdout.write(string);                                                                                        // 3544\n}                                                                                                                      // 3545\n                                                                                                                       // 3546\n}).call(this,require('_process'))                                                                                      // 3547\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],31:[function(require,module,exports){                                     // 3548\n(function (process){                                                                                                   // 3549\n/**                                                                                                                    // 3550\n * Module dependencies.                                                                                                // 3551\n */                                                                                                                    // 3552\n                                                                                                                       // 3553\nvar Base = require('./base');                                                                                          // 3554\nvar inherits = require('../utils').inherits;                                                                           // 3555\nvar color = Base.color;                                                                                                // 3556\nvar cursor = Base.cursor;                                                                                              // 3557\n                                                                                                                       // 3558\n/**                                                                                                                    // 3559\n * Expose `Progress`.                                                                                                  // 3560\n */                                                                                                                    // 3561\n                                                                                                                       // 3562\nexports = module.exports = Progress;                                                                                   // 3563\n                                                                                                                       // 3564\n/**                                                                                                                    // 3565\n * General progress bar color.                                                                                         // 3566\n */                                                                                                                    // 3567\n                                                                                                                       // 3568\nBase.colors.progress = 90;                                                                                             // 3569\n                                                                                                                       // 3570\n/**                                                                                                                    // 3571\n * Initialize a new `Progress` bar test reporter.                                                                      // 3572\n *                                                                                                                     // 3573\n * @api public                                                                                                         // 3574\n * @param {Runner} runner                                                                                              // 3575\n * @param {Object} options                                                                                             // 3576\n */                                                                                                                    // 3577\nfunction Progress(runner, options) {                                                                                   // 3578\n  Base.call(this, runner);                                                                                             // 3579\n                                                                                                                       // 3580\n  var self = this;                                                                                                     // 3581\n  var width = Base.window.width * .50 | 0;                                                                             // 3582\n  var total = runner.total;                                                                                            // 3583\n  var complete = 0;                                                                                                    // 3584\n  var lastN = -1;                                                                                                      // 3585\n                                                                                                                       // 3586\n  // default chars                                                                                                     // 3587\n  options = options || {};                                                                                             // 3588\n  options.open = options.open || '[';                                                                                  // 3589\n  options.complete = options.complete || '▬';                                                                          // 3590\n  options.incomplete = options.incomplete || Base.symbols.dot;                                                         // 3591\n  options.close = options.close || ']';                                                                                // 3592\n  options.verbose = false;                                                                                             // 3593\n                                                                                                                       // 3594\n  // tests started                                                                                                     // 3595\n  runner.on('start', function() {                                                                                      // 3596\n    console.log();                                                                                                     // 3597\n    cursor.hide();                                                                                                     // 3598\n  });                                                                                                                  // 3599\n                                                                                                                       // 3600\n  // tests complete                                                                                                    // 3601\n  runner.on('test end', function() {                                                                                   // 3602\n    complete++;                                                                                                        // 3603\n                                                                                                                       // 3604\n    var percent = complete / total;                                                                                    // 3605\n    var n = width * percent | 0;                                                                                       // 3606\n    var i = width - n;                                                                                                 // 3607\n                                                                                                                       // 3608\n    if (n === lastN && !options.verbose) {                                                                             // 3609\n      // Don't re-render the line if it hasn't changed                                                                 // 3610\n      return;                                                                                                          // 3611\n    }                                                                                                                  // 3612\n    lastN = n;                                                                                                         // 3613\n                                                                                                                       // 3614\n    cursor.CR();                                                                                                       // 3615\n    process.stdout.write('\\u001b[J');                                                                                  // 3616\n    process.stdout.write(color('progress', '  ' + options.open));                                                      // 3617\n    process.stdout.write(Array(n).join(options.complete));                                                             // 3618\n    process.stdout.write(Array(i).join(options.incomplete));                                                           // 3619\n    process.stdout.write(color('progress', options.close));                                                            // 3620\n    if (options.verbose) {                                                                                             // 3621\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));                                        // 3622\n    }                                                                                                                  // 3623\n  });                                                                                                                  // 3624\n                                                                                                                       // 3625\n  // tests are complete, output some stats                                                                             // 3626\n  // and the failures if any                                                                                           // 3627\n  runner.on('end', function() {                                                                                        // 3628\n    cursor.show();                                                                                                     // 3629\n    console.log();                                                                                                     // 3630\n    self.epilogue();                                                                                                   // 3631\n  });                                                                                                                  // 3632\n}                                                                                                                      // 3633\n                                                                                                                       // 3634\n/**                                                                                                                    // 3635\n * Inherit from `Base.prototype`.                                                                                      // 3636\n */                                                                                                                    // 3637\ninherits(Progress, Base);                                                                                              // 3638\n                                                                                                                       // 3639\n}).call(this,require('_process'))                                                                                      // 3640\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],32:[function(require,module,exports){                                     // 3641\n/**                                                                                                                    // 3642\n * Module dependencies.                                                                                                // 3643\n */                                                                                                                    // 3644\n                                                                                                                       // 3645\nvar Base = require('./base');                                                                                          // 3646\nvar inherits = require('../utils').inherits;                                                                           // 3647\nvar color = Base.color;                                                                                                // 3648\nvar cursor = Base.cursor;                                                                                              // 3649\n                                                                                                                       // 3650\n/**                                                                                                                    // 3651\n * Expose `Spec`.                                                                                                      // 3652\n */                                                                                                                    // 3653\n                                                                                                                       // 3654\nexports = module.exports = Spec;                                                                                       // 3655\n                                                                                                                       // 3656\n/**                                                                                                                    // 3657\n * Initialize a new `Spec` test reporter.                                                                              // 3658\n *                                                                                                                     // 3659\n * @api public                                                                                                         // 3660\n * @param {Runner} runner                                                                                              // 3661\n */                                                                                                                    // 3662\nfunction Spec(runner) {                                                                                                // 3663\n  Base.call(this, runner);                                                                                             // 3664\n                                                                                                                       // 3665\n  var self = this;                                                                                                     // 3666\n  var indents = 0;                                                                                                     // 3667\n  var n = 0;                                                                                                           // 3668\n                                                                                                                       // 3669\n  function indent() {                                                                                                  // 3670\n    return Array(indents).join('  ');                                                                                  // 3671\n  }                                                                                                                    // 3672\n                                                                                                                       // 3673\n  runner.on('start', function() {                                                                                      // 3674\n    console.log();                                                                                                     // 3675\n  });                                                                                                                  // 3676\n                                                                                                                       // 3677\n  runner.on('suite', function(suite) {                                                                                 // 3678\n    ++indents;                                                                                                         // 3679\n    console.log(color('suite', '%s%s'), indent(), suite.title);                                                        // 3680\n  });                                                                                                                  // 3681\n                                                                                                                       // 3682\n  runner.on('suite end', function() {                                                                                  // 3683\n    --indents;                                                                                                         // 3684\n    if (indents === 1) {                                                                                               // 3685\n      console.log();                                                                                                   // 3686\n    }                                                                                                                  // 3687\n  });                                                                                                                  // 3688\n                                                                                                                       // 3689\n  runner.on('pending', function(test) {                                                                                // 3690\n    var fmt = indent() + color('pending', '  - %s');                                                                   // 3691\n    console.log(fmt, test.title);                                                                                      // 3692\n  });                                                                                                                  // 3693\n                                                                                                                       // 3694\n  runner.on('pass', function(test) {                                                                                   // 3695\n    var fmt;                                                                                                           // 3696\n    if (test.speed === 'fast') {                                                                                       // 3697\n      fmt = indent()                                                                                                   // 3698\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                   // 3699\n        + color('pass', ' %s');                                                                                        // 3700\n      cursor.CR();                                                                                                     // 3701\n      console.log(fmt, test.title);                                                                                    // 3702\n    } else {                                                                                                           // 3703\n      fmt = indent()                                                                                                   // 3704\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                   // 3705\n        + color('pass', ' %s')                                                                                         // 3706\n        + color(test.speed, ' (%dms)');                                                                                // 3707\n      cursor.CR();                                                                                                     // 3708\n      console.log(fmt, test.title, test.duration);                                                                     // 3709\n    }                                                                                                                  // 3710\n  });                                                                                                                  // 3711\n                                                                                                                       // 3712\n  runner.on('fail', function(test) {                                                                                   // 3713\n    cursor.CR();                                                                                                       // 3714\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);                                                // 3715\n  });                                                                                                                  // 3716\n                                                                                                                       // 3717\n  runner.on('end', self.epilogue.bind(self));                                                                          // 3718\n}                                                                                                                      // 3719\n                                                                                                                       // 3720\n/**                                                                                                                    // 3721\n * Inherit from `Base.prototype`.                                                                                      // 3722\n */                                                                                                                    // 3723\ninherits(Spec, Base);                                                                                                  // 3724\n                                                                                                                       // 3725\n},{\"../utils\":39,\"./base\":17}],33:[function(require,module,exports){                                                   // 3726\n/**                                                                                                                    // 3727\n * Module dependencies.                                                                                                // 3728\n */                                                                                                                    // 3729\n                                                                                                                       // 3730\nvar Base = require('./base');                                                                                          // 3731\n                                                                                                                       // 3732\n/**                                                                                                                    // 3733\n * Expose `TAP`.                                                                                                       // 3734\n */                                                                                                                    // 3735\n                                                                                                                       // 3736\nexports = module.exports = TAP;                                                                                        // 3737\n                                                                                                                       // 3738\n/**                                                                                                                    // 3739\n * Initialize a new `TAP` reporter.                                                                                    // 3740\n *                                                                                                                     // 3741\n * @api public                                                                                                         // 3742\n * @param {Runner} runner                                                                                              // 3743\n */                                                                                                                    // 3744\nfunction TAP(runner) {                                                                                                 // 3745\n  Base.call(this, runner);                                                                                             // 3746\n                                                                                                                       // 3747\n  var n = 1;                                                                                                           // 3748\n  var passes = 0;                                                                                                      // 3749\n  var failures = 0;                                                                                                    // 3750\n                                                                                                                       // 3751\n  runner.on('start', function() {                                                                                      // 3752\n    var total = runner.grepTotal(runner.suite);                                                                        // 3753\n    console.log('%d..%d', 1, total);                                                                                   // 3754\n  });                                                                                                                  // 3755\n                                                                                                                       // 3756\n  runner.on('test end', function() {                                                                                   // 3757\n    ++n;                                                                                                               // 3758\n  });                                                                                                                  // 3759\n                                                                                                                       // 3760\n  runner.on('pending', function(test) {                                                                                // 3761\n    console.log('ok %d %s # SKIP -', n, title(test));                                                                  // 3762\n  });                                                                                                                  // 3763\n                                                                                                                       // 3764\n  runner.on('pass', function(test) {                                                                                   // 3765\n    passes++;                                                                                                          // 3766\n    console.log('ok %d %s', n, title(test));                                                                           // 3767\n  });                                                                                                                  // 3768\n                                                                                                                       // 3769\n  runner.on('fail', function(test, err) {                                                                              // 3770\n    failures++;                                                                                                        // 3771\n    console.log('not ok %d %s', n, title(test));                                                                       // 3772\n    if (err.stack) {                                                                                                   // 3773\n      console.log(err.stack.replace(/^/gm, '  '));                                                                     // 3774\n    }                                                                                                                  // 3775\n  });                                                                                                                  // 3776\n                                                                                                                       // 3777\n  runner.on('end', function() {                                                                                        // 3778\n    console.log('# tests ' + (passes + failures));                                                                     // 3779\n    console.log('# pass ' + passes);                                                                                   // 3780\n    console.log('# fail ' + failures);                                                                                 // 3781\n  });                                                                                                                  // 3782\n}                                                                                                                      // 3783\n                                                                                                                       // 3784\n/**                                                                                                                    // 3785\n * Return a TAP-safe title of `test`                                                                                   // 3786\n *                                                                                                                     // 3787\n * @api private                                                                                                        // 3788\n * @param {Object} test                                                                                                // 3789\n * @return {String}                                                                                                    // 3790\n */                                                                                                                    // 3791\nfunction title(test) {                                                                                                 // 3792\n  return test.fullTitle().replace(/#/g, '');                                                                           // 3793\n}                                                                                                                      // 3794\n                                                                                                                       // 3795\n},{\"./base\":17}],34:[function(require,module,exports){                                                                 // 3796\n(function (process,global){                                                                                            // 3797\n/**                                                                                                                    // 3798\n * Module dependencies.                                                                                                // 3799\n */                                                                                                                    // 3800\n                                                                                                                       // 3801\nvar Base = require('./base');                                                                                          // 3802\nvar utils = require('../utils');                                                                                       // 3803\nvar inherits = utils.inherits;                                                                                         // 3804\nvar fs = require('fs');                                                                                                // 3805\nvar escape = utils.escape;                                                                                             // 3806\nvar mkdirp = require('mkdirp');                                                                                        // 3807\nvar path = require('path');                                                                                            // 3808\n                                                                                                                       // 3809\n/**                                                                                                                    // 3810\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 3811\n */                                                                                                                    // 3812\n                                                                                                                       // 3813\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 3814\nvar Date = global.Date;                                                                                                // 3815\nvar setTimeout = global.setTimeout;                                                                                    // 3816\nvar setInterval = global.setInterval;                                                                                  // 3817\nvar clearTimeout = global.clearTimeout;                                                                                // 3818\nvar clearInterval = global.clearInterval;                                                                              // 3819\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 3820\n                                                                                                                       // 3821\n/**                                                                                                                    // 3822\n * Expose `XUnit`.                                                                                                     // 3823\n */                                                                                                                    // 3824\n                                                                                                                       // 3825\nexports = module.exports = XUnit;                                                                                      // 3826\n                                                                                                                       // 3827\n/**                                                                                                                    // 3828\n * Initialize a new `XUnit` reporter.                                                                                  // 3829\n *                                                                                                                     // 3830\n * @api public                                                                                                         // 3831\n * @param {Runner} runner                                                                                              // 3832\n */                                                                                                                    // 3833\nfunction XUnit(runner, options) {                                                                                      // 3834\n  Base.call(this, runner);                                                                                             // 3835\n                                                                                                                       // 3836\n  var stats = this.stats;                                                                                              // 3837\n  var tests = [];                                                                                                      // 3838\n  var self = this;                                                                                                     // 3839\n                                                                                                                       // 3840\n  if (options.reporterOptions && options.reporterOptions.output) {                                                     // 3841\n    if (!fs.createWriteStream) {                                                                                       // 3842\n      throw new Error('file output not supported in browser');                                                         // 3843\n    }                                                                                                                  // 3844\n    mkdirp.sync(path.dirname(options.reporterOptions.output));                                                         // 3845\n    self.fileStream = fs.createWriteStream(options.reporterOptions.output);                                            // 3846\n  }                                                                                                                    // 3847\n                                                                                                                       // 3848\n  runner.on('pending', function(test) {                                                                                // 3849\n    tests.push(test);                                                                                                  // 3850\n  });                                                                                                                  // 3851\n                                                                                                                       // 3852\n  runner.on('pass', function(test) {                                                                                   // 3853\n    tests.push(test);                                                                                                  // 3854\n  });                                                                                                                  // 3855\n                                                                                                                       // 3856\n  runner.on('fail', function(test) {                                                                                   // 3857\n    tests.push(test);                                                                                                  // 3858\n  });                                                                                                                  // 3859\n                                                                                                                       // 3860\n  runner.on('end', function() {                                                                                        // 3861\n    self.write(tag('testsuite', {                                                                                      // 3862\n      name: 'Mocha Tests',                                                                                             // 3863\n      tests: stats.tests,                                                                                              // 3864\n      failures: stats.failures,                                                                                        // 3865\n      errors: stats.failures,                                                                                          // 3866\n      skipped: stats.tests - stats.failures - stats.passes,                                                            // 3867\n      timestamp: (new Date()).toUTCString(),                                                                           // 3868\n      time: (stats.duration / 1000) || 0                                                                               // 3869\n    }, false));                                                                                                        // 3870\n                                                                                                                       // 3871\n    tests.forEach(function(t) {                                                                                        // 3872\n      self.test(t);                                                                                                    // 3873\n    });                                                                                                                // 3874\n                                                                                                                       // 3875\n    self.write('</testsuite>');                                                                                        // 3876\n  });                                                                                                                  // 3877\n}                                                                                                                      // 3878\n                                                                                                                       // 3879\n/**                                                                                                                    // 3880\n * Inherit from `Base.prototype`.                                                                                      // 3881\n */                                                                                                                    // 3882\ninherits(XUnit, Base);                                                                                                 // 3883\n                                                                                                                       // 3884\n/**                                                                                                                    // 3885\n * Override done to close the stream (if it's a file).                                                                 // 3886\n *                                                                                                                     // 3887\n * @param failures                                                                                                     // 3888\n * @param {Function} fn                                                                                                // 3889\n */                                                                                                                    // 3890\nXUnit.prototype.done = function(failures, fn) {                                                                        // 3891\n  if (this.fileStream) {                                                                                               // 3892\n    this.fileStream.end(function() {                                                                                   // 3893\n      fn(failures);                                                                                                    // 3894\n    });                                                                                                                // 3895\n  } else {                                                                                                             // 3896\n    fn(failures);                                                                                                      // 3897\n  }                                                                                                                    // 3898\n};                                                                                                                     // 3899\n                                                                                                                       // 3900\n/**                                                                                                                    // 3901\n * Write out the given line.                                                                                           // 3902\n *                                                                                                                     // 3903\n * @param {string} line                                                                                                // 3904\n */                                                                                                                    // 3905\nXUnit.prototype.write = function(line) {                                                                               // 3906\n  if (this.fileStream) {                                                                                               // 3907\n    this.fileStream.write(line + '\\n');                                                                                // 3908\n  } else if (typeof process === 'object' && process.stdout) {                                                          // 3909\n    process.stdout.write(line + '\\n');                                                                                 // 3910\n  } else {                                                                                                             // 3911\n    console.log(line);                                                                                                 // 3912\n  }                                                                                                                    // 3913\n};                                                                                                                     // 3914\n                                                                                                                       // 3915\n/**                                                                                                                    // 3916\n * Output tag for the given `test.`                                                                                    // 3917\n *                                                                                                                     // 3918\n * @param {Test} test                                                                                                  // 3919\n */                                                                                                                    // 3920\nXUnit.prototype.test = function(test) {                                                                                // 3921\n  var attrs = {                                                                                                        // 3922\n    classname: test.parent.fullTitle(),                                                                                // 3923\n    name: test.title,                                                                                                  // 3924\n    time: (test.duration / 1000) || 0                                                                                  // 3925\n  };                                                                                                                   // 3926\n                                                                                                                       // 3927\n  if (test.state === 'failed') {                                                                                       // 3928\n    var err = test.err;                                                                                                // 3929\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + '\\n' + err.stack))));\n  } else if (test.pending) {                                                                                           // 3931\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));                                               // 3932\n  } else {                                                                                                             // 3933\n    this.write(tag('testcase', attrs, true));                                                                          // 3934\n  }                                                                                                                    // 3935\n};                                                                                                                     // 3936\n                                                                                                                       // 3937\n/**                                                                                                                    // 3938\n * HTML tag helper.                                                                                                    // 3939\n *                                                                                                                     // 3940\n * @param name                                                                                                         // 3941\n * @param attrs                                                                                                        // 3942\n * @param close                                                                                                        // 3943\n * @param content                                                                                                      // 3944\n * @return {string}                                                                                                    // 3945\n */                                                                                                                    // 3946\nfunction tag(name, attrs, close, content) {                                                                            // 3947\n  var end = close ? '/>' : '>';                                                                                        // 3948\n  var pairs = [];                                                                                                      // 3949\n  var tag;                                                                                                             // 3950\n                                                                                                                       // 3951\n  for (var key in attrs) {                                                                                             // 3952\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {                                                            // 3953\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');                                                               // 3954\n    }                                                                                                                  // 3955\n  }                                                                                                                    // 3956\n                                                                                                                       // 3957\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;                                                // 3958\n  if (content) {                                                                                                       // 3959\n    tag += content + '</' + name + end;                                                                                // 3960\n  }                                                                                                                    // 3961\n  return tag;                                                                                                          // 3962\n}                                                                                                                      // 3963\n                                                                                                                       // 3964\n/**                                                                                                                    // 3965\n * Return cdata escaped CDATA `str`.                                                                                   // 3966\n */                                                                                                                    // 3967\n                                                                                                                       // 3968\nfunction cdata(str) {                                                                                                  // 3969\n  return '<![CDATA[' + escape(str) + ']]>';                                                                            // 3970\n}                                                                                                                      // 3971\n                                                                                                                       // 3972\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../utils\":39,\"./base\":17,\"_process\":51,\"fs\":41,\"mkdirp\":70,\"path\":41}],35:[function(require,module,exports){       // 3974\n(function (global){                                                                                                    // 3975\n/**                                                                                                                    // 3976\n * Module dependencies.                                                                                                // 3977\n */                                                                                                                    // 3978\n                                                                                                                       // 3979\nvar EventEmitter = require('events').EventEmitter;                                                                     // 3980\nvar Pending = require('./pending');                                                                                    // 3981\nvar debug = require('debug')('mocha:runnable');                                                                        // 3982\nvar milliseconds = require('./ms');                                                                                    // 3983\nvar utils = require('./utils');                                                                                        // 3984\nvar inherits = utils.inherits;                                                                                         // 3985\n                                                                                                                       // 3986\n/**                                                                                                                    // 3987\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 3988\n */                                                                                                                    // 3989\n                                                                                                                       // 3990\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 3991\nvar Date = global.Date;                                                                                                // 3992\nvar setTimeout = global.setTimeout;                                                                                    // 3993\nvar setInterval = global.setInterval;                                                                                  // 3994\nvar clearTimeout = global.clearTimeout;                                                                                // 3995\nvar clearInterval = global.clearInterval;                                                                              // 3996\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 3997\n                                                                                                                       // 3998\n/**                                                                                                                    // 3999\n * Object#toString().                                                                                                  // 4000\n */                                                                                                                    // 4001\n                                                                                                                       // 4002\nvar toString = Object.prototype.toString;                                                                              // 4003\n                                                                                                                       // 4004\n/**                                                                                                                    // 4005\n * Expose `Runnable`.                                                                                                  // 4006\n */                                                                                                                    // 4007\n                                                                                                                       // 4008\nmodule.exports = Runnable;                                                                                             // 4009\n                                                                                                                       // 4010\n/**                                                                                                                    // 4011\n * Initialize a new `Runnable` with the given `title` and callback `fn`.                                               // 4012\n *                                                                                                                     // 4013\n * @param {String} title                                                                                               // 4014\n * @param {Function} fn                                                                                                // 4015\n * @api private                                                                                                        // 4016\n * @param {string} title                                                                                               // 4017\n * @param {Function} fn                                                                                                // 4018\n */                                                                                                                    // 4019\nfunction Runnable(title, fn) {                                                                                         // 4020\n  this.title = title;                                                                                                  // 4021\n  this.fn = fn;                                                                                                        // 4022\n  this.async = fn && fn.length;                                                                                        // 4023\n  this.sync = !this.async;                                                                                             // 4024\n  this._timeout = 2000;                                                                                                // 4025\n  this._slow = 75;                                                                                                     // 4026\n  this._enableTimeouts = true;                                                                                         // 4027\n  this.timedOut = false;                                                                                               // 4028\n  this._trace = new Error('done() called multiple times');                                                             // 4029\n  this._retries = -1;                                                                                                  // 4030\n  this._currentRetry = 0;                                                                                              // 4031\n}                                                                                                                      // 4032\n                                                                                                                       // 4033\n/**                                                                                                                    // 4034\n * Inherit from `EventEmitter.prototype`.                                                                              // 4035\n */                                                                                                                    // 4036\ninherits(Runnable, EventEmitter);                                                                                      // 4037\n                                                                                                                       // 4038\n/**                                                                                                                    // 4039\n * Set & get timeout `ms`.                                                                                             // 4040\n *                                                                                                                     // 4041\n * @api private                                                                                                        // 4042\n * @param {number|string} ms                                                                                           // 4043\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 4044\n */                                                                                                                    // 4045\nRunnable.prototype.timeout = function(ms) {                                                                            // 4046\n  if (!arguments.length) {                                                                                             // 4047\n    return this._timeout;                                                                                              // 4048\n  }                                                                                                                    // 4049\n  if (ms === 0) {                                                                                                      // 4050\n    this._enableTimeouts = false;                                                                                      // 4051\n  }                                                                                                                    // 4052\n  if (typeof ms === 'string') {                                                                                        // 4053\n    ms = milliseconds(ms);                                                                                             // 4054\n  }                                                                                                                    // 4055\n  debug('timeout %d', ms);                                                                                             // 4056\n  this._timeout = ms;                                                                                                  // 4057\n  if (this.timer) {                                                                                                    // 4058\n    this.resetTimeout();                                                                                               // 4059\n  }                                                                                                                    // 4060\n  return this;                                                                                                         // 4061\n};                                                                                                                     // 4062\n                                                                                                                       // 4063\n/**                                                                                                                    // 4064\n * Set & get slow `ms`.                                                                                                // 4065\n *                                                                                                                     // 4066\n * @api private                                                                                                        // 4067\n * @param {number|string} ms                                                                                           // 4068\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 4069\n */                                                                                                                    // 4070\nRunnable.prototype.slow = function(ms) {                                                                               // 4071\n  if (!arguments.length) {                                                                                             // 4072\n    return this._slow;                                                                                                 // 4073\n  }                                                                                                                    // 4074\n  if (typeof ms === 'string') {                                                                                        // 4075\n    ms = milliseconds(ms);                                                                                             // 4076\n  }                                                                                                                    // 4077\n  debug('timeout %d', ms);                                                                                             // 4078\n  this._slow = ms;                                                                                                     // 4079\n  return this;                                                                                                         // 4080\n};                                                                                                                     // 4081\n                                                                                                                       // 4082\n/**                                                                                                                    // 4083\n * Set and get whether timeout is `enabled`.                                                                           // 4084\n *                                                                                                                     // 4085\n * @api private                                                                                                        // 4086\n * @param {boolean} enabled                                                                                            // 4087\n * @return {Runnable|boolean} enabled or Runnable instance.                                                            // 4088\n */                                                                                                                    // 4089\nRunnable.prototype.enableTimeouts = function(enabled) {                                                                // 4090\n  if (!arguments.length) {                                                                                             // 4091\n    return this._enableTimeouts;                                                                                       // 4092\n  }                                                                                                                    // 4093\n  debug('enableTimeouts %s', enabled);                                                                                 // 4094\n  this._enableTimeouts = enabled;                                                                                      // 4095\n  return this;                                                                                                         // 4096\n};                                                                                                                     // 4097\n                                                                                                                       // 4098\n/**                                                                                                                    // 4099\n * Halt and mark as pending.                                                                                           // 4100\n *                                                                                                                     // 4101\n * @api private                                                                                                        // 4102\n */                                                                                                                    // 4103\nRunnable.prototype.skip = function() {                                                                                 // 4104\n  throw new Pending();                                                                                                 // 4105\n};                                                                                                                     // 4106\n                                                                                                                       // 4107\n/**                                                                                                                    // 4108\n * Set number of retries.                                                                                              // 4109\n *                                                                                                                     // 4110\n * @api private                                                                                                        // 4111\n */                                                                                                                    // 4112\nRunnable.prototype.retries = function(n) {                                                                             // 4113\n  if (!arguments.length) {                                                                                             // 4114\n    return this._retries;                                                                                              // 4115\n  }                                                                                                                    // 4116\n  this._retries = n;                                                                                                   // 4117\n};                                                                                                                     // 4118\n                                                                                                                       // 4119\n/**                                                                                                                    // 4120\n * Get current retry                                                                                                   // 4121\n *                                                                                                                     // 4122\n * @api private                                                                                                        // 4123\n */                                                                                                                    // 4124\nRunnable.prototype.currentRetry = function(n) {                                                                        // 4125\n  if (!arguments.length) {                                                                                             // 4126\n    return this._currentRetry;                                                                                         // 4127\n  }                                                                                                                    // 4128\n  this._currentRetry = n;                                                                                              // 4129\n};                                                                                                                     // 4130\n                                                                                                                       // 4131\n/**                                                                                                                    // 4132\n * Return the full title generated by recursively concatenating the parent's                                           // 4133\n * full title.                                                                                                         // 4134\n *                                                                                                                     // 4135\n * @api public                                                                                                         // 4136\n * @return {string}                                                                                                    // 4137\n */                                                                                                                    // 4138\nRunnable.prototype.fullTitle = function() {                                                                            // 4139\n  return this.parent.fullTitle() + ' ' + this.title;                                                                   // 4140\n};                                                                                                                     // 4141\n                                                                                                                       // 4142\n/**                                                                                                                    // 4143\n * Clear the timeout.                                                                                                  // 4144\n *                                                                                                                     // 4145\n * @api private                                                                                                        // 4146\n */                                                                                                                    // 4147\nRunnable.prototype.clearTimeout = function() {                                                                         // 4148\n  clearTimeout(this.timer);                                                                                            // 4149\n};                                                                                                                     // 4150\n                                                                                                                       // 4151\n/**                                                                                                                    // 4152\n * Inspect the runnable void of private properties.                                                                    // 4153\n *                                                                                                                     // 4154\n * @api private                                                                                                        // 4155\n * @return {string}                                                                                                    // 4156\n */                                                                                                                    // 4157\nRunnable.prototype.inspect = function() {                                                                              // 4158\n  return JSON.stringify(this, function(key, val) {                                                                     // 4159\n    if (key[0] === '_') {                                                                                              // 4160\n      return;                                                                                                          // 4161\n    }                                                                                                                  // 4162\n    if (key === 'parent') {                                                                                            // 4163\n      return '#<Suite>';                                                                                               // 4164\n    }                                                                                                                  // 4165\n    if (key === 'ctx') {                                                                                               // 4166\n      return '#<Context>';                                                                                             // 4167\n    }                                                                                                                  // 4168\n    return val;                                                                                                        // 4169\n  }, 2);                                                                                                               // 4170\n};                                                                                                                     // 4171\n                                                                                                                       // 4172\n/**                                                                                                                    // 4173\n * Reset the timeout.                                                                                                  // 4174\n *                                                                                                                     // 4175\n * @api private                                                                                                        // 4176\n */                                                                                                                    // 4177\nRunnable.prototype.resetTimeout = function() {                                                                         // 4178\n  var self = this;                                                                                                     // 4179\n  var ms = this.timeout() || 1e9;                                                                                      // 4180\n                                                                                                                       // 4181\n  if (!this._enableTimeouts) {                                                                                         // 4182\n    return;                                                                                                            // 4183\n  }                                                                                                                    // 4184\n  this.clearTimeout();                                                                                                 // 4185\n  this.timer = setTimeout(function() {                                                                                 // 4186\n    if (!self._enableTimeouts) {                                                                                       // 4187\n      return;                                                                                                          // 4188\n    }                                                                                                                  // 4189\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.'));\n    self.timedOut = true;                                                                                              // 4191\n  }, ms);                                                                                                              // 4192\n};                                                                                                                     // 4193\n                                                                                                                       // 4194\n/**                                                                                                                    // 4195\n * Whitelist a list of globals for this test run.                                                                      // 4196\n *                                                                                                                     // 4197\n * @api private                                                                                                        // 4198\n * @param {string[]} globals                                                                                           // 4199\n */                                                                                                                    // 4200\nRunnable.prototype.globals = function(globals) {                                                                       // 4201\n  if (!arguments.length) {                                                                                             // 4202\n    return this._allowedGlobals;                                                                                       // 4203\n  }                                                                                                                    // 4204\n  this._allowedGlobals = globals;                                                                                      // 4205\n};                                                                                                                     // 4206\n                                                                                                                       // 4207\n/**                                                                                                                    // 4208\n * Run the test and invoke `fn(err)`.                                                                                  // 4209\n *                                                                                                                     // 4210\n * @param {Function} fn                                                                                                // 4211\n * @api private                                                                                                        // 4212\n */                                                                                                                    // 4213\nRunnable.prototype.run = function(fn) {                                                                                // 4214\n  var self = this;                                                                                                     // 4215\n  var start = new Date();                                                                                              // 4216\n  var ctx = this.ctx;                                                                                                  // 4217\n  var finished;                                                                                                        // 4218\n  var emitted;                                                                                                         // 4219\n                                                                                                                       // 4220\n  // Sometimes the ctx exists, but it is not runnable                                                                  // 4221\n  if (ctx && ctx.runnable) {                                                                                           // 4222\n    ctx.runnable(this);                                                                                                // 4223\n  }                                                                                                                    // 4224\n                                                                                                                       // 4225\n  // called multiple times                                                                                             // 4226\n  function multiple(err) {                                                                                             // 4227\n    if (emitted) {                                                                                                     // 4228\n      return;                                                                                                          // 4229\n    }                                                                                                                  // 4230\n    emitted = true;                                                                                                    // 4231\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));                // 4232\n  }                                                                                                                    // 4233\n                                                                                                                       // 4234\n  // finished                                                                                                          // 4235\n  function done(err) {                                                                                                 // 4236\n    var ms = self.timeout();                                                                                           // 4237\n    if (self.timedOut) {                                                                                               // 4238\n      return;                                                                                                          // 4239\n    }                                                                                                                  // 4240\n    if (finished) {                                                                                                    // 4241\n      return multiple(err || self._trace);                                                                             // 4242\n    }                                                                                                                  // 4243\n                                                                                                                       // 4244\n    self.clearTimeout();                                                                                               // 4245\n    self.duration = new Date() - start;                                                                                // 4246\n    finished = true;                                                                                                   // 4247\n    if (!err && self.duration > ms && self._enableTimeouts) {                                                          // 4248\n      err = new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.');   // 4249\n    }                                                                                                                  // 4250\n    fn(err);                                                                                                           // 4251\n  }                                                                                                                    // 4252\n                                                                                                                       // 4253\n  // for .resetTimeout()                                                                                               // 4254\n  this.callback = done;                                                                                                // 4255\n                                                                                                                       // 4256\n  // explicit async with `done` argument                                                                               // 4257\n  if (this.async) {                                                                                                    // 4258\n    this.resetTimeout();                                                                                               // 4259\n                                                                                                                       // 4260\n    if (this.allowUncaught) {                                                                                          // 4261\n      return callFnAsync(this.fn);                                                                                     // 4262\n    }                                                                                                                  // 4263\n    try {                                                                                                              // 4264\n      callFnAsync(this.fn);                                                                                            // 4265\n    } catch (err) {                                                                                                    // 4266\n      done(utils.getError(err));                                                                                       // 4267\n    }                                                                                                                  // 4268\n    return;                                                                                                            // 4269\n  }                                                                                                                    // 4270\n                                                                                                                       // 4271\n  if (this.allowUncaught) {                                                                                            // 4272\n    callFn(this.fn);                                                                                                   // 4273\n    done();                                                                                                            // 4274\n    return;                                                                                                            // 4275\n  }                                                                                                                    // 4276\n                                                                                                                       // 4277\n  // sync or promise-returning                                                                                         // 4278\n  try {                                                                                                                // 4279\n    if (this.pending) {                                                                                                // 4280\n      done();                                                                                                          // 4281\n    } else {                                                                                                           // 4282\n      callFn(this.fn);                                                                                                 // 4283\n    }                                                                                                                  // 4284\n  } catch (err) {                                                                                                      // 4285\n    done(utils.getError(err));                                                                                         // 4286\n  }                                                                                                                    // 4287\n                                                                                                                       // 4288\n  function callFn(fn) {                                                                                                // 4289\n    var result = fn.call(ctx);                                                                                         // 4290\n    if (result && typeof result.then === 'function') {                                                                 // 4291\n      self.resetTimeout();                                                                                             // 4292\n      result                                                                                                           // 4293\n        .then(function() {                                                                                             // 4294\n          done();                                                                                                      // 4295\n          // Return null so libraries like bluebird do not warn about                                                  // 4296\n          // subsequently constructed Promises.                                                                        // 4297\n          return null;                                                                                                 // 4298\n        },                                                                                                             // 4299\n        function(reason) {                                                                                             // 4300\n          done(reason || new Error('Promise rejected with no or falsy reason'));                                       // 4301\n        });                                                                                                            // 4302\n    } else {                                                                                                           // 4303\n      if (self.asyncOnly) {                                                                                            // 4304\n        return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));        // 4305\n      }                                                                                                                // 4306\n                                                                                                                       // 4307\n      done();                                                                                                          // 4308\n    }                                                                                                                  // 4309\n  }                                                                                                                    // 4310\n                                                                                                                       // 4311\n  function callFnAsync(fn) {                                                                                           // 4312\n    fn.call(ctx, function(err) {                                                                                       // 4313\n      if (err instanceof Error || toString.call(err) === '[object Error]') {                                           // 4314\n        return done(err);                                                                                              // 4315\n      }                                                                                                                // 4316\n      if (err) {                                                                                                       // 4317\n        if (Object.prototype.toString.call(err) === '[object Object]') {                                               // 4318\n          return done(new Error('done() invoked with non-Error: '                                                      // 4319\n            + JSON.stringify(err)));                                                                                   // 4320\n        }                                                                                                              // 4321\n        return done(new Error('done() invoked with non-Error: ' + err));                                               // 4322\n      }                                                                                                                // 4323\n      done();                                                                                                          // 4324\n    });                                                                                                                // 4325\n  }                                                                                                                    // 4326\n};                                                                                                                     // 4327\n                                                                                                                       // 4328\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ms\":15,\"./pending\":16,\"./utils\":39,\"debug\":2,\"events\":3}],36:[function(require,module,exports){                  // 4330\n(function (process,global){                                                                                            // 4331\n/**                                                                                                                    // 4332\n * Module dependencies.                                                                                                // 4333\n */                                                                                                                    // 4334\n                                                                                                                       // 4335\nvar EventEmitter = require('events').EventEmitter;                                                                     // 4336\nvar Pending = require('./pending');                                                                                    // 4337\nvar utils = require('./utils');                                                                                        // 4338\nvar inherits = utils.inherits;                                                                                         // 4339\nvar debug = require('debug')('mocha:runner');                                                                          // 4340\nvar Runnable = require('./runnable');                                                                                  // 4341\nvar filter = utils.filter;                                                                                             // 4342\nvar indexOf = utils.indexOf;                                                                                           // 4343\nvar keys = utils.keys;                                                                                                 // 4344\nvar stackFilter = utils.stackTraceFilter();                                                                            // 4345\nvar stringify = utils.stringify;                                                                                       // 4346\nvar type = utils.type;                                                                                                 // 4347\nvar undefinedError = utils.undefinedError;                                                                             // 4348\nvar isArray = utils.isArray;                                                                                           // 4349\n                                                                                                                       // 4350\n/**                                                                                                                    // 4351\n * Non-enumerable globals.                                                                                             // 4352\n */                                                                                                                    // 4353\n                                                                                                                       // 4354\nvar globals = [                                                                                                        // 4355\n  'setTimeout',                                                                                                        // 4356\n  'clearTimeout',                                                                                                      // 4357\n  'setInterval',                                                                                                       // 4358\n  'clearInterval',                                                                                                     // 4359\n  'XMLHttpRequest',                                                                                                    // 4360\n  'Date',                                                                                                              // 4361\n  'setImmediate',                                                                                                      // 4362\n  'clearImmediate'                                                                                                     // 4363\n];                                                                                                                     // 4364\n                                                                                                                       // 4365\n/**                                                                                                                    // 4366\n * Expose `Runner`.                                                                                                    // 4367\n */                                                                                                                    // 4368\n                                                                                                                       // 4369\nmodule.exports = Runner;                                                                                               // 4370\n                                                                                                                       // 4371\n/**                                                                                                                    // 4372\n * Initialize a `Runner` for the given `suite`.                                                                        // 4373\n *                                                                                                                     // 4374\n * Events:                                                                                                             // 4375\n *                                                                                                                     // 4376\n *   - `start`  execution started                                                                                      // 4377\n *   - `end`  execution complete                                                                                       // 4378\n *   - `suite`  (suite) test suite execution started                                                                   // 4379\n *   - `suite end`  (suite) all tests (and sub-suites) have finished                                                   // 4380\n *   - `test`  (test) test execution started                                                                           // 4381\n *   - `test end`  (test) test completed                                                                               // 4382\n *   - `hook`  (hook) hook execution started                                                                           // 4383\n *   - `hook end`  (hook) hook complete                                                                                // 4384\n *   - `pass`  (test) test passed                                                                                      // 4385\n *   - `fail`  (test, err) test failed                                                                                 // 4386\n *   - `pending`  (test) test pending                                                                                  // 4387\n *                                                                                                                     // 4388\n * @api public                                                                                                         // 4389\n * @param {Suite} suite Root suite                                                                                     // 4390\n * @param {boolean} [delay] Whether or not to delay execution of root suite                                            // 4391\n * until ready.                                                                                                        // 4392\n */                                                                                                                    // 4393\nfunction Runner(suite, delay) {                                                                                        // 4394\n  var self = this;                                                                                                     // 4395\n  this._globals = [];                                                                                                  // 4396\n  this._abort = false;                                                                                                 // 4397\n  this._delay = delay;                                                                                                 // 4398\n  this.suite = suite;                                                                                                  // 4399\n  this.started = false;                                                                                                // 4400\n  this.total = suite.total();                                                                                          // 4401\n  this.failures = 0;                                                                                                   // 4402\n  this.on('test end', function(test) {                                                                                 // 4403\n    self.checkGlobals(test);                                                                                           // 4404\n  });                                                                                                                  // 4405\n  this.on('hook end', function(hook) {                                                                                 // 4406\n    self.checkGlobals(hook);                                                                                           // 4407\n  });                                                                                                                  // 4408\n  this._defaultGrep = /.*/;                                                                                            // 4409\n  this.grep(this._defaultGrep);                                                                                        // 4410\n  this.globals(this.globalProps().concat(extraGlobals()));                                                             // 4411\n}                                                                                                                      // 4412\n                                                                                                                       // 4413\n/**                                                                                                                    // 4414\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.                                                    // 4415\n *                                                                                                                     // 4416\n * @param {Function} fn                                                                                                // 4417\n * @api private                                                                                                        // 4418\n */                                                                                                                    // 4419\nRunner.immediately = global.setImmediate || process.nextTick;                                                          // 4420\n                                                                                                                       // 4421\n/**                                                                                                                    // 4422\n * Inherit from `EventEmitter.prototype`.                                                                              // 4423\n */                                                                                                                    // 4424\ninherits(Runner, EventEmitter);                                                                                        // 4425\n                                                                                                                       // 4426\n/**                                                                                                                    // 4427\n * Run tests with full titles matching `re`. Updates runner.total                                                      // 4428\n * with number of tests matched.                                                                                       // 4429\n *                                                                                                                     // 4430\n * @param {RegExp} re                                                                                                  // 4431\n * @param {Boolean} invert                                                                                             // 4432\n * @return {Runner} for chaining                                                                                       // 4433\n * @api public                                                                                                         // 4434\n * @param {RegExp} re                                                                                                  // 4435\n * @param {boolean} invert                                                                                             // 4436\n * @return {Runner} Runner instance.                                                                                   // 4437\n */                                                                                                                    // 4438\nRunner.prototype.grep = function(re, invert) {                                                                         // 4439\n  debug('grep %s', re);                                                                                                // 4440\n  this._grep = re;                                                                                                     // 4441\n  this._invert = invert;                                                                                               // 4442\n  this.total = this.grepTotal(this.suite);                                                                             // 4443\n  return this;                                                                                                         // 4444\n};                                                                                                                     // 4445\n                                                                                                                       // 4446\n/**                                                                                                                    // 4447\n * Returns the number of tests matching the grep search for the                                                        // 4448\n * given suite.                                                                                                        // 4449\n *                                                                                                                     // 4450\n * @param {Suite} suite                                                                                                // 4451\n * @return {Number}                                                                                                    // 4452\n * @api public                                                                                                         // 4453\n * @param {Suite} suite                                                                                                // 4454\n * @return {number}                                                                                                    // 4455\n */                                                                                                                    // 4456\nRunner.prototype.grepTotal = function(suite) {                                                                         // 4457\n  var self = this;                                                                                                     // 4458\n  var total = 0;                                                                                                       // 4459\n                                                                                                                       // 4460\n  suite.eachTest(function(test) {                                                                                      // 4461\n    var match = self._grep.test(test.fullTitle());                                                                     // 4462\n    if (self._invert) {                                                                                                // 4463\n      match = !match;                                                                                                  // 4464\n    }                                                                                                                  // 4465\n    if (match) {                                                                                                       // 4466\n      total++;                                                                                                         // 4467\n    }                                                                                                                  // 4468\n  });                                                                                                                  // 4469\n                                                                                                                       // 4470\n  return total;                                                                                                        // 4471\n};                                                                                                                     // 4472\n                                                                                                                       // 4473\n/**                                                                                                                    // 4474\n * Return a list of global properties.                                                                                 // 4475\n *                                                                                                                     // 4476\n * @return {Array}                                                                                                     // 4477\n * @api private                                                                                                        // 4478\n */                                                                                                                    // 4479\nRunner.prototype.globalProps = function() {                                                                            // 4480\n  var props = keys(global);                                                                                            // 4481\n                                                                                                                       // 4482\n  // non-enumerables                                                                                                   // 4483\n  for (var i = 0; i < globals.length; ++i) {                                                                           // 4484\n    if (~indexOf(props, globals[i])) {                                                                                 // 4485\n      continue;                                                                                                        // 4486\n    }                                                                                                                  // 4487\n    props.push(globals[i]);                                                                                            // 4488\n  }                                                                                                                    // 4489\n                                                                                                                       // 4490\n  return props;                                                                                                        // 4491\n};                                                                                                                     // 4492\n                                                                                                                       // 4493\n/**                                                                                                                    // 4494\n * Allow the given `arr` of globals.                                                                                   // 4495\n *                                                                                                                     // 4496\n * @param {Array} arr                                                                                                  // 4497\n * @return {Runner} for chaining                                                                                       // 4498\n * @api public                                                                                                         // 4499\n * @param {Array} arr                                                                                                  // 4500\n * @return {Runner} Runner instance.                                                                                   // 4501\n */                                                                                                                    // 4502\nRunner.prototype.globals = function(arr) {                                                                             // 4503\n  if (!arguments.length) {                                                                                             // 4504\n    return this._globals;                                                                                              // 4505\n  }                                                                                                                    // 4506\n  debug('globals %j', arr);                                                                                            // 4507\n  this._globals = this._globals.concat(arr);                                                                           // 4508\n  return this;                                                                                                         // 4509\n};                                                                                                                     // 4510\n                                                                                                                       // 4511\n/**                                                                                                                    // 4512\n * Check for global variable leaks.                                                                                    // 4513\n *                                                                                                                     // 4514\n * @api private                                                                                                        // 4515\n */                                                                                                                    // 4516\nRunner.prototype.checkGlobals = function(test) {                                                                       // 4517\n  if (this.ignoreLeaks) {                                                                                              // 4518\n    return;                                                                                                            // 4519\n  }                                                                                                                    // 4520\n  var ok = this._globals;                                                                                              // 4521\n                                                                                                                       // 4522\n  var globals = this.globalProps();                                                                                    // 4523\n  var leaks;                                                                                                           // 4524\n                                                                                                                       // 4525\n  if (test) {                                                                                                          // 4526\n    ok = ok.concat(test._allowedGlobals || []);                                                                        // 4527\n  }                                                                                                                    // 4528\n                                                                                                                       // 4529\n  if (this.prevGlobalsLength === globals.length) {                                                                     // 4530\n    return;                                                                                                            // 4531\n  }                                                                                                                    // 4532\n  this.prevGlobalsLength = globals.length;                                                                             // 4533\n                                                                                                                       // 4534\n  leaks = filterLeaks(ok, globals);                                                                                    // 4535\n  this._globals = this._globals.concat(leaks);                                                                         // 4536\n                                                                                                                       // 4537\n  if (leaks.length > 1) {                                                                                              // 4538\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));                                     // 4539\n  } else if (leaks.length) {                                                                                           // 4540\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));                                                   // 4541\n  }                                                                                                                    // 4542\n};                                                                                                                     // 4543\n                                                                                                                       // 4544\n/**                                                                                                                    // 4545\n * Fail the given `test`.                                                                                              // 4546\n *                                                                                                                     // 4547\n * @api private                                                                                                        // 4548\n * @param {Test} test                                                                                                  // 4549\n * @param {Error} err                                                                                                  // 4550\n */                                                                                                                    // 4551\nRunner.prototype.fail = function(test, err) {                                                                          // 4552\n  ++this.failures;                                                                                                     // 4553\n  test.state = 'failed';                                                                                               // 4554\n                                                                                                                       // 4555\n  if (!(err instanceof Error || err && typeof err.message === 'string')) {                                             // 4556\n    err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)');                     // 4557\n  }                                                                                                                    // 4558\n                                                                                                                       // 4559\n  err.stack = (this.fullStackTrace || !err.stack)                                                                      // 4560\n    ? err.stack                                                                                                        // 4561\n    : stackFilter(err.stack);                                                                                          // 4562\n                                                                                                                       // 4563\n  this.emit('fail', test, err);                                                                                        // 4564\n};                                                                                                                     // 4565\n                                                                                                                       // 4566\n/**                                                                                                                    // 4567\n * Fail the given `hook` with `err`.                                                                                   // 4568\n *                                                                                                                     // 4569\n * Hook failures work in the following pattern:                                                                        // 4570\n * - If bail, then exit                                                                                                // 4571\n * - Failed `before` hook skips all tests in a suite and subsuites,                                                    // 4572\n *   but jumps to corresponding `after` hook                                                                           // 4573\n * - Failed `before each` hook skips remaining tests in a                                                              // 4574\n *   suite and jumps to corresponding `after each` hook,                                                               // 4575\n *   which is run only once                                                                                            // 4576\n * - Failed `after` hook does not alter                                                                                // 4577\n *   execution order                                                                                                   // 4578\n * - Failed `after each` hook skips remaining tests in a                                                               // 4579\n *   suite and subsuites, but executes other `after each`                                                              // 4580\n *   hooks                                                                                                             // 4581\n *                                                                                                                     // 4582\n * @api private                                                                                                        // 4583\n * @param {Hook} hook                                                                                                  // 4584\n * @param {Error} err                                                                                                  // 4585\n */                                                                                                                    // 4586\nRunner.prototype.failHook = function(hook, err) {                                                                      // 4587\n  if (hook.ctx && hook.ctx.currentTest) {                                                                              // 4588\n    hook.originalTitle = hook.originalTitle || hook.title;                                                             // 4589\n    hook.title = hook.originalTitle + ' for \"' + hook.ctx.currentTest.title + '\"';                                     // 4590\n  }                                                                                                                    // 4591\n                                                                                                                       // 4592\n  this.fail(hook, err);                                                                                                // 4593\n  if (this.suite.bail()) {                                                                                             // 4594\n    this.emit('end');                                                                                                  // 4595\n  }                                                                                                                    // 4596\n};                                                                                                                     // 4597\n                                                                                                                       // 4598\n/**                                                                                                                    // 4599\n * Run hook `name` callbacks and then invoke `fn()`.                                                                   // 4600\n *                                                                                                                     // 4601\n * @api private                                                                                                        // 4602\n * @param {string} name                                                                                                // 4603\n * @param {Function} fn                                                                                                // 4604\n */                                                                                                                    // 4605\n                                                                                                                       // 4606\nRunner.prototype.hook = function(name, fn) {                                                                           // 4607\n  var suite = this.suite;                                                                                              // 4608\n  var hooks = suite['_' + name];                                                                                       // 4609\n  var self = this;                                                                                                     // 4610\n                                                                                                                       // 4611\n  function next(i) {                                                                                                   // 4612\n    var hook = hooks[i];                                                                                               // 4613\n    if (!hook) {                                                                                                       // 4614\n      return fn();                                                                                                     // 4615\n    }                                                                                                                  // 4616\n    self.currentRunnable = hook;                                                                                       // 4617\n                                                                                                                       // 4618\n    hook.ctx.currentTest = self.test;                                                                                  // 4619\n                                                                                                                       // 4620\n    self.emit('hook', hook);                                                                                           // 4621\n                                                                                                                       // 4622\n    if (!hook.listeners('error').length) {                                                                             // 4623\n      hook.on('error', function(err) {                                                                                 // 4624\n        self.failHook(hook, err);                                                                                      // 4625\n      });                                                                                                              // 4626\n    }                                                                                                                  // 4627\n                                                                                                                       // 4628\n    hook.run(function(err) {                                                                                           // 4629\n      var testError = hook.error();                                                                                    // 4630\n      if (testError) {                                                                                                 // 4631\n        self.fail(self.test, testError);                                                                               // 4632\n      }                                                                                                                // 4633\n      if (err) {                                                                                                       // 4634\n        if (err instanceof Pending) {                                                                                  // 4635\n          suite.pending = true;                                                                                        // 4636\n        } else {                                                                                                       // 4637\n          self.failHook(hook, err);                                                                                    // 4638\n                                                                                                                       // 4639\n          // stop executing hooks, notify callee of hook err                                                           // 4640\n          return fn(err);                                                                                              // 4641\n        }                                                                                                              // 4642\n      }                                                                                                                // 4643\n      self.emit('hook end', hook);                                                                                     // 4644\n      delete hook.ctx.currentTest;                                                                                     // 4645\n      next(++i);                                                                                                       // 4646\n    });                                                                                                                // 4647\n  }                                                                                                                    // 4648\n                                                                                                                       // 4649\n  Runner.immediately(function() {                                                                                      // 4650\n    next(0);                                                                                                           // 4651\n  });                                                                                                                  // 4652\n};                                                                                                                     // 4653\n                                                                                                                       // 4654\n/**                                                                                                                    // 4655\n * Run hook `name` for the given array of `suites`                                                                     // 4656\n * in order, and callback `fn(err, errSuite)`.                                                                         // 4657\n *                                                                                                                     // 4658\n * @api private                                                                                                        // 4659\n * @param {string} name                                                                                                // 4660\n * @param {Array} suites                                                                                               // 4661\n * @param {Function} fn                                                                                                // 4662\n */                                                                                                                    // 4663\nRunner.prototype.hooks = function(name, suites, fn) {                                                                  // 4664\n  var self = this;                                                                                                     // 4665\n  var orig = this.suite;                                                                                               // 4666\n                                                                                                                       // 4667\n  function next(suite) {                                                                                               // 4668\n    self.suite = suite;                                                                                                // 4669\n                                                                                                                       // 4670\n    if (!suite) {                                                                                                      // 4671\n      self.suite = orig;                                                                                               // 4672\n      return fn();                                                                                                     // 4673\n    }                                                                                                                  // 4674\n                                                                                                                       // 4675\n    self.hook(name, function(err) {                                                                                    // 4676\n      if (err) {                                                                                                       // 4677\n        var errSuite = self.suite;                                                                                     // 4678\n        self.suite = orig;                                                                                             // 4679\n        return fn(err, errSuite);                                                                                      // 4680\n      }                                                                                                                // 4681\n                                                                                                                       // 4682\n      next(suites.pop());                                                                                              // 4683\n    });                                                                                                                // 4684\n  }                                                                                                                    // 4685\n                                                                                                                       // 4686\n  next(suites.pop());                                                                                                  // 4687\n};                                                                                                                     // 4688\n                                                                                                                       // 4689\n/**                                                                                                                    // 4690\n * Run hooks from the top level down.                                                                                  // 4691\n *                                                                                                                     // 4692\n * @param {String} name                                                                                                // 4693\n * @param {Function} fn                                                                                                // 4694\n * @api private                                                                                                        // 4695\n */                                                                                                                    // 4696\nRunner.prototype.hookUp = function(name, fn) {                                                                         // 4697\n  var suites = [this.suite].concat(this.parents()).reverse();                                                          // 4698\n  this.hooks(name, suites, fn);                                                                                        // 4699\n};                                                                                                                     // 4700\n                                                                                                                       // 4701\n/**                                                                                                                    // 4702\n * Run hooks from the bottom up.                                                                                       // 4703\n *                                                                                                                     // 4704\n * @param {String} name                                                                                                // 4705\n * @param {Function} fn                                                                                                // 4706\n * @api private                                                                                                        // 4707\n */                                                                                                                    // 4708\nRunner.prototype.hookDown = function(name, fn) {                                                                       // 4709\n  var suites = [this.suite].concat(this.parents());                                                                    // 4710\n  this.hooks(name, suites, fn);                                                                                        // 4711\n};                                                                                                                     // 4712\n                                                                                                                       // 4713\n/**                                                                                                                    // 4714\n * Return an array of parent Suites from                                                                               // 4715\n * closest to furthest.                                                                                                // 4716\n *                                                                                                                     // 4717\n * @return {Array}                                                                                                     // 4718\n * @api private                                                                                                        // 4719\n */                                                                                                                    // 4720\nRunner.prototype.parents = function() {                                                                                // 4721\n  var suite = this.suite;                                                                                              // 4722\n  var suites = [];                                                                                                     // 4723\n  while (suite.parent) {                                                                                               // 4724\n    suite = suite.parent;                                                                                              // 4725\n    suites.push(suite);                                                                                                // 4726\n  }                                                                                                                    // 4727\n  return suites;                                                                                                       // 4728\n};                                                                                                                     // 4729\n                                                                                                                       // 4730\n/**                                                                                                                    // 4731\n * Run the current test and callback `fn(err)`.                                                                        // 4732\n *                                                                                                                     // 4733\n * @param {Function} fn                                                                                                // 4734\n * @api private                                                                                                        // 4735\n */                                                                                                                    // 4736\nRunner.prototype.runTest = function(fn) {                                                                              // 4737\n  var self = this;                                                                                                     // 4738\n  var test = this.test;                                                                                                // 4739\n                                                                                                                       // 4740\n  if (this.asyncOnly) {                                                                                                // 4741\n    test.asyncOnly = true;                                                                                             // 4742\n  }                                                                                                                    // 4743\n                                                                                                                       // 4744\n  if (this.allowUncaught) {                                                                                            // 4745\n    test.allowUncaught = true;                                                                                         // 4746\n    return test.run(fn);                                                                                               // 4747\n  }                                                                                                                    // 4748\n  try {                                                                                                                // 4749\n    test.on('error', function(err) {                                                                                   // 4750\n      self.fail(test, err);                                                                                            // 4751\n    });                                                                                                                // 4752\n    test.run(fn);                                                                                                      // 4753\n  } catch (err) {                                                                                                      // 4754\n    fn(err);                                                                                                           // 4755\n  }                                                                                                                    // 4756\n};                                                                                                                     // 4757\n                                                                                                                       // 4758\n/**                                                                                                                    // 4759\n * Run tests in the given `suite` and invoke the callback `fn()` when complete.                                        // 4760\n *                                                                                                                     // 4761\n * @api private                                                                                                        // 4762\n * @param {Suite} suite                                                                                                // 4763\n * @param {Function} fn                                                                                                // 4764\n */                                                                                                                    // 4765\nRunner.prototype.runTests = function(suite, fn) {                                                                      // 4766\n  var self = this;                                                                                                     // 4767\n  var tests = suite.tests.slice();                                                                                     // 4768\n  var test;                                                                                                            // 4769\n                                                                                                                       // 4770\n  function hookErr(_, errSuite, after) {                                                                               // 4771\n    // before/after Each hook for errSuite failed:                                                                     // 4772\n    var orig = self.suite;                                                                                             // 4773\n                                                                                                                       // 4774\n    // for failed 'after each' hook start from errSuite parent,                                                        // 4775\n    // otherwise start from errSuite itself                                                                            // 4776\n    self.suite = after ? errSuite.parent : errSuite;                                                                   // 4777\n                                                                                                                       // 4778\n    if (self.suite) {                                                                                                  // 4779\n      // call hookUp afterEach                                                                                         // 4780\n      self.hookUp('afterEach', function(err2, errSuite2) {                                                             // 4781\n        self.suite = orig;                                                                                             // 4782\n        // some hooks may fail even now                                                                                // 4783\n        if (err2) {                                                                                                    // 4784\n          return hookErr(err2, errSuite2, true);                                                                       // 4785\n        }                                                                                                              // 4786\n        // report error suite                                                                                          // 4787\n        fn(errSuite);                                                                                                  // 4788\n      });                                                                                                              // 4789\n    } else {                                                                                                           // 4790\n      // there is no need calling other 'after each' hooks                                                             // 4791\n      self.suite = orig;                                                                                               // 4792\n      fn(errSuite);                                                                                                    // 4793\n    }                                                                                                                  // 4794\n  }                                                                                                                    // 4795\n                                                                                                                       // 4796\n  function next(err, errSuite) {                                                                                       // 4797\n    // if we bail after first err                                                                                      // 4798\n    if (self.failures && suite._bail) {                                                                                // 4799\n      return fn();                                                                                                     // 4800\n    }                                                                                                                  // 4801\n                                                                                                                       // 4802\n    if (self._abort) {                                                                                                 // 4803\n      return fn();                                                                                                     // 4804\n    }                                                                                                                  // 4805\n                                                                                                                       // 4806\n    if (err) {                                                                                                         // 4807\n      return hookErr(err, errSuite, true);                                                                             // 4808\n    }                                                                                                                  // 4809\n                                                                                                                       // 4810\n    // next test                                                                                                       // 4811\n    test = tests.shift();                                                                                              // 4812\n                                                                                                                       // 4813\n    // all done                                                                                                        // 4814\n    if (!test) {                                                                                                       // 4815\n      return fn();                                                                                                     // 4816\n    }                                                                                                                  // 4817\n                                                                                                                       // 4818\n    // grep                                                                                                            // 4819\n    var match = self._grep.test(test.fullTitle());                                                                     // 4820\n    if (self._invert) {                                                                                                // 4821\n      match = !match;                                                                                                  // 4822\n    }                                                                                                                  // 4823\n    if (!match) {                                                                                                      // 4824\n      // Run immediately only if we have defined a grep. When we                                                       // 4825\n      // define a grep — It can cause maximum callstack error if                                                       // 4826\n      // the grep is doing a large recursive loop by neglecting                                                        // 4827\n      // all tests. The run immediately function also comes with                                                       // 4828\n      // a performance cost. So we don't want to run immediately                                                       // 4829\n      // if we run the whole test suite, because running the whole                                                     // 4830\n      // test suite don't do any immediate recursive loops. Thus,                                                      // 4831\n      // allowing a JS runtime to breathe.                                                                             // 4832\n      if (self._grep !== self._defaultGrep) {                                                                          // 4833\n        Runner.immediately(next);                                                                                      // 4834\n      } else {                                                                                                         // 4835\n        next();                                                                                                        // 4836\n      }                                                                                                                // 4837\n      return;                                                                                                          // 4838\n    }                                                                                                                  // 4839\n                                                                                                                       // 4840\n    function parentPending(suite) {                                                                                    // 4841\n      return suite.pending || (suite.parent && parentPending(suite.parent));                                           // 4842\n    }                                                                                                                  // 4843\n                                                                                                                       // 4844\n    // pending                                                                                                         // 4845\n    if (test.pending || parentPending(test.parent)) {                                                                  // 4846\n      self.emit('pending', test);                                                                                      // 4847\n      self.emit('test end', test);                                                                                     // 4848\n      return next();                                                                                                   // 4849\n    }                                                                                                                  // 4850\n                                                                                                                       // 4851\n    // execute test and hook(s)                                                                                        // 4852\n    self.emit('test', self.test = test);                                                                               // 4853\n    self.hookDown('beforeEach', function(err, errSuite) {                                                              // 4854\n      if (suite.pending) {                                                                                             // 4855\n        self.emit('pending', test);                                                                                    // 4856\n        self.emit('test end', test);                                                                                   // 4857\n        return next();                                                                                                 // 4858\n      }                                                                                                                // 4859\n      if (err) {                                                                                                       // 4860\n        return hookErr(err, errSuite, false);                                                                          // 4861\n      }                                                                                                                // 4862\n      self.currentRunnable = self.test;                                                                                // 4863\n      self.runTest(function(err) {                                                                                     // 4864\n        test = self.test;                                                                                              // 4865\n        if (err) {                                                                                                     // 4866\n          var retry = test.currentRetry();                                                                             // 4867\n          if (err instanceof Pending) {                                                                                // 4868\n            test.pending = true;                                                                                       // 4869\n            self.emit('pending', test);                                                                                // 4870\n          } else if (retry < test.retries()) {                                                                         // 4871\n            var clonedTest = test.clone();                                                                             // 4872\n            clonedTest.currentRetry(retry + 1);                                                                        // 4873\n            tests.unshift(clonedTest);                                                                                 // 4874\n                                                                                                                       // 4875\n            // Early return + hook trigger so that it doesn't                                                          // 4876\n            // increment the count wrong                                                                               // 4877\n            return self.hookUp('afterEach', next);                                                                     // 4878\n          } else {                                                                                                     // 4879\n            self.fail(test, err);                                                                                      // 4880\n          }                                                                                                            // 4881\n          self.emit('test end', test);                                                                                 // 4882\n                                                                                                                       // 4883\n          if (err instanceof Pending) {                                                                                // 4884\n            return next();                                                                                             // 4885\n          }                                                                                                            // 4886\n                                                                                                                       // 4887\n          return self.hookUp('afterEach', next);                                                                       // 4888\n        }                                                                                                              // 4889\n                                                                                                                       // 4890\n        test.state = 'passed';                                                                                         // 4891\n        self.emit('pass', test);                                                                                       // 4892\n        self.emit('test end', test);                                                                                   // 4893\n        self.hookUp('afterEach', next);                                                                                // 4894\n      });                                                                                                              // 4895\n    });                                                                                                                // 4896\n  }                                                                                                                    // 4897\n                                                                                                                       // 4898\n  this.next = next;                                                                                                    // 4899\n  this.hookErr = hookErr;                                                                                              // 4900\n  next();                                                                                                              // 4901\n};                                                                                                                     // 4902\n                                                                                                                       // 4903\n/**                                                                                                                    // 4904\n * Run the given `suite` and invoke the callback `fn()` when complete.                                                 // 4905\n *                                                                                                                     // 4906\n * @api private                                                                                                        // 4907\n * @param {Suite} suite                                                                                                // 4908\n * @param {Function} fn                                                                                                // 4909\n */                                                                                                                    // 4910\nRunner.prototype.runSuite = function(suite, fn) {                                                                      // 4911\n  var i = 0;                                                                                                           // 4912\n  var self = this;                                                                                                     // 4913\n  var total = this.grepTotal(suite);                                                                                   // 4914\n  var afterAllHookCalled = false;                                                                                      // 4915\n                                                                                                                       // 4916\n  debug('run suite %s', suite.fullTitle());                                                                            // 4917\n                                                                                                                       // 4918\n  if (!total || (self.failures && suite._bail)) {                                                                      // 4919\n    return fn();                                                                                                       // 4920\n  }                                                                                                                    // 4921\n                                                                                                                       // 4922\n  this.emit('suite', this.suite = suite);                                                                              // 4923\n                                                                                                                       // 4924\n  function next(errSuite) {                                                                                            // 4925\n    if (errSuite) {                                                                                                    // 4926\n      // current suite failed on a hook from errSuite                                                                  // 4927\n      if (errSuite === suite) {                                                                                        // 4928\n        // if errSuite is current suite                                                                                // 4929\n        // continue to the next sibling suite                                                                          // 4930\n        return done();                                                                                                 // 4931\n      }                                                                                                                // 4932\n      // errSuite is among the parents of current suite                                                                // 4933\n      // stop execution of errSuite and all sub-suites                                                                 // 4934\n      return done(errSuite);                                                                                           // 4935\n    }                                                                                                                  // 4936\n                                                                                                                       // 4937\n    if (self._abort) {                                                                                                 // 4938\n      return done();                                                                                                   // 4939\n    }                                                                                                                  // 4940\n                                                                                                                       // 4941\n    var curr = suite.suites[i++];                                                                                      // 4942\n    if (!curr) {                                                                                                       // 4943\n      return done();                                                                                                   // 4944\n    }                                                                                                                  // 4945\n                                                                                                                       // 4946\n    // Avoid grep neglecting large number of tests causing a                                                           // 4947\n    // huge recursive loop and thus a maximum call stack error.                                                        // 4948\n    // See comment in `this.runTests()` for more information.                                                          // 4949\n    if (self._grep !== self._defaultGrep) {                                                                            // 4950\n      Runner.immediately(function() {                                                                                  // 4951\n        self.runSuite(curr, next);                                                                                     // 4952\n      });                                                                                                              // 4953\n    } else {                                                                                                           // 4954\n      self.runSuite(curr, next);                                                                                       // 4955\n    }                                                                                                                  // 4956\n  }                                                                                                                    // 4957\n                                                                                                                       // 4958\n  function done(errSuite) {                                                                                            // 4959\n    self.suite = suite;                                                                                                // 4960\n    self.nextSuite = next;                                                                                             // 4961\n                                                                                                                       // 4962\n    if (afterAllHookCalled) {                                                                                          // 4963\n      fn(errSuite);                                                                                                    // 4964\n    } else {                                                                                                           // 4965\n      // mark that the afterAll block has been called once                                                             // 4966\n      // and so can be skipped if there is an error in it.                                                             // 4967\n      afterAllHookCalled = true;                                                                                       // 4968\n                                                                                                                       // 4969\n      // remove reference to test                                                                                      // 4970\n      delete self.test;                                                                                                // 4971\n                                                                                                                       // 4972\n      self.hook('afterAll', function() {                                                                               // 4973\n        self.emit('suite end', suite);                                                                                 // 4974\n        fn(errSuite);                                                                                                  // 4975\n      });                                                                                                              // 4976\n    }                                                                                                                  // 4977\n  }                                                                                                                    // 4978\n                                                                                                                       // 4979\n  this.nextSuite = next;                                                                                               // 4980\n                                                                                                                       // 4981\n  this.hook('beforeAll', function(err) {                                                                               // 4982\n    if (err) {                                                                                                         // 4983\n      return done();                                                                                                   // 4984\n    }                                                                                                                  // 4985\n    self.runTests(suite, next);                                                                                        // 4986\n  });                                                                                                                  // 4987\n};                                                                                                                     // 4988\n                                                                                                                       // 4989\n/**                                                                                                                    // 4990\n * Handle uncaught exceptions.                                                                                         // 4991\n *                                                                                                                     // 4992\n * @param {Error} err                                                                                                  // 4993\n * @api private                                                                                                        // 4994\n */                                                                                                                    // 4995\nRunner.prototype.uncaught = function(err) {                                                                            // 4996\n  if (err) {                                                                                                           // 4997\n    debug('uncaught exception %s', err !== function() {                                                                // 4998\n      return this;                                                                                                     // 4999\n    }.call(err) ? err : (err.message || err));                                                                         // 5000\n  } else {                                                                                                             // 5001\n    debug('uncaught undefined exception');                                                                             // 5002\n    err = undefinedError();                                                                                            // 5003\n  }                                                                                                                    // 5004\n  err.uncaught = true;                                                                                                 // 5005\n                                                                                                                       // 5006\n  var runnable = this.currentRunnable;                                                                                 // 5007\n                                                                                                                       // 5008\n  if (!runnable) {                                                                                                     // 5009\n    runnable = new Runnable('Uncaught error outside test suite');                                                      // 5010\n    runnable.parent = this.suite;                                                                                      // 5011\n                                                                                                                       // 5012\n    if (this.started) {                                                                                                // 5013\n      this.fail(runnable, err);                                                                                        // 5014\n    } else {                                                                                                           // 5015\n      // Can't recover from this failure                                                                               // 5016\n      this.emit('start');                                                                                              // 5017\n      this.fail(runnable, err);                                                                                        // 5018\n      this.emit('end');                                                                                                // 5019\n    }                                                                                                                  // 5020\n                                                                                                                       // 5021\n    return;                                                                                                            // 5022\n  }                                                                                                                    // 5023\n                                                                                                                       // 5024\n  runnable.clearTimeout();                                                                                             // 5025\n                                                                                                                       // 5026\n  // Ignore errors if complete                                                                                         // 5027\n  if (runnable.state) {                                                                                                // 5028\n    return;                                                                                                            // 5029\n  }                                                                                                                    // 5030\n  this.fail(runnable, err);                                                                                            // 5031\n                                                                                                                       // 5032\n  // recover from test                                                                                                 // 5033\n  if (runnable.type === 'test') {                                                                                      // 5034\n    this.emit('test end', runnable);                                                                                   // 5035\n    this.hookUp('afterEach', this.next);                                                                               // 5036\n    return;                                                                                                            // 5037\n  }                                                                                                                    // 5038\n                                                                                                                       // 5039\n // recover from hooks                                                                                                 // 5040\n  if (runnable.type === 'hook') {                                                                                      // 5041\n    var errSuite = this.suite;                                                                                         // 5042\n    // if hook failure is in afterEach block                                                                           // 5043\n    if (runnable.fullTitle().indexOf('after each') > -1) {                                                             // 5044\n      return this.hookErr(err, errSuite, true);                                                                        // 5045\n    }                                                                                                                  // 5046\n    // if hook failure is in beforeEach block                                                                          // 5047\n    if (runnable.fullTitle().indexOf('before each') > -1) {                                                            // 5048\n      return this.hookErr(err, errSuite, false);                                                                       // 5049\n    }                                                                                                                  // 5050\n    // if hook failure is in after or before blocks                                                                    // 5051\n    return this.nextSuite(errSuite);                                                                                   // 5052\n  }                                                                                                                    // 5053\n                                                                                                                       // 5054\n  // bail                                                                                                              // 5055\n  this.emit('end');                                                                                                    // 5056\n};                                                                                                                     // 5057\n                                                                                                                       // 5058\n/**                                                                                                                    // 5059\n * Cleans up the references to all the deferred functions                                                              // 5060\n * (before/after/beforeEach/afterEach) and tests of a Suite.                                                           // 5061\n * These must be deleted otherwise a memory leak can happen,                                                           // 5062\n * as those functions may reference variables from closures,                                                           // 5063\n * thus those variables can never be garbage collected as long                                                         // 5064\n * as the deferred functions exist.                                                                                    // 5065\n *                                                                                                                     // 5066\n * @param {Suite} suite                                                                                                // 5067\n */                                                                                                                    // 5068\nfunction cleanSuiteReferences(suite) {                                                                                 // 5069\n  function cleanArrReferences(arr) {                                                                                   // 5070\n    for (var i = 0; i < arr.length; i++) {                                                                             // 5071\n      delete arr[i].fn;                                                                                                // 5072\n    }                                                                                                                  // 5073\n  }                                                                                                                    // 5074\n                                                                                                                       // 5075\n  if (isArray(suite._beforeAll)) {                                                                                     // 5076\n    cleanArrReferences(suite._beforeAll);                                                                              // 5077\n  }                                                                                                                    // 5078\n                                                                                                                       // 5079\n  if (isArray(suite._beforeEach)) {                                                                                    // 5080\n    cleanArrReferences(suite._beforeEach);                                                                             // 5081\n  }                                                                                                                    // 5082\n                                                                                                                       // 5083\n  if (isArray(suite._afterAll)) {                                                                                      // 5084\n    cleanArrReferences(suite._afterAll);                                                                               // 5085\n  }                                                                                                                    // 5086\n                                                                                                                       // 5087\n  if (isArray(suite._afterEach)) {                                                                                     // 5088\n    cleanArrReferences(suite._afterEach);                                                                              // 5089\n  }                                                                                                                    // 5090\n                                                                                                                       // 5091\n  for (var i = 0; i < suite.tests.length; i++) {                                                                       // 5092\n    delete suite.tests[i].fn;                                                                                          // 5093\n  }                                                                                                                    // 5094\n}                                                                                                                      // 5095\n                                                                                                                       // 5096\n/**                                                                                                                    // 5097\n * Run the root suite and invoke `fn(failures)`                                                                        // 5098\n * on completion.                                                                                                      // 5099\n *                                                                                                                     // 5100\n * @param {Function} fn                                                                                                // 5101\n * @return {Runner} for chaining                                                                                       // 5102\n * @api public                                                                                                         // 5103\n * @param {Function} fn                                                                                                // 5104\n * @return {Runner} Runner instance.                                                                                   // 5105\n */                                                                                                                    // 5106\nRunner.prototype.run = function(fn) {                                                                                  // 5107\n  var self = this;                                                                                                     // 5108\n  var rootSuite = this.suite;                                                                                          // 5109\n                                                                                                                       // 5110\n  fn = fn || function() {};                                                                                            // 5111\n                                                                                                                       // 5112\n  function uncaught(err) {                                                                                             // 5113\n    self.uncaught(err);                                                                                                // 5114\n  }                                                                                                                    // 5115\n                                                                                                                       // 5116\n  function start() {                                                                                                   // 5117\n    self.started = true;                                                                                               // 5118\n    self.emit('start');                                                                                                // 5119\n    self.runSuite(rootSuite, function() {                                                                              // 5120\n      debug('finished running');                                                                                       // 5121\n      self.emit('end');                                                                                                // 5122\n    });                                                                                                                // 5123\n  }                                                                                                                    // 5124\n                                                                                                                       // 5125\n  debug('start');                                                                                                      // 5126\n                                                                                                                       // 5127\n  // references cleanup to avoid memory leaks                                                                          // 5128\n  this.on('suite end', cleanSuiteReferences);                                                                          // 5129\n                                                                                                                       // 5130\n  // callback                                                                                                          // 5131\n  this.on('end', function() {                                                                                          // 5132\n    debug('end');                                                                                                      // 5133\n    process.removeListener('uncaughtException', uncaught);                                                             // 5134\n    fn(self.failures);                                                                                                 // 5135\n  });                                                                                                                  // 5136\n                                                                                                                       // 5137\n  // uncaught exception                                                                                                // 5138\n  process.on('uncaughtException', uncaught);                                                                           // 5139\n                                                                                                                       // 5140\n  if (this._delay) {                                                                                                   // 5141\n    // for reporters, I guess.                                                                                         // 5142\n    // might be nice to debounce some dots while we wait.                                                              // 5143\n    this.emit('waiting', rootSuite);                                                                                   // 5144\n    rootSuite.once('run', start);                                                                                      // 5145\n  } else {                                                                                                             // 5146\n    start();                                                                                                           // 5147\n  }                                                                                                                    // 5148\n                                                                                                                       // 5149\n  return this;                                                                                                         // 5150\n};                                                                                                                     // 5151\n                                                                                                                       // 5152\n/**                                                                                                                    // 5153\n * Cleanly abort execution.                                                                                            // 5154\n *                                                                                                                     // 5155\n * @api public                                                                                                         // 5156\n * @return {Runner} Runner instance.                                                                                   // 5157\n */                                                                                                                    // 5158\nRunner.prototype.abort = function() {                                                                                  // 5159\n  debug('aborting');                                                                                                   // 5160\n  this._abort = true;                                                                                                  // 5161\n                                                                                                                       // 5162\n  return this;                                                                                                         // 5163\n};                                                                                                                     // 5164\n                                                                                                                       // 5165\n/**                                                                                                                    // 5166\n * Filter leaks with the given globals flagged as `ok`.                                                                // 5167\n *                                                                                                                     // 5168\n * @api private                                                                                                        // 5169\n * @param {Array} ok                                                                                                   // 5170\n * @param {Array} globals                                                                                              // 5171\n * @return {Array}                                                                                                     // 5172\n */                                                                                                                    // 5173\nfunction filterLeaks(ok, globals) {                                                                                    // 5174\n  return filter(globals, function(key) {                                                                               // 5175\n    // Firefox and Chrome exposes iframes as index inside the window object                                            // 5176\n    if (/^d+/.test(key)) {                                                                                             // 5177\n      return false;                                                                                                    // 5178\n    }                                                                                                                  // 5179\n                                                                                                                       // 5180\n    // in firefox                                                                                                      // 5181\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first                         // 5182\n    // it is assigned in some seconds                                                                                  // 5183\n    if (global.navigator && (/^getInterface/).test(key)) {                                                             // 5184\n      return false;                                                                                                    // 5185\n    }                                                                                                                  // 5186\n                                                                                                                       // 5187\n    // an iframe could be approached by window[iframeIndex]                                                            // 5188\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak                                          // 5189\n    if (global.navigator && (/^\\d+/).test(key)) {                                                                      // 5190\n      return false;                                                                                                    // 5191\n    }                                                                                                                  // 5192\n                                                                                                                       // 5193\n    // Opera and IE expose global variables for HTML element IDs (issue #243)                                          // 5194\n    if (/^mocha-/.test(key)) {                                                                                         // 5195\n      return false;                                                                                                    // 5196\n    }                                                                                                                  // 5197\n                                                                                                                       // 5198\n    var matched = filter(ok, function(ok) {                                                                            // 5199\n      if (~ok.indexOf('*')) {                                                                                          // 5200\n        return key.indexOf(ok.split('*')[0]) === 0;                                                                    // 5201\n      }                                                                                                                // 5202\n      return key === ok;                                                                                               // 5203\n    });                                                                                                                // 5204\n    return !matched.length && (!global.navigator || key !== 'onerror');                                                // 5205\n  });                                                                                                                  // 5206\n}                                                                                                                      // 5207\n                                                                                                                       // 5208\n/**                                                                                                                    // 5209\n * Array of globals dependent on the environment.                                                                      // 5210\n *                                                                                                                     // 5211\n * @return {Array}                                                                                                     // 5212\n * @api private                                                                                                        // 5213\n */                                                                                                                    // 5214\nfunction extraGlobals() {                                                                                              // 5215\n  if (typeof process === 'object' && typeof process.version === 'string') {                                            // 5216\n    var parts = process.version.split('.');                                                                            // 5217\n    var nodeVersion = utils.reduce(parts, function(a, v) {                                                             // 5218\n      return a << 8 | v;                                                                                               // 5219\n    });                                                                                                                // 5220\n                                                                                                                       // 5221\n    // 'errno' was renamed to process._errno in v0.9.11.                                                               // 5222\n                                                                                                                       // 5223\n    if (nodeVersion < 0x00090B) {                                                                                      // 5224\n      return ['errno'];                                                                                                // 5225\n    }                                                                                                                  // 5226\n  }                                                                                                                    // 5227\n                                                                                                                       // 5228\n  return [];                                                                                                           // 5229\n}                                                                                                                      // 5230\n                                                                                                                       // 5231\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./pending\":16,\"./runnable\":35,\"./utils\":39,\"_process\":51,\"debug\":2,\"events\":3}],37:[function(require,module,exports){\n/**                                                                                                                    // 5234\n * Module dependencies.                                                                                                // 5235\n */                                                                                                                    // 5236\n                                                                                                                       // 5237\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5238\nvar Hook = require('./hook');                                                                                          // 5239\nvar utils = require('./utils');                                                                                        // 5240\nvar inherits = utils.inherits;                                                                                         // 5241\nvar debug = require('debug')('mocha:suite');                                                                           // 5242\nvar milliseconds = require('./ms');                                                                                    // 5243\n                                                                                                                       // 5244\n/**                                                                                                                    // 5245\n * Expose `Suite`.                                                                                                     // 5246\n */                                                                                                                    // 5247\n                                                                                                                       // 5248\nexports = module.exports = Suite;                                                                                      // 5249\n                                                                                                                       // 5250\n/**                                                                                                                    // 5251\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite                                        // 5252\n * with the same title is already present, that suite is returned to provide                                           // 5253\n * nicer reporter and more flexible meta-testing.                                                                      // 5254\n *                                                                                                                     // 5255\n * @api public                                                                                                         // 5256\n * @param {Suite} parent                                                                                               // 5257\n * @param {string} title                                                                                               // 5258\n * @return {Suite}                                                                                                     // 5259\n */                                                                                                                    // 5260\nexports.create = function(parent, title) {                                                                             // 5261\n  var suite = new Suite(title, parent.ctx);                                                                            // 5262\n  suite.parent = parent;                                                                                               // 5263\n  if (parent.pending) {                                                                                                // 5264\n    suite.pending = true;                                                                                              // 5265\n  }                                                                                                                    // 5266\n  title = suite.fullTitle();                                                                                           // 5267\n  parent.addSuite(suite);                                                                                              // 5268\n  return suite;                                                                                                        // 5269\n};                                                                                                                     // 5270\n                                                                                                                       // 5271\n/**                                                                                                                    // 5272\n * Initialize a new `Suite` with the given `title` and `ctx`.                                                          // 5273\n *                                                                                                                     // 5274\n * @api private                                                                                                        // 5275\n * @param {string} title                                                                                               // 5276\n * @param {Context} parentContext                                                                                      // 5277\n */                                                                                                                    // 5278\nfunction Suite(title, parentContext) {                                                                                 // 5279\n  this.title = title;                                                                                                  // 5280\n  function Context() {}                                                                                                // 5281\n  Context.prototype = parentContext;                                                                                   // 5282\n  this.ctx = new Context();                                                                                            // 5283\n  this.suites = [];                                                                                                    // 5284\n  this.tests = [];                                                                                                     // 5285\n  this.pending = false;                                                                                                // 5286\n  this._beforeEach = [];                                                                                               // 5287\n  this._beforeAll = [];                                                                                                // 5288\n  this._afterEach = [];                                                                                                // 5289\n  this._afterAll = [];                                                                                                 // 5290\n  this.root = !title;                                                                                                  // 5291\n  this._timeout = 2000;                                                                                                // 5292\n  this._enableTimeouts = true;                                                                                         // 5293\n  this._slow = 75;                                                                                                     // 5294\n  this._bail = false;                                                                                                  // 5295\n  this._retries = -1;                                                                                                  // 5296\n  this.delayed = false;                                                                                                // 5297\n}                                                                                                                      // 5298\n                                                                                                                       // 5299\n/**                                                                                                                    // 5300\n * Inherit from `EventEmitter.prototype`.                                                                              // 5301\n */                                                                                                                    // 5302\ninherits(Suite, EventEmitter);                                                                                         // 5303\n                                                                                                                       // 5304\n/**                                                                                                                    // 5305\n * Return a clone of this `Suite`.                                                                                     // 5306\n *                                                                                                                     // 5307\n * @api private                                                                                                        // 5308\n * @return {Suite}                                                                                                     // 5309\n */                                                                                                                    // 5310\nSuite.prototype.clone = function() {                                                                                   // 5311\n  var suite = new Suite(this.title);                                                                                   // 5312\n  debug('clone');                                                                                                      // 5313\n  suite.ctx = this.ctx;                                                                                                // 5314\n  suite.timeout(this.timeout());                                                                                       // 5315\n  suite.retries(this.retries());                                                                                       // 5316\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 5317\n  suite.slow(this.slow());                                                                                             // 5318\n  suite.bail(this.bail());                                                                                             // 5319\n  return suite;                                                                                                        // 5320\n};                                                                                                                     // 5321\n                                                                                                                       // 5322\n/**                                                                                                                    // 5323\n * Set timeout `ms` or short-hand such as \"2s\".                                                                        // 5324\n *                                                                                                                     // 5325\n * @api private                                                                                                        // 5326\n * @param {number|string} ms                                                                                           // 5327\n * @return {Suite|number} for chaining                                                                                 // 5328\n */                                                                                                                    // 5329\nSuite.prototype.timeout = function(ms) {                                                                               // 5330\n  if (!arguments.length) {                                                                                             // 5331\n    return this._timeout;                                                                                              // 5332\n  }                                                                                                                    // 5333\n  if (ms.toString() === '0') {                                                                                         // 5334\n    this._enableTimeouts = false;                                                                                      // 5335\n  }                                                                                                                    // 5336\n  if (typeof ms === 'string') {                                                                                        // 5337\n    ms = milliseconds(ms);                                                                                             // 5338\n  }                                                                                                                    // 5339\n  debug('timeout %d', ms);                                                                                             // 5340\n  this._timeout = parseInt(ms, 10);                                                                                    // 5341\n  return this;                                                                                                         // 5342\n};                                                                                                                     // 5343\n                                                                                                                       // 5344\n/**                                                                                                                    // 5345\n * Set number of times to retry a failed test.                                                                         // 5346\n *                                                                                                                     // 5347\n * @api private                                                                                                        // 5348\n * @param {number|string} n                                                                                            // 5349\n * @return {Suite|number} for chaining                                                                                 // 5350\n */                                                                                                                    // 5351\nSuite.prototype.retries = function(n) {                                                                                // 5352\n  if (!arguments.length) {                                                                                             // 5353\n    return this._retries;                                                                                              // 5354\n  }                                                                                                                    // 5355\n  debug('retries %d', n);                                                                                              // 5356\n  this._retries = parseInt(n, 10) || 0;                                                                                // 5357\n  return this;                                                                                                         // 5358\n};                                                                                                                     // 5359\n                                                                                                                       // 5360\n/**                                                                                                                    // 5361\n  * Set timeout to `enabled`.                                                                                          // 5362\n  *                                                                                                                    // 5363\n  * @api private                                                                                                       // 5364\n  * @param {boolean} enabled                                                                                           // 5365\n  * @return {Suite|boolean} self or enabled                                                                            // 5366\n  */                                                                                                                   // 5367\nSuite.prototype.enableTimeouts = function(enabled) {                                                                   // 5368\n  if (!arguments.length) {                                                                                             // 5369\n    return this._enableTimeouts;                                                                                       // 5370\n  }                                                                                                                    // 5371\n  debug('enableTimeouts %s', enabled);                                                                                 // 5372\n  this._enableTimeouts = enabled;                                                                                      // 5373\n  return this;                                                                                                         // 5374\n};                                                                                                                     // 5375\n                                                                                                                       // 5376\n/**                                                                                                                    // 5377\n * Set slow `ms` or short-hand such as \"2s\".                                                                           // 5378\n *                                                                                                                     // 5379\n * @api private                                                                                                        // 5380\n * @param {number|string} ms                                                                                           // 5381\n * @return {Suite|number} for chaining                                                                                 // 5382\n */                                                                                                                    // 5383\nSuite.prototype.slow = function(ms) {                                                                                  // 5384\n  if (!arguments.length) {                                                                                             // 5385\n    return this._slow;                                                                                                 // 5386\n  }                                                                                                                    // 5387\n  if (typeof ms === 'string') {                                                                                        // 5388\n    ms = milliseconds(ms);                                                                                             // 5389\n  }                                                                                                                    // 5390\n  debug('slow %d', ms);                                                                                                // 5391\n  this._slow = ms;                                                                                                     // 5392\n  return this;                                                                                                         // 5393\n};                                                                                                                     // 5394\n                                                                                                                       // 5395\n/**                                                                                                                    // 5396\n * Sets whether to bail after first error.                                                                             // 5397\n *                                                                                                                     // 5398\n * @api private                                                                                                        // 5399\n * @param {boolean} bail                                                                                               // 5400\n * @return {Suite|number} for chaining                                                                                 // 5401\n */                                                                                                                    // 5402\nSuite.prototype.bail = function(bail) {                                                                                // 5403\n  if (!arguments.length) {                                                                                             // 5404\n    return this._bail;                                                                                                 // 5405\n  }                                                                                                                    // 5406\n  debug('bail %s', bail);                                                                                              // 5407\n  this._bail = bail;                                                                                                   // 5408\n  return this;                                                                                                         // 5409\n};                                                                                                                     // 5410\n                                                                                                                       // 5411\n/**                                                                                                                    // 5412\n * Run `fn(test[, done])` before running tests.                                                                        // 5413\n *                                                                                                                     // 5414\n * @api private                                                                                                        // 5415\n * @param {string} title                                                                                               // 5416\n * @param {Function} fn                                                                                                // 5417\n * @return {Suite} for chaining                                                                                        // 5418\n */                                                                                                                    // 5419\nSuite.prototype.beforeAll = function(title, fn) {                                                                      // 5420\n  if (this.pending) {                                                                                                  // 5421\n    return this;                                                                                                       // 5422\n  }                                                                                                                    // 5423\n  if (typeof title === 'function') {                                                                                   // 5424\n    fn = title;                                                                                                        // 5425\n    title = fn.name;                                                                                                   // 5426\n  }                                                                                                                    // 5427\n  title = '\"before all\" hook' + (title ? ': ' + title : '');                                                           // 5428\n                                                                                                                       // 5429\n  var hook = new Hook(title, fn);                                                                                      // 5430\n  hook.parent = this;                                                                                                  // 5431\n  hook.timeout(this.timeout());                                                                                        // 5432\n  hook.retries(this.retries());                                                                                        // 5433\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 5434\n  hook.slow(this.slow());                                                                                              // 5435\n  hook.ctx = this.ctx;                                                                                                 // 5436\n  this._beforeAll.push(hook);                                                                                          // 5437\n  this.emit('beforeAll', hook);                                                                                        // 5438\n  return this;                                                                                                         // 5439\n};                                                                                                                     // 5440\n                                                                                                                       // 5441\n/**                                                                                                                    // 5442\n * Run `fn(test[, done])` after running tests.                                                                         // 5443\n *                                                                                                                     // 5444\n * @api private                                                                                                        // 5445\n * @param {string} title                                                                                               // 5446\n * @param {Function} fn                                                                                                // 5447\n * @return {Suite} for chaining                                                                                        // 5448\n */                                                                                                                    // 5449\nSuite.prototype.afterAll = function(title, fn) {                                                                       // 5450\n  if (this.pending) {                                                                                                  // 5451\n    return this;                                                                                                       // 5452\n  }                                                                                                                    // 5453\n  if (typeof title === 'function') {                                                                                   // 5454\n    fn = title;                                                                                                        // 5455\n    title = fn.name;                                                                                                   // 5456\n  }                                                                                                                    // 5457\n  title = '\"after all\" hook' + (title ? ': ' + title : '');                                                            // 5458\n                                                                                                                       // 5459\n  var hook = new Hook(title, fn);                                                                                      // 5460\n  hook.parent = this;                                                                                                  // 5461\n  hook.timeout(this.timeout());                                                                                        // 5462\n  hook.retries(this.retries());                                                                                        // 5463\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 5464\n  hook.slow(this.slow());                                                                                              // 5465\n  hook.ctx = this.ctx;                                                                                                 // 5466\n  this._afterAll.push(hook);                                                                                           // 5467\n  this.emit('afterAll', hook);                                                                                         // 5468\n  return this;                                                                                                         // 5469\n};                                                                                                                     // 5470\n                                                                                                                       // 5471\n/**                                                                                                                    // 5472\n * Run `fn(test[, done])` before each test case.                                                                       // 5473\n *                                                                                                                     // 5474\n * @api private                                                                                                        // 5475\n * @param {string} title                                                                                               // 5476\n * @param {Function} fn                                                                                                // 5477\n * @return {Suite} for chaining                                                                                        // 5478\n */                                                                                                                    // 5479\nSuite.prototype.beforeEach = function(title, fn) {                                                                     // 5480\n  if (this.pending) {                                                                                                  // 5481\n    return this;                                                                                                       // 5482\n  }                                                                                                                    // 5483\n  if (typeof title === 'function') {                                                                                   // 5484\n    fn = title;                                                                                                        // 5485\n    title = fn.name;                                                                                                   // 5486\n  }                                                                                                                    // 5487\n  title = '\"before each\" hook' + (title ? ': ' + title : '');                                                          // 5488\n                                                                                                                       // 5489\n  var hook = new Hook(title, fn);                                                                                      // 5490\n  hook.parent = this;                                                                                                  // 5491\n  hook.timeout(this.timeout());                                                                                        // 5492\n  hook.retries(this.retries());                                                                                        // 5493\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 5494\n  hook.slow(this.slow());                                                                                              // 5495\n  hook.ctx = this.ctx;                                                                                                 // 5496\n  this._beforeEach.push(hook);                                                                                         // 5497\n  this.emit('beforeEach', hook);                                                                                       // 5498\n  return this;                                                                                                         // 5499\n};                                                                                                                     // 5500\n                                                                                                                       // 5501\n/**                                                                                                                    // 5502\n * Run `fn(test[, done])` after each test case.                                                                        // 5503\n *                                                                                                                     // 5504\n * @api private                                                                                                        // 5505\n * @param {string} title                                                                                               // 5506\n * @param {Function} fn                                                                                                // 5507\n * @return {Suite} for chaining                                                                                        // 5508\n */                                                                                                                    // 5509\nSuite.prototype.afterEach = function(title, fn) {                                                                      // 5510\n  if (this.pending) {                                                                                                  // 5511\n    return this;                                                                                                       // 5512\n  }                                                                                                                    // 5513\n  if (typeof title === 'function') {                                                                                   // 5514\n    fn = title;                                                                                                        // 5515\n    title = fn.name;                                                                                                   // 5516\n  }                                                                                                                    // 5517\n  title = '\"after each\" hook' + (title ? ': ' + title : '');                                                           // 5518\n                                                                                                                       // 5519\n  var hook = new Hook(title, fn);                                                                                      // 5520\n  hook.parent = this;                                                                                                  // 5521\n  hook.timeout(this.timeout());                                                                                        // 5522\n  hook.retries(this.retries());                                                                                        // 5523\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 5524\n  hook.slow(this.slow());                                                                                              // 5525\n  hook.ctx = this.ctx;                                                                                                 // 5526\n  this._afterEach.push(hook);                                                                                          // 5527\n  this.emit('afterEach', hook);                                                                                        // 5528\n  return this;                                                                                                         // 5529\n};                                                                                                                     // 5530\n                                                                                                                       // 5531\n/**                                                                                                                    // 5532\n * Add a test `suite`.                                                                                                 // 5533\n *                                                                                                                     // 5534\n * @api private                                                                                                        // 5535\n * @param {Suite} suite                                                                                                // 5536\n * @return {Suite} for chaining                                                                                        // 5537\n */                                                                                                                    // 5538\nSuite.prototype.addSuite = function(suite) {                                                                           // 5539\n  suite.parent = this;                                                                                                 // 5540\n  suite.timeout(this.timeout());                                                                                       // 5541\n  suite.retries(this.retries());                                                                                       // 5542\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 5543\n  suite.slow(this.slow());                                                                                             // 5544\n  suite.bail(this.bail());                                                                                             // 5545\n  this.suites.push(suite);                                                                                             // 5546\n  this.emit('suite', suite);                                                                                           // 5547\n  return this;                                                                                                         // 5548\n};                                                                                                                     // 5549\n                                                                                                                       // 5550\n/**                                                                                                                    // 5551\n * Add a `test` to this suite.                                                                                         // 5552\n *                                                                                                                     // 5553\n * @api private                                                                                                        // 5554\n * @param {Test} test                                                                                                  // 5555\n * @return {Suite} for chaining                                                                                        // 5556\n */                                                                                                                    // 5557\nSuite.prototype.addTest = function(test) {                                                                             // 5558\n  test.parent = this;                                                                                                  // 5559\n  test.timeout(this.timeout());                                                                                        // 5560\n  test.retries(this.retries());                                                                                        // 5561\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 5562\n  test.slow(this.slow());                                                                                              // 5563\n  test.ctx = this.ctx;                                                                                                 // 5564\n  this.tests.push(test);                                                                                               // 5565\n  this.emit('test', test);                                                                                             // 5566\n  return this;                                                                                                         // 5567\n};                                                                                                                     // 5568\n                                                                                                                       // 5569\n/**                                                                                                                    // 5570\n * Return the full title generated by recursively concatenating the parent's                                           // 5571\n * full title.                                                                                                         // 5572\n *                                                                                                                     // 5573\n * @api public                                                                                                         // 5574\n * @return {string}                                                                                                    // 5575\n */                                                                                                                    // 5576\nSuite.prototype.fullTitle = function() {                                                                               // 5577\n  if (this.parent) {                                                                                                   // 5578\n    var full = this.parent.fullTitle();                                                                                // 5579\n    if (full) {                                                                                                        // 5580\n      return full + ' ' + this.title;                                                                                  // 5581\n    }                                                                                                                  // 5582\n  }                                                                                                                    // 5583\n  return this.title;                                                                                                   // 5584\n};                                                                                                                     // 5585\n                                                                                                                       // 5586\n/**                                                                                                                    // 5587\n * Return the total number of tests.                                                                                   // 5588\n *                                                                                                                     // 5589\n * @api public                                                                                                         // 5590\n * @return {number}                                                                                                    // 5591\n */                                                                                                                    // 5592\nSuite.prototype.total = function() {                                                                                   // 5593\n  return utils.reduce(this.suites, function(sum, suite) {                                                              // 5594\n    return sum + suite.total();                                                                                        // 5595\n  }, 0) + this.tests.length;                                                                                           // 5596\n};                                                                                                                     // 5597\n                                                                                                                       // 5598\n/**                                                                                                                    // 5599\n * Iterates through each suite recursively to find all tests. Applies a                                                // 5600\n * function in the format `fn(test)`.                                                                                  // 5601\n *                                                                                                                     // 5602\n * @api private                                                                                                        // 5603\n * @param {Function} fn                                                                                                // 5604\n * @return {Suite}                                                                                                     // 5605\n */                                                                                                                    // 5606\nSuite.prototype.eachTest = function(fn) {                                                                              // 5607\n  utils.forEach(this.tests, fn);                                                                                       // 5608\n  utils.forEach(this.suites, function(suite) {                                                                         // 5609\n    suite.eachTest(fn);                                                                                                // 5610\n  });                                                                                                                  // 5611\n  return this;                                                                                                         // 5612\n};                                                                                                                     // 5613\n                                                                                                                       // 5614\n/**                                                                                                                    // 5615\n * This will run the root suite if we happen to be running in delayed mode.                                            // 5616\n */                                                                                                                    // 5617\nSuite.prototype.run = function run() {                                                                                 // 5618\n  if (this.root) {                                                                                                     // 5619\n    this.emit('run');                                                                                                  // 5620\n  }                                                                                                                    // 5621\n};                                                                                                                     // 5622\n                                                                                                                       // 5623\n},{\"./hook\":7,\"./ms\":15,\"./utils\":39,\"debug\":2,\"events\":3}],38:[function(require,module,exports){                      // 5624\n/**                                                                                                                    // 5625\n * Module dependencies.                                                                                                // 5626\n */                                                                                                                    // 5627\n                                                                                                                       // 5628\nvar Runnable = require('./runnable');                                                                                  // 5629\nvar inherits = require('./utils').inherits;                                                                            // 5630\n                                                                                                                       // 5631\n/**                                                                                                                    // 5632\n * Expose `Test`.                                                                                                      // 5633\n */                                                                                                                    // 5634\n                                                                                                                       // 5635\nmodule.exports = Test;                                                                                                 // 5636\n                                                                                                                       // 5637\n/**                                                                                                                    // 5638\n * Initialize a new `Test` with the given `title` and callback `fn`.                                                   // 5639\n *                                                                                                                     // 5640\n * @api private                                                                                                        // 5641\n * @param {String} title                                                                                               // 5642\n * @param {Function} fn                                                                                                // 5643\n */                                                                                                                    // 5644\nfunction Test(title, fn) {                                                                                             // 5645\n  Runnable.call(this, title, fn);                                                                                      // 5646\n  this.pending = !fn;                                                                                                  // 5647\n  this.type = 'test';                                                                                                  // 5648\n  this.body = (fn || '').toString();                                                                                   // 5649\n}                                                                                                                      // 5650\n                                                                                                                       // 5651\n/**                                                                                                                    // 5652\n * Inherit from `Runnable.prototype`.                                                                                  // 5653\n */                                                                                                                    // 5654\ninherits(Test, Runnable);                                                                                              // 5655\n                                                                                                                       // 5656\nTest.prototype.clone = function() {                                                                                    // 5657\n  var test = new Test(this.title, this.fn);                                                                            // 5658\n  test.timeout(this.timeout());                                                                                        // 5659\n  test.slow(this.slow());                                                                                              // 5660\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 5661\n  test.retries(this.retries());                                                                                        // 5662\n  test.currentRetry(this.currentRetry());                                                                              // 5663\n  test.globals(this.globals());                                                                                        // 5664\n  test.parent = this.parent;                                                                                           // 5665\n  test.file = this.file;                                                                                               // 5666\n  test.ctx = this.ctx;                                                                                                 // 5667\n  return test;                                                                                                         // 5668\n};                                                                                                                     // 5669\n                                                                                                                       // 5670\n},{\"./runnable\":35,\"./utils\":39}],39:[function(require,module,exports){                                                // 5671\n(function (process,Buffer){                                                                                            // 5672\n/* eslint-env browser */                                                                                               // 5673\n                                                                                                                       // 5674\n/**                                                                                                                    // 5675\n * Module dependencies.                                                                                                // 5676\n */                                                                                                                    // 5677\n                                                                                                                       // 5678\nvar basename = require('path').basename;                                                                               // 5679\nvar debug = require('debug')('mocha:watch');                                                                           // 5680\nvar exists = require('fs').existsSync || require('path').existsSync;                                                   // 5681\nvar glob = require('glob');                                                                                            // 5682\nvar join = require('path').join;                                                                                       // 5683\nvar readdirSync = require('fs').readdirSync;                                                                           // 5684\nvar statSync = require('fs').statSync;                                                                                 // 5685\nvar watchFile = require('fs').watchFile;                                                                               // 5686\n                                                                                                                       // 5687\n/**                                                                                                                    // 5688\n * Ignored directories.                                                                                                // 5689\n */                                                                                                                    // 5690\n                                                                                                                       // 5691\nvar ignore = ['node_modules', '.git'];                                                                                 // 5692\n                                                                                                                       // 5693\nexports.inherits = require('util').inherits;                                                                           // 5694\n                                                                                                                       // 5695\n/**                                                                                                                    // 5696\n * Escape special characters in the given string of html.                                                              // 5697\n *                                                                                                                     // 5698\n * @api private                                                                                                        // 5699\n * @param  {string} html                                                                                               // 5700\n * @return {string}                                                                                                    // 5701\n */                                                                                                                    // 5702\nexports.escape = function(html) {                                                                                      // 5703\n  return String(html)                                                                                                  // 5704\n    .replace(/&/g, '&amp;')                                                                                            // 5705\n    .replace(/\"/g, '&quot;')                                                                                           // 5706\n    .replace(/</g, '&lt;')                                                                                             // 5707\n    .replace(/>/g, '&gt;');                                                                                            // 5708\n};                                                                                                                     // 5709\n                                                                                                                       // 5710\n/**                                                                                                                    // 5711\n * Array#forEach (<=IE8)                                                                                               // 5712\n *                                                                                                                     // 5713\n * @api private                                                                                                        // 5714\n * @param {Array} arr                                                                                                  // 5715\n * @param {Function} fn                                                                                                // 5716\n * @param {Object} scope                                                                                               // 5717\n */                                                                                                                    // 5718\nexports.forEach = function(arr, fn, scope) {                                                                           // 5719\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 5720\n    fn.call(scope, arr[i], i);                                                                                         // 5721\n  }                                                                                                                    // 5722\n};                                                                                                                     // 5723\n                                                                                                                       // 5724\n/**                                                                                                                    // 5725\n * Test if the given obj is type of string.                                                                            // 5726\n *                                                                                                                     // 5727\n * @api private                                                                                                        // 5728\n * @param {Object} obj                                                                                                 // 5729\n * @return {boolean}                                                                                                   // 5730\n */                                                                                                                    // 5731\nexports.isString = function(obj) {                                                                                     // 5732\n  return typeof obj === 'string';                                                                                      // 5733\n};                                                                                                                     // 5734\n                                                                                                                       // 5735\n/**                                                                                                                    // 5736\n * Array#map (<=IE8)                                                                                                   // 5737\n *                                                                                                                     // 5738\n * @api private                                                                                                        // 5739\n * @param {Array} arr                                                                                                  // 5740\n * @param {Function} fn                                                                                                // 5741\n * @param {Object} scope                                                                                               // 5742\n * @return {Array}                                                                                                     // 5743\n */                                                                                                                    // 5744\nexports.map = function(arr, fn, scope) {                                                                               // 5745\n  var result = [];                                                                                                     // 5746\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 5747\n    result.push(fn.call(scope, arr[i], i, arr));                                                                       // 5748\n  }                                                                                                                    // 5749\n  return result;                                                                                                       // 5750\n};                                                                                                                     // 5751\n                                                                                                                       // 5752\n/**                                                                                                                    // 5753\n * Array#indexOf (<=IE8)                                                                                               // 5754\n *                                                                                                                     // 5755\n * @api private                                                                                                        // 5756\n * @param {Array} arr                                                                                                  // 5757\n * @param {Object} obj to find index of                                                                                // 5758\n * @param {number} start                                                                                               // 5759\n * @return {number}                                                                                                    // 5760\n */                                                                                                                    // 5761\nexports.indexOf = function(arr, obj, start) {                                                                          // 5762\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                               // 5763\n    if (arr[i] === obj) {                                                                                              // 5764\n      return i;                                                                                                        // 5765\n    }                                                                                                                  // 5766\n  }                                                                                                                    // 5767\n  return -1;                                                                                                           // 5768\n};                                                                                                                     // 5769\n                                                                                                                       // 5770\n/**                                                                                                                    // 5771\n * Array#reduce (<=IE8)                                                                                                // 5772\n *                                                                                                                     // 5773\n * @api private                                                                                                        // 5774\n * @param {Array} arr                                                                                                  // 5775\n * @param {Function} fn                                                                                                // 5776\n * @param {Object} val Initial value.                                                                                  // 5777\n * @return {*}                                                                                                         // 5778\n */                                                                                                                    // 5779\nexports.reduce = function(arr, fn, val) {                                                                              // 5780\n  var rval = val;                                                                                                      // 5781\n                                                                                                                       // 5782\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 5783\n    rval = fn(rval, arr[i], i, arr);                                                                                   // 5784\n  }                                                                                                                    // 5785\n                                                                                                                       // 5786\n  return rval;                                                                                                         // 5787\n};                                                                                                                     // 5788\n                                                                                                                       // 5789\n/**                                                                                                                    // 5790\n * Array#filter (<=IE8)                                                                                                // 5791\n *                                                                                                                     // 5792\n * @api private                                                                                                        // 5793\n * @param {Array} arr                                                                                                  // 5794\n * @param {Function} fn                                                                                                // 5795\n * @return {Array}                                                                                                     // 5796\n */                                                                                                                    // 5797\nexports.filter = function(arr, fn) {                                                                                   // 5798\n  var ret = [];                                                                                                        // 5799\n                                                                                                                       // 5800\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 5801\n    var val = arr[i];                                                                                                  // 5802\n    if (fn(val, i, arr)) {                                                                                             // 5803\n      ret.push(val);                                                                                                   // 5804\n    }                                                                                                                  // 5805\n  }                                                                                                                    // 5806\n                                                                                                                       // 5807\n  return ret;                                                                                                          // 5808\n};                                                                                                                     // 5809\n                                                                                                                       // 5810\n/**                                                                                                                    // 5811\n * Object.keys (<=IE8)                                                                                                 // 5812\n *                                                                                                                     // 5813\n * @api private                                                                                                        // 5814\n * @param {Object} obj                                                                                                 // 5815\n * @return {Array} keys                                                                                                // 5816\n */                                                                                                                    // 5817\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {                                       // 5818\n  var keys = [];                                                                                                       // 5819\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8                                                  // 5820\n                                                                                                                       // 5821\n  for (var key in obj) {                                                                                               // 5822\n    if (has.call(obj, key)) {                                                                                          // 5823\n      keys.push(key);                                                                                                  // 5824\n    }                                                                                                                  // 5825\n  }                                                                                                                    // 5826\n                                                                                                                       // 5827\n  return keys;                                                                                                         // 5828\n};                                                                                                                     // 5829\n                                                                                                                       // 5830\n/**                                                                                                                    // 5831\n * Watch the given `files` for changes                                                                                 // 5832\n * and invoke `fn(file)` on modification.                                                                              // 5833\n *                                                                                                                     // 5834\n * @api private                                                                                                        // 5835\n * @param {Array} files                                                                                                // 5836\n * @param {Function} fn                                                                                                // 5837\n */                                                                                                                    // 5838\nexports.watch = function(files, fn) {                                                                                  // 5839\n  var options = { interval: 100 };                                                                                     // 5840\n  files.forEach(function(file) {                                                                                       // 5841\n    debug('file %s', file);                                                                                            // 5842\n    watchFile(file, options, function(curr, prev) {                                                                    // 5843\n      if (prev.mtime < curr.mtime) {                                                                                   // 5844\n        fn(file);                                                                                                      // 5845\n      }                                                                                                                // 5846\n    });                                                                                                                // 5847\n  });                                                                                                                  // 5848\n};                                                                                                                     // 5849\n                                                                                                                       // 5850\n/**                                                                                                                    // 5851\n * Array.isArray (<=IE8)                                                                                               // 5852\n *                                                                                                                     // 5853\n * @api private                                                                                                        // 5854\n * @param {Object} obj                                                                                                 // 5855\n * @return {Boolean}                                                                                                   // 5856\n */                                                                                                                    // 5857\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {                                    // 5858\n  return Object.prototype.toString.call(obj) === '[object Array]';                                                     // 5859\n};                                                                                                                     // 5860\n                                                                                                                       // 5861\nexports.isArray = isArray;                                                                                             // 5862\n                                                                                                                       // 5863\n/**                                                                                                                    // 5864\n * Buffer.prototype.toJSON polyfill.                                                                                   // 5865\n *                                                                                                                     // 5866\n * @type {Function}                                                                                                    // 5867\n */                                                                                                                    // 5868\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {                                                               // 5869\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {                                                    // 5870\n    return Array.prototype.slice.call(this, 0);                                                                        // 5871\n  };                                                                                                                   // 5872\n}                                                                                                                      // 5873\n                                                                                                                       // 5874\n/**                                                                                                                    // 5875\n * Ignored files.                                                                                                      // 5876\n *                                                                                                                     // 5877\n * @api private                                                                                                        // 5878\n * @param {string} path                                                                                                // 5879\n * @return {boolean}                                                                                                   // 5880\n */                                                                                                                    // 5881\nfunction ignored(path) {                                                                                               // 5882\n  return !~ignore.indexOf(path);                                                                                       // 5883\n}                                                                                                                      // 5884\n                                                                                                                       // 5885\n/**                                                                                                                    // 5886\n * Lookup files in the given `dir`.                                                                                    // 5887\n *                                                                                                                     // 5888\n * @api private                                                                                                        // 5889\n * @param {string} dir                                                                                                 // 5890\n * @param {string[]} [ext=['.js']]                                                                                     // 5891\n * @param {Array} [ret=[]]                                                                                             // 5892\n * @return {Array}                                                                                                     // 5893\n */                                                                                                                    // 5894\nexports.files = function(dir, ext, ret) {                                                                              // 5895\n  ret = ret || [];                                                                                                     // 5896\n  ext = ext || ['js'];                                                                                                 // 5897\n                                                                                                                       // 5898\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');                                                                  // 5899\n                                                                                                                       // 5900\n  readdirSync(dir)                                                                                                     // 5901\n    .filter(ignored)                                                                                                   // 5902\n    .forEach(function(path) {                                                                                          // 5903\n      path = join(dir, path);                                                                                          // 5904\n      if (statSync(path).isDirectory()) {                                                                              // 5905\n        exports.files(path, ext, ret);                                                                                 // 5906\n      } else if (path.match(re)) {                                                                                     // 5907\n        ret.push(path);                                                                                                // 5908\n      }                                                                                                                // 5909\n    });                                                                                                                // 5910\n                                                                                                                       // 5911\n  return ret;                                                                                                          // 5912\n};                                                                                                                     // 5913\n                                                                                                                       // 5914\n/**                                                                                                                    // 5915\n * Compute a slug from the given `str`.                                                                                // 5916\n *                                                                                                                     // 5917\n * @api private                                                                                                        // 5918\n * @param {string} str                                                                                                 // 5919\n * @return {string}                                                                                                    // 5920\n */                                                                                                                    // 5921\nexports.slug = function(str) {                                                                                         // 5922\n  return str                                                                                                           // 5923\n    .toLowerCase()                                                                                                     // 5924\n    .replace(/ +/g, '-')                                                                                               // 5925\n    .replace(/[^-\\w]/g, '');                                                                                           // 5926\n};                                                                                                                     // 5927\n                                                                                                                       // 5928\n/**                                                                                                                    // 5929\n * Strip the function definition from `str`, and re-indent for pre whitespace.                                         // 5930\n *                                                                                                                     // 5931\n * @param {string} str                                                                                                 // 5932\n * @return {string}                                                                                                    // 5933\n */                                                                                                                    // 5934\nexports.clean = function(str) {                                                                                        // 5935\n  str = str                                                                                                            // 5936\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')                                                   // 5937\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')                                                             // 5938\n    .replace(/\\s+\\}$/, '');                                                                                            // 5939\n                                                                                                                       // 5940\n  var spaces = str.match(/^\\n?( *)/)[1].length;                                                                        // 5941\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;                                                                         // 5942\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                        // 5943\n                                                                                                                       // 5944\n  str = str.replace(re, '');                                                                                           // 5945\n                                                                                                                       // 5946\n  return exports.trim(str);                                                                                            // 5947\n};                                                                                                                     // 5948\n                                                                                                                       // 5949\n/**                                                                                                                    // 5950\n * Trim the given `str`.                                                                                               // 5951\n *                                                                                                                     // 5952\n * @api private                                                                                                        // 5953\n * @param {string} str                                                                                                 // 5954\n * @return {string}                                                                                                    // 5955\n */                                                                                                                    // 5956\nexports.trim = function(str) {                                                                                         // 5957\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                                // 5958\n};                                                                                                                     // 5959\n                                                                                                                       // 5960\n/**                                                                                                                    // 5961\n * Parse the given `qs`.                                                                                               // 5962\n *                                                                                                                     // 5963\n * @api private                                                                                                        // 5964\n * @param {string} qs                                                                                                  // 5965\n * @return {Object}                                                                                                    // 5966\n */                                                                                                                    // 5967\nexports.parseQuery = function(qs) {                                                                                    // 5968\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {                                          // 5969\n    var i = pair.indexOf('=');                                                                                         // 5970\n    var key = pair.slice(0, i);                                                                                        // 5971\n    var val = pair.slice(++i);                                                                                         // 5972\n                                                                                                                       // 5973\n    obj[key] = decodeURIComponent(val);                                                                                // 5974\n    return obj;                                                                                                        // 5975\n  }, {});                                                                                                              // 5976\n};                                                                                                                     // 5977\n                                                                                                                       // 5978\n/**                                                                                                                    // 5979\n * Highlight the given string of `js`.                                                                                 // 5980\n *                                                                                                                     // 5981\n * @api private                                                                                                        // 5982\n * @param {string} js                                                                                                  // 5983\n * @return {string}                                                                                                    // 5984\n */                                                                                                                    // 5985\nfunction highlight(js) {                                                                                               // 5986\n  return js                                                                                                            // 5987\n    .replace(/</g, '&lt;')                                                                                             // 5988\n    .replace(/>/g, '&gt;')                                                                                             // 5989\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')                                                        // 5990\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')                                                            // 5991\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')                                                         // 5992\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')                                                              // 5993\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')                    // 5994\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');                      // 5995\n}                                                                                                                      // 5996\n                                                                                                                       // 5997\n/**                                                                                                                    // 5998\n * Highlight the contents of tag `name`.                                                                               // 5999\n *                                                                                                                     // 6000\n * @api private                                                                                                        // 6001\n * @param {string} name                                                                                                // 6002\n */                                                                                                                    // 6003\nexports.highlightTags = function(name) {                                                                               // 6004\n  var code = document.getElementById('mocha').getElementsByTagName(name);                                              // 6005\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 6006\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                  // 6007\n  }                                                                                                                    // 6008\n};                                                                                                                     // 6009\n                                                                                                                       // 6010\n/**                                                                                                                    // 6011\n * If a value could have properties, and has none, this function is called,                                            // 6012\n * which returns a string representation of the empty value.                                                           // 6013\n *                                                                                                                     // 6014\n * Functions w/ no properties return `'[Function]'`                                                                    // 6015\n * Arrays w/ length === 0 return `'[]'`                                                                                // 6016\n * Objects w/ no properties return `'{}'`                                                                              // 6017\n * All else: return result of `value.toString()`                                                                       // 6018\n *                                                                                                                     // 6019\n * @api private                                                                                                        // 6020\n * @param {*} value The value to inspect.                                                                              // 6021\n * @param {string} [type] The type of the value, if known.                                                             // 6022\n * @returns {string}                                                                                                   // 6023\n */                                                                                                                    // 6024\nfunction emptyRepresentation(value, type) {                                                                            // 6025\n  type = type || exports.type(value);                                                                                  // 6026\n                                                                                                                       // 6027\n  switch (type) {                                                                                                      // 6028\n    case 'function':                                                                                                   // 6029\n      return '[Function]';                                                                                             // 6030\n    case 'object':                                                                                                     // 6031\n      return '{}';                                                                                                     // 6032\n    case 'array':                                                                                                      // 6033\n      return '[]';                                                                                                     // 6034\n    default:                                                                                                           // 6035\n      return value.toString();                                                                                         // 6036\n  }                                                                                                                    // 6037\n}                                                                                                                      // 6038\n                                                                                                                       // 6039\n/**                                                                                                                    // 6040\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it                                        // 6041\n * is.                                                                                                                 // 6042\n *                                                                                                                     // 6043\n * @api private                                                                                                        // 6044\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString               // 6045\n * @param {*} value The value to test.                                                                                 // 6046\n * @returns {string}                                                                                                   // 6047\n * @example                                                                                                            // 6048\n * type({}) // 'object'                                                                                                // 6049\n * type([]) // 'array'                                                                                                 // 6050\n * type(1) // 'number'                                                                                                 // 6051\n * type(false) // 'boolean'                                                                                            // 6052\n * type(Infinity) // 'number'                                                                                          // 6053\n * type(null) // 'null'                                                                                                // 6054\n * type(new Date()) // 'date'                                                                                          // 6055\n * type(/foo/) // 'regexp'                                                                                             // 6056\n * type('type') // 'string'                                                                                            // 6057\n * type(global) // 'global'                                                                                            // 6058\n */                                                                                                                    // 6059\nexports.type = function type(value) {                                                                                  // 6060\n  if (value === undefined) {                                                                                           // 6061\n    return 'undefined';                                                                                                // 6062\n  } else if (value === null) {                                                                                         // 6063\n    return 'null';                                                                                                     // 6064\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {                                                // 6065\n    return 'buffer';                                                                                                   // 6066\n  }                                                                                                                    // 6067\n  return Object.prototype.toString.call(value)                                                                         // 6068\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')                                                                                  // 6069\n    .toLowerCase();                                                                                                    // 6070\n};                                                                                                                     // 6071\n                                                                                                                       // 6072\n/**                                                                                                                    // 6073\n * Stringify `value`. Different behavior depending on type of value:                                                   // 6074\n *                                                                                                                     // 6075\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.                              // 6076\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.     // 6077\n * - If `value` is an *empty* object, function, or array, return result of function                                    // 6078\n *   {@link emptyRepresentation}.                                                                                      // 6079\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of                         // 6080\n *   JSON.stringify().                                                                                                 // 6081\n *                                                                                                                     // 6082\n * @api private                                                                                                        // 6083\n * @see exports.type                                                                                                   // 6084\n * @param {*} value                                                                                                    // 6085\n * @return {string}                                                                                                    // 6086\n */                                                                                                                    // 6087\nexports.stringify = function(value) {                                                                                  // 6088\n  var type = exports.type(value);                                                                                      // 6089\n                                                                                                                       // 6090\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {                                                      // 6091\n    if (type !== 'buffer') {                                                                                           // 6092\n      return jsonStringify(value);                                                                                     // 6093\n    }                                                                                                                  // 6094\n    var json = value.toJSON();                                                                                         // 6095\n    // Based on the toJSON result                                                                                      // 6096\n    return jsonStringify(json.data && json.type ? json.data : json, 2)                                                 // 6097\n      .replace(/,(\\n|$)/g, '$1');                                                                                      // 6098\n  }                                                                                                                    // 6099\n                                                                                                                       // 6100\n  for (var prop in value) {                                                                                            // 6101\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {                                                           // 6102\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');                                  // 6103\n    }                                                                                                                  // 6104\n  }                                                                                                                    // 6105\n                                                                                                                       // 6106\n  return emptyRepresentation(value, type);                                                                             // 6107\n};                                                                                                                     // 6108\n                                                                                                                       // 6109\n/**                                                                                                                    // 6110\n * like JSON.stringify but more sense.                                                                                 // 6111\n *                                                                                                                     // 6112\n * @api private                                                                                                        // 6113\n * @param {Object}  object                                                                                             // 6114\n * @param {number=} spaces                                                                                             // 6115\n * @param {number=} depth                                                                                              // 6116\n * @returns {*}                                                                                                        // 6117\n */                                                                                                                    // 6118\nfunction jsonStringify(object, spaces, depth) {                                                                        // 6119\n  if (typeof spaces === 'undefined') {                                                                                 // 6120\n    // primitive types                                                                                                 // 6121\n    return _stringify(object);                                                                                         // 6122\n  }                                                                                                                    // 6123\n                                                                                                                       // 6124\n  depth = depth || 1;                                                                                                  // 6125\n  var space = spaces * depth;                                                                                          // 6126\n  var str = isArray(object) ? '[' : '{';                                                                               // 6127\n  var end = isArray(object) ? ']' : '}';                                                                               // 6128\n  var length = object.length || exports.keys(object).length;                                                           // 6129\n  // `.repeat()` polyfill                                                                                              // 6130\n  function repeat(s, n) {                                                                                              // 6131\n    return new Array(n).join(s);                                                                                       // 6132\n  }                                                                                                                    // 6133\n                                                                                                                       // 6134\n  function _stringify(val) {                                                                                           // 6135\n    switch (exports.type(val)) {                                                                                       // 6136\n      case 'null':                                                                                                     // 6137\n      case 'undefined':                                                                                                // 6138\n        val = '[' + val + ']';                                                                                         // 6139\n        break;                                                                                                         // 6140\n      case 'array':                                                                                                    // 6141\n      case 'object':                                                                                                   // 6142\n        val = jsonStringify(val, spaces, depth + 1);                                                                   // 6143\n        break;                                                                                                         // 6144\n      case 'boolean':                                                                                                  // 6145\n      case 'regexp':                                                                                                   // 6146\n      case 'number':                                                                                                   // 6147\n        val = val === 0 && (1 / val) === -Infinity // `-0`                                                             // 6148\n          ? '-0'                                                                                                       // 6149\n          : val.toString();                                                                                            // 6150\n        break;                                                                                                         // 6151\n      case 'date':                                                                                                     // 6152\n        var sDate = isNaN(val.getTime())        // Invalid date                                                        // 6153\n          ? val.toString()                                                                                             // 6154\n          : val.toISOString();                                                                                         // 6155\n        val = '[Date: ' + sDate + ']';                                                                                 // 6156\n        break;                                                                                                         // 6157\n      case 'buffer':                                                                                                   // 6158\n        var json = val.toJSON();                                                                                       // 6159\n        // Based on the toJSON result                                                                                  // 6160\n        json = json.data && json.type ? json.data : json;                                                              // 6161\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';                                                   // 6162\n        break;                                                                                                         // 6163\n      default:                                                                                                         // 6164\n        val = (val === '[Function]' || val === '[Circular]')                                                           // 6165\n          ? val                                                                                                        // 6166\n          : JSON.stringify(val); // string                                                                             // 6167\n    }                                                                                                                  // 6168\n    return val;                                                                                                        // 6169\n  }                                                                                                                    // 6170\n                                                                                                                       // 6171\n  for (var i in object) {                                                                                              // 6172\n    if (!object.hasOwnProperty(i)) {                                                                                   // 6173\n      continue; // not my business                                                                                     // 6174\n    }                                                                                                                  // 6175\n    --length;                                                                                                          // 6176\n    str += '\\n ' + repeat(' ', space)                                                                                  // 6177\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key                                                                // 6178\n      + _stringify(object[i])                     // value                                                             // 6179\n      + (length ? ',' : '');                     // comma                                                              // 6180\n  }                                                                                                                    // 6181\n                                                                                                                       // 6182\n  return str                                                                                                           // 6183\n    // [], {}                                                                                                          // 6184\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);                                                    // 6185\n}                                                                                                                      // 6186\n                                                                                                                       // 6187\n/**                                                                                                                    // 6188\n * Test if a value is a buffer.                                                                                        // 6189\n *                                                                                                                     // 6190\n * @api private                                                                                                        // 6191\n * @param {*} value The value to test.                                                                                 // 6192\n * @return {boolean} True if `value` is a buffer, otherwise false                                                      // 6193\n */                                                                                                                    // 6194\nexports.isBuffer = function(value) {                                                                                   // 6195\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);                                                      // 6196\n};                                                                                                                     // 6197\n                                                                                                                       // 6198\n/**                                                                                                                    // 6199\n * Return a new Thing that has the keys in sorted order. Recursive.                                                    // 6200\n *                                                                                                                     // 6201\n * If the Thing...                                                                                                     // 6202\n * - has already been seen, return string `'[Circular]'`                                                               // 6203\n * - is `undefined`, return string `'[undefined]'`                                                                     // 6204\n * - is `null`, return value `null`                                                                                    // 6205\n * - is some other primitive, return the value                                                                         // 6206\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method    // 6207\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.                // 6208\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`                // 6209\n *                                                                                                                     // 6210\n * @api private                                                                                                        // 6211\n * @see {@link exports.stringify}                                                                                      // 6212\n * @param {*} value Thing to inspect.  May or may not have properties.                                                 // 6213\n * @param {Array} [stack=[]] Stack of seen values                                                                      // 6214\n * @return {(Object|Array|Function|string|undefined)}                                                                  // 6215\n */                                                                                                                    // 6216\nexports.canonicalize = function(value, stack) {                                                                        // 6217\n  var canonicalizedObj;                                                                                                // 6218\n  /* eslint-disable no-unused-vars */                                                                                  // 6219\n  var prop;                                                                                                            // 6220\n  /* eslint-enable no-unused-vars */                                                                                   // 6221\n  var type = exports.type(value);                                                                                      // 6222\n  function withStack(value, fn) {                                                                                      // 6223\n    stack.push(value);                                                                                                 // 6224\n    fn();                                                                                                              // 6225\n    stack.pop();                                                                                                       // 6226\n  }                                                                                                                    // 6227\n                                                                                                                       // 6228\n  stack = stack || [];                                                                                                 // 6229\n                                                                                                                       // 6230\n  if (exports.indexOf(stack, value) !== -1) {                                                                          // 6231\n    return '[Circular]';                                                                                               // 6232\n  }                                                                                                                    // 6233\n                                                                                                                       // 6234\n  switch (type) {                                                                                                      // 6235\n    case 'undefined':                                                                                                  // 6236\n    case 'buffer':                                                                                                     // 6237\n    case 'null':                                                                                                       // 6238\n      canonicalizedObj = value;                                                                                        // 6239\n      break;                                                                                                           // 6240\n    case 'array':                                                                                                      // 6241\n      withStack(value, function() {                                                                                    // 6242\n        canonicalizedObj = exports.map(value, function(item) {                                                         // 6243\n          return exports.canonicalize(item, stack);                                                                    // 6244\n        });                                                                                                            // 6245\n      });                                                                                                              // 6246\n      break;                                                                                                           // 6247\n    case 'function':                                                                                                   // 6248\n      /* eslint-disable guard-for-in */                                                                                // 6249\n      for (prop in value) {                                                                                            // 6250\n        canonicalizedObj = {};                                                                                         // 6251\n        break;                                                                                                         // 6252\n      }                                                                                                                // 6253\n      /* eslint-enable guard-for-in */                                                                                 // 6254\n      if (!canonicalizedObj) {                                                                                         // 6255\n        canonicalizedObj = emptyRepresentation(value, type);                                                           // 6256\n        break;                                                                                                         // 6257\n      }                                                                                                                // 6258\n    /* falls through */                                                                                                // 6259\n    case 'object':                                                                                                     // 6260\n      canonicalizedObj = canonicalizedObj || {};                                                                       // 6261\n      withStack(value, function() {                                                                                    // 6262\n        exports.forEach(exports.keys(value).sort(), function(key) {                                                    // 6263\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);                                             // 6264\n        });                                                                                                            // 6265\n      });                                                                                                              // 6266\n      break;                                                                                                           // 6267\n    case 'date':                                                                                                       // 6268\n    case 'number':                                                                                                     // 6269\n    case 'regexp':                                                                                                     // 6270\n    case 'boolean':                                                                                                    // 6271\n      canonicalizedObj = value;                                                                                        // 6272\n      break;                                                                                                           // 6273\n    default:                                                                                                           // 6274\n      canonicalizedObj = value + '';                                                                                   // 6275\n  }                                                                                                                    // 6276\n                                                                                                                       // 6277\n  return canonicalizedObj;                                                                                             // 6278\n};                                                                                                                     // 6279\n                                                                                                                       // 6280\n/**                                                                                                                    // 6281\n * Lookup file names at the given `path`.                                                                              // 6282\n *                                                                                                                     // 6283\n * @api public                                                                                                         // 6284\n * @param {string} path Base path to start searching from.                                                             // 6285\n * @param {string[]} extensions File extensions to look for.                                                           // 6286\n * @param {boolean} recursive Whether or not to recurse into subdirectories.                                           // 6287\n * @return {string[]} An array of paths.                                                                               // 6288\n */                                                                                                                    // 6289\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {                                              // 6290\n  var files = [];                                                                                                      // 6291\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');                                                           // 6292\n                                                                                                                       // 6293\n  if (!exists(path)) {                                                                                                 // 6294\n    if (exists(path + '.js')) {                                                                                        // 6295\n      path += '.js';                                                                                                   // 6296\n    } else {                                                                                                           // 6297\n      files = glob.sync(path);                                                                                         // 6298\n      if (!files.length) {                                                                                             // 6299\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");                                            // 6300\n      }                                                                                                                // 6301\n      return files;                                                                                                    // 6302\n    }                                                                                                                  // 6303\n  }                                                                                                                    // 6304\n                                                                                                                       // 6305\n  try {                                                                                                                // 6306\n    var stat = statSync(path);                                                                                         // 6307\n    if (stat.isFile()) {                                                                                               // 6308\n      return path;                                                                                                     // 6309\n    }                                                                                                                  // 6310\n  } catch (err) {                                                                                                      // 6311\n    // ignore error                                                                                                    // 6312\n    return;                                                                                                            // 6313\n  }                                                                                                                    // 6314\n                                                                                                                       // 6315\n  readdirSync(path).forEach(function(file) {                                                                           // 6316\n    file = join(path, file);                                                                                           // 6317\n    try {                                                                                                              // 6318\n      var stat = statSync(file);                                                                                       // 6319\n      if (stat.isDirectory()) {                                                                                        // 6320\n        if (recursive) {                                                                                               // 6321\n          files = files.concat(lookupFiles(file, extensions, recursive));                                              // 6322\n        }                                                                                                              // 6323\n        return;                                                                                                        // 6324\n      }                                                                                                                // 6325\n    } catch (err) {                                                                                                    // 6326\n      // ignore error                                                                                                  // 6327\n      return;                                                                                                          // 6328\n    }                                                                                                                  // 6329\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {                                               // 6330\n      return;                                                                                                          // 6331\n    }                                                                                                                  // 6332\n    files.push(file);                                                                                                  // 6333\n  });                                                                                                                  // 6334\n                                                                                                                       // 6335\n  return files;                                                                                                        // 6336\n};                                                                                                                     // 6337\n                                                                                                                       // 6338\n/**                                                                                                                    // 6339\n * Generate an undefined error with a message warning the user.                                                        // 6340\n *                                                                                                                     // 6341\n * @return {Error}                                                                                                     // 6342\n */                                                                                                                    // 6343\n                                                                                                                       // 6344\nexports.undefinedError = function() {                                                                                  // 6345\n  return new Error('Caught undefined error, did you throw without specifying what?');                                  // 6346\n};                                                                                                                     // 6347\n                                                                                                                       // 6348\n/**                                                                                                                    // 6349\n * Generate an undefined error if `err` is not defined.                                                                // 6350\n *                                                                                                                     // 6351\n * @param {Error} err                                                                                                  // 6352\n * @return {Error}                                                                                                     // 6353\n */                                                                                                                    // 6354\n                                                                                                                       // 6355\nexports.getError = function(err) {                                                                                     // 6356\n  return err || exports.undefinedError();                                                                              // 6357\n};                                                                                                                     // 6358\n                                                                                                                       // 6359\n/**                                                                                                                    // 6360\n * @summary                                                                                                            // 6361\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)                                  // 6362\n * @description                                                                                                        // 6363\n * When invoking this function you get a filter function that get the Error.stack as an input,                         // 6364\n * and return a prettify output.                                                                                       // 6365\n * (i.e: strip Mocha and internal node functions from stack trace).                                                    // 6366\n * @returns {Function}                                                                                                 // 6367\n */                                                                                                                    // 6368\nexports.stackTraceFilter = function() {                                                                                // 6369\n  // TODO: Replace with `process.browser`                                                                              // 6370\n  var slash = '/';                                                                                                     // 6371\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };                                       // 6372\n  var cwd = is.node                                                                                                    // 6373\n      ? process.cwd() + slash                                                                                          // 6374\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');                 // 6375\n                                                                                                                       // 6376\n  function isMochaInternal(line) {                                                                                     // 6377\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))                                                   // 6378\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))                                                     // 6379\n      || (~line.indexOf('components' + slash + 'mocha' + slash))                                                       // 6380\n      || (~line.indexOf(slash + 'mocha.js'));                                                                          // 6381\n  }                                                                                                                    // 6382\n                                                                                                                       // 6383\n  function isNodeInternal(line) {                                                                                      // 6384\n    return (~line.indexOf('(timers.js:'))                                                                              // 6385\n      || (~line.indexOf('(events.js:'))                                                                                // 6386\n      || (~line.indexOf('(node.js:'))                                                                                  // 6387\n      || (~line.indexOf('(module.js:'))                                                                                // 6388\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))                                                   // 6389\n      || false;                                                                                                        // 6390\n  }                                                                                                                    // 6391\n                                                                                                                       // 6392\n  return function(stack) {                                                                                             // 6393\n    stack = stack.split('\\n');                                                                                         // 6394\n                                                                                                                       // 6395\n    stack = exports.reduce(stack, function(list, line) {                                                               // 6396\n      if (isMochaInternal(line)) {                                                                                     // 6397\n        return list;                                                                                                   // 6398\n      }                                                                                                                // 6399\n                                                                                                                       // 6400\n      if (is.node && isNodeInternal(line)) {                                                                           // 6401\n        return list;                                                                                                   // 6402\n      }                                                                                                                // 6403\n                                                                                                                       // 6404\n      // Clean up cwd(absolute)                                                                                        // 6405\n      list.push(line.replace(cwd, ''));                                                                                // 6406\n      return list;                                                                                                     // 6407\n    }, []);                                                                                                            // 6408\n                                                                                                                       // 6409\n    return stack.join('\\n');                                                                                           // 6410\n  };                                                                                                                   // 6411\n};                                                                                                                     // 6412\n                                                                                                                       // 6413\n}).call(this,require('_process'),require(\"buffer\").Buffer)                                                             // 6414\n},{\"_process\":51,\"buffer\":43,\"debug\":2,\"fs\":41,\"glob\":41,\"path\":41,\"util\":66}],40:[function(require,module,exports){   // 6415\n(function (process){                                                                                                   // 6416\nvar WritableStream = require('stream').Writable                                                                        // 6417\nvar inherits = require('util').inherits                                                                                // 6418\n                                                                                                                       // 6419\nmodule.exports = BrowserStdout                                                                                         // 6420\n                                                                                                                       // 6421\n                                                                                                                       // 6422\ninherits(BrowserStdout, WritableStream)                                                                                // 6423\n                                                                                                                       // 6424\nfunction BrowserStdout(opts) {                                                                                         // 6425\n  if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts)                                                 // 6426\n                                                                                                                       // 6427\n  opts = opts || {}                                                                                                    // 6428\n  WritableStream.call(this, opts)                                                                                      // 6429\n  this.label = (opts.label !== undefined) ? opts.label : 'stdout'                                                      // 6430\n}                                                                                                                      // 6431\n                                                                                                                       // 6432\nBrowserStdout.prototype._write = function(chunks, encoding, cb) {                                                      // 6433\n  var output = chunks.toString ? chunks.toString() : chunks                                                            // 6434\n  if (this.label === false) {                                                                                          // 6435\n    console.log(output)                                                                                                // 6436\n  } else {                                                                                                             // 6437\n    console.log(this.label+':', output)                                                                                // 6438\n  }                                                                                                                    // 6439\n  process.nextTick(cb)                                                                                                 // 6440\n}                                                                                                                      // 6441\n                                                                                                                       // 6442\n}).call(this,require('_process'))                                                                                      // 6443\n},{\"_process\":51,\"stream\":63,\"util\":66}],41:[function(require,module,exports){                                         // 6444\n                                                                                                                       // 6445\n},{}],42:[function(require,module,exports){                                                                            // 6446\narguments[4][41][0].apply(exports,arguments)                                                                           // 6447\n},{\"dup\":41}],43:[function(require,module,exports){                                                                    // 6448\n/*!                                                                                                                    // 6449\n * The buffer module from node.js, for the browser.                                                                    // 6450\n *                                                                                                                     // 6451\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 6452\n * @license  MIT                                                                                                       // 6453\n */                                                                                                                    // 6454\n                                                                                                                       // 6455\nvar base64 = require('base64-js')                                                                                      // 6456\nvar ieee754 = require('ieee754')                                                                                       // 6457\nvar isArray = require('is-array')                                                                                      // 6458\n                                                                                                                       // 6459\nexports.Buffer = Buffer                                                                                                // 6460\nexports.SlowBuffer = SlowBuffer                                                                                        // 6461\nexports.INSPECT_MAX_BYTES = 50                                                                                         // 6462\nBuffer.poolSize = 8192 // not used by this implementation                                                              // 6463\n                                                                                                                       // 6464\nvar rootParent = {}                                                                                                    // 6465\n                                                                                                                       // 6466\n/**                                                                                                                    // 6467\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 6468\n *   === true    Use Uint8Array implementation (fastest)                                                               // 6469\n *   === false   Use Object implementation (most compatible, even IE6)                                                 // 6470\n *                                                                                                                     // 6471\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 6472\n * Opera 11.6+, iOS 4.2+.                                                                                              // 6473\n *                                                                                                                     // 6474\n * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 6475\n * when the browser supports typed arrays.                                                                             // 6476\n *                                                                                                                     // 6477\n * Note:                                                                                                               // 6478\n *                                                                                                                     // 6479\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 6480\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 6481\n *                                                                                                                     // 6482\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property                               // 6483\n *     on objects.                                                                                                     // 6484\n *                                                                                                                     // 6485\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 6486\n *                                                                                                                     // 6487\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 6488\n *     incorrect length in some situations.                                                                            // 6489\n                                                                                                                       // 6490\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 6491\n * get the Object implementation, which is slower but behaves correctly.                                               // 6492\n */                                                                                                                    // 6493\nBuffer.TYPED_ARRAY_SUPPORT = (function () {                                                                            // 6494\n  function Bar () {}                                                                                                   // 6495\n  try {                                                                                                                // 6496\n    var arr = new Uint8Array(1)                                                                                        // 6497\n    arr.foo = function () { return 42 }                                                                                // 6498\n    arr.constructor = Bar                                                                                              // 6499\n    return arr.foo() === 42 && // typed array instances can be augmented                                               // 6500\n        arr.constructor === Bar && // constructor can be set                                                           // 6501\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 6502\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 6503\n  } catch (e) {                                                                                                        // 6504\n    return false                                                                                                       // 6505\n  }                                                                                                                    // 6506\n})()                                                                                                                   // 6507\n                                                                                                                       // 6508\nfunction kMaxLength () {                                                                                               // 6509\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 6510\n    ? 0x7fffffff                                                                                                       // 6511\n    : 0x3fffffff                                                                                                       // 6512\n}                                                                                                                      // 6513\n                                                                                                                       // 6514\n/**                                                                                                                    // 6515\n * Class: Buffer                                                                                                       // 6516\n * =============                                                                                                       // 6517\n *                                                                                                                     // 6518\n * The Buffer constructor returns instances of `Uint8Array` that are augmented                                         // 6519\n * with function properties for all the node `Buffer` API functions. We use                                            // 6520\n * `Uint8Array` so that square bracket notation works as expected -- it returns                                        // 6521\n * a single octet.                                                                                                     // 6522\n *                                                                                                                     // 6523\n * By augmenting the instances, we can avoid modifying the `Uint8Array`                                                // 6524\n * prototype.                                                                                                          // 6525\n */                                                                                                                    // 6526\nfunction Buffer (arg) {                                                                                                // 6527\n  if (!(this instanceof Buffer)) {                                                                                     // 6528\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                           // 6529\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                     // 6530\n    return new Buffer(arg)                                                                                             // 6531\n  }                                                                                                                    // 6532\n                                                                                                                       // 6533\n  this.length = 0                                                                                                      // 6534\n  this.parent = undefined                                                                                              // 6535\n                                                                                                                       // 6536\n  // Common case.                                                                                                      // 6537\n  if (typeof arg === 'number') {                                                                                       // 6538\n    return fromNumber(this, arg)                                                                                       // 6539\n  }                                                                                                                    // 6540\n                                                                                                                       // 6541\n  // Slightly less common case.                                                                                        // 6542\n  if (typeof arg === 'string') {                                                                                       // 6543\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                         // 6544\n  }                                                                                                                    // 6545\n                                                                                                                       // 6546\n  // Unusual.                                                                                                          // 6547\n  return fromObject(this, arg)                                                                                         // 6548\n}                                                                                                                      // 6549\n                                                                                                                       // 6550\nfunction fromNumber (that, length) {                                                                                   // 6551\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                          // 6552\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 6553\n    for (var i = 0; i < length; i++) {                                                                                 // 6554\n      that[i] = 0                                                                                                      // 6555\n    }                                                                                                                  // 6556\n  }                                                                                                                    // 6557\n  return that                                                                                                          // 6558\n}                                                                                                                      // 6559\n                                                                                                                       // 6560\nfunction fromString (that, string, encoding) {                                                                         // 6561\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                               // 6562\n                                                                                                                       // 6563\n  // Assumption: byteLength() return value is always < kMaxLength.                                                     // 6564\n  var length = byteLength(string, encoding) | 0                                                                        // 6565\n  that = allocate(that, length)                                                                                        // 6566\n                                                                                                                       // 6567\n  that.write(string, encoding)                                                                                         // 6568\n  return that                                                                                                          // 6569\n}                                                                                                                      // 6570\n                                                                                                                       // 6571\nfunction fromObject (that, object) {                                                                                   // 6572\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                         // 6573\n                                                                                                                       // 6574\n  if (isArray(object)) return fromArray(that, object)                                                                  // 6575\n                                                                                                                       // 6576\n  if (object == null) {                                                                                                // 6577\n    throw new TypeError('must start with number, buffer, array or string')                                             // 6578\n  }                                                                                                                    // 6579\n                                                                                                                       // 6580\n  if (typeof ArrayBuffer !== 'undefined') {                                                                            // 6581\n    if (object.buffer instanceof ArrayBuffer) {                                                                        // 6582\n      return fromTypedArray(that, object)                                                                              // 6583\n    }                                                                                                                  // 6584\n    if (object instanceof ArrayBuffer) {                                                                               // 6585\n      return fromArrayBuffer(that, object)                                                                             // 6586\n    }                                                                                                                  // 6587\n  }                                                                                                                    // 6588\n                                                                                                                       // 6589\n  if (object.length) return fromArrayLike(that, object)                                                                // 6590\n                                                                                                                       // 6591\n  return fromJsonObject(that, object)                                                                                  // 6592\n}                                                                                                                      // 6593\n                                                                                                                       // 6594\nfunction fromBuffer (that, buffer) {                                                                                   // 6595\n  var length = checked(buffer.length) | 0                                                                              // 6596\n  that = allocate(that, length)                                                                                        // 6597\n  buffer.copy(that, 0, 0, length)                                                                                      // 6598\n  return that                                                                                                          // 6599\n}                                                                                                                      // 6600\n                                                                                                                       // 6601\nfunction fromArray (that, array) {                                                                                     // 6602\n  var length = checked(array.length) | 0                                                                               // 6603\n  that = allocate(that, length)                                                                                        // 6604\n  for (var i = 0; i < length; i += 1) {                                                                                // 6605\n    that[i] = array[i] & 255                                                                                           // 6606\n  }                                                                                                                    // 6607\n  return that                                                                                                          // 6608\n}                                                                                                                      // 6609\n                                                                                                                       // 6610\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                           // 6611\nfunction fromTypedArray (that, array) {                                                                                // 6612\n  var length = checked(array.length) | 0                                                                               // 6613\n  that = allocate(that, length)                                                                                        // 6614\n  // Truncating the elements is probably not what people expect from typed                                             // 6615\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                           // 6616\n  // of the old Buffer constructor.                                                                                    // 6617\n  for (var i = 0; i < length; i += 1) {                                                                                // 6618\n    that[i] = array[i] & 255                                                                                           // 6619\n  }                                                                                                                    // 6620\n  return that                                                                                                          // 6621\n}                                                                                                                      // 6622\n                                                                                                                       // 6623\nfunction fromArrayBuffer (that, array) {                                                                               // 6624\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 6625\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 6626\n    array.byteLength                                                                                                   // 6627\n    that = Buffer._augment(new Uint8Array(array))                                                                      // 6628\n  } else {                                                                                                             // 6629\n    // Fallback: Return an object instance of the Buffer class                                                         // 6630\n    that = fromTypedArray(that, new Uint8Array(array))                                                                 // 6631\n  }                                                                                                                    // 6632\n  return that                                                                                                          // 6633\n}                                                                                                                      // 6634\n                                                                                                                       // 6635\nfunction fromArrayLike (that, array) {                                                                                 // 6636\n  var length = checked(array.length) | 0                                                                               // 6637\n  that = allocate(that, length)                                                                                        // 6638\n  for (var i = 0; i < length; i += 1) {                                                                                // 6639\n    that[i] = array[i] & 255                                                                                           // 6640\n  }                                                                                                                    // 6641\n  return that                                                                                                          // 6642\n}                                                                                                                      // 6643\n                                                                                                                       // 6644\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                             // 6645\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                             // 6646\nfunction fromJsonObject (that, object) {                                                                               // 6647\n  var array                                                                                                            // 6648\n  var length = 0                                                                                                       // 6649\n                                                                                                                       // 6650\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                              // 6651\n    array = object.data                                                                                                // 6652\n    length = checked(array.length) | 0                                                                                 // 6653\n  }                                                                                                                    // 6654\n  that = allocate(that, length)                                                                                        // 6655\n                                                                                                                       // 6656\n  for (var i = 0; i < length; i += 1) {                                                                                // 6657\n    that[i] = array[i] & 255                                                                                           // 6658\n  }                                                                                                                    // 6659\n  return that                                                                                                          // 6660\n}                                                                                                                      // 6661\n                                                                                                                       // 6662\nfunction allocate (that, length) {                                                                                     // 6663\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 6664\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 6665\n    that = Buffer._augment(new Uint8Array(length))                                                                     // 6666\n  } else {                                                                                                             // 6667\n    // Fallback: Return an object instance of the Buffer class                                                         // 6668\n    that.length = length                                                                                               // 6669\n    that._isBuffer = true                                                                                              // 6670\n  }                                                                                                                    // 6671\n                                                                                                                       // 6672\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                       // 6673\n  if (fromPool) that.parent = rootParent                                                                               // 6674\n                                                                                                                       // 6675\n  return that                                                                                                          // 6676\n}                                                                                                                      // 6677\n                                                                                                                       // 6678\nfunction checked (length) {                                                                                            // 6679\n  // Note: cannot use `length < kMaxLength` here because that fails when                                               // 6680\n  // length is NaN (which is otherwise coerced to zero.)                                                               // 6681\n  if (length >= kMaxLength()) {                                                                                        // 6682\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 6683\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 6684\n  }                                                                                                                    // 6685\n  return length | 0                                                                                                    // 6686\n}                                                                                                                      // 6687\n                                                                                                                       // 6688\nfunction SlowBuffer (subject, encoding) {                                                                              // 6689\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                          // 6690\n                                                                                                                       // 6691\n  var buf = new Buffer(subject, encoding)                                                                              // 6692\n  delete buf.parent                                                                                                    // 6693\n  return buf                                                                                                           // 6694\n}                                                                                                                      // 6695\n                                                                                                                       // 6696\nBuffer.isBuffer = function isBuffer (b) {                                                                              // 6697\n  return !!(b != null && b._isBuffer)                                                                                  // 6698\n}                                                                                                                      // 6699\n                                                                                                                       // 6700\nBuffer.compare = function compare (a, b) {                                                                             // 6701\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 6702\n    throw new TypeError('Arguments must be Buffers')                                                                   // 6703\n  }                                                                                                                    // 6704\n                                                                                                                       // 6705\n  if (a === b) return 0                                                                                                // 6706\n                                                                                                                       // 6707\n  var x = a.length                                                                                                     // 6708\n  var y = b.length                                                                                                     // 6709\n                                                                                                                       // 6710\n  var i = 0                                                                                                            // 6711\n  var len = Math.min(x, y)                                                                                             // 6712\n  while (i < len) {                                                                                                    // 6713\n    if (a[i] !== b[i]) break                                                                                           // 6714\n                                                                                                                       // 6715\n    ++i                                                                                                                // 6716\n  }                                                                                                                    // 6717\n                                                                                                                       // 6718\n  if (i !== len) {                                                                                                     // 6719\n    x = a[i]                                                                                                           // 6720\n    y = b[i]                                                                                                           // 6721\n  }                                                                                                                    // 6722\n                                                                                                                       // 6723\n  if (x < y) return -1                                                                                                 // 6724\n  if (y < x) return 1                                                                                                  // 6725\n  return 0                                                                                                             // 6726\n}                                                                                                                      // 6727\n                                                                                                                       // 6728\nBuffer.isEncoding = function isEncoding (encoding) {                                                                   // 6729\n  switch (String(encoding).toLowerCase()) {                                                                            // 6730\n    case 'hex':                                                                                                        // 6731\n    case 'utf8':                                                                                                       // 6732\n    case 'utf-8':                                                                                                      // 6733\n    case 'ascii':                                                                                                      // 6734\n    case 'binary':                                                                                                     // 6735\n    case 'base64':                                                                                                     // 6736\n    case 'raw':                                                                                                        // 6737\n    case 'ucs2':                                                                                                       // 6738\n    case 'ucs-2':                                                                                                      // 6739\n    case 'utf16le':                                                                                                    // 6740\n    case 'utf-16le':                                                                                                   // 6741\n      return true                                                                                                      // 6742\n    default:                                                                                                           // 6743\n      return false                                                                                                     // 6744\n  }                                                                                                                    // 6745\n}                                                                                                                      // 6746\n                                                                                                                       // 6747\nBuffer.concat = function concat (list, length) {                                                                       // 6748\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                                // 6749\n                                                                                                                       // 6750\n  if (list.length === 0) {                                                                                             // 6751\n    return new Buffer(0)                                                                                               // 6752\n  }                                                                                                                    // 6753\n                                                                                                                       // 6754\n  var i                                                                                                                // 6755\n  if (length === undefined) {                                                                                          // 6756\n    length = 0                                                                                                         // 6757\n    for (i = 0; i < list.length; i++) {                                                                                // 6758\n      length += list[i].length                                                                                         // 6759\n    }                                                                                                                  // 6760\n  }                                                                                                                    // 6761\n                                                                                                                       // 6762\n  var buf = new Buffer(length)                                                                                         // 6763\n  var pos = 0                                                                                                          // 6764\n  for (i = 0; i < list.length; i++) {                                                                                  // 6765\n    var item = list[i]                                                                                                 // 6766\n    item.copy(buf, pos)                                                                                                // 6767\n    pos += item.length                                                                                                 // 6768\n  }                                                                                                                    // 6769\n  return buf                                                                                                           // 6770\n}                                                                                                                      // 6771\n                                                                                                                       // 6772\nfunction byteLength (string, encoding) {                                                                               // 6773\n  if (typeof string !== 'string') string = '' + string                                                                 // 6774\n                                                                                                                       // 6775\n  var len = string.length                                                                                              // 6776\n  if (len === 0) return 0                                                                                              // 6777\n                                                                                                                       // 6778\n  // Use a for loop to avoid recursion                                                                                 // 6779\n  var loweredCase = false                                                                                              // 6780\n  for (;;) {                                                                                                           // 6781\n    switch (encoding) {                                                                                                // 6782\n      case 'ascii':                                                                                                    // 6783\n      case 'binary':                                                                                                   // 6784\n      // Deprecated                                                                                                    // 6785\n      case 'raw':                                                                                                      // 6786\n      case 'raws':                                                                                                     // 6787\n        return len                                                                                                     // 6788\n      case 'utf8':                                                                                                     // 6789\n      case 'utf-8':                                                                                                    // 6790\n        return utf8ToBytes(string).length                                                                              // 6791\n      case 'ucs2':                                                                                                     // 6792\n      case 'ucs-2':                                                                                                    // 6793\n      case 'utf16le':                                                                                                  // 6794\n      case 'utf-16le':                                                                                                 // 6795\n        return len * 2                                                                                                 // 6796\n      case 'hex':                                                                                                      // 6797\n        return len >>> 1                                                                                               // 6798\n      case 'base64':                                                                                                   // 6799\n        return base64ToBytes(string).length                                                                            // 6800\n      default:                                                                                                         // 6801\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 6802\n        encoding = ('' + encoding).toLowerCase()                                                                       // 6803\n        loweredCase = true                                                                                             // 6804\n    }                                                                                                                  // 6805\n  }                                                                                                                    // 6806\n}                                                                                                                      // 6807\nBuffer.byteLength = byteLength                                                                                         // 6808\n                                                                                                                       // 6809\n// pre-set for values that may exist in the future                                                                     // 6810\nBuffer.prototype.length = undefined                                                                                    // 6811\nBuffer.prototype.parent = undefined                                                                                    // 6812\n                                                                                                                       // 6813\nfunction slowToString (encoding, start, end) {                                                                         // 6814\n  var loweredCase = false                                                                                              // 6815\n                                                                                                                       // 6816\n  start = start | 0                                                                                                    // 6817\n  end = end === undefined || end === Infinity ? this.length : end | 0                                                  // 6818\n                                                                                                                       // 6819\n  if (!encoding) encoding = 'utf8'                                                                                     // 6820\n  if (start < 0) start = 0                                                                                             // 6821\n  if (end > this.length) end = this.length                                                                             // 6822\n  if (end <= start) return ''                                                                                          // 6823\n                                                                                                                       // 6824\n  while (true) {                                                                                                       // 6825\n    switch (encoding) {                                                                                                // 6826\n      case 'hex':                                                                                                      // 6827\n        return hexSlice(this, start, end)                                                                              // 6828\n                                                                                                                       // 6829\n      case 'utf8':                                                                                                     // 6830\n      case 'utf-8':                                                                                                    // 6831\n        return utf8Slice(this, start, end)                                                                             // 6832\n                                                                                                                       // 6833\n      case 'ascii':                                                                                                    // 6834\n        return asciiSlice(this, start, end)                                                                            // 6835\n                                                                                                                       // 6836\n      case 'binary':                                                                                                   // 6837\n        return binarySlice(this, start, end)                                                                           // 6838\n                                                                                                                       // 6839\n      case 'base64':                                                                                                   // 6840\n        return base64Slice(this, start, end)                                                                           // 6841\n                                                                                                                       // 6842\n      case 'ucs2':                                                                                                     // 6843\n      case 'ucs-2':                                                                                                    // 6844\n      case 'utf16le':                                                                                                  // 6845\n      case 'utf-16le':                                                                                                 // 6846\n        return utf16leSlice(this, start, end)                                                                          // 6847\n                                                                                                                       // 6848\n      default:                                                                                                         // 6849\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 6850\n        encoding = (encoding + '').toLowerCase()                                                                       // 6851\n        loweredCase = true                                                                                             // 6852\n    }                                                                                                                  // 6853\n  }                                                                                                                    // 6854\n}                                                                                                                      // 6855\n                                                                                                                       // 6856\nBuffer.prototype.toString = function toString () {                                                                     // 6857\n  var length = this.length | 0                                                                                         // 6858\n  if (length === 0) return ''                                                                                          // 6859\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 6860\n  return slowToString.apply(this, arguments)                                                                           // 6861\n}                                                                                                                      // 6862\n                                                                                                                       // 6863\nBuffer.prototype.equals = function equals (b) {                                                                        // 6864\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 6865\n  if (this === b) return true                                                                                          // 6866\n  return Buffer.compare(this, b) === 0                                                                                 // 6867\n}                                                                                                                      // 6868\n                                                                                                                       // 6869\nBuffer.prototype.inspect = function inspect () {                                                                       // 6870\n  var str = ''                                                                                                         // 6871\n  var max = exports.INSPECT_MAX_BYTES                                                                                  // 6872\n  if (this.length > 0) {                                                                                               // 6873\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 6874\n    if (this.length > max) str += ' ... '                                                                              // 6875\n  }                                                                                                                    // 6876\n  return '<Buffer ' + str + '>'                                                                                        // 6877\n}                                                                                                                      // 6878\n                                                                                                                       // 6879\nBuffer.prototype.compare = function compare (b) {                                                                      // 6880\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 6881\n  if (this === b) return 0                                                                                             // 6882\n  return Buffer.compare(this, b)                                                                                       // 6883\n}                                                                                                                      // 6884\n                                                                                                                       // 6885\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                        // 6886\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                 // 6887\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                          // 6888\n  byteOffset >>= 0                                                                                                     // 6889\n                                                                                                                       // 6890\n  if (this.length === 0) return -1                                                                                     // 6891\n  if (byteOffset >= this.length) return -1                                                                             // 6892\n                                                                                                                       // 6893\n  // Negative offsets start from the end of the buffer                                                                 // 6894\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                               // 6895\n                                                                                                                       // 6896\n  if (typeof val === 'string') {                                                                                       // 6897\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                             // 6898\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                        // 6899\n  }                                                                                                                    // 6900\n  if (Buffer.isBuffer(val)) {                                                                                          // 6901\n    return arrayIndexOf(this, val, byteOffset)                                                                         // 6902\n  }                                                                                                                    // 6903\n  if (typeof val === 'number') {                                                                                       // 6904\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                   // 6905\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                  // 6906\n    }                                                                                                                  // 6907\n    return arrayIndexOf(this, [ val ], byteOffset)                                                                     // 6908\n  }                                                                                                                    // 6909\n                                                                                                                       // 6910\n  function arrayIndexOf (arr, val, byteOffset) {                                                                       // 6911\n    var foundIndex = -1                                                                                                // 6912\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                                // 6913\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                       // 6914\n        if (foundIndex === -1) foundIndex = i                                                                          // 6915\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                          // 6916\n      } else {                                                                                                         // 6917\n        foundIndex = -1                                                                                                // 6918\n      }                                                                                                                // 6919\n    }                                                                                                                  // 6920\n    return -1                                                                                                          // 6921\n  }                                                                                                                    // 6922\n                                                                                                                       // 6923\n  throw new TypeError('val must be string, number or Buffer')                                                          // 6924\n}                                                                                                                      // 6925\n                                                                                                                       // 6926\n// `get` is deprecated                                                                                                 // 6927\nBuffer.prototype.get = function get (offset) {                                                                         // 6928\n  console.log('.get() is deprecated. Access using array indexes instead.')                                             // 6929\n  return this.readUInt8(offset)                                                                                        // 6930\n}                                                                                                                      // 6931\n                                                                                                                       // 6932\n// `set` is deprecated                                                                                                 // 6933\nBuffer.prototype.set = function set (v, offset) {                                                                      // 6934\n  console.log('.set() is deprecated. Access using array indexes instead.')                                             // 6935\n  return this.writeUInt8(v, offset)                                                                                    // 6936\n}                                                                                                                      // 6937\n                                                                                                                       // 6938\nfunction hexWrite (buf, string, offset, length) {                                                                      // 6939\n  offset = Number(offset) || 0                                                                                         // 6940\n  var remaining = buf.length - offset                                                                                  // 6941\n  if (!length) {                                                                                                       // 6942\n    length = remaining                                                                                                 // 6943\n  } else {                                                                                                             // 6944\n    length = Number(length)                                                                                            // 6945\n    if (length > remaining) {                                                                                          // 6946\n      length = remaining                                                                                               // 6947\n    }                                                                                                                  // 6948\n  }                                                                                                                    // 6949\n                                                                                                                       // 6950\n  // must be an even number of digits                                                                                  // 6951\n  var strLen = string.length                                                                                           // 6952\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                          // 6953\n                                                                                                                       // 6954\n  if (length > strLen / 2) {                                                                                           // 6955\n    length = strLen / 2                                                                                                // 6956\n  }                                                                                                                    // 6957\n  for (var i = 0; i < length; i++) {                                                                                   // 6958\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 6959\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                           // 6960\n    buf[offset + i] = parsed                                                                                           // 6961\n  }                                                                                                                    // 6962\n  return i                                                                                                             // 6963\n}                                                                                                                      // 6964\n                                                                                                                       // 6965\nfunction utf8Write (buf, string, offset, length) {                                                                     // 6966\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 6967\n}                                                                                                                      // 6968\n                                                                                                                       // 6969\nfunction asciiWrite (buf, string, offset, length) {                                                                    // 6970\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 6971\n}                                                                                                                      // 6972\n                                                                                                                       // 6973\nfunction binaryWrite (buf, string, offset, length) {                                                                   // 6974\n  return asciiWrite(buf, string, offset, length)                                                                       // 6975\n}                                                                                                                      // 6976\n                                                                                                                       // 6977\nfunction base64Write (buf, string, offset, length) {                                                                   // 6978\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 6979\n}                                                                                                                      // 6980\n                                                                                                                       // 6981\nfunction ucs2Write (buf, string, offset, length) {                                                                     // 6982\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 6983\n}                                                                                                                      // 6984\n                                                                                                                       // 6985\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                           // 6986\n  // Buffer#write(string)                                                                                              // 6987\n  if (offset === undefined) {                                                                                          // 6988\n    encoding = 'utf8'                                                                                                  // 6989\n    length = this.length                                                                                               // 6990\n    offset = 0                                                                                                         // 6991\n  // Buffer#write(string, encoding)                                                                                    // 6992\n  } else if (length === undefined && typeof offset === 'string') {                                                     // 6993\n    encoding = offset                                                                                                  // 6994\n    length = this.length                                                                                               // 6995\n    offset = 0                                                                                                         // 6996\n  // Buffer#write(string, offset[, length][, encoding])                                                                // 6997\n  } else if (isFinite(offset)) {                                                                                       // 6998\n    offset = offset | 0                                                                                                // 6999\n    if (isFinite(length)) {                                                                                            // 7000\n      length = length | 0                                                                                              // 7001\n      if (encoding === undefined) encoding = 'utf8'                                                                    // 7002\n    } else {                                                                                                           // 7003\n      encoding = length                                                                                                // 7004\n      length = undefined                                                                                               // 7005\n    }                                                                                                                  // 7006\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 7007\n  } else {                                                                                                             // 7008\n    var swap = encoding                                                                                                // 7009\n    encoding = offset                                                                                                  // 7010\n    offset = length | 0                                                                                                // 7011\n    length = swap                                                                                                      // 7012\n  }                                                                                                                    // 7013\n                                                                                                                       // 7014\n  var remaining = this.length - offset                                                                                 // 7015\n  if (length === undefined || length > remaining) length = remaining                                                   // 7016\n                                                                                                                       // 7017\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 7018\n    throw new RangeError('attempt to write outside buffer bounds')                                                     // 7019\n  }                                                                                                                    // 7020\n                                                                                                                       // 7021\n  if (!encoding) encoding = 'utf8'                                                                                     // 7022\n                                                                                                                       // 7023\n  var loweredCase = false                                                                                              // 7024\n  for (;;) {                                                                                                           // 7025\n    switch (encoding) {                                                                                                // 7026\n      case 'hex':                                                                                                      // 7027\n        return hexWrite(this, string, offset, length)                                                                  // 7028\n                                                                                                                       // 7029\n      case 'utf8':                                                                                                     // 7030\n      case 'utf-8':                                                                                                    // 7031\n        return utf8Write(this, string, offset, length)                                                                 // 7032\n                                                                                                                       // 7033\n      case 'ascii':                                                                                                    // 7034\n        return asciiWrite(this, string, offset, length)                                                                // 7035\n                                                                                                                       // 7036\n      case 'binary':                                                                                                   // 7037\n        return binaryWrite(this, string, offset, length)                                                               // 7038\n                                                                                                                       // 7039\n      case 'base64':                                                                                                   // 7040\n        // Warning: maxLength not taken into account in base64Write                                                    // 7041\n        return base64Write(this, string, offset, length)                                                               // 7042\n                                                                                                                       // 7043\n      case 'ucs2':                                                                                                     // 7044\n      case 'ucs-2':                                                                                                    // 7045\n      case 'utf16le':                                                                                                  // 7046\n      case 'utf-16le':                                                                                                 // 7047\n        return ucs2Write(this, string, offset, length)                                                                 // 7048\n                                                                                                                       // 7049\n      default:                                                                                                         // 7050\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 7051\n        encoding = ('' + encoding).toLowerCase()                                                                       // 7052\n        loweredCase = true                                                                                             // 7053\n    }                                                                                                                  // 7054\n  }                                                                                                                    // 7055\n}                                                                                                                      // 7056\n                                                                                                                       // 7057\nBuffer.prototype.toJSON = function toJSON () {                                                                         // 7058\n  return {                                                                                                             // 7059\n    type: 'Buffer',                                                                                                    // 7060\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 7061\n  }                                                                                                                    // 7062\n}                                                                                                                      // 7063\n                                                                                                                       // 7064\nfunction base64Slice (buf, start, end) {                                                                               // 7065\n  if (start === 0 && end === buf.length) {                                                                             // 7066\n    return base64.fromByteArray(buf)                                                                                   // 7067\n  } else {                                                                                                             // 7068\n    return base64.fromByteArray(buf.slice(start, end))                                                                 // 7069\n  }                                                                                                                    // 7070\n}                                                                                                                      // 7071\n                                                                                                                       // 7072\nfunction utf8Slice (buf, start, end) {                                                                                 // 7073\n  end = Math.min(buf.length, end)                                                                                      // 7074\n  var res = []                                                                                                         // 7075\n                                                                                                                       // 7076\n  var i = start                                                                                                        // 7077\n  while (i < end) {                                                                                                    // 7078\n    var firstByte = buf[i]                                                                                             // 7079\n    var codePoint = null                                                                                               // 7080\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 7081\n      : (firstByte > 0xDF) ? 3                                                                                         // 7082\n      : (firstByte > 0xBF) ? 2                                                                                         // 7083\n      : 1                                                                                                              // 7084\n                                                                                                                       // 7085\n    if (i + bytesPerSequence <= end) {                                                                                 // 7086\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 7087\n                                                                                                                       // 7088\n      switch (bytesPerSequence) {                                                                                      // 7089\n        case 1:                                                                                                        // 7090\n          if (firstByte < 0x80) {                                                                                      // 7091\n            codePoint = firstByte                                                                                      // 7092\n          }                                                                                                            // 7093\n          break                                                                                                        // 7094\n        case 2:                                                                                                        // 7095\n          secondByte = buf[i + 1]                                                                                      // 7096\n          if ((secondByte & 0xC0) === 0x80) {                                                                          // 7097\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 7098\n            if (tempCodePoint > 0x7F) {                                                                                // 7099\n              codePoint = tempCodePoint                                                                                // 7100\n            }                                                                                                          // 7101\n          }                                                                                                            // 7102\n          break                                                                                                        // 7103\n        case 3:                                                                                                        // 7104\n          secondByte = buf[i + 1]                                                                                      // 7105\n          thirdByte = buf[i + 2]                                                                                       // 7106\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 7107\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 7108\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 7109\n              codePoint = tempCodePoint                                                                                // 7110\n            }                                                                                                          // 7111\n          }                                                                                                            // 7112\n          break                                                                                                        // 7113\n        case 4:                                                                                                        // 7114\n          secondByte = buf[i + 1]                                                                                      // 7115\n          thirdByte = buf[i + 2]                                                                                       // 7116\n          fourthByte = buf[i + 3]                                                                                      // 7117\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 7118\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 7120\n              codePoint = tempCodePoint                                                                                // 7121\n            }                                                                                                          // 7122\n          }                                                                                                            // 7123\n      }                                                                                                                // 7124\n    }                                                                                                                  // 7125\n                                                                                                                       // 7126\n    if (codePoint === null) {                                                                                          // 7127\n      // we did not generate a valid codePoint so insert a                                                             // 7128\n      // replacement char (U+FFFD) and advance only 1 byte                                                             // 7129\n      codePoint = 0xFFFD                                                                                               // 7130\n      bytesPerSequence = 1                                                                                             // 7131\n    } else if (codePoint > 0xFFFF) {                                                                                   // 7132\n      // encode to utf16 (surrogate pair dance)                                                                        // 7133\n      codePoint -= 0x10000                                                                                             // 7134\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 7135\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 7136\n    }                                                                                                                  // 7137\n                                                                                                                       // 7138\n    res.push(codePoint)                                                                                                // 7139\n    i += bytesPerSequence                                                                                              // 7140\n  }                                                                                                                    // 7141\n                                                                                                                       // 7142\n  return decodeCodePointsArray(res)                                                                                    // 7143\n}                                                                                                                      // 7144\n                                                                                                                       // 7145\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 7146\n// the lowest limit is Chrome, with 0x10000 args.                                                                      // 7147\n// We go 1 magnitude less, for safety                                                                                  // 7148\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 7149\n                                                                                                                       // 7150\nfunction decodeCodePointsArray (codePoints) {                                                                          // 7151\n  var len = codePoints.length                                                                                          // 7152\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 7153\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 7154\n  }                                                                                                                    // 7155\n                                                                                                                       // 7156\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                             // 7157\n  var res = ''                                                                                                         // 7158\n  var i = 0                                                                                                            // 7159\n  while (i < len) {                                                                                                    // 7160\n    res += String.fromCharCode.apply(                                                                                  // 7161\n      String,                                                                                                          // 7162\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 7163\n    )                                                                                                                  // 7164\n  }                                                                                                                    // 7165\n  return res                                                                                                           // 7166\n}                                                                                                                      // 7167\n                                                                                                                       // 7168\nfunction asciiSlice (buf, start, end) {                                                                                // 7169\n  var ret = ''                                                                                                         // 7170\n  end = Math.min(buf.length, end)                                                                                      // 7171\n                                                                                                                       // 7172\n  for (var i = start; i < end; i++) {                                                                                  // 7173\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 7174\n  }                                                                                                                    // 7175\n  return ret                                                                                                           // 7176\n}                                                                                                                      // 7177\n                                                                                                                       // 7178\nfunction binarySlice (buf, start, end) {                                                                               // 7179\n  var ret = ''                                                                                                         // 7180\n  end = Math.min(buf.length, end)                                                                                      // 7181\n                                                                                                                       // 7182\n  for (var i = start; i < end; i++) {                                                                                  // 7183\n    ret += String.fromCharCode(buf[i])                                                                                 // 7184\n  }                                                                                                                    // 7185\n  return ret                                                                                                           // 7186\n}                                                                                                                      // 7187\n                                                                                                                       // 7188\nfunction hexSlice (buf, start, end) {                                                                                  // 7189\n  var len = buf.length                                                                                                 // 7190\n                                                                                                                       // 7191\n  if (!start || start < 0) start = 0                                                                                   // 7192\n  if (!end || end < 0 || end > len) end = len                                                                          // 7193\n                                                                                                                       // 7194\n  var out = ''                                                                                                         // 7195\n  for (var i = start; i < end; i++) {                                                                                  // 7196\n    out += toHex(buf[i])                                                                                               // 7197\n  }                                                                                                                    // 7198\n  return out                                                                                                           // 7199\n}                                                                                                                      // 7200\n                                                                                                                       // 7201\nfunction utf16leSlice (buf, start, end) {                                                                              // 7202\n  var bytes = buf.slice(start, end)                                                                                    // 7203\n  var res = ''                                                                                                         // 7204\n  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 7205\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 7206\n  }                                                                                                                    // 7207\n  return res                                                                                                           // 7208\n}                                                                                                                      // 7209\n                                                                                                                       // 7210\nBuffer.prototype.slice = function slice (start, end) {                                                                 // 7211\n  var len = this.length                                                                                                // 7212\n  start = ~~start                                                                                                      // 7213\n  end = end === undefined ? len : ~~end                                                                                // 7214\n                                                                                                                       // 7215\n  if (start < 0) {                                                                                                     // 7216\n    start += len                                                                                                       // 7217\n    if (start < 0) start = 0                                                                                           // 7218\n  } else if (start > len) {                                                                                            // 7219\n    start = len                                                                                                        // 7220\n  }                                                                                                                    // 7221\n                                                                                                                       // 7222\n  if (end < 0) {                                                                                                       // 7223\n    end += len                                                                                                         // 7224\n    if (end < 0) end = 0                                                                                               // 7225\n  } else if (end > len) {                                                                                              // 7226\n    end = len                                                                                                          // 7227\n  }                                                                                                                    // 7228\n                                                                                                                       // 7229\n  if (end < start) end = start                                                                                         // 7230\n                                                                                                                       // 7231\n  var newBuf                                                                                                           // 7232\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7233\n    newBuf = Buffer._augment(this.subarray(start, end))                                                                // 7234\n  } else {                                                                                                             // 7235\n    var sliceLen = end - start                                                                                         // 7236\n    newBuf = new Buffer(sliceLen, undefined)                                                                           // 7237\n    for (var i = 0; i < sliceLen; i++) {                                                                               // 7238\n      newBuf[i] = this[i + start]                                                                                      // 7239\n    }                                                                                                                  // 7240\n  }                                                                                                                    // 7241\n                                                                                                                       // 7242\n  if (newBuf.length) newBuf.parent = this.parent || this                                                               // 7243\n                                                                                                                       // 7244\n  return newBuf                                                                                                        // 7245\n}                                                                                                                      // 7246\n                                                                                                                       // 7247\n/*                                                                                                                     // 7248\n * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 7249\n */                                                                                                                    // 7250\nfunction checkOffset (offset, ext, length) {                                                                           // 7251\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 7252\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 7253\n}                                                                                                                      // 7254\n                                                                                                                       // 7255\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 7256\n  offset = offset | 0                                                                                                  // 7257\n  byteLength = byteLength | 0                                                                                          // 7258\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 7259\n                                                                                                                       // 7260\n  var val = this[offset]                                                                                               // 7261\n  var mul = 1                                                                                                          // 7262\n  var i = 0                                                                                                            // 7263\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 7264\n    val += this[offset + i] * mul                                                                                      // 7265\n  }                                                                                                                    // 7266\n                                                                                                                       // 7267\n  return val                                                                                                           // 7268\n}                                                                                                                      // 7269\n                                                                                                                       // 7270\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 7271\n  offset = offset | 0                                                                                                  // 7272\n  byteLength = byteLength | 0                                                                                          // 7273\n  if (!noAssert) {                                                                                                     // 7274\n    checkOffset(offset, byteLength, this.length)                                                                       // 7275\n  }                                                                                                                    // 7276\n                                                                                                                       // 7277\n  var val = this[offset + --byteLength]                                                                                // 7278\n  var mul = 1                                                                                                          // 7279\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 7280\n    val += this[offset + --byteLength] * mul                                                                           // 7281\n  }                                                                                                                    // 7282\n                                                                                                                       // 7283\n  return val                                                                                                           // 7284\n}                                                                                                                      // 7285\n                                                                                                                       // 7286\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 7287\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 7288\n  return this[offset]                                                                                                  // 7289\n}                                                                                                                      // 7290\n                                                                                                                       // 7291\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 7292\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 7293\n  return this[offset] | (this[offset + 1] << 8)                                                                        // 7294\n}                                                                                                                      // 7295\n                                                                                                                       // 7296\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 7297\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 7298\n  return (this[offset] << 8) | this[offset + 1]                                                                        // 7299\n}                                                                                                                      // 7300\n                                                                                                                       // 7301\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 7302\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7303\n                                                                                                                       // 7304\n  return ((this[offset]) |                                                                                             // 7305\n      (this[offset + 1] << 8) |                                                                                        // 7306\n      (this[offset + 2] << 16)) +                                                                                      // 7307\n      (this[offset + 3] * 0x1000000)                                                                                   // 7308\n}                                                                                                                      // 7309\n                                                                                                                       // 7310\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 7311\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7312\n                                                                                                                       // 7313\n  return (this[offset] * 0x1000000) +                                                                                  // 7314\n    ((this[offset + 1] << 16) |                                                                                        // 7315\n    (this[offset + 2] << 8) |                                                                                          // 7316\n    this[offset + 3])                                                                                                  // 7317\n}                                                                                                                      // 7318\n                                                                                                                       // 7319\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 7320\n  offset = offset | 0                                                                                                  // 7321\n  byteLength = byteLength | 0                                                                                          // 7322\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 7323\n                                                                                                                       // 7324\n  var val = this[offset]                                                                                               // 7325\n  var mul = 1                                                                                                          // 7326\n  var i = 0                                                                                                            // 7327\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 7328\n    val += this[offset + i] * mul                                                                                      // 7329\n  }                                                                                                                    // 7330\n  mul *= 0x80                                                                                                          // 7331\n                                                                                                                       // 7332\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 7333\n                                                                                                                       // 7334\n  return val                                                                                                           // 7335\n}                                                                                                                      // 7336\n                                                                                                                       // 7337\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 7338\n  offset = offset | 0                                                                                                  // 7339\n  byteLength = byteLength | 0                                                                                          // 7340\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 7341\n                                                                                                                       // 7342\n  var i = byteLength                                                                                                   // 7343\n  var mul = 1                                                                                                          // 7344\n  var val = this[offset + --i]                                                                                         // 7345\n  while (i > 0 && (mul *= 0x100)) {                                                                                    // 7346\n    val += this[offset + --i] * mul                                                                                    // 7347\n  }                                                                                                                    // 7348\n  mul *= 0x80                                                                                                          // 7349\n                                                                                                                       // 7350\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 7351\n                                                                                                                       // 7352\n  return val                                                                                                           // 7353\n}                                                                                                                      // 7354\n                                                                                                                       // 7355\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 7356\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 7357\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 7358\n  return ((0xff - this[offset] + 1) * -1)                                                                              // 7359\n}                                                                                                                      // 7360\n                                                                                                                       // 7361\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 7362\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 7363\n  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 7364\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 7365\n}                                                                                                                      // 7366\n                                                                                                                       // 7367\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 7368\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 7369\n  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 7370\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 7371\n}                                                                                                                      // 7372\n                                                                                                                       // 7373\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 7374\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7375\n                                                                                                                       // 7376\n  return (this[offset]) |                                                                                              // 7377\n    (this[offset + 1] << 8) |                                                                                          // 7378\n    (this[offset + 2] << 16) |                                                                                         // 7379\n    (this[offset + 3] << 24)                                                                                           // 7380\n}                                                                                                                      // 7381\n                                                                                                                       // 7382\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 7383\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7384\n                                                                                                                       // 7385\n  return (this[offset] << 24) |                                                                                        // 7386\n    (this[offset + 1] << 16) |                                                                                         // 7387\n    (this[offset + 2] << 8) |                                                                                          // 7388\n    (this[offset + 3])                                                                                                 // 7389\n}                                                                                                                      // 7390\n                                                                                                                       // 7391\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 7392\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7393\n  return ieee754.read(this, offset, true, 23, 4)                                                                       // 7394\n}                                                                                                                      // 7395\n                                                                                                                       // 7396\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 7397\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 7398\n  return ieee754.read(this, offset, false, 23, 4)                                                                      // 7399\n}                                                                                                                      // 7400\n                                                                                                                       // 7401\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 7402\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 7403\n  return ieee754.read(this, offset, true, 52, 8)                                                                       // 7404\n}                                                                                                                      // 7405\n                                                                                                                       // 7406\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 7407\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 7408\n  return ieee754.read(this, offset, false, 52, 8)                                                                      // 7409\n}                                                                                                                      // 7410\n                                                                                                                       // 7411\nfunction checkInt (buf, value, offset, ext, max, min) {                                                                // 7412\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                   // 7413\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 7414\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 7415\n}                                                                                                                      // 7416\n                                                                                                                       // 7417\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 7418\n  value = +value                                                                                                       // 7419\n  offset = offset | 0                                                                                                  // 7420\n  byteLength = byteLength | 0                                                                                          // 7421\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 7422\n                                                                                                                       // 7423\n  var mul = 1                                                                                                          // 7424\n  var i = 0                                                                                                            // 7425\n  this[offset] = value & 0xFF                                                                                          // 7426\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 7427\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 7428\n  }                                                                                                                    // 7429\n                                                                                                                       // 7430\n  return offset + byteLength                                                                                           // 7431\n}                                                                                                                      // 7432\n                                                                                                                       // 7433\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 7434\n  value = +value                                                                                                       // 7435\n  offset = offset | 0                                                                                                  // 7436\n  byteLength = byteLength | 0                                                                                          // 7437\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 7438\n                                                                                                                       // 7439\n  var i = byteLength - 1                                                                                               // 7440\n  var mul = 1                                                                                                          // 7441\n  this[offset + i] = value & 0xFF                                                                                      // 7442\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 7443\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 7444\n  }                                                                                                                    // 7445\n                                                                                                                       // 7446\n  return offset + byteLength                                                                                           // 7447\n}                                                                                                                      // 7448\n                                                                                                                       // 7449\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 7450\n  value = +value                                                                                                       // 7451\n  offset = offset | 0                                                                                                  // 7452\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 7453\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 7454\n  this[offset] = value                                                                                                 // 7455\n  return offset + 1                                                                                                    // 7456\n}                                                                                                                      // 7457\n                                                                                                                       // 7458\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 7459\n  if (value < 0) value = 0xffff + value + 1                                                                            // 7460\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                  // 7461\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 7462\n      (littleEndian ? i : 1 - i) * 8                                                                                   // 7463\n  }                                                                                                                    // 7464\n}                                                                                                                      // 7465\n                                                                                                                       // 7466\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 7467\n  value = +value                                                                                                       // 7468\n  offset = offset | 0                                                                                                  // 7469\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 7470\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7471\n    this[offset] = value                                                                                               // 7472\n    this[offset + 1] = (value >>> 8)                                                                                   // 7473\n  } else {                                                                                                             // 7474\n    objectWriteUInt16(this, value, offset, true)                                                                       // 7475\n  }                                                                                                                    // 7476\n  return offset + 2                                                                                                    // 7477\n}                                                                                                                      // 7478\n                                                                                                                       // 7479\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 7480\n  value = +value                                                                                                       // 7481\n  offset = offset | 0                                                                                                  // 7482\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 7483\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7484\n    this[offset] = (value >>> 8)                                                                                       // 7485\n    this[offset + 1] = value                                                                                           // 7486\n  } else {                                                                                                             // 7487\n    objectWriteUInt16(this, value, offset, false)                                                                      // 7488\n  }                                                                                                                    // 7489\n  return offset + 2                                                                                                    // 7490\n}                                                                                                                      // 7491\n                                                                                                                       // 7492\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 7493\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 7494\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                  // 7495\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 7496\n  }                                                                                                                    // 7497\n}                                                                                                                      // 7498\n                                                                                                                       // 7499\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 7500\n  value = +value                                                                                                       // 7501\n  offset = offset | 0                                                                                                  // 7502\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 7503\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7504\n    this[offset + 3] = (value >>> 24)                                                                                  // 7505\n    this[offset + 2] = (value >>> 16)                                                                                  // 7506\n    this[offset + 1] = (value >>> 8)                                                                                   // 7507\n    this[offset] = value                                                                                               // 7508\n  } else {                                                                                                             // 7509\n    objectWriteUInt32(this, value, offset, true)                                                                       // 7510\n  }                                                                                                                    // 7511\n  return offset + 4                                                                                                    // 7512\n}                                                                                                                      // 7513\n                                                                                                                       // 7514\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 7515\n  value = +value                                                                                                       // 7516\n  offset = offset | 0                                                                                                  // 7517\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 7518\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7519\n    this[offset] = (value >>> 24)                                                                                      // 7520\n    this[offset + 1] = (value >>> 16)                                                                                  // 7521\n    this[offset + 2] = (value >>> 8)                                                                                   // 7522\n    this[offset + 3] = value                                                                                           // 7523\n  } else {                                                                                                             // 7524\n    objectWriteUInt32(this, value, offset, false)                                                                      // 7525\n  }                                                                                                                    // 7526\n  return offset + 4                                                                                                    // 7527\n}                                                                                                                      // 7528\n                                                                                                                       // 7529\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 7530\n  value = +value                                                                                                       // 7531\n  offset = offset | 0                                                                                                  // 7532\n  if (!noAssert) {                                                                                                     // 7533\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 7534\n                                                                                                                       // 7535\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 7536\n  }                                                                                                                    // 7537\n                                                                                                                       // 7538\n  var i = 0                                                                                                            // 7539\n  var mul = 1                                                                                                          // 7540\n  var sub = value < 0 ? 1 : 0                                                                                          // 7541\n  this[offset] = value & 0xFF                                                                                          // 7542\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 7543\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 7544\n  }                                                                                                                    // 7545\n                                                                                                                       // 7546\n  return offset + byteLength                                                                                           // 7547\n}                                                                                                                      // 7548\n                                                                                                                       // 7549\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 7550\n  value = +value                                                                                                       // 7551\n  offset = offset | 0                                                                                                  // 7552\n  if (!noAssert) {                                                                                                     // 7553\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 7554\n                                                                                                                       // 7555\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 7556\n  }                                                                                                                    // 7557\n                                                                                                                       // 7558\n  var i = byteLength - 1                                                                                               // 7559\n  var mul = 1                                                                                                          // 7560\n  var sub = value < 0 ? 1 : 0                                                                                          // 7561\n  this[offset + i] = value & 0xFF                                                                                      // 7562\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 7563\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 7564\n  }                                                                                                                    // 7565\n                                                                                                                       // 7566\n  return offset + byteLength                                                                                           // 7567\n}                                                                                                                      // 7568\n                                                                                                                       // 7569\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 7570\n  value = +value                                                                                                       // 7571\n  offset = offset | 0                                                                                                  // 7572\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 7573\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 7574\n  if (value < 0) value = 0xff + value + 1                                                                              // 7575\n  this[offset] = value                                                                                                 // 7576\n  return offset + 1                                                                                                    // 7577\n}                                                                                                                      // 7578\n                                                                                                                       // 7579\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 7580\n  value = +value                                                                                                       // 7581\n  offset = offset | 0                                                                                                  // 7582\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 7583\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7584\n    this[offset] = value                                                                                               // 7585\n    this[offset + 1] = (value >>> 8)                                                                                   // 7586\n  } else {                                                                                                             // 7587\n    objectWriteUInt16(this, value, offset, true)                                                                       // 7588\n  }                                                                                                                    // 7589\n  return offset + 2                                                                                                    // 7590\n}                                                                                                                      // 7591\n                                                                                                                       // 7592\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 7593\n  value = +value                                                                                                       // 7594\n  offset = offset | 0                                                                                                  // 7595\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 7596\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7597\n    this[offset] = (value >>> 8)                                                                                       // 7598\n    this[offset + 1] = value                                                                                           // 7599\n  } else {                                                                                                             // 7600\n    objectWriteUInt16(this, value, offset, false)                                                                      // 7601\n  }                                                                                                                    // 7602\n  return offset + 2                                                                                                    // 7603\n}                                                                                                                      // 7604\n                                                                                                                       // 7605\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 7606\n  value = +value                                                                                                       // 7607\n  offset = offset | 0                                                                                                  // 7608\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 7609\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7610\n    this[offset] = value                                                                                               // 7611\n    this[offset + 1] = (value >>> 8)                                                                                   // 7612\n    this[offset + 2] = (value >>> 16)                                                                                  // 7613\n    this[offset + 3] = (value >>> 24)                                                                                  // 7614\n  } else {                                                                                                             // 7615\n    objectWriteUInt32(this, value, offset, true)                                                                       // 7616\n  }                                                                                                                    // 7617\n  return offset + 4                                                                                                    // 7618\n}                                                                                                                      // 7619\n                                                                                                                       // 7620\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 7621\n  value = +value                                                                                                       // 7622\n  offset = offset | 0                                                                                                  // 7623\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 7624\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 7625\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 7626\n    this[offset] = (value >>> 24)                                                                                      // 7627\n    this[offset + 1] = (value >>> 16)                                                                                  // 7628\n    this[offset + 2] = (value >>> 8)                                                                                   // 7629\n    this[offset + 3] = value                                                                                           // 7630\n  } else {                                                                                                             // 7631\n    objectWriteUInt32(this, value, offset, false)                                                                      // 7632\n  }                                                                                                                    // 7633\n  return offset + 4                                                                                                    // 7634\n}                                                                                                                      // 7635\n                                                                                                                       // 7636\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 7637\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 7638\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 7639\n  if (offset < 0) throw new RangeError('index out of range')                                                           // 7640\n}                                                                                                                      // 7641\n                                                                                                                       // 7642\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 7643\n  if (!noAssert) {                                                                                                     // 7644\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 7645\n  }                                                                                                                    // 7646\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 7647\n  return offset + 4                                                                                                    // 7648\n}                                                                                                                      // 7649\n                                                                                                                       // 7650\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 7651\n  return writeFloat(this, value, offset, true, noAssert)                                                               // 7652\n}                                                                                                                      // 7653\n                                                                                                                       // 7654\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 7655\n  return writeFloat(this, value, offset, false, noAssert)                                                              // 7656\n}                                                                                                                      // 7657\n                                                                                                                       // 7658\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 7659\n  if (!noAssert) {                                                                                                     // 7660\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 7661\n  }                                                                                                                    // 7662\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 7663\n  return offset + 8                                                                                                    // 7664\n}                                                                                                                      // 7665\n                                                                                                                       // 7666\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 7667\n  return writeDouble(this, value, offset, true, noAssert)                                                              // 7668\n}                                                                                                                      // 7669\n                                                                                                                       // 7670\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 7671\n  return writeDouble(this, value, offset, false, noAssert)                                                             // 7672\n}                                                                                                                      // 7673\n                                                                                                                       // 7674\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 7675\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 7676\n  if (!start) start = 0                                                                                                // 7677\n  if (!end && end !== 0) end = this.length                                                                             // 7678\n  if (targetStart >= target.length) targetStart = target.length                                                        // 7679\n  if (!targetStart) targetStart = 0                                                                                    // 7680\n  if (end > 0 && end < start) end = start                                                                              // 7681\n                                                                                                                       // 7682\n  // Copy 0 bytes; we're done                                                                                          // 7683\n  if (end === start) return 0                                                                                          // 7684\n  if (target.length === 0 || this.length === 0) return 0                                                               // 7685\n                                                                                                                       // 7686\n  // Fatal error conditions                                                                                            // 7687\n  if (targetStart < 0) {                                                                                               // 7688\n    throw new RangeError('targetStart out of bounds')                                                                  // 7689\n  }                                                                                                                    // 7690\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 7691\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 7692\n                                                                                                                       // 7693\n  // Are we oob?                                                                                                       // 7694\n  if (end > this.length) end = this.length                                                                             // 7695\n  if (target.length - targetStart < end - start) {                                                                     // 7696\n    end = target.length - targetStart + start                                                                          // 7697\n  }                                                                                                                    // 7698\n                                                                                                                       // 7699\n  var len = end - start                                                                                                // 7700\n  var i                                                                                                                // 7701\n                                                                                                                       // 7702\n  if (this === target && start < targetStart && targetStart < end) {                                                   // 7703\n    // descending copy from end                                                                                        // 7704\n    for (i = len - 1; i >= 0; i--) {                                                                                   // 7705\n      target[i + targetStart] = this[i + start]                                                                        // 7706\n    }                                                                                                                  // 7707\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 7708\n    // ascending copy from start                                                                                       // 7709\n    for (i = 0; i < len; i++) {                                                                                        // 7710\n      target[i + targetStart] = this[i + start]                                                                        // 7711\n    }                                                                                                                  // 7712\n  } else {                                                                                                             // 7713\n    target._set(this.subarray(start, start + len), targetStart)                                                        // 7714\n  }                                                                                                                    // 7715\n                                                                                                                       // 7716\n  return len                                                                                                           // 7717\n}                                                                                                                      // 7718\n                                                                                                                       // 7719\n// fill(value, start=0, end=buffer.length)                                                                             // 7720\nBuffer.prototype.fill = function fill (value, start, end) {                                                            // 7721\n  if (!value) value = 0                                                                                                // 7722\n  if (!start) start = 0                                                                                                // 7723\n  if (!end) end = this.length                                                                                          // 7724\n                                                                                                                       // 7725\n  if (end < start) throw new RangeError('end < start')                                                                 // 7726\n                                                                                                                       // 7727\n  // Fill 0 bytes; we're done                                                                                          // 7728\n  if (end === start) return                                                                                            // 7729\n  if (this.length === 0) return                                                                                        // 7730\n                                                                                                                       // 7731\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                   // 7732\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                          // 7733\n                                                                                                                       // 7734\n  var i                                                                                                                // 7735\n  if (typeof value === 'number') {                                                                                     // 7736\n    for (i = start; i < end; i++) {                                                                                    // 7737\n      this[i] = value                                                                                                  // 7738\n    }                                                                                                                  // 7739\n  } else {                                                                                                             // 7740\n    var bytes = utf8ToBytes(value.toString())                                                                          // 7741\n    var len = bytes.length                                                                                             // 7742\n    for (i = start; i < end; i++) {                                                                                    // 7743\n      this[i] = bytes[i % len]                                                                                         // 7744\n    }                                                                                                                  // 7745\n  }                                                                                                                    // 7746\n                                                                                                                       // 7747\n  return this                                                                                                          // 7748\n}                                                                                                                      // 7749\n                                                                                                                       // 7750\n/**                                                                                                                    // 7751\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.                                        // 7752\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.                                            // 7753\n */                                                                                                                    // 7754\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {                                                           // 7755\n  if (typeof Uint8Array !== 'undefined') {                                                                             // 7756\n    if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                  // 7757\n      return (new Buffer(this)).buffer                                                                                 // 7758\n    } else {                                                                                                           // 7759\n      var buf = new Uint8Array(this.length)                                                                            // 7760\n      for (var i = 0, len = buf.length; i < len; i += 1) {                                                             // 7761\n        buf[i] = this[i]                                                                                               // 7762\n      }                                                                                                                // 7763\n      return buf.buffer                                                                                                // 7764\n    }                                                                                                                  // 7765\n  } else {                                                                                                             // 7766\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')                                          // 7767\n  }                                                                                                                    // 7768\n}                                                                                                                      // 7769\n                                                                                                                       // 7770\n// HELPER FUNCTIONS                                                                                                    // 7771\n// ================                                                                                                    // 7772\n                                                                                                                       // 7773\nvar BP = Buffer.prototype                                                                                              // 7774\n                                                                                                                       // 7775\n/**                                                                                                                    // 7776\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods                                     // 7777\n */                                                                                                                    // 7778\nBuffer._augment = function _augment (arr) {                                                                            // 7779\n  arr.constructor = Buffer                                                                                             // 7780\n  arr._isBuffer = true                                                                                                 // 7781\n                                                                                                                       // 7782\n  // save reference to original Uint8Array set method before overwriting                                               // 7783\n  arr._set = arr.set                                                                                                   // 7784\n                                                                                                                       // 7785\n  // deprecated                                                                                                        // 7786\n  arr.get = BP.get                                                                                                     // 7787\n  arr.set = BP.set                                                                                                     // 7788\n                                                                                                                       // 7789\n  arr.write = BP.write                                                                                                 // 7790\n  arr.toString = BP.toString                                                                                           // 7791\n  arr.toLocaleString = BP.toString                                                                                     // 7792\n  arr.toJSON = BP.toJSON                                                                                               // 7793\n  arr.equals = BP.equals                                                                                               // 7794\n  arr.compare = BP.compare                                                                                             // 7795\n  arr.indexOf = BP.indexOf                                                                                             // 7796\n  arr.copy = BP.copy                                                                                                   // 7797\n  arr.slice = BP.slice                                                                                                 // 7798\n  arr.readUIntLE = BP.readUIntLE                                                                                       // 7799\n  arr.readUIntBE = BP.readUIntBE                                                                                       // 7800\n  arr.readUInt8 = BP.readUInt8                                                                                         // 7801\n  arr.readUInt16LE = BP.readUInt16LE                                                                                   // 7802\n  arr.readUInt16BE = BP.readUInt16BE                                                                                   // 7803\n  arr.readUInt32LE = BP.readUInt32LE                                                                                   // 7804\n  arr.readUInt32BE = BP.readUInt32BE                                                                                   // 7805\n  arr.readIntLE = BP.readIntLE                                                                                         // 7806\n  arr.readIntBE = BP.readIntBE                                                                                         // 7807\n  arr.readInt8 = BP.readInt8                                                                                           // 7808\n  arr.readInt16LE = BP.readInt16LE                                                                                     // 7809\n  arr.readInt16BE = BP.readInt16BE                                                                                     // 7810\n  arr.readInt32LE = BP.readInt32LE                                                                                     // 7811\n  arr.readInt32BE = BP.readInt32BE                                                                                     // 7812\n  arr.readFloatLE = BP.readFloatLE                                                                                     // 7813\n  arr.readFloatBE = BP.readFloatBE                                                                                     // 7814\n  arr.readDoubleLE = BP.readDoubleLE                                                                                   // 7815\n  arr.readDoubleBE = BP.readDoubleBE                                                                                   // 7816\n  arr.writeUInt8 = BP.writeUInt8                                                                                       // 7817\n  arr.writeUIntLE = BP.writeUIntLE                                                                                     // 7818\n  arr.writeUIntBE = BP.writeUIntBE                                                                                     // 7819\n  arr.writeUInt16LE = BP.writeUInt16LE                                                                                 // 7820\n  arr.writeUInt16BE = BP.writeUInt16BE                                                                                 // 7821\n  arr.writeUInt32LE = BP.writeUInt32LE                                                                                 // 7822\n  arr.writeUInt32BE = BP.writeUInt32BE                                                                                 // 7823\n  arr.writeIntLE = BP.writeIntLE                                                                                       // 7824\n  arr.writeIntBE = BP.writeIntBE                                                                                       // 7825\n  arr.writeInt8 = BP.writeInt8                                                                                         // 7826\n  arr.writeInt16LE = BP.writeInt16LE                                                                                   // 7827\n  arr.writeInt16BE = BP.writeInt16BE                                                                                   // 7828\n  arr.writeInt32LE = BP.writeInt32LE                                                                                   // 7829\n  arr.writeInt32BE = BP.writeInt32BE                                                                                   // 7830\n  arr.writeFloatLE = BP.writeFloatLE                                                                                   // 7831\n  arr.writeFloatBE = BP.writeFloatBE                                                                                   // 7832\n  arr.writeDoubleLE = BP.writeDoubleLE                                                                                 // 7833\n  arr.writeDoubleBE = BP.writeDoubleBE                                                                                 // 7834\n  arr.fill = BP.fill                                                                                                   // 7835\n  arr.inspect = BP.inspect                                                                                             // 7836\n  arr.toArrayBuffer = BP.toArrayBuffer                                                                                 // 7837\n                                                                                                                       // 7838\n  return arr                                                                                                           // 7839\n}                                                                                                                      // 7840\n                                                                                                                       // 7841\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                           // 7842\n                                                                                                                       // 7843\nfunction base64clean (str) {                                                                                           // 7844\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                             // 7845\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 7846\n  // Node converts strings with length < 2 to ''                                                                       // 7847\n  if (str.length < 2) return ''                                                                                        // 7848\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 7849\n  while (str.length % 4 !== 0) {                                                                                       // 7850\n    str = str + '='                                                                                                    // 7851\n  }                                                                                                                    // 7852\n  return str                                                                                                           // 7853\n}                                                                                                                      // 7854\n                                                                                                                       // 7855\nfunction stringtrim (str) {                                                                                            // 7856\n  if (str.trim) return str.trim()                                                                                      // 7857\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                 // 7858\n}                                                                                                                      // 7859\n                                                                                                                       // 7860\nfunction toHex (n) {                                                                                                   // 7861\n  if (n < 16) return '0' + n.toString(16)                                                                              // 7862\n  return n.toString(16)                                                                                                // 7863\n}                                                                                                                      // 7864\n                                                                                                                       // 7865\nfunction utf8ToBytes (string, units) {                                                                                 // 7866\n  units = units || Infinity                                                                                            // 7867\n  var codePoint                                                                                                        // 7868\n  var length = string.length                                                                                           // 7869\n  var leadSurrogate = null                                                                                             // 7870\n  var bytes = []                                                                                                       // 7871\n                                                                                                                       // 7872\n  for (var i = 0; i < length; i++) {                                                                                   // 7873\n    codePoint = string.charCodeAt(i)                                                                                   // 7874\n                                                                                                                       // 7875\n    // is surrogate component                                                                                          // 7876\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 7877\n      // last char was a lead                                                                                          // 7878\n      if (!leadSurrogate) {                                                                                            // 7879\n        // no lead yet                                                                                                 // 7880\n        if (codePoint > 0xDBFF) {                                                                                      // 7881\n          // unexpected trail                                                                                          // 7882\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 7883\n          continue                                                                                                     // 7884\n        } else if (i + 1 === length) {                                                                                 // 7885\n          // unpaired lead                                                                                             // 7886\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 7887\n          continue                                                                                                     // 7888\n        }                                                                                                              // 7889\n                                                                                                                       // 7890\n        // valid lead                                                                                                  // 7891\n        leadSurrogate = codePoint                                                                                      // 7892\n                                                                                                                       // 7893\n        continue                                                                                                       // 7894\n      }                                                                                                                // 7895\n                                                                                                                       // 7896\n      // 2 leads in a row                                                                                              // 7897\n      if (codePoint < 0xDC00) {                                                                                        // 7898\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 7899\n        leadSurrogate = codePoint                                                                                      // 7900\n        continue                                                                                                       // 7901\n      }                                                                                                                // 7902\n                                                                                                                       // 7903\n      // valid surrogate pair                                                                                          // 7904\n      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000                                          // 7905\n    } else if (leadSurrogate) {                                                                                        // 7906\n      // valid bmp char, but last char was a lead                                                                      // 7907\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 7908\n    }                                                                                                                  // 7909\n                                                                                                                       // 7910\n    leadSurrogate = null                                                                                               // 7911\n                                                                                                                       // 7912\n    // encode utf8                                                                                                     // 7913\n    if (codePoint < 0x80) {                                                                                            // 7914\n      if ((units -= 1) < 0) break                                                                                      // 7915\n      bytes.push(codePoint)                                                                                            // 7916\n    } else if (codePoint < 0x800) {                                                                                    // 7917\n      if ((units -= 2) < 0) break                                                                                      // 7918\n      bytes.push(                                                                                                      // 7919\n        codePoint >> 0x6 | 0xC0,                                                                                       // 7920\n        codePoint & 0x3F | 0x80                                                                                        // 7921\n      )                                                                                                                // 7922\n    } else if (codePoint < 0x10000) {                                                                                  // 7923\n      if ((units -= 3) < 0) break                                                                                      // 7924\n      bytes.push(                                                                                                      // 7925\n        codePoint >> 0xC | 0xE0,                                                                                       // 7926\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 7927\n        codePoint & 0x3F | 0x80                                                                                        // 7928\n      )                                                                                                                // 7929\n    } else if (codePoint < 0x110000) {                                                                                 // 7930\n      if ((units -= 4) < 0) break                                                                                      // 7931\n      bytes.push(                                                                                                      // 7932\n        codePoint >> 0x12 | 0xF0,                                                                                      // 7933\n        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 7934\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 7935\n        codePoint & 0x3F | 0x80                                                                                        // 7936\n      )                                                                                                                // 7937\n    } else {                                                                                                           // 7938\n      throw new Error('Invalid code point')                                                                            // 7939\n    }                                                                                                                  // 7940\n  }                                                                                                                    // 7941\n                                                                                                                       // 7942\n  return bytes                                                                                                         // 7943\n}                                                                                                                      // 7944\n                                                                                                                       // 7945\nfunction asciiToBytes (str) {                                                                                          // 7946\n  var byteArray = []                                                                                                   // 7947\n  for (var i = 0; i < str.length; i++) {                                                                               // 7948\n    // Node's code seems to be doing this and not & 0x7F..                                                             // 7949\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 7950\n  }                                                                                                                    // 7951\n  return byteArray                                                                                                     // 7952\n}                                                                                                                      // 7953\n                                                                                                                       // 7954\nfunction utf16leToBytes (str, units) {                                                                                 // 7955\n  var c, hi, lo                                                                                                        // 7956\n  var byteArray = []                                                                                                   // 7957\n  for (var i = 0; i < str.length; i++) {                                                                               // 7958\n    if ((units -= 2) < 0) break                                                                                        // 7959\n                                                                                                                       // 7960\n    c = str.charCodeAt(i)                                                                                              // 7961\n    hi = c >> 8                                                                                                        // 7962\n    lo = c % 256                                                                                                       // 7963\n    byteArray.push(lo)                                                                                                 // 7964\n    byteArray.push(hi)                                                                                                 // 7965\n  }                                                                                                                    // 7966\n                                                                                                                       // 7967\n  return byteArray                                                                                                     // 7968\n}                                                                                                                      // 7969\n                                                                                                                       // 7970\nfunction base64ToBytes (str) {                                                                                         // 7971\n  return base64.toByteArray(base64clean(str))                                                                          // 7972\n}                                                                                                                      // 7973\n                                                                                                                       // 7974\nfunction blitBuffer (src, dst, offset, length) {                                                                       // 7975\n  for (var i = 0; i < length; i++) {                                                                                   // 7976\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 7977\n    dst[i + offset] = src[i]                                                                                           // 7978\n  }                                                                                                                    // 7979\n  return i                                                                                                             // 7980\n}                                                                                                                      // 7981\n                                                                                                                       // 7982\n},{\"base64-js\":44,\"ieee754\":45,\"is-array\":46}],44:[function(require,module,exports){                                   // 7983\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                       // 7984\n                                                                                                                       // 7985\n;(function (exports) {                                                                                                 // 7986\n\t'use strict';                                                                                                         // 7987\n                                                                                                                       // 7988\n  var Arr = (typeof Uint8Array !== 'undefined')                                                                        // 7989\n    ? Uint8Array                                                                                                       // 7990\n    : Array                                                                                                            // 7991\n                                                                                                                       // 7992\n\tvar PLUS   = '+'.charCodeAt(0)                                                                                        // 7993\n\tvar SLASH  = '/'.charCodeAt(0)                                                                                        // 7994\n\tvar NUMBER = '0'.charCodeAt(0)                                                                                        // 7995\n\tvar LOWER  = 'a'.charCodeAt(0)                                                                                        // 7996\n\tvar UPPER  = 'A'.charCodeAt(0)                                                                                        // 7997\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                 // 7998\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                                // 7999\n                                                                                                                       // 8000\n\tfunction decode (elt) {                                                                                               // 8001\n\t\tvar code = elt.charCodeAt(0)                                                                                         // 8002\n\t\tif (code === PLUS ||                                                                                                 // 8003\n\t\t    code === PLUS_URL_SAFE)                                                                                          // 8004\n\t\t\treturn 62 // '+'                                                                                                    // 8005\n\t\tif (code === SLASH ||                                                                                                // 8006\n\t\t    code === SLASH_URL_SAFE)                                                                                         // 8007\n\t\t\treturn 63 // '/'                                                                                                    // 8008\n\t\tif (code < NUMBER)                                                                                                   // 8009\n\t\t\treturn -1 //no match                                                                                                // 8010\n\t\tif (code < NUMBER + 10)                                                                                              // 8011\n\t\t\treturn code - NUMBER + 26 + 26                                                                                      // 8012\n\t\tif (code < UPPER + 26)                                                                                               // 8013\n\t\t\treturn code - UPPER                                                                                                 // 8014\n\t\tif (code < LOWER + 26)                                                                                               // 8015\n\t\t\treturn code - LOWER + 26                                                                                            // 8016\n\t}                                                                                                                     // 8017\n                                                                                                                       // 8018\n\tfunction b64ToByteArray (b64) {                                                                                       // 8019\n\t\tvar i, j, l, tmp, placeHolders, arr                                                                                  // 8020\n                                                                                                                       // 8021\n\t\tif (b64.length % 4 > 0) {                                                                                            // 8022\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')                                                   // 8023\n\t\t}                                                                                                                    // 8024\n                                                                                                                       // 8025\n\t\t// the number of equal signs (place holders)                                                                         // 8026\n\t\t// if there are two placeholders, than the two characters before it                                                  // 8027\n\t\t// represent one byte                                                                                                // 8028\n\t\t// if there is only one, then the three characters before it represent 2 bytes                                       // 8029\n\t\t// this is just a cheap hack to not do indexOf twice                                                                 // 8030\n\t\tvar len = b64.length                                                                                                 // 8031\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                 // 8032\n                                                                                                                       // 8033\n\t\t// base64 is 4/3 + up to two characters of the original data                                                         // 8034\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                     // 8035\n                                                                                                                       // 8036\n\t\t// if there are placeholders, only get up to the last complete 4 chars                                               // 8037\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length                                                                   // 8038\n                                                                                                                       // 8039\n\t\tvar L = 0                                                                                                            // 8040\n                                                                                                                       // 8041\n\t\tfunction push (v) {                                                                                                  // 8042\n\t\t\tarr[L++] = v                                                                                                        // 8043\n\t\t}                                                                                                                    // 8044\n                                                                                                                       // 8045\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 8046\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)                                                                                        // 8048\n\t\t\tpush((tmp & 0xFF00) >> 8)                                                                                           // 8049\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8050\n\t\t}                                                                                                                    // 8051\n                                                                                                                       // 8052\n\t\tif (placeHolders === 2) {                                                                                            // 8053\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                               // 8054\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8055\n\t\t} else if (placeHolders === 1) {                                                                                     // 8056\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)           // 8057\n\t\t\tpush((tmp >> 8) & 0xFF)                                                                                             // 8058\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8059\n\t\t}                                                                                                                    // 8060\n                                                                                                                       // 8061\n\t\treturn arr                                                                                                           // 8062\n\t}                                                                                                                     // 8063\n                                                                                                                       // 8064\n\tfunction uint8ToBase64 (uint8) {                                                                                      // 8065\n\t\tvar i,                                                                                                               // 8066\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                               // 8067\n\t\t\toutput = \"\",                                                                                                        // 8068\n\t\t\ttemp, length                                                                                                        // 8069\n                                                                                                                       // 8070\n\t\tfunction encode (num) {                                                                                              // 8071\n\t\t\treturn lookup.charAt(num)                                                                                           // 8072\n\t\t}                                                                                                                    // 8073\n                                                                                                                       // 8074\n\t\tfunction tripletToBase64 (num) {                                                                                     // 8075\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)           // 8076\n\t\t}                                                                                                                    // 8077\n                                                                                                                       // 8078\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later                                      // 8079\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                                // 8080\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 8081\n\t\t\toutput += tripletToBase64(temp)                                                                                     // 8082\n\t\t}                                                                                                                    // 8083\n                                                                                                                       // 8084\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes                                               // 8085\n\t\tswitch (extraBytes) {                                                                                                // 8086\n\t\t\tcase 1:                                                                                                             // 8087\n\t\t\t\ttemp = uint8[uint8.length - 1]                                                                                     // 8088\n\t\t\t\toutput += encode(temp >> 2)                                                                                        // 8089\n\t\t\t\toutput += encode((temp << 4) & 0x3F)                                                                               // 8090\n\t\t\t\toutput += '=='                                                                                                     // 8091\n\t\t\t\tbreak                                                                                                              // 8092\n\t\t\tcase 2:                                                                                                             // 8093\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                  // 8094\n\t\t\t\toutput += encode(temp >> 10)                                                                                       // 8095\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)                                                                               // 8096\n\t\t\t\toutput += encode((temp << 2) & 0x3F)                                                                               // 8097\n\t\t\t\toutput += '='                                                                                                      // 8098\n\t\t\t\tbreak                                                                                                              // 8099\n\t\t}                                                                                                                    // 8100\n                                                                                                                       // 8101\n\t\treturn output                                                                                                        // 8102\n\t}                                                                                                                     // 8103\n                                                                                                                       // 8104\n\texports.toByteArray = b64ToByteArray                                                                                  // 8105\n\texports.fromByteArray = uint8ToBase64                                                                                 // 8106\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                    // 8107\n                                                                                                                       // 8108\n},{}],45:[function(require,module,exports){                                                                            // 8109\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 8110\n  var e, m                                                                                                             // 8111\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8112\n  var eMax = (1 << eLen) - 1                                                                                           // 8113\n  var eBias = eMax >> 1                                                                                                // 8114\n  var nBits = -7                                                                                                       // 8115\n  var i = isLE ? (nBytes - 1) : 0                                                                                      // 8116\n  var d = isLE ? -1 : 1                                                                                                // 8117\n  var s = buffer[offset + i]                                                                                           // 8118\n                                                                                                                       // 8119\n  i += d                                                                                                               // 8120\n                                                                                                                       // 8121\n  e = s & ((1 << (-nBits)) - 1)                                                                                        // 8122\n  s >>= (-nBits)                                                                                                       // 8123\n  nBits += eLen                                                                                                        // 8124\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8125\n                                                                                                                       // 8126\n  m = e & ((1 << (-nBits)) - 1)                                                                                        // 8127\n  e >>= (-nBits)                                                                                                       // 8128\n  nBits += mLen                                                                                                        // 8129\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8130\n                                                                                                                       // 8131\n  if (e === 0) {                                                                                                       // 8132\n    e = 1 - eBias                                                                                                      // 8133\n  } else if (e === eMax) {                                                                                             // 8134\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 8135\n  } else {                                                                                                             // 8136\n    m = m + Math.pow(2, mLen)                                                                                          // 8137\n    e = e - eBias                                                                                                      // 8138\n  }                                                                                                                    // 8139\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 8140\n}                                                                                                                      // 8141\n                                                                                                                       // 8142\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 8143\n  var e, m, c                                                                                                          // 8144\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8145\n  var eMax = (1 << eLen) - 1                                                                                           // 8146\n  var eBias = eMax >> 1                                                                                                // 8147\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 8148\n  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 8149\n  var d = isLE ? 1 : -1                                                                                                // 8150\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 8151\n                                                                                                                       // 8152\n  value = Math.abs(value)                                                                                              // 8153\n                                                                                                                       // 8154\n  if (isNaN(value) || value === Infinity) {                                                                            // 8155\n    m = isNaN(value) ? 1 : 0                                                                                           // 8156\n    e = eMax                                                                                                           // 8157\n  } else {                                                                                                             // 8158\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 8159\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 8160\n      e--                                                                                                              // 8161\n      c *= 2                                                                                                           // 8162\n    }                                                                                                                  // 8163\n    if (e + eBias >= 1) {                                                                                              // 8164\n      value += rt / c                                                                                                  // 8165\n    } else {                                                                                                           // 8166\n      value += rt * Math.pow(2, 1 - eBias)                                                                             // 8167\n    }                                                                                                                  // 8168\n    if (value * c >= 2) {                                                                                              // 8169\n      e++                                                                                                              // 8170\n      c /= 2                                                                                                           // 8171\n    }                                                                                                                  // 8172\n                                                                                                                       // 8173\n    if (e + eBias >= eMax) {                                                                                           // 8174\n      m = 0                                                                                                            // 8175\n      e = eMax                                                                                                         // 8176\n    } else if (e + eBias >= 1) {                                                                                       // 8177\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 8178\n      e = e + eBias                                                                                                    // 8179\n    } else {                                                                                                           // 8180\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 8181\n      e = 0                                                                                                            // 8182\n    }                                                                                                                  // 8183\n  }                                                                                                                    // 8184\n                                                                                                                       // 8185\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 8186\n                                                                                                                       // 8187\n  e = (e << mLen) | m                                                                                                  // 8188\n  eLen += mLen                                                                                                         // 8189\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 8190\n                                                                                                                       // 8191\n  buffer[offset + i - d] |= s * 128                                                                                    // 8192\n}                                                                                                                      // 8193\n                                                                                                                       // 8194\n},{}],46:[function(require,module,exports){                                                                            // 8195\n                                                                                                                       // 8196\n/**                                                                                                                    // 8197\n * isArray                                                                                                             // 8198\n */                                                                                                                    // 8199\n                                                                                                                       // 8200\nvar isArray = Array.isArray;                                                                                           // 8201\n                                                                                                                       // 8202\n/**                                                                                                                    // 8203\n * toString                                                                                                            // 8204\n */                                                                                                                    // 8205\n                                                                                                                       // 8206\nvar str = Object.prototype.toString;                                                                                   // 8207\n                                                                                                                       // 8208\n/**                                                                                                                    // 8209\n * Whether or not the given `val`                                                                                      // 8210\n * is an array.                                                                                                        // 8211\n *                                                                                                                     // 8212\n * example:                                                                                                            // 8213\n *                                                                                                                     // 8214\n *        isArray([]);                                                                                                 // 8215\n *        // > true                                                                                                    // 8216\n *        isArray(arguments);                                                                                          // 8217\n *        // > false                                                                                                   // 8218\n *        isArray('');                                                                                                 // 8219\n *        // > false                                                                                                   // 8220\n *                                                                                                                     // 8221\n * @param {mixed} val                                                                                                  // 8222\n * @return {bool}                                                                                                      // 8223\n */                                                                                                                    // 8224\n                                                                                                                       // 8225\nmodule.exports = isArray || function (val) {                                                                           // 8226\n  return !! val && '[object Array]' == str.call(val);                                                                  // 8227\n};                                                                                                                     // 8228\n                                                                                                                       // 8229\n},{}],47:[function(require,module,exports){                                                                            // 8230\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 8231\n//                                                                                                                     // 8232\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 8233\n// copy of this software and associated documentation files (the                                                       // 8234\n// \"Software\"), to deal in the Software without restriction, including                                                 // 8235\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 8236\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 8237\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8238\n// following conditions:                                                                                               // 8239\n//                                                                                                                     // 8240\n// The above copyright notice and this permission notice shall be included                                             // 8241\n// in all copies or substantial portions of the Software.                                                              // 8242\n//                                                                                                                     // 8243\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 8244\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 8245\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 8246\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 8247\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 8248\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 8249\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 8250\n                                                                                                                       // 8251\nfunction EventEmitter() {                                                                                              // 8252\n  this._events = this._events || {};                                                                                   // 8253\n  this._maxListeners = this._maxListeners || undefined;                                                                // 8254\n}                                                                                                                      // 8255\nmodule.exports = EventEmitter;                                                                                         // 8256\n                                                                                                                       // 8257\n// Backwards-compat with node 0.10.x                                                                                   // 8258\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 8259\n                                                                                                                       // 8260\nEventEmitter.prototype._events = undefined;                                                                            // 8261\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 8262\n                                                                                                                       // 8263\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 8264\n// added to it. This is a useful default which helps finding memory leaks.                                             // 8265\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 8266\n                                                                                                                       // 8267\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 8268\n// that to be increased. Set to zero for unlimited.                                                                    // 8269\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 8270\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 8271\n    throw TypeError('n must be a positive number');                                                                    // 8272\n  this._maxListeners = n;                                                                                              // 8273\n  return this;                                                                                                         // 8274\n};                                                                                                                     // 8275\n                                                                                                                       // 8276\nEventEmitter.prototype.emit = function(type) {                                                                         // 8277\n  var er, handler, len, args, i, listeners;                                                                            // 8278\n                                                                                                                       // 8279\n  if (!this._events)                                                                                                   // 8280\n    this._events = {};                                                                                                 // 8281\n                                                                                                                       // 8282\n  // If there is no 'error' event listener then throw.                                                                 // 8283\n  if (type === 'error') {                                                                                              // 8284\n    if (!this._events.error ||                                                                                         // 8285\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 8286\n      er = arguments[1];                                                                                               // 8287\n      if (er instanceof Error) {                                                                                       // 8288\n        throw er; // Unhandled 'error' event                                                                           // 8289\n      }                                                                                                                // 8290\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 8291\n    }                                                                                                                  // 8292\n  }                                                                                                                    // 8293\n                                                                                                                       // 8294\n  handler = this._events[type];                                                                                        // 8295\n                                                                                                                       // 8296\n  if (isUndefined(handler))                                                                                            // 8297\n    return false;                                                                                                      // 8298\n                                                                                                                       // 8299\n  if (isFunction(handler)) {                                                                                           // 8300\n    switch (arguments.length) {                                                                                        // 8301\n      // fast cases                                                                                                    // 8302\n      case 1:                                                                                                          // 8303\n        handler.call(this);                                                                                            // 8304\n        break;                                                                                                         // 8305\n      case 2:                                                                                                          // 8306\n        handler.call(this, arguments[1]);                                                                              // 8307\n        break;                                                                                                         // 8308\n      case 3:                                                                                                          // 8309\n        handler.call(this, arguments[1], arguments[2]);                                                                // 8310\n        break;                                                                                                         // 8311\n      // slower                                                                                                        // 8312\n      default:                                                                                                         // 8313\n        len = arguments.length;                                                                                        // 8314\n        args = new Array(len - 1);                                                                                     // 8315\n        for (i = 1; i < len; i++)                                                                                      // 8316\n          args[i - 1] = arguments[i];                                                                                  // 8317\n        handler.apply(this, args);                                                                                     // 8318\n    }                                                                                                                  // 8319\n  } else if (isObject(handler)) {                                                                                      // 8320\n    len = arguments.length;                                                                                            // 8321\n    args = new Array(len - 1);                                                                                         // 8322\n    for (i = 1; i < len; i++)                                                                                          // 8323\n      args[i - 1] = arguments[i];                                                                                      // 8324\n                                                                                                                       // 8325\n    listeners = handler.slice();                                                                                       // 8326\n    len = listeners.length;                                                                                            // 8327\n    for (i = 0; i < len; i++)                                                                                          // 8328\n      listeners[i].apply(this, args);                                                                                  // 8329\n  }                                                                                                                    // 8330\n                                                                                                                       // 8331\n  return true;                                                                                                         // 8332\n};                                                                                                                     // 8333\n                                                                                                                       // 8334\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 8335\n  var m;                                                                                                               // 8336\n                                                                                                                       // 8337\n  if (!isFunction(listener))                                                                                           // 8338\n    throw TypeError('listener must be a function');                                                                    // 8339\n                                                                                                                       // 8340\n  if (!this._events)                                                                                                   // 8341\n    this._events = {};                                                                                                 // 8342\n                                                                                                                       // 8343\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 8344\n  // adding it to the listeners, first emit \"newListener\".                                                             // 8345\n  if (this._events.newListener)                                                                                        // 8346\n    this.emit('newListener', type,                                                                                     // 8347\n              isFunction(listener.listener) ?                                                                          // 8348\n              listener.listener : listener);                                                                           // 8349\n                                                                                                                       // 8350\n  if (!this._events[type])                                                                                             // 8351\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 8352\n    this._events[type] = listener;                                                                                     // 8353\n  else if (isObject(this._events[type]))                                                                               // 8354\n    // If we've already got an array, just append.                                                                     // 8355\n    this._events[type].push(listener);                                                                                 // 8356\n  else                                                                                                                 // 8357\n    // Adding the second element, need to change to array.                                                             // 8358\n    this._events[type] = [this._events[type], listener];                                                               // 8359\n                                                                                                                       // 8360\n  // Check for listener leak                                                                                           // 8361\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 8362\n    var m;                                                                                                             // 8363\n    if (!isUndefined(this._maxListeners)) {                                                                            // 8364\n      m = this._maxListeners;                                                                                          // 8365\n    } else {                                                                                                           // 8366\n      m = EventEmitter.defaultMaxListeners;                                                                            // 8367\n    }                                                                                                                  // 8368\n                                                                                                                       // 8369\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 8370\n      this._events[type].warned = true;                                                                                // 8371\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 8372\n                    'leak detected. %d listeners added. ' +                                                            // 8373\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 8374\n                    this._events[type].length);                                                                        // 8375\n      if (typeof console.trace === 'function') {                                                                       // 8376\n        // not supported in IE 10                                                                                      // 8377\n        console.trace();                                                                                               // 8378\n      }                                                                                                                // 8379\n    }                                                                                                                  // 8380\n  }                                                                                                                    // 8381\n                                                                                                                       // 8382\n  return this;                                                                                                         // 8383\n};                                                                                                                     // 8384\n                                                                                                                       // 8385\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 8386\n                                                                                                                       // 8387\nEventEmitter.prototype.once = function(type, listener) {                                                               // 8388\n  if (!isFunction(listener))                                                                                           // 8389\n    throw TypeError('listener must be a function');                                                                    // 8390\n                                                                                                                       // 8391\n  var fired = false;                                                                                                   // 8392\n                                                                                                                       // 8393\n  function g() {                                                                                                       // 8394\n    this.removeListener(type, g);                                                                                      // 8395\n                                                                                                                       // 8396\n    if (!fired) {                                                                                                      // 8397\n      fired = true;                                                                                                    // 8398\n      listener.apply(this, arguments);                                                                                 // 8399\n    }                                                                                                                  // 8400\n  }                                                                                                                    // 8401\n                                                                                                                       // 8402\n  g.listener = listener;                                                                                               // 8403\n  this.on(type, g);                                                                                                    // 8404\n                                                                                                                       // 8405\n  return this;                                                                                                         // 8406\n};                                                                                                                     // 8407\n                                                                                                                       // 8408\n// emits a 'removeListener' event iff the listener was removed                                                         // 8409\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 8410\n  var list, position, length, i;                                                                                       // 8411\n                                                                                                                       // 8412\n  if (!isFunction(listener))                                                                                           // 8413\n    throw TypeError('listener must be a function');                                                                    // 8414\n                                                                                                                       // 8415\n  if (!this._events || !this._events[type])                                                                            // 8416\n    return this;                                                                                                       // 8417\n                                                                                                                       // 8418\n  list = this._events[type];                                                                                           // 8419\n  length = list.length;                                                                                                // 8420\n  position = -1;                                                                                                       // 8421\n                                                                                                                       // 8422\n  if (list === listener ||                                                                                             // 8423\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 8424\n    delete this._events[type];                                                                                         // 8425\n    if (this._events.removeListener)                                                                                   // 8426\n      this.emit('removeListener', type, listener);                                                                     // 8427\n                                                                                                                       // 8428\n  } else if (isObject(list)) {                                                                                         // 8429\n    for (i = length; i-- > 0;) {                                                                                       // 8430\n      if (list[i] === listener ||                                                                                      // 8431\n          (list[i].listener && list[i].listener === listener)) {                                                       // 8432\n        position = i;                                                                                                  // 8433\n        break;                                                                                                         // 8434\n      }                                                                                                                // 8435\n    }                                                                                                                  // 8436\n                                                                                                                       // 8437\n    if (position < 0)                                                                                                  // 8438\n      return this;                                                                                                     // 8439\n                                                                                                                       // 8440\n    if (list.length === 1) {                                                                                           // 8441\n      list.length = 0;                                                                                                 // 8442\n      delete this._events[type];                                                                                       // 8443\n    } else {                                                                                                           // 8444\n      list.splice(position, 1);                                                                                        // 8445\n    }                                                                                                                  // 8446\n                                                                                                                       // 8447\n    if (this._events.removeListener)                                                                                   // 8448\n      this.emit('removeListener', type, listener);                                                                     // 8449\n  }                                                                                                                    // 8450\n                                                                                                                       // 8451\n  return this;                                                                                                         // 8452\n};                                                                                                                     // 8453\n                                                                                                                       // 8454\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 8455\n  var key, listeners;                                                                                                  // 8456\n                                                                                                                       // 8457\n  if (!this._events)                                                                                                   // 8458\n    return this;                                                                                                       // 8459\n                                                                                                                       // 8460\n  // not listening for removeListener, no need to emit                                                                 // 8461\n  if (!this._events.removeListener) {                                                                                  // 8462\n    if (arguments.length === 0)                                                                                        // 8463\n      this._events = {};                                                                                               // 8464\n    else if (this._events[type])                                                                                       // 8465\n      delete this._events[type];                                                                                       // 8466\n    return this;                                                                                                       // 8467\n  }                                                                                                                    // 8468\n                                                                                                                       // 8469\n  // emit removeListener for all listeners on all events                                                               // 8470\n  if (arguments.length === 0) {                                                                                        // 8471\n    for (key in this._events) {                                                                                        // 8472\n      if (key === 'removeListener') continue;                                                                          // 8473\n      this.removeAllListeners(key);                                                                                    // 8474\n    }                                                                                                                  // 8475\n    this.removeAllListeners('removeListener');                                                                         // 8476\n    this._events = {};                                                                                                 // 8477\n    return this;                                                                                                       // 8478\n  }                                                                                                                    // 8479\n                                                                                                                       // 8480\n  listeners = this._events[type];                                                                                      // 8481\n                                                                                                                       // 8482\n  if (isFunction(listeners)) {                                                                                         // 8483\n    this.removeListener(type, listeners);                                                                              // 8484\n  } else {                                                                                                             // 8485\n    // LIFO order                                                                                                      // 8486\n    while (listeners.length)                                                                                           // 8487\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 8488\n  }                                                                                                                    // 8489\n  delete this._events[type];                                                                                           // 8490\n                                                                                                                       // 8491\n  return this;                                                                                                         // 8492\n};                                                                                                                     // 8493\n                                                                                                                       // 8494\nEventEmitter.prototype.listeners = function(type) {                                                                    // 8495\n  var ret;                                                                                                             // 8496\n  if (!this._events || !this._events[type])                                                                            // 8497\n    ret = [];                                                                                                          // 8498\n  else if (isFunction(this._events[type]))                                                                             // 8499\n    ret = [this._events[type]];                                                                                        // 8500\n  else                                                                                                                 // 8501\n    ret = this._events[type].slice();                                                                                  // 8502\n  return ret;                                                                                                          // 8503\n};                                                                                                                     // 8504\n                                                                                                                       // 8505\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 8506\n  var ret;                                                                                                             // 8507\n  if (!emitter._events || !emitter._events[type])                                                                      // 8508\n    ret = 0;                                                                                                           // 8509\n  else if (isFunction(emitter._events[type]))                                                                          // 8510\n    ret = 1;                                                                                                           // 8511\n  else                                                                                                                 // 8512\n    ret = emitter._events[type].length;                                                                                // 8513\n  return ret;                                                                                                          // 8514\n};                                                                                                                     // 8515\n                                                                                                                       // 8516\nfunction isFunction(arg) {                                                                                             // 8517\n  return typeof arg === 'function';                                                                                    // 8518\n}                                                                                                                      // 8519\n                                                                                                                       // 8520\nfunction isNumber(arg) {                                                                                               // 8521\n  return typeof arg === 'number';                                                                                      // 8522\n}                                                                                                                      // 8523\n                                                                                                                       // 8524\nfunction isObject(arg) {                                                                                               // 8525\n  return typeof arg === 'object' && arg !== null;                                                                      // 8526\n}                                                                                                                      // 8527\n                                                                                                                       // 8528\nfunction isUndefined(arg) {                                                                                            // 8529\n  return arg === void 0;                                                                                               // 8530\n}                                                                                                                      // 8531\n                                                                                                                       // 8532\n},{}],48:[function(require,module,exports){                                                                            // 8533\nif (typeof Object.create === 'function') {                                                                             // 8534\n  // implementation from standard node.js 'util' module                                                                // 8535\n  module.exports = function inherits(ctor, superCtor) {                                                                // 8536\n    ctor.super_ = superCtor                                                                                            // 8537\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 8538\n      constructor: {                                                                                                   // 8539\n        value: ctor,                                                                                                   // 8540\n        enumerable: false,                                                                                             // 8541\n        writable: true,                                                                                                // 8542\n        configurable: true                                                                                             // 8543\n      }                                                                                                                // 8544\n    });                                                                                                                // 8545\n  };                                                                                                                   // 8546\n} else {                                                                                                               // 8547\n  // old school shim for old browsers                                                                                  // 8548\n  module.exports = function inherits(ctor, superCtor) {                                                                // 8549\n    ctor.super_ = superCtor                                                                                            // 8550\n    var TempCtor = function () {}                                                                                      // 8551\n    TempCtor.prototype = superCtor.prototype                                                                           // 8552\n    ctor.prototype = new TempCtor()                                                                                    // 8553\n    ctor.prototype.constructor = ctor                                                                                  // 8554\n  }                                                                                                                    // 8555\n}                                                                                                                      // 8556\n                                                                                                                       // 8557\n},{}],49:[function(require,module,exports){                                                                            // 8558\nmodule.exports = Array.isArray || function (arr) {                                                                     // 8559\n  return Object.prototype.toString.call(arr) == '[object Array]';                                                      // 8560\n};                                                                                                                     // 8561\n                                                                                                                       // 8562\n},{}],50:[function(require,module,exports){                                                                            // 8563\nexports.endianness = function () { return 'LE' };                                                                      // 8564\n                                                                                                                       // 8565\nexports.hostname = function () {                                                                                       // 8566\n    if (typeof location !== 'undefined') {                                                                             // 8567\n        return location.hostname                                                                                       // 8568\n    }                                                                                                                  // 8569\n    else return '';                                                                                                    // 8570\n};                                                                                                                     // 8571\n                                                                                                                       // 8572\nexports.loadavg = function () { return [] };                                                                           // 8573\n                                                                                                                       // 8574\nexports.uptime = function () { return 0 };                                                                             // 8575\n                                                                                                                       // 8576\nexports.freemem = function () {                                                                                        // 8577\n    return Number.MAX_VALUE;                                                                                           // 8578\n};                                                                                                                     // 8579\n                                                                                                                       // 8580\nexports.totalmem = function () {                                                                                       // 8581\n    return Number.MAX_VALUE;                                                                                           // 8582\n};                                                                                                                     // 8583\n                                                                                                                       // 8584\nexports.cpus = function () { return [] };                                                                              // 8585\n                                                                                                                       // 8586\nexports.type = function () { return 'Browser' };                                                                       // 8587\n                                                                                                                       // 8588\nexports.release = function () {                                                                                        // 8589\n    if (typeof navigator !== 'undefined') {                                                                            // 8590\n        return navigator.appVersion;                                                                                   // 8591\n    }                                                                                                                  // 8592\n    return '';                                                                                                         // 8593\n};                                                                                                                     // 8594\n                                                                                                                       // 8595\nexports.networkInterfaces                                                                                              // 8596\n= exports.getNetworkInterfaces                                                                                         // 8597\n= function () { return {} };                                                                                           // 8598\n                                                                                                                       // 8599\nexports.arch = function () { return 'javascript' };                                                                    // 8600\n                                                                                                                       // 8601\nexports.platform = function () { return 'browser' };                                                                   // 8602\n                                                                                                                       // 8603\nexports.tmpdir = exports.tmpDir = function () {                                                                        // 8604\n    return '/tmp';                                                                                                     // 8605\n};                                                                                                                     // 8606\n                                                                                                                       // 8607\nexports.EOL = '\\n';                                                                                                    // 8608\n                                                                                                                       // 8609\n},{}],51:[function(require,module,exports){                                                                            // 8610\n// shim for using process in browser                                                                                   // 8611\n                                                                                                                       // 8612\nvar process = module.exports = {};                                                                                     // 8613\nvar queue = [];                                                                                                        // 8614\nvar draining = false;                                                                                                  // 8615\nvar currentQueue;                                                                                                      // 8616\nvar queueIndex = -1;                                                                                                   // 8617\n                                                                                                                       // 8618\nfunction cleanUpNextTick() {                                                                                           // 8619\n    draining = false;                                                                                                  // 8620\n    if (currentQueue.length) {                                                                                         // 8621\n        queue = currentQueue.concat(queue);                                                                            // 8622\n    } else {                                                                                                           // 8623\n        queueIndex = -1;                                                                                               // 8624\n    }                                                                                                                  // 8625\n    if (queue.length) {                                                                                                // 8626\n        drainQueue();                                                                                                  // 8627\n    }                                                                                                                  // 8628\n}                                                                                                                      // 8629\n                                                                                                                       // 8630\nfunction drainQueue() {                                                                                                // 8631\n    if (draining) {                                                                                                    // 8632\n        return;                                                                                                        // 8633\n    }                                                                                                                  // 8634\n    var timeout = setTimeout(cleanUpNextTick);                                                                         // 8635\n    draining = true;                                                                                                   // 8636\n                                                                                                                       // 8637\n    var len = queue.length;                                                                                            // 8638\n    while(len) {                                                                                                       // 8639\n        currentQueue = queue;                                                                                          // 8640\n        queue = [];                                                                                                    // 8641\n        while (++queueIndex < len) {                                                                                   // 8642\n            if (currentQueue) {                                                                                        // 8643\n                currentQueue[queueIndex].run();                                                                        // 8644\n            }                                                                                                          // 8645\n        }                                                                                                              // 8646\n        queueIndex = -1;                                                                                               // 8647\n        len = queue.length;                                                                                            // 8648\n    }                                                                                                                  // 8649\n    currentQueue = null;                                                                                               // 8650\n    draining = false;                                                                                                  // 8651\n    clearTimeout(timeout);                                                                                             // 8652\n}                                                                                                                      // 8653\n                                                                                                                       // 8654\nprocess.nextTick = function (fun) {                                                                                    // 8655\n    var args = new Array(arguments.length - 1);                                                                        // 8656\n    if (arguments.length > 1) {                                                                                        // 8657\n        for (var i = 1; i < arguments.length; i++) {                                                                   // 8658\n            args[i - 1] = arguments[i];                                                                                // 8659\n        }                                                                                                              // 8660\n    }                                                                                                                  // 8661\n    queue.push(new Item(fun, args));                                                                                   // 8662\n    if (queue.length === 1 && !draining) {                                                                             // 8663\n        setTimeout(drainQueue, 0);                                                                                     // 8664\n    }                                                                                                                  // 8665\n};                                                                                                                     // 8666\n                                                                                                                       // 8667\n// v8 likes predictible objects                                                                                        // 8668\nfunction Item(fun, array) {                                                                                            // 8669\n    this.fun = fun;                                                                                                    // 8670\n    this.array = array;                                                                                                // 8671\n}                                                                                                                      // 8672\nItem.prototype.run = function () {                                                                                     // 8673\n    this.fun.apply(null, this.array);                                                                                  // 8674\n};                                                                                                                     // 8675\nprocess.title = 'browser';                                                                                             // 8676\nprocess.browser = true;                                                                                                // 8677\nprocess.env = {};                                                                                                      // 8678\nprocess.argv = [];                                                                                                     // 8679\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 8680\nprocess.versions = {};                                                                                                 // 8681\n                                                                                                                       // 8682\nfunction noop() {}                                                                                                     // 8683\n                                                                                                                       // 8684\nprocess.on = noop;                                                                                                     // 8685\nprocess.addListener = noop;                                                                                            // 8686\nprocess.once = noop;                                                                                                   // 8687\nprocess.off = noop;                                                                                                    // 8688\nprocess.removeListener = noop;                                                                                         // 8689\nprocess.removeAllListeners = noop;                                                                                     // 8690\nprocess.emit = noop;                                                                                                   // 8691\n                                                                                                                       // 8692\nprocess.binding = function (name) {                                                                                    // 8693\n    throw new Error('process.binding is not supported');                                                               // 8694\n};                                                                                                                     // 8695\n                                                                                                                       // 8696\nprocess.cwd = function () { return '/' };                                                                              // 8697\nprocess.chdir = function (dir) {                                                                                       // 8698\n    throw new Error('process.chdir is not supported');                                                                 // 8699\n};                                                                                                                     // 8700\nprocess.umask = function() { return 0; };                                                                              // 8701\n                                                                                                                       // 8702\n},{}],52:[function(require,module,exports){                                                                            // 8703\nmodule.exports = require(\"./lib/_stream_duplex.js\")                                                                    // 8704\n                                                                                                                       // 8705\n},{\"./lib/_stream_duplex.js\":53}],53:[function(require,module,exports){                                                // 8706\n(function (process){                                                                                                   // 8707\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 8708\n//                                                                                                                     // 8709\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 8710\n// copy of this software and associated documentation files (the                                                       // 8711\n// \"Software\"), to deal in the Software without restriction, including                                                 // 8712\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 8713\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 8714\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8715\n// following conditions:                                                                                               // 8716\n//                                                                                                                     // 8717\n// The above copyright notice and this permission notice shall be included                                             // 8718\n// in all copies or substantial portions of the Software.                                                              // 8719\n//                                                                                                                     // 8720\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 8721\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 8722\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 8723\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 8724\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 8725\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 8726\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 8727\n                                                                                                                       // 8728\n// a duplex stream is just a stream that is both readable and writable.                                                // 8729\n// Since JS doesn't have multiple prototypal inheritance, this class                                                   // 8730\n// prototypally inherits from Readable, and then parasitically from                                                    // 8731\n// Writable.                                                                                                           // 8732\n                                                                                                                       // 8733\nmodule.exports = Duplex;                                                                                               // 8734\n                                                                                                                       // 8735\n/*<replacement>*/                                                                                                      // 8736\nvar objectKeys = Object.keys || function (obj) {                                                                       // 8737\n  var keys = [];                                                                                                       // 8738\n  for (var key in obj) keys.push(key);                                                                                 // 8739\n  return keys;                                                                                                         // 8740\n}                                                                                                                      // 8741\n/*</replacement>*/                                                                                                     // 8742\n                                                                                                                       // 8743\n                                                                                                                       // 8744\n/*<replacement>*/                                                                                                      // 8745\nvar util = require('core-util-is');                                                                                    // 8746\nutil.inherits = require('inherits');                                                                                   // 8747\n/*</replacement>*/                                                                                                     // 8748\n                                                                                                                       // 8749\nvar Readable = require('./_stream_readable');                                                                          // 8750\nvar Writable = require('./_stream_writable');                                                                          // 8751\n                                                                                                                       // 8752\nutil.inherits(Duplex, Readable);                                                                                       // 8753\n                                                                                                                       // 8754\nforEach(objectKeys(Writable.prototype), function(method) {                                                             // 8755\n  if (!Duplex.prototype[method])                                                                                       // 8756\n    Duplex.prototype[method] = Writable.prototype[method];                                                             // 8757\n});                                                                                                                    // 8758\n                                                                                                                       // 8759\nfunction Duplex(options) {                                                                                             // 8760\n  if (!(this instanceof Duplex))                                                                                       // 8761\n    return new Duplex(options);                                                                                        // 8762\n                                                                                                                       // 8763\n  Readable.call(this, options);                                                                                        // 8764\n  Writable.call(this, options);                                                                                        // 8765\n                                                                                                                       // 8766\n  if (options && options.readable === false)                                                                           // 8767\n    this.readable = false;                                                                                             // 8768\n                                                                                                                       // 8769\n  if (options && options.writable === false)                                                                           // 8770\n    this.writable = false;                                                                                             // 8771\n                                                                                                                       // 8772\n  this.allowHalfOpen = true;                                                                                           // 8773\n  if (options && options.allowHalfOpen === false)                                                                      // 8774\n    this.allowHalfOpen = false;                                                                                        // 8775\n                                                                                                                       // 8776\n  this.once('end', onend);                                                                                             // 8777\n}                                                                                                                      // 8778\n                                                                                                                       // 8779\n// the no-half-open enforcer                                                                                           // 8780\nfunction onend() {                                                                                                     // 8781\n  // if we allow half-open state, or if the writable side ended,                                                       // 8782\n  // then we're ok.                                                                                                    // 8783\n  if (this.allowHalfOpen || this._writableState.ended)                                                                 // 8784\n    return;                                                                                                            // 8785\n                                                                                                                       // 8786\n  // no more data can be written.                                                                                      // 8787\n  // But allow more writes to happen in this tick.                                                                     // 8788\n  process.nextTick(this.end.bind(this));                                                                               // 8789\n}                                                                                                                      // 8790\n                                                                                                                       // 8791\nfunction forEach (xs, f) {                                                                                             // 8792\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 8793\n    f(xs[i], i);                                                                                                       // 8794\n  }                                                                                                                    // 8795\n}                                                                                                                      // 8796\n                                                                                                                       // 8797\n}).call(this,require('_process'))                                                                                      // 8798\n},{\"./_stream_readable\":55,\"./_stream_writable\":57,\"_process\":51,\"core-util-is\":58,\"inherits\":48}],54:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 8800\n//                                                                                                                     // 8801\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 8802\n// copy of this software and associated documentation files (the                                                       // 8803\n// \"Software\"), to deal in the Software without restriction, including                                                 // 8804\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 8805\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 8806\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8807\n// following conditions:                                                                                               // 8808\n//                                                                                                                     // 8809\n// The above copyright notice and this permission notice shall be included                                             // 8810\n// in all copies or substantial portions of the Software.                                                              // 8811\n//                                                                                                                     // 8812\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 8813\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 8814\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 8815\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 8816\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 8817\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 8818\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 8819\n                                                                                                                       // 8820\n// a passthrough stream.                                                                                               // 8821\n// basically just the most minimal sort of Transform stream.                                                           // 8822\n// Every written chunk gets output as-is.                                                                              // 8823\n                                                                                                                       // 8824\nmodule.exports = PassThrough;                                                                                          // 8825\n                                                                                                                       // 8826\nvar Transform = require('./_stream_transform');                                                                        // 8827\n                                                                                                                       // 8828\n/*<replacement>*/                                                                                                      // 8829\nvar util = require('core-util-is');                                                                                    // 8830\nutil.inherits = require('inherits');                                                                                   // 8831\n/*</replacement>*/                                                                                                     // 8832\n                                                                                                                       // 8833\nutil.inherits(PassThrough, Transform);                                                                                 // 8834\n                                                                                                                       // 8835\nfunction PassThrough(options) {                                                                                        // 8836\n  if (!(this instanceof PassThrough))                                                                                  // 8837\n    return new PassThrough(options);                                                                                   // 8838\n                                                                                                                       // 8839\n  Transform.call(this, options);                                                                                       // 8840\n}                                                                                                                      // 8841\n                                                                                                                       // 8842\nPassThrough.prototype._transform = function(chunk, encoding, cb) {                                                     // 8843\n  cb(null, chunk);                                                                                                     // 8844\n};                                                                                                                     // 8845\n                                                                                                                       // 8846\n},{\"./_stream_transform\":56,\"core-util-is\":58,\"inherits\":48}],55:[function(require,module,exports){                    // 8847\n(function (process){                                                                                                   // 8848\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 8849\n//                                                                                                                     // 8850\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 8851\n// copy of this software and associated documentation files (the                                                       // 8852\n// \"Software\"), to deal in the Software without restriction, including                                                 // 8853\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 8854\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 8855\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8856\n// following conditions:                                                                                               // 8857\n//                                                                                                                     // 8858\n// The above copyright notice and this permission notice shall be included                                             // 8859\n// in all copies or substantial portions of the Software.                                                              // 8860\n//                                                                                                                     // 8861\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 8862\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 8863\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 8864\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 8865\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 8866\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 8867\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 8868\n                                                                                                                       // 8869\nmodule.exports = Readable;                                                                                             // 8870\n                                                                                                                       // 8871\n/*<replacement>*/                                                                                                      // 8872\nvar isArray = require('isarray');                                                                                      // 8873\n/*</replacement>*/                                                                                                     // 8874\n                                                                                                                       // 8875\n                                                                                                                       // 8876\n/*<replacement>*/                                                                                                      // 8877\nvar Buffer = require('buffer').Buffer;                                                                                 // 8878\n/*</replacement>*/                                                                                                     // 8879\n                                                                                                                       // 8880\nReadable.ReadableState = ReadableState;                                                                                // 8881\n                                                                                                                       // 8882\nvar EE = require('events').EventEmitter;                                                                               // 8883\n                                                                                                                       // 8884\n/*<replacement>*/                                                                                                      // 8885\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {                                                    // 8886\n  return emitter.listeners(type).length;                                                                               // 8887\n};                                                                                                                     // 8888\n/*</replacement>*/                                                                                                     // 8889\n                                                                                                                       // 8890\nvar Stream = require('stream');                                                                                        // 8891\n                                                                                                                       // 8892\n/*<replacement>*/                                                                                                      // 8893\nvar util = require('core-util-is');                                                                                    // 8894\nutil.inherits = require('inherits');                                                                                   // 8895\n/*</replacement>*/                                                                                                     // 8896\n                                                                                                                       // 8897\nvar StringDecoder;                                                                                                     // 8898\n                                                                                                                       // 8899\n                                                                                                                       // 8900\n/*<replacement>*/                                                                                                      // 8901\nvar debug = require('util');                                                                                           // 8902\nif (debug && debug.debuglog) {                                                                                         // 8903\n  debug = debug.debuglog('stream');                                                                                    // 8904\n} else {                                                                                                               // 8905\n  debug = function () {};                                                                                              // 8906\n}                                                                                                                      // 8907\n/*</replacement>*/                                                                                                     // 8908\n                                                                                                                       // 8909\n                                                                                                                       // 8910\nutil.inherits(Readable, Stream);                                                                                       // 8911\n                                                                                                                       // 8912\nfunction ReadableState(options, stream) {                                                                              // 8913\n  var Duplex = require('./_stream_duplex');                                                                            // 8914\n                                                                                                                       // 8915\n  options = options || {};                                                                                             // 8916\n                                                                                                                       // 8917\n  // the point at which it stops calling _read() to fill the buffer                                                    // 8918\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"                                              // 8919\n  var hwm = options.highWaterMark;                                                                                     // 8920\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                                // 8921\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                          // 8922\n                                                                                                                       // 8923\n  // cast to ints.                                                                                                     // 8924\n  this.highWaterMark = ~~this.highWaterMark;                                                                           // 8925\n                                                                                                                       // 8926\n  this.buffer = [];                                                                                                    // 8927\n  this.length = 0;                                                                                                     // 8928\n  this.pipes = null;                                                                                                   // 8929\n  this.pipesCount = 0;                                                                                                 // 8930\n  this.flowing = null;                                                                                                 // 8931\n  this.ended = false;                                                                                                  // 8932\n  this.endEmitted = false;                                                                                             // 8933\n  this.reading = false;                                                                                                // 8934\n                                                                                                                       // 8935\n  // a flag to be able to tell if the onwrite cb is called immediately,                                                // 8936\n  // or on a later tick.  We set this to true at first, because any                                                    // 8937\n  // actions that shouldn't happen until \"later\" should generally also                                                 // 8938\n  // not happen before the first write call.                                                                           // 8939\n  this.sync = true;                                                                                                    // 8940\n                                                                                                                       // 8941\n  // whenever we return null, then we set a flag to say                                                                // 8942\n  // that we're awaiting a 'readable' event emission.                                                                  // 8943\n  this.needReadable = false;                                                                                           // 8944\n  this.emittedReadable = false;                                                                                        // 8945\n  this.readableListening = false;                                                                                      // 8946\n                                                                                                                       // 8947\n                                                                                                                       // 8948\n  // object stream flag. Used to make read(n) ignore n and to                                                          // 8949\n  // make all the buffer merging and length checks go away                                                             // 8950\n  this.objectMode = !!options.objectMode;                                                                              // 8951\n                                                                                                                       // 8952\n  if (stream instanceof Duplex)                                                                                        // 8953\n    this.objectMode = this.objectMode || !!options.readableObjectMode;                                                 // 8954\n                                                                                                                       // 8955\n  // Crypto is kind of old and crusty.  Historically, its default string                                               // 8956\n  // encoding is 'binary' so we have to make this configurable.                                                        // 8957\n  // Everything else in the universe uses 'utf8', though.                                                              // 8958\n  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                            // 8959\n                                                                                                                       // 8960\n  // when piping, we only care about 'readable' events that happen                                                     // 8961\n  // after read()ing all the bytes and not getting any pushback.                                                       // 8962\n  this.ranOut = false;                                                                                                 // 8963\n                                                                                                                       // 8964\n  // the number of writers that are awaiting a drain event in .pipe()s                                                 // 8965\n  this.awaitDrain = 0;                                                                                                 // 8966\n                                                                                                                       // 8967\n  // if true, a maybeReadMore has been scheduled                                                                       // 8968\n  this.readingMore = false;                                                                                            // 8969\n                                                                                                                       // 8970\n  this.decoder = null;                                                                                                 // 8971\n  this.encoding = null;                                                                                                // 8972\n  if (options.encoding) {                                                                                              // 8973\n    if (!StringDecoder)                                                                                                // 8974\n      StringDecoder = require('string_decoder/').StringDecoder;                                                        // 8975\n    this.decoder = new StringDecoder(options.encoding);                                                                // 8976\n    this.encoding = options.encoding;                                                                                  // 8977\n  }                                                                                                                    // 8978\n}                                                                                                                      // 8979\n                                                                                                                       // 8980\nfunction Readable(options) {                                                                                           // 8981\n  var Duplex = require('./_stream_duplex');                                                                            // 8982\n                                                                                                                       // 8983\n  if (!(this instanceof Readable))                                                                                     // 8984\n    return new Readable(options);                                                                                      // 8985\n                                                                                                                       // 8986\n  this._readableState = new ReadableState(options, this);                                                              // 8987\n                                                                                                                       // 8988\n  // legacy                                                                                                            // 8989\n  this.readable = true;                                                                                                // 8990\n                                                                                                                       // 8991\n  Stream.call(this);                                                                                                   // 8992\n}                                                                                                                      // 8993\n                                                                                                                       // 8994\n// Manually shove something into the read() buffer.                                                                    // 8995\n// This returns true if the highWaterMark has not been hit yet,                                                        // 8996\n// similar to how Writable.write() returns true if you should                                                          // 8997\n// write() some more.                                                                                                  // 8998\nReadable.prototype.push = function(chunk, encoding) {                                                                  // 8999\n  var state = this._readableState;                                                                                     // 9000\n                                                                                                                       // 9001\n  if (util.isString(chunk) && !state.objectMode) {                                                                     // 9002\n    encoding = encoding || state.defaultEncoding;                                                                      // 9003\n    if (encoding !== state.encoding) {                                                                                 // 9004\n      chunk = new Buffer(chunk, encoding);                                                                             // 9005\n      encoding = '';                                                                                                   // 9006\n    }                                                                                                                  // 9007\n  }                                                                                                                    // 9008\n                                                                                                                       // 9009\n  return readableAddChunk(this, state, chunk, encoding, false);                                                        // 9010\n};                                                                                                                     // 9011\n                                                                                                                       // 9012\n// Unshift should *always* be something directly out of read()                                                         // 9013\nReadable.prototype.unshift = function(chunk) {                                                                         // 9014\n  var state = this._readableState;                                                                                     // 9015\n  return readableAddChunk(this, state, chunk, '', true);                                                               // 9016\n};                                                                                                                     // 9017\n                                                                                                                       // 9018\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {                                                // 9019\n  var er = chunkInvalid(state, chunk);                                                                                 // 9020\n  if (er) {                                                                                                            // 9021\n    stream.emit('error', er);                                                                                          // 9022\n  } else if (util.isNullOrUndefined(chunk)) {                                                                          // 9023\n    state.reading = false;                                                                                             // 9024\n    if (!state.ended)                                                                                                  // 9025\n      onEofChunk(stream, state);                                                                                       // 9026\n  } else if (state.objectMode || chunk && chunk.length > 0) {                                                          // 9027\n    if (state.ended && !addToFront) {                                                                                  // 9028\n      var e = new Error('stream.push() after EOF');                                                                    // 9029\n      stream.emit('error', e);                                                                                         // 9030\n    } else if (state.endEmitted && addToFront) {                                                                       // 9031\n      var e = new Error('stream.unshift() after end event');                                                           // 9032\n      stream.emit('error', e);                                                                                         // 9033\n    } else {                                                                                                           // 9034\n      if (state.decoder && !addToFront && !encoding)                                                                   // 9035\n        chunk = state.decoder.write(chunk);                                                                            // 9036\n                                                                                                                       // 9037\n      if (!addToFront)                                                                                                 // 9038\n        state.reading = false;                                                                                         // 9039\n                                                                                                                       // 9040\n      // if we want the data now, just emit it.                                                                        // 9041\n      if (state.flowing && state.length === 0 && !state.sync) {                                                        // 9042\n        stream.emit('data', chunk);                                                                                    // 9043\n        stream.read(0);                                                                                                // 9044\n      } else {                                                                                                         // 9045\n        // update the buffer info.                                                                                     // 9046\n        state.length += state.objectMode ? 1 : chunk.length;                                                           // 9047\n        if (addToFront)                                                                                                // 9048\n          state.buffer.unshift(chunk);                                                                                 // 9049\n        else                                                                                                           // 9050\n          state.buffer.push(chunk);                                                                                    // 9051\n                                                                                                                       // 9052\n        if (state.needReadable)                                                                                        // 9053\n          emitReadable(stream);                                                                                        // 9054\n      }                                                                                                                // 9055\n                                                                                                                       // 9056\n      maybeReadMore(stream, state);                                                                                    // 9057\n    }                                                                                                                  // 9058\n  } else if (!addToFront) {                                                                                            // 9059\n    state.reading = false;                                                                                             // 9060\n  }                                                                                                                    // 9061\n                                                                                                                       // 9062\n  return needMoreData(state);                                                                                          // 9063\n}                                                                                                                      // 9064\n                                                                                                                       // 9065\n                                                                                                                       // 9066\n                                                                                                                       // 9067\n// if it's past the high water mark, we can push in some more.                                                         // 9068\n// Also, if we have no data yet, we can stand some                                                                     // 9069\n// more bytes.  This is to work around cases where hwm=0,                                                              // 9070\n// such as the repl.  Also, if the push() triggered a                                                                  // 9071\n// readable event, and the user called read(largeNumber) such that                                                     // 9072\n// needReadable was set, then we ought to push more, so that another                                                   // 9073\n// 'readable' event will be triggered.                                                                                 // 9074\nfunction needMoreData(state) {                                                                                         // 9075\n  return !state.ended &&                                                                                               // 9076\n         (state.needReadable ||                                                                                        // 9077\n          state.length < state.highWaterMark ||                                                                        // 9078\n          state.length === 0);                                                                                         // 9079\n}                                                                                                                      // 9080\n                                                                                                                       // 9081\n// backwards compatibility.                                                                                            // 9082\nReadable.prototype.setEncoding = function(enc) {                                                                       // 9083\n  if (!StringDecoder)                                                                                                  // 9084\n    StringDecoder = require('string_decoder/').StringDecoder;                                                          // 9085\n  this._readableState.decoder = new StringDecoder(enc);                                                                // 9086\n  this._readableState.encoding = enc;                                                                                  // 9087\n  return this;                                                                                                         // 9088\n};                                                                                                                     // 9089\n                                                                                                                       // 9090\n// Don't raise the hwm > 128MB                                                                                         // 9091\nvar MAX_HWM = 0x800000;                                                                                                // 9092\nfunction roundUpToNextPowerOf2(n) {                                                                                    // 9093\n  if (n >= MAX_HWM) {                                                                                                  // 9094\n    n = MAX_HWM;                                                                                                       // 9095\n  } else {                                                                                                             // 9096\n    // Get the next highest power of 2                                                                                 // 9097\n    n--;                                                                                                               // 9098\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;                                                                      // 9099\n    n++;                                                                                                               // 9100\n  }                                                                                                                    // 9101\n  return n;                                                                                                            // 9102\n}                                                                                                                      // 9103\n                                                                                                                       // 9104\nfunction howMuchToRead(n, state) {                                                                                     // 9105\n  if (state.length === 0 && state.ended)                                                                               // 9106\n    return 0;                                                                                                          // 9107\n                                                                                                                       // 9108\n  if (state.objectMode)                                                                                                // 9109\n    return n === 0 ? 0 : 1;                                                                                            // 9110\n                                                                                                                       // 9111\n  if (isNaN(n) || util.isNull(n)) {                                                                                    // 9112\n    // only flow one buffer at a time                                                                                  // 9113\n    if (state.flowing && state.buffer.length)                                                                          // 9114\n      return state.buffer[0].length;                                                                                   // 9115\n    else                                                                                                               // 9116\n      return state.length;                                                                                             // 9117\n  }                                                                                                                    // 9118\n                                                                                                                       // 9119\n  if (n <= 0)                                                                                                          // 9120\n    return 0;                                                                                                          // 9121\n                                                                                                                       // 9122\n  // If we're asking for more than the target buffer level,                                                            // 9123\n  // then raise the water mark.  Bump up to the next highest                                                           // 9124\n  // power of 2, to prevent increasing it excessively in tiny                                                          // 9125\n  // amounts.                                                                                                          // 9126\n  if (n > state.highWaterMark)                                                                                         // 9127\n    state.highWaterMark = roundUpToNextPowerOf2(n);                                                                    // 9128\n                                                                                                                       // 9129\n  // don't have that much.  return null, unless we've ended.                                                           // 9130\n  if (n > state.length) {                                                                                              // 9131\n    if (!state.ended) {                                                                                                // 9132\n      state.needReadable = true;                                                                                       // 9133\n      return 0;                                                                                                        // 9134\n    } else                                                                                                             // 9135\n      return state.length;                                                                                             // 9136\n  }                                                                                                                    // 9137\n                                                                                                                       // 9138\n  return n;                                                                                                            // 9139\n}                                                                                                                      // 9140\n                                                                                                                       // 9141\n// you can override either this method, or the async _read(n) below.                                                   // 9142\nReadable.prototype.read = function(n) {                                                                                // 9143\n  debug('read', n);                                                                                                    // 9144\n  var state = this._readableState;                                                                                     // 9145\n  var nOrig = n;                                                                                                       // 9146\n                                                                                                                       // 9147\n  if (!util.isNumber(n) || n > 0)                                                                                      // 9148\n    state.emittedReadable = false;                                                                                     // 9149\n                                                                                                                       // 9150\n  // if we're doing read(0) to trigger a readable event, but we                                                        // 9151\n  // already have a bunch of data in the buffer, then just trigger                                                     // 9152\n  // the 'readable' event and move on.                                                                                 // 9153\n  if (n === 0 &&                                                                                                       // 9154\n      state.needReadable &&                                                                                            // 9155\n      (state.length >= state.highWaterMark || state.ended)) {                                                          // 9156\n    debug('read: emitReadable', state.length, state.ended);                                                            // 9157\n    if (state.length === 0 && state.ended)                                                                             // 9158\n      endReadable(this);                                                                                               // 9159\n    else                                                                                                               // 9160\n      emitReadable(this);                                                                                              // 9161\n    return null;                                                                                                       // 9162\n  }                                                                                                                    // 9163\n                                                                                                                       // 9164\n  n = howMuchToRead(n, state);                                                                                         // 9165\n                                                                                                                       // 9166\n  // if we've ended, and we're now clear, then finish it up.                                                           // 9167\n  if (n === 0 && state.ended) {                                                                                        // 9168\n    if (state.length === 0)                                                                                            // 9169\n      endReadable(this);                                                                                               // 9170\n    return null;                                                                                                       // 9171\n  }                                                                                                                    // 9172\n                                                                                                                       // 9173\n  // All the actual chunk generation logic needs to be                                                                 // 9174\n  // *below* the call to _read.  The reason is that in certain                                                         // 9175\n  // synthetic stream cases, such as passthrough streams, _read                                                        // 9176\n  // may be a completely synchronous operation which may change                                                        // 9177\n  // the state of the read buffer, providing enough data when                                                          // 9178\n  // before there was *not* enough.                                                                                    // 9179\n  //                                                                                                                   // 9180\n  // So, the steps are:                                                                                                // 9181\n  // 1. Figure out what the state of things will be after we do                                                        // 9182\n  // a read from the buffer.                                                                                           // 9183\n  //                                                                                                                   // 9184\n  // 2. If that resulting state will trigger a _read, then call _read.                                                 // 9185\n  // Note that this may be asynchronous, or synchronous.  Yes, it is                                                   // 9186\n  // deeply ugly to write APIs this way, but that still doesn't mean                                                   // 9187\n  // that the Readable class should behave improperly, as streams are                                                  // 9188\n  // designed to be sync/async agnostic.                                                                               // 9189\n  // Take note if the _read call is sync or async (ie, if the read call                                                // 9190\n  // has returned yet), so that we know whether or not it's safe to emit                                               // 9191\n  // 'readable' etc.                                                                                                   // 9192\n  //                                                                                                                   // 9193\n  // 3. Actually pull the requested chunks out of the buffer and return.                                               // 9194\n                                                                                                                       // 9195\n  // if we need a readable event, then we need to do some reading.                                                     // 9196\n  var doRead = state.needReadable;                                                                                     // 9197\n  debug('need readable', doRead);                                                                                      // 9198\n                                                                                                                       // 9199\n  // if we currently have less than the highWaterMark, then also read some                                             // 9200\n  if (state.length === 0 || state.length - n < state.highWaterMark) {                                                  // 9201\n    doRead = true;                                                                                                     // 9202\n    debug('length less than watermark', doRead);                                                                       // 9203\n  }                                                                                                                    // 9204\n                                                                                                                       // 9205\n  // however, if we've ended, then there's no point, and if we're already                                              // 9206\n  // reading, then it's unnecessary.                                                                                   // 9207\n  if (state.ended || state.reading) {                                                                                  // 9208\n    doRead = false;                                                                                                    // 9209\n    debug('reading or ended', doRead);                                                                                 // 9210\n  }                                                                                                                    // 9211\n                                                                                                                       // 9212\n  if (doRead) {                                                                                                        // 9213\n    debug('do read');                                                                                                  // 9214\n    state.reading = true;                                                                                              // 9215\n    state.sync = true;                                                                                                 // 9216\n    // if the length is currently zero, then we *need* a readable event.                                               // 9217\n    if (state.length === 0)                                                                                            // 9218\n      state.needReadable = true;                                                                                       // 9219\n    // call internal read method                                                                                       // 9220\n    this._read(state.highWaterMark);                                                                                   // 9221\n    state.sync = false;                                                                                                // 9222\n  }                                                                                                                    // 9223\n                                                                                                                       // 9224\n  // If _read pushed data synchronously, then `reading` will be false,                                                 // 9225\n  // and we need to re-evaluate how much data we can return to the user.                                               // 9226\n  if (doRead && !state.reading)                                                                                        // 9227\n    n = howMuchToRead(nOrig, state);                                                                                   // 9228\n                                                                                                                       // 9229\n  var ret;                                                                                                             // 9230\n  if (n > 0)                                                                                                           // 9231\n    ret = fromList(n, state);                                                                                          // 9232\n  else                                                                                                                 // 9233\n    ret = null;                                                                                                        // 9234\n                                                                                                                       // 9235\n  if (util.isNull(ret)) {                                                                                              // 9236\n    state.needReadable = true;                                                                                         // 9237\n    n = 0;                                                                                                             // 9238\n  }                                                                                                                    // 9239\n                                                                                                                       // 9240\n  state.length -= n;                                                                                                   // 9241\n                                                                                                                       // 9242\n  // If we have nothing in the buffer, then we want to know                                                            // 9243\n  // as soon as we *do* get something into the buffer.                                                                 // 9244\n  if (state.length === 0 && !state.ended)                                                                              // 9245\n    state.needReadable = true;                                                                                         // 9246\n                                                                                                                       // 9247\n  // If we tried to read() past the EOF, then emit end on the next tick.                                               // 9248\n  if (nOrig !== n && state.ended && state.length === 0)                                                                // 9249\n    endReadable(this);                                                                                                 // 9250\n                                                                                                                       // 9251\n  if (!util.isNull(ret))                                                                                               // 9252\n    this.emit('data', ret);                                                                                            // 9253\n                                                                                                                       // 9254\n  return ret;                                                                                                          // 9255\n};                                                                                                                     // 9256\n                                                                                                                       // 9257\nfunction chunkInvalid(state, chunk) {                                                                                  // 9258\n  var er = null;                                                                                                       // 9259\n  if (!util.isBuffer(chunk) &&                                                                                         // 9260\n      !util.isString(chunk) &&                                                                                         // 9261\n      !util.isNullOrUndefined(chunk) &&                                                                                // 9262\n      !state.objectMode) {                                                                                             // 9263\n    er = new TypeError('Invalid non-string/buffer chunk');                                                             // 9264\n  }                                                                                                                    // 9265\n  return er;                                                                                                           // 9266\n}                                                                                                                      // 9267\n                                                                                                                       // 9268\n                                                                                                                       // 9269\nfunction onEofChunk(stream, state) {                                                                                   // 9270\n  if (state.decoder && !state.ended) {                                                                                 // 9271\n    var chunk = state.decoder.end();                                                                                   // 9272\n    if (chunk && chunk.length) {                                                                                       // 9273\n      state.buffer.push(chunk);                                                                                        // 9274\n      state.length += state.objectMode ? 1 : chunk.length;                                                             // 9275\n    }                                                                                                                  // 9276\n  }                                                                                                                    // 9277\n  state.ended = true;                                                                                                  // 9278\n                                                                                                                       // 9279\n  // emit 'readable' now to make sure it gets picked up.                                                               // 9280\n  emitReadable(stream);                                                                                                // 9281\n}                                                                                                                      // 9282\n                                                                                                                       // 9283\n// Don't emit readable right away in sync mode, because this can trigger                                               // 9284\n// another read() call => stack overflow.  This way, it might trigger                                                  // 9285\n// a nextTick recursion warning, but that's not so bad.                                                                // 9286\nfunction emitReadable(stream) {                                                                                        // 9287\n  var state = stream._readableState;                                                                                   // 9288\n  state.needReadable = false;                                                                                          // 9289\n  if (!state.emittedReadable) {                                                                                        // 9290\n    debug('emitReadable', state.flowing);                                                                              // 9291\n    state.emittedReadable = true;                                                                                      // 9292\n    if (state.sync)                                                                                                    // 9293\n      process.nextTick(function() {                                                                                    // 9294\n        emitReadable_(stream);                                                                                         // 9295\n      });                                                                                                              // 9296\n    else                                                                                                               // 9297\n      emitReadable_(stream);                                                                                           // 9298\n  }                                                                                                                    // 9299\n}                                                                                                                      // 9300\n                                                                                                                       // 9301\nfunction emitReadable_(stream) {                                                                                       // 9302\n  debug('emit readable');                                                                                              // 9303\n  stream.emit('readable');                                                                                             // 9304\n  flow(stream);                                                                                                        // 9305\n}                                                                                                                      // 9306\n                                                                                                                       // 9307\n                                                                                                                       // 9308\n// at this point, the user has presumably seen the 'readable' event,                                                   // 9309\n// and called read() to consume some data.  that may have triggered                                                    // 9310\n// in turn another _read(n) call, in which case reading = true if                                                      // 9311\n// it's in progress.                                                                                                   // 9312\n// However, if we're not ended, or reading, and the length < hwm,                                                      // 9313\n// then go ahead and try to read some more preemptively.                                                               // 9314\nfunction maybeReadMore(stream, state) {                                                                                // 9315\n  if (!state.readingMore) {                                                                                            // 9316\n    state.readingMore = true;                                                                                          // 9317\n    process.nextTick(function() {                                                                                      // 9318\n      maybeReadMore_(stream, state);                                                                                   // 9319\n    });                                                                                                                // 9320\n  }                                                                                                                    // 9321\n}                                                                                                                      // 9322\n                                                                                                                       // 9323\nfunction maybeReadMore_(stream, state) {                                                                               // 9324\n  var len = state.length;                                                                                              // 9325\n  while (!state.reading && !state.flowing && !state.ended &&                                                           // 9326\n         state.length < state.highWaterMark) {                                                                         // 9327\n    debug('maybeReadMore read 0');                                                                                     // 9328\n    stream.read(0);                                                                                                    // 9329\n    if (len === state.length)                                                                                          // 9330\n      // didn't get any data, stop spinning.                                                                           // 9331\n      break;                                                                                                           // 9332\n    else                                                                                                               // 9333\n      len = state.length;                                                                                              // 9334\n  }                                                                                                                    // 9335\n  state.readingMore = false;                                                                                           // 9336\n}                                                                                                                      // 9337\n                                                                                                                       // 9338\n// abstract method.  to be overridden in specific implementation classes.                                              // 9339\n// call cb(er, data) where data is <= n in length.                                                                     // 9340\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat                                                  // 9341\n// arbitrary, and perhaps not very meaningful.                                                                         // 9342\nReadable.prototype._read = function(n) {                                                                               // 9343\n  this.emit('error', new Error('not implemented'));                                                                    // 9344\n};                                                                                                                     // 9345\n                                                                                                                       // 9346\nReadable.prototype.pipe = function(dest, pipeOpts) {                                                                   // 9347\n  var src = this;                                                                                                      // 9348\n  var state = this._readableState;                                                                                     // 9349\n                                                                                                                       // 9350\n  switch (state.pipesCount) {                                                                                          // 9351\n    case 0:                                                                                                            // 9352\n      state.pipes = dest;                                                                                              // 9353\n      break;                                                                                                           // 9354\n    case 1:                                                                                                            // 9355\n      state.pipes = [state.pipes, dest];                                                                               // 9356\n      break;                                                                                                           // 9357\n    default:                                                                                                           // 9358\n      state.pipes.push(dest);                                                                                          // 9359\n      break;                                                                                                           // 9360\n  }                                                                                                                    // 9361\n  state.pipesCount += 1;                                                                                               // 9362\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);                                                          // 9363\n                                                                                                                       // 9364\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&                                                                 // 9365\n              dest !== process.stdout &&                                                                               // 9366\n              dest !== process.stderr;                                                                                 // 9367\n                                                                                                                       // 9368\n  var endFn = doEnd ? onend : cleanup;                                                                                 // 9369\n  if (state.endEmitted)                                                                                                // 9370\n    process.nextTick(endFn);                                                                                           // 9371\n  else                                                                                                                 // 9372\n    src.once('end', endFn);                                                                                            // 9373\n                                                                                                                       // 9374\n  dest.on('unpipe', onunpipe);                                                                                         // 9375\n  function onunpipe(readable) {                                                                                        // 9376\n    debug('onunpipe');                                                                                                 // 9377\n    if (readable === src) {                                                                                            // 9378\n      cleanup();                                                                                                       // 9379\n    }                                                                                                                  // 9380\n  }                                                                                                                    // 9381\n                                                                                                                       // 9382\n  function onend() {                                                                                                   // 9383\n    debug('onend');                                                                                                    // 9384\n    dest.end();                                                                                                        // 9385\n  }                                                                                                                    // 9386\n                                                                                                                       // 9387\n  // when the dest drains, it reduces the awaitDrain counter                                                           // 9388\n  // on the source.  This would be more elegant with a .once()                                                         // 9389\n  // handler in flow(), but adding and removing repeatedly is                                                          // 9390\n  // too slow.                                                                                                         // 9391\n  var ondrain = pipeOnDrain(src);                                                                                      // 9392\n  dest.on('drain', ondrain);                                                                                           // 9393\n                                                                                                                       // 9394\n  function cleanup() {                                                                                                 // 9395\n    debug('cleanup');                                                                                                  // 9396\n    // cleanup event handlers once the pipe is broken                                                                  // 9397\n    dest.removeListener('close', onclose);                                                                             // 9398\n    dest.removeListener('finish', onfinish);                                                                           // 9399\n    dest.removeListener('drain', ondrain);                                                                             // 9400\n    dest.removeListener('error', onerror);                                                                             // 9401\n    dest.removeListener('unpipe', onunpipe);                                                                           // 9402\n    src.removeListener('end', onend);                                                                                  // 9403\n    src.removeListener('end', cleanup);                                                                                // 9404\n    src.removeListener('data', ondata);                                                                                // 9405\n                                                                                                                       // 9406\n    // if the reader is waiting for a drain event from this                                                            // 9407\n    // specific writer, then it would cause it to never start                                                          // 9408\n    // flowing again.                                                                                                  // 9409\n    // So, if this is awaiting a drain, then we just call it now.                                                      // 9410\n    // If we don't know, then assume that we are waiting for one.                                                      // 9411\n    if (state.awaitDrain &&                                                                                            // 9412\n        (!dest._writableState || dest._writableState.needDrain))                                                       // 9413\n      ondrain();                                                                                                       // 9414\n  }                                                                                                                    // 9415\n                                                                                                                       // 9416\n  src.on('data', ondata);                                                                                              // 9417\n  function ondata(chunk) {                                                                                             // 9418\n    debug('ondata');                                                                                                   // 9419\n    var ret = dest.write(chunk);                                                                                       // 9420\n    if (false === ret) {                                                                                               // 9421\n      debug('false write response, pause',                                                                             // 9422\n            src._readableState.awaitDrain);                                                                            // 9423\n      src._readableState.awaitDrain++;                                                                                 // 9424\n      src.pause();                                                                                                     // 9425\n    }                                                                                                                  // 9426\n  }                                                                                                                    // 9427\n                                                                                                                       // 9428\n  // if the dest has an error, then stop piping into it.                                                               // 9429\n  // however, don't suppress the throwing behavior for this.                                                           // 9430\n  function onerror(er) {                                                                                               // 9431\n    debug('onerror', er);                                                                                              // 9432\n    unpipe();                                                                                                          // 9433\n    dest.removeListener('error', onerror);                                                                             // 9434\n    if (EE.listenerCount(dest, 'error') === 0)                                                                         // 9435\n      dest.emit('error', er);                                                                                          // 9436\n  }                                                                                                                    // 9437\n  // This is a brutally ugly hack to make sure that our error handler                                                  // 9438\n  // is attached before any userland ones.  NEVER DO THIS.                                                             // 9439\n  if (!dest._events || !dest._events.error)                                                                            // 9440\n    dest.on('error', onerror);                                                                                         // 9441\n  else if (isArray(dest._events.error))                                                                                // 9442\n    dest._events.error.unshift(onerror);                                                                               // 9443\n  else                                                                                                                 // 9444\n    dest._events.error = [onerror, dest._events.error];                                                                // 9445\n                                                                                                                       // 9446\n                                                                                                                       // 9447\n                                                                                                                       // 9448\n  // Both close and finish should trigger unpipe, but only once.                                                       // 9449\n  function onclose() {                                                                                                 // 9450\n    dest.removeListener('finish', onfinish);                                                                           // 9451\n    unpipe();                                                                                                          // 9452\n  }                                                                                                                    // 9453\n  dest.once('close', onclose);                                                                                         // 9454\n  function onfinish() {                                                                                                // 9455\n    debug('onfinish');                                                                                                 // 9456\n    dest.removeListener('close', onclose);                                                                             // 9457\n    unpipe();                                                                                                          // 9458\n  }                                                                                                                    // 9459\n  dest.once('finish', onfinish);                                                                                       // 9460\n                                                                                                                       // 9461\n  function unpipe() {                                                                                                  // 9462\n    debug('unpipe');                                                                                                   // 9463\n    src.unpipe(dest);                                                                                                  // 9464\n  }                                                                                                                    // 9465\n                                                                                                                       // 9466\n  // tell the dest that it's being piped to                                                                            // 9467\n  dest.emit('pipe', src);                                                                                              // 9468\n                                                                                                                       // 9469\n  // start the flow if it hasn't been started already.                                                                 // 9470\n  if (!state.flowing) {                                                                                                // 9471\n    debug('pipe resume');                                                                                              // 9472\n    src.resume();                                                                                                      // 9473\n  }                                                                                                                    // 9474\n                                                                                                                       // 9475\n  return dest;                                                                                                         // 9476\n};                                                                                                                     // 9477\n                                                                                                                       // 9478\nfunction pipeOnDrain(src) {                                                                                            // 9479\n  return function() {                                                                                                  // 9480\n    var state = src._readableState;                                                                                    // 9481\n    debug('pipeOnDrain', state.awaitDrain);                                                                            // 9482\n    if (state.awaitDrain)                                                                                              // 9483\n      state.awaitDrain--;                                                                                              // 9484\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {                                                     // 9485\n      state.flowing = true;                                                                                            // 9486\n      flow(src);                                                                                                       // 9487\n    }                                                                                                                  // 9488\n  };                                                                                                                   // 9489\n}                                                                                                                      // 9490\n                                                                                                                       // 9491\n                                                                                                                       // 9492\nReadable.prototype.unpipe = function(dest) {                                                                           // 9493\n  var state = this._readableState;                                                                                     // 9494\n                                                                                                                       // 9495\n  // if we're not piping anywhere, then do nothing.                                                                    // 9496\n  if (state.pipesCount === 0)                                                                                          // 9497\n    return this;                                                                                                       // 9498\n                                                                                                                       // 9499\n  // just one destination.  most common case.                                                                          // 9500\n  if (state.pipesCount === 1) {                                                                                        // 9501\n    // passed in one, but it's not the right one.                                                                      // 9502\n    if (dest && dest !== state.pipes)                                                                                  // 9503\n      return this;                                                                                                     // 9504\n                                                                                                                       // 9505\n    if (!dest)                                                                                                         // 9506\n      dest = state.pipes;                                                                                              // 9507\n                                                                                                                       // 9508\n    // got a match.                                                                                                    // 9509\n    state.pipes = null;                                                                                                // 9510\n    state.pipesCount = 0;                                                                                              // 9511\n    state.flowing = false;                                                                                             // 9512\n    if (dest)                                                                                                          // 9513\n      dest.emit('unpipe', this);                                                                                       // 9514\n    return this;                                                                                                       // 9515\n  }                                                                                                                    // 9516\n                                                                                                                       // 9517\n  // slow case. multiple pipe destinations.                                                                            // 9518\n                                                                                                                       // 9519\n  if (!dest) {                                                                                                         // 9520\n    // remove all.                                                                                                     // 9521\n    var dests = state.pipes;                                                                                           // 9522\n    var len = state.pipesCount;                                                                                        // 9523\n    state.pipes = null;                                                                                                // 9524\n    state.pipesCount = 0;                                                                                              // 9525\n    state.flowing = false;                                                                                             // 9526\n                                                                                                                       // 9527\n    for (var i = 0; i < len; i++)                                                                                      // 9528\n      dests[i].emit('unpipe', this);                                                                                   // 9529\n    return this;                                                                                                       // 9530\n  }                                                                                                                    // 9531\n                                                                                                                       // 9532\n  // try to find the right one.                                                                                        // 9533\n  var i = indexOf(state.pipes, dest);                                                                                  // 9534\n  if (i === -1)                                                                                                        // 9535\n    return this;                                                                                                       // 9536\n                                                                                                                       // 9537\n  state.pipes.splice(i, 1);                                                                                            // 9538\n  state.pipesCount -= 1;                                                                                               // 9539\n  if (state.pipesCount === 1)                                                                                          // 9540\n    state.pipes = state.pipes[0];                                                                                      // 9541\n                                                                                                                       // 9542\n  dest.emit('unpipe', this);                                                                                           // 9543\n                                                                                                                       // 9544\n  return this;                                                                                                         // 9545\n};                                                                                                                     // 9546\n                                                                                                                       // 9547\n// set up data events if they are asked for                                                                            // 9548\n// Ensure readable listeners eventually get something                                                                  // 9549\nReadable.prototype.on = function(ev, fn) {                                                                             // 9550\n  var res = Stream.prototype.on.call(this, ev, fn);                                                                    // 9551\n                                                                                                                       // 9552\n  // If listening to data, and it has not explicitly been paused,                                                      // 9553\n  // then call resume to start the flow of data on the next tick.                                                      // 9554\n  if (ev === 'data' && false !== this._readableState.flowing) {                                                        // 9555\n    this.resume();                                                                                                     // 9556\n  }                                                                                                                    // 9557\n                                                                                                                       // 9558\n  if (ev === 'readable' && this.readable) {                                                                            // 9559\n    var state = this._readableState;                                                                                   // 9560\n    if (!state.readableListening) {                                                                                    // 9561\n      state.readableListening = true;                                                                                  // 9562\n      state.emittedReadable = false;                                                                                   // 9563\n      state.needReadable = true;                                                                                       // 9564\n      if (!state.reading) {                                                                                            // 9565\n        var self = this;                                                                                               // 9566\n        process.nextTick(function() {                                                                                  // 9567\n          debug('readable nexttick read 0');                                                                           // 9568\n          self.read(0);                                                                                                // 9569\n        });                                                                                                            // 9570\n      } else if (state.length) {                                                                                       // 9571\n        emitReadable(this, state);                                                                                     // 9572\n      }                                                                                                                // 9573\n    }                                                                                                                  // 9574\n  }                                                                                                                    // 9575\n                                                                                                                       // 9576\n  return res;                                                                                                          // 9577\n};                                                                                                                     // 9578\nReadable.prototype.addListener = Readable.prototype.on;                                                                // 9579\n                                                                                                                       // 9580\n// pause() and resume() are remnants of the legacy readable stream API                                                 // 9581\n// If the user uses them, then switch into old mode.                                                                   // 9582\nReadable.prototype.resume = function() {                                                                               // 9583\n  var state = this._readableState;                                                                                     // 9584\n  if (!state.flowing) {                                                                                                // 9585\n    debug('resume');                                                                                                   // 9586\n    state.flowing = true;                                                                                              // 9587\n    if (!state.reading) {                                                                                              // 9588\n      debug('resume read 0');                                                                                          // 9589\n      this.read(0);                                                                                                    // 9590\n    }                                                                                                                  // 9591\n    resume(this, state);                                                                                               // 9592\n  }                                                                                                                    // 9593\n  return this;                                                                                                         // 9594\n};                                                                                                                     // 9595\n                                                                                                                       // 9596\nfunction resume(stream, state) {                                                                                       // 9597\n  if (!state.resumeScheduled) {                                                                                        // 9598\n    state.resumeScheduled = true;                                                                                      // 9599\n    process.nextTick(function() {                                                                                      // 9600\n      resume_(stream, state);                                                                                          // 9601\n    });                                                                                                                // 9602\n  }                                                                                                                    // 9603\n}                                                                                                                      // 9604\n                                                                                                                       // 9605\nfunction resume_(stream, state) {                                                                                      // 9606\n  state.resumeScheduled = false;                                                                                       // 9607\n  stream.emit('resume');                                                                                               // 9608\n  flow(stream);                                                                                                        // 9609\n  if (state.flowing && !state.reading)                                                                                 // 9610\n    stream.read(0);                                                                                                    // 9611\n}                                                                                                                      // 9612\n                                                                                                                       // 9613\nReadable.prototype.pause = function() {                                                                                // 9614\n  debug('call pause flowing=%j', this._readableState.flowing);                                                         // 9615\n  if (false !== this._readableState.flowing) {                                                                         // 9616\n    debug('pause');                                                                                                    // 9617\n    this._readableState.flowing = false;                                                                               // 9618\n    this.emit('pause');                                                                                                // 9619\n  }                                                                                                                    // 9620\n  return this;                                                                                                         // 9621\n};                                                                                                                     // 9622\n                                                                                                                       // 9623\nfunction flow(stream) {                                                                                                // 9624\n  var state = stream._readableState;                                                                                   // 9625\n  debug('flow', state.flowing);                                                                                        // 9626\n  if (state.flowing) {                                                                                                 // 9627\n    do {                                                                                                               // 9628\n      var chunk = stream.read();                                                                                       // 9629\n    } while (null !== chunk && state.flowing);                                                                         // 9630\n  }                                                                                                                    // 9631\n}                                                                                                                      // 9632\n                                                                                                                       // 9633\n// wrap an old-style stream as the async data source.                                                                  // 9634\n// This is *not* part of the readable stream interface.                                                                // 9635\n// It is an ugly unfortunate mess of history.                                                                          // 9636\nReadable.prototype.wrap = function(stream) {                                                                           // 9637\n  var state = this._readableState;                                                                                     // 9638\n  var paused = false;                                                                                                  // 9639\n                                                                                                                       // 9640\n  var self = this;                                                                                                     // 9641\n  stream.on('end', function() {                                                                                        // 9642\n    debug('wrapped end');                                                                                              // 9643\n    if (state.decoder && !state.ended) {                                                                               // 9644\n      var chunk = state.decoder.end();                                                                                 // 9645\n      if (chunk && chunk.length)                                                                                       // 9646\n        self.push(chunk);                                                                                              // 9647\n    }                                                                                                                  // 9648\n                                                                                                                       // 9649\n    self.push(null);                                                                                                   // 9650\n  });                                                                                                                  // 9651\n                                                                                                                       // 9652\n  stream.on('data', function(chunk) {                                                                                  // 9653\n    debug('wrapped data');                                                                                             // 9654\n    if (state.decoder)                                                                                                 // 9655\n      chunk = state.decoder.write(chunk);                                                                              // 9656\n    if (!chunk || !state.objectMode && !chunk.length)                                                                  // 9657\n      return;                                                                                                          // 9658\n                                                                                                                       // 9659\n    var ret = self.push(chunk);                                                                                        // 9660\n    if (!ret) {                                                                                                        // 9661\n      paused = true;                                                                                                   // 9662\n      stream.pause();                                                                                                  // 9663\n    }                                                                                                                  // 9664\n  });                                                                                                                  // 9665\n                                                                                                                       // 9666\n  // proxy all the other methods.                                                                                      // 9667\n  // important when wrapping filters and duplexes.                                                                     // 9668\n  for (var i in stream) {                                                                                              // 9669\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {                                                     // 9670\n      this[i] = function(method) { return function() {                                                                 // 9671\n        return stream[method].apply(stream, arguments);                                                                // 9672\n      }}(i);                                                                                                           // 9673\n    }                                                                                                                  // 9674\n  }                                                                                                                    // 9675\n                                                                                                                       // 9676\n  // proxy certain important events.                                                                                   // 9677\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];                                                       // 9678\n  forEach(events, function(ev) {                                                                                       // 9679\n    stream.on(ev, self.emit.bind(self, ev));                                                                           // 9680\n  });                                                                                                                  // 9681\n                                                                                                                       // 9682\n  // when we try to consume some more bytes, simply unpause the                                                        // 9683\n  // underlying stream.                                                                                                // 9684\n  self._read = function(n) {                                                                                           // 9685\n    debug('wrapped _read', n);                                                                                         // 9686\n    if (paused) {                                                                                                      // 9687\n      paused = false;                                                                                                  // 9688\n      stream.resume();                                                                                                 // 9689\n    }                                                                                                                  // 9690\n  };                                                                                                                   // 9691\n                                                                                                                       // 9692\n  return self;                                                                                                         // 9693\n};                                                                                                                     // 9694\n                                                                                                                       // 9695\n                                                                                                                       // 9696\n                                                                                                                       // 9697\n// exposed for testing purposes only.                                                                                  // 9698\nReadable._fromList = fromList;                                                                                         // 9699\n                                                                                                                       // 9700\n// Pluck off n bytes from an array of buffers.                                                                         // 9701\n// Length is the combined lengths of all the buffers in the list.                                                      // 9702\nfunction fromList(n, state) {                                                                                          // 9703\n  var list = state.buffer;                                                                                             // 9704\n  var length = state.length;                                                                                           // 9705\n  var stringMode = !!state.decoder;                                                                                    // 9706\n  var objectMode = !!state.objectMode;                                                                                 // 9707\n  var ret;                                                                                                             // 9708\n                                                                                                                       // 9709\n  // nothing in the list, definitely empty.                                                                            // 9710\n  if (list.length === 0)                                                                                               // 9711\n    return null;                                                                                                       // 9712\n                                                                                                                       // 9713\n  if (length === 0)                                                                                                    // 9714\n    ret = null;                                                                                                        // 9715\n  else if (objectMode)                                                                                                 // 9716\n    ret = list.shift();                                                                                                // 9717\n  else if (!n || n >= length) {                                                                                        // 9718\n    // read it all, truncate the array.                                                                                // 9719\n    if (stringMode)                                                                                                    // 9720\n      ret = list.join('');                                                                                             // 9721\n    else                                                                                                               // 9722\n      ret = Buffer.concat(list, length);                                                                               // 9723\n    list.length = 0;                                                                                                   // 9724\n  } else {                                                                                                             // 9725\n    // read just some of it.                                                                                           // 9726\n    if (n < list[0].length) {                                                                                          // 9727\n      // just take a part of the first list item.                                                                      // 9728\n      // slice is the same for buffers and strings.                                                                    // 9729\n      var buf = list[0];                                                                                               // 9730\n      ret = buf.slice(0, n);                                                                                           // 9731\n      list[0] = buf.slice(n);                                                                                          // 9732\n    } else if (n === list[0].length) {                                                                                 // 9733\n      // first list is a perfect match                                                                                 // 9734\n      ret = list.shift();                                                                                              // 9735\n    } else {                                                                                                           // 9736\n      // complex case.                                                                                                 // 9737\n      // we have enough to cover it, but it spans past the first buffer.                                               // 9738\n      if (stringMode)                                                                                                  // 9739\n        ret = '';                                                                                                      // 9740\n      else                                                                                                             // 9741\n        ret = new Buffer(n);                                                                                           // 9742\n                                                                                                                       // 9743\n      var c = 0;                                                                                                       // 9744\n      for (var i = 0, l = list.length; i < l && c < n; i++) {                                                          // 9745\n        var buf = list[0];                                                                                             // 9746\n        var cpy = Math.min(n - c, buf.length);                                                                         // 9747\n                                                                                                                       // 9748\n        if (stringMode)                                                                                                // 9749\n          ret += buf.slice(0, cpy);                                                                                    // 9750\n        else                                                                                                           // 9751\n          buf.copy(ret, c, 0, cpy);                                                                                    // 9752\n                                                                                                                       // 9753\n        if (cpy < buf.length)                                                                                          // 9754\n          list[0] = buf.slice(cpy);                                                                                    // 9755\n        else                                                                                                           // 9756\n          list.shift();                                                                                                // 9757\n                                                                                                                       // 9758\n        c += cpy;                                                                                                      // 9759\n      }                                                                                                                // 9760\n    }                                                                                                                  // 9761\n  }                                                                                                                    // 9762\n                                                                                                                       // 9763\n  return ret;                                                                                                          // 9764\n}                                                                                                                      // 9765\n                                                                                                                       // 9766\nfunction endReadable(stream) {                                                                                         // 9767\n  var state = stream._readableState;                                                                                   // 9768\n                                                                                                                       // 9769\n  // If we get here before consuming all the bytes, then that is a                                                     // 9770\n  // bug in node.  Should never happen.                                                                                // 9771\n  if (state.length > 0)                                                                                                // 9772\n    throw new Error('endReadable called on non-empty stream');                                                         // 9773\n                                                                                                                       // 9774\n  if (!state.endEmitted) {                                                                                             // 9775\n    state.ended = true;                                                                                                // 9776\n    process.nextTick(function() {                                                                                      // 9777\n      // Check that we didn't get one last unshift.                                                                    // 9778\n      if (!state.endEmitted && state.length === 0) {                                                                   // 9779\n        state.endEmitted = true;                                                                                       // 9780\n        stream.readable = false;                                                                                       // 9781\n        stream.emit('end');                                                                                            // 9782\n      }                                                                                                                // 9783\n    });                                                                                                                // 9784\n  }                                                                                                                    // 9785\n}                                                                                                                      // 9786\n                                                                                                                       // 9787\nfunction forEach (xs, f) {                                                                                             // 9788\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 9789\n    f(xs[i], i);                                                                                                       // 9790\n  }                                                                                                                    // 9791\n}                                                                                                                      // 9792\n                                                                                                                       // 9793\nfunction indexOf (xs, x) {                                                                                             // 9794\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 9795\n    if (xs[i] === x) return i;                                                                                         // 9796\n  }                                                                                                                    // 9797\n  return -1;                                                                                                           // 9798\n}                                                                                                                      // 9799\n                                                                                                                       // 9800\n}).call(this,require('_process'))                                                                                      // 9801\n},{\"./_stream_duplex\":53,\"_process\":51,\"buffer\":43,\"core-util-is\":58,\"events\":47,\"inherits\":48,\"isarray\":49,\"stream\":63,\"string_decoder/\":64,\"util\":42}],56:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 9803\n//                                                                                                                     // 9804\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 9805\n// copy of this software and associated documentation files (the                                                       // 9806\n// \"Software\"), to deal in the Software without restriction, including                                                 // 9807\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 9808\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 9809\n// persons to whom the Software is furnished to do so, subject to the                                                  // 9810\n// following conditions:                                                                                               // 9811\n//                                                                                                                     // 9812\n// The above copyright notice and this permission notice shall be included                                             // 9813\n// in all copies or substantial portions of the Software.                                                              // 9814\n//                                                                                                                     // 9815\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 9816\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 9817\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 9818\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 9819\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 9820\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 9821\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 9822\n                                                                                                                       // 9823\n                                                                                                                       // 9824\n// a transform stream is a readable/writable stream where you do                                                       // 9825\n// something with the data.  Sometimes it's called a \"filter\",                                                         // 9826\n// but that's not a great name for it, since that implies a thing where                                                // 9827\n// some bits pass through, and others are simply ignored.  (That would                                                 // 9828\n// be a valid example of a transform, of course.)                                                                      // 9829\n//                                                                                                                     // 9830\n// While the output is causally related to the input, it's not a                                                       // 9831\n// necessarily symmetric or synchronous transformation.  For example,                                                  // 9832\n// a zlib stream might take multiple plain-text writes(), and then                                                     // 9833\n// emit a single compressed chunk some time in the future.                                                             // 9834\n//                                                                                                                     // 9835\n// Here's how this works:                                                                                              // 9836\n//                                                                                                                     // 9837\n// The Transform stream has all the aspects of the readable and writable                                               // 9838\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)                                                 // 9839\n// internally, and returns false if there's a lot of pending writes                                                    // 9840\n// buffered up.  When you call read(), that calls _read(n) until                                                       // 9841\n// there's enough pending readable data buffered up.                                                                   // 9842\n//                                                                                                                     // 9843\n// In a transform stream, the written data is placed in a buffer.  When                                                // 9844\n// _read(n) is called, it transforms the queued up data, calling the                                                   // 9845\n// buffered _write cb's as it consumes chunks.  If consuming a single                                                  // 9846\n// written chunk would result in multiple output chunks, then the first                                                // 9847\n// outputted bit calls the readcb, and subsequent chunks just go into                                                  // 9848\n// the read buffer, and will cause it to emit 'readable' if necessary.                                                 // 9849\n//                                                                                                                     // 9850\n// This way, back-pressure is actually determined by the reading side,                                                 // 9851\n// since _read has to be called to start processing a new chunk.  However,                                             // 9852\n// a pathological inflate type of transform can cause excessive buffering                                              // 9853\n// here.  For example, imagine a stream where every byte of input is                                                   // 9854\n// interpreted as an integer from 0-255, and then results in that many                                                 // 9855\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in                                                 // 9856\n// 1kb of data being output.  In this case, you could write a very small                                               // 9857\n// amount of input, and end up with a very large amount of output.  In                                                 // 9858\n// such a pathological inflating mechanism, there'd be no way to tell                                                  // 9859\n// the system to stop doing the transform.  A single 4MB write could                                                   // 9860\n// cause the system to run out of memory.                                                                              // 9861\n//                                                                                                                     // 9862\n// However, even in such a pathological case, only a single written chunk                                              // 9863\n// would be consumed, and then the rest would wait (un-transformed) until                                              // 9864\n// the results of the previous transformed chunk were consumed.                                                        // 9865\n                                                                                                                       // 9866\nmodule.exports = Transform;                                                                                            // 9867\n                                                                                                                       // 9868\nvar Duplex = require('./_stream_duplex');                                                                              // 9869\n                                                                                                                       // 9870\n/*<replacement>*/                                                                                                      // 9871\nvar util = require('core-util-is');                                                                                    // 9872\nutil.inherits = require('inherits');                                                                                   // 9873\n/*</replacement>*/                                                                                                     // 9874\n                                                                                                                       // 9875\nutil.inherits(Transform, Duplex);                                                                                      // 9876\n                                                                                                                       // 9877\n                                                                                                                       // 9878\nfunction TransformState(options, stream) {                                                                             // 9879\n  this.afterTransform = function(er, data) {                                                                           // 9880\n    return afterTransform(stream, er, data);                                                                           // 9881\n  };                                                                                                                   // 9882\n                                                                                                                       // 9883\n  this.needTransform = false;                                                                                          // 9884\n  this.transforming = false;                                                                                           // 9885\n  this.writecb = null;                                                                                                 // 9886\n  this.writechunk = null;                                                                                              // 9887\n}                                                                                                                      // 9888\n                                                                                                                       // 9889\nfunction afterTransform(stream, er, data) {                                                                            // 9890\n  var ts = stream._transformState;                                                                                     // 9891\n  ts.transforming = false;                                                                                             // 9892\n                                                                                                                       // 9893\n  var cb = ts.writecb;                                                                                                 // 9894\n                                                                                                                       // 9895\n  if (!cb)                                                                                                             // 9896\n    return stream.emit('error', new Error('no writecb in Transform class'));                                           // 9897\n                                                                                                                       // 9898\n  ts.writechunk = null;                                                                                                // 9899\n  ts.writecb = null;                                                                                                   // 9900\n                                                                                                                       // 9901\n  if (!util.isNullOrUndefined(data))                                                                                   // 9902\n    stream.push(data);                                                                                                 // 9903\n                                                                                                                       // 9904\n  if (cb)                                                                                                              // 9905\n    cb(er);                                                                                                            // 9906\n                                                                                                                       // 9907\n  var rs = stream._readableState;                                                                                      // 9908\n  rs.reading = false;                                                                                                  // 9909\n  if (rs.needReadable || rs.length < rs.highWaterMark) {                                                               // 9910\n    stream._read(rs.highWaterMark);                                                                                    // 9911\n  }                                                                                                                    // 9912\n}                                                                                                                      // 9913\n                                                                                                                       // 9914\n                                                                                                                       // 9915\nfunction Transform(options) {                                                                                          // 9916\n  if (!(this instanceof Transform))                                                                                    // 9917\n    return new Transform(options);                                                                                     // 9918\n                                                                                                                       // 9919\n  Duplex.call(this, options);                                                                                          // 9920\n                                                                                                                       // 9921\n  this._transformState = new TransformState(options, this);                                                            // 9922\n                                                                                                                       // 9923\n  // when the writable side finishes, then flush out anything remaining.                                               // 9924\n  var stream = this;                                                                                                   // 9925\n                                                                                                                       // 9926\n  // start out asking for a readable event once data is transformed.                                                   // 9927\n  this._readableState.needReadable = true;                                                                             // 9928\n                                                                                                                       // 9929\n  // we have implemented the _read method, and done the other things                                                   // 9930\n  // that Readable wants before the first _read call, so unset the                                                     // 9931\n  // sync guard flag.                                                                                                  // 9932\n  this._readableState.sync = false;                                                                                    // 9933\n                                                                                                                       // 9934\n  this.once('prefinish', function() {                                                                                  // 9935\n    if (util.isFunction(this._flush))                                                                                  // 9936\n      this._flush(function(er) {                                                                                       // 9937\n        done(stream, er);                                                                                              // 9938\n      });                                                                                                              // 9939\n    else                                                                                                               // 9940\n      done(stream);                                                                                                    // 9941\n  });                                                                                                                  // 9942\n}                                                                                                                      // 9943\n                                                                                                                       // 9944\nTransform.prototype.push = function(chunk, encoding) {                                                                 // 9945\n  this._transformState.needTransform = false;                                                                          // 9946\n  return Duplex.prototype.push.call(this, chunk, encoding);                                                            // 9947\n};                                                                                                                     // 9948\n                                                                                                                       // 9949\n// This is the part where you do stuff!                                                                                // 9950\n// override this function in implementation classes.                                                                   // 9951\n// 'chunk' is an input chunk.                                                                                          // 9952\n//                                                                                                                     // 9953\n// Call `push(newChunk)` to pass along transformed output                                                              // 9954\n// to the readable side.  You may call 'push' zero or more times.                                                      // 9955\n//                                                                                                                     // 9956\n// Call `cb(err)` when you are done with this chunk.  If you pass                                                      // 9957\n// an error, then that'll put the hurt on the whole operation.  If you                                                 // 9958\n// never call cb(), then you'll never get another chunk.                                                               // 9959\nTransform.prototype._transform = function(chunk, encoding, cb) {                                                       // 9960\n  throw new Error('not implemented');                                                                                  // 9961\n};                                                                                                                     // 9962\n                                                                                                                       // 9963\nTransform.prototype._write = function(chunk, encoding, cb) {                                                           // 9964\n  var ts = this._transformState;                                                                                       // 9965\n  ts.writecb = cb;                                                                                                     // 9966\n  ts.writechunk = chunk;                                                                                               // 9967\n  ts.writeencoding = encoding;                                                                                         // 9968\n  if (!ts.transforming) {                                                                                              // 9969\n    var rs = this._readableState;                                                                                      // 9970\n    if (ts.needTransform ||                                                                                            // 9971\n        rs.needReadable ||                                                                                             // 9972\n        rs.length < rs.highWaterMark)                                                                                  // 9973\n      this._read(rs.highWaterMark);                                                                                    // 9974\n  }                                                                                                                    // 9975\n};                                                                                                                     // 9976\n                                                                                                                       // 9977\n// Doesn't matter what the args are here.                                                                              // 9978\n// _transform does all the work.                                                                                       // 9979\n// That we got here means that the readable side wants more data.                                                      // 9980\nTransform.prototype._read = function(n) {                                                                              // 9981\n  var ts = this._transformState;                                                                                       // 9982\n                                                                                                                       // 9983\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {                                                 // 9984\n    ts.transforming = true;                                                                                            // 9985\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);                                               // 9986\n  } else {                                                                                                             // 9987\n    // mark that we need a transform, so that any data that comes in                                                   // 9988\n    // will get processed, now that we've asked for it.                                                                // 9989\n    ts.needTransform = true;                                                                                           // 9990\n  }                                                                                                                    // 9991\n};                                                                                                                     // 9992\n                                                                                                                       // 9993\n                                                                                                                       // 9994\nfunction done(stream, er) {                                                                                            // 9995\n  if (er)                                                                                                              // 9996\n    return stream.emit('error', er);                                                                                   // 9997\n                                                                                                                       // 9998\n  // if there's nothing in the write buffer, then that means                                                           // 9999\n  // that nothing more will ever be provided                                                                           // 10000\n  var ws = stream._writableState;                                                                                      // 10001\n  var ts = stream._transformState;                                                                                     // 10002\n                                                                                                                       // 10003\n  if (ws.length)                                                                                                       // 10004\n    throw new Error('calling transform done when ws.length != 0');                                                     // 10005\n                                                                                                                       // 10006\n  if (ts.transforming)                                                                                                 // 10007\n    throw new Error('calling transform done when still transforming');                                                 // 10008\n                                                                                                                       // 10009\n  return stream.push(null);                                                                                            // 10010\n}                                                                                                                      // 10011\n                                                                                                                       // 10012\n},{\"./_stream_duplex\":53,\"core-util-is\":58,\"inherits\":48}],57:[function(require,module,exports){                       // 10013\n(function (process){                                                                                                   // 10014\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 10015\n//                                                                                                                     // 10016\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 10017\n// copy of this software and associated documentation files (the                                                       // 10018\n// \"Software\"), to deal in the Software without restriction, including                                                 // 10019\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 10020\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 10021\n// persons to whom the Software is furnished to do so, subject to the                                                  // 10022\n// following conditions:                                                                                               // 10023\n//                                                                                                                     // 10024\n// The above copyright notice and this permission notice shall be included                                             // 10025\n// in all copies or substantial portions of the Software.                                                              // 10026\n//                                                                                                                     // 10027\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 10028\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 10029\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 10030\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 10031\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 10032\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 10033\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 10034\n                                                                                                                       // 10035\n// A bit simpler than readable streams.                                                                                // 10036\n// Implement an async ._write(chunk, cb), and it'll handle all                                                         // 10037\n// the drain event emission and buffering.                                                                             // 10038\n                                                                                                                       // 10039\nmodule.exports = Writable;                                                                                             // 10040\n                                                                                                                       // 10041\n/*<replacement>*/                                                                                                      // 10042\nvar Buffer = require('buffer').Buffer;                                                                                 // 10043\n/*</replacement>*/                                                                                                     // 10044\n                                                                                                                       // 10045\nWritable.WritableState = WritableState;                                                                                // 10046\n                                                                                                                       // 10047\n                                                                                                                       // 10048\n/*<replacement>*/                                                                                                      // 10049\nvar util = require('core-util-is');                                                                                    // 10050\nutil.inherits = require('inherits');                                                                                   // 10051\n/*</replacement>*/                                                                                                     // 10052\n                                                                                                                       // 10053\nvar Stream = require('stream');                                                                                        // 10054\n                                                                                                                       // 10055\nutil.inherits(Writable, Stream);                                                                                       // 10056\n                                                                                                                       // 10057\nfunction WriteReq(chunk, encoding, cb) {                                                                               // 10058\n  this.chunk = chunk;                                                                                                  // 10059\n  this.encoding = encoding;                                                                                            // 10060\n  this.callback = cb;                                                                                                  // 10061\n}                                                                                                                      // 10062\n                                                                                                                       // 10063\nfunction WritableState(options, stream) {                                                                              // 10064\n  var Duplex = require('./_stream_duplex');                                                                            // 10065\n                                                                                                                       // 10066\n  options = options || {};                                                                                             // 10067\n                                                                                                                       // 10068\n  // the point at which write() starts returning false                                                                 // 10069\n  // Note: 0 is a valid value, means that we always return false if                                                    // 10070\n  // the entire buffer is not flushed immediately on write()                                                           // 10071\n  var hwm = options.highWaterMark;                                                                                     // 10072\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                                // 10073\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                          // 10074\n                                                                                                                       // 10075\n  // object stream flag to indicate whether or not this stream                                                         // 10076\n  // contains buffers or objects.                                                                                      // 10077\n  this.objectMode = !!options.objectMode;                                                                              // 10078\n                                                                                                                       // 10079\n  if (stream instanceof Duplex)                                                                                        // 10080\n    this.objectMode = this.objectMode || !!options.writableObjectMode;                                                 // 10081\n                                                                                                                       // 10082\n  // cast to ints.                                                                                                     // 10083\n  this.highWaterMark = ~~this.highWaterMark;                                                                           // 10084\n                                                                                                                       // 10085\n  this.needDrain = false;                                                                                              // 10086\n  // at the start of calling end()                                                                                     // 10087\n  this.ending = false;                                                                                                 // 10088\n  // when end() has been called, and returned                                                                          // 10089\n  this.ended = false;                                                                                                  // 10090\n  // when 'finish' is emitted                                                                                          // 10091\n  this.finished = false;                                                                                               // 10092\n                                                                                                                       // 10093\n  // should we decode strings into buffers before passing to _write?                                                   // 10094\n  // this is here so that some node-core streams can optimize string                                                   // 10095\n  // handling at a lower level.                                                                                        // 10096\n  var noDecode = options.decodeStrings === false;                                                                      // 10097\n  this.decodeStrings = !noDecode;                                                                                      // 10098\n                                                                                                                       // 10099\n  // Crypto is kind of old and crusty.  Historically, its default string                                               // 10100\n  // encoding is 'binary' so we have to make this configurable.                                                        // 10101\n  // Everything else in the universe uses 'utf8', though.                                                              // 10102\n  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                            // 10103\n                                                                                                                       // 10104\n  // not an actual buffer we keep track of, but a measurement                                                          // 10105\n  // of how much we're waiting to get pushed to some underlying                                                        // 10106\n  // socket or file.                                                                                                   // 10107\n  this.length = 0;                                                                                                     // 10108\n                                                                                                                       // 10109\n  // a flag to see when we're in the middle of a write.                                                                // 10110\n  this.writing = false;                                                                                                // 10111\n                                                                                                                       // 10112\n  // when true all writes will be buffered until .uncork() call                                                        // 10113\n  this.corked = 0;                                                                                                     // 10114\n                                                                                                                       // 10115\n  // a flag to be able to tell if the onwrite cb is called immediately,                                                // 10116\n  // or on a later tick.  We set this to true at first, because any                                                    // 10117\n  // actions that shouldn't happen until \"later\" should generally also                                                 // 10118\n  // not happen before the first write call.                                                                           // 10119\n  this.sync = true;                                                                                                    // 10120\n                                                                                                                       // 10121\n  // a flag to know if we're processing previously buffered items, which                                               // 10122\n  // may call the _write() callback in the same tick, so that we don't                                                 // 10123\n  // end up in an overlapped onwrite situation.                                                                        // 10124\n  this.bufferProcessing = false;                                                                                       // 10125\n                                                                                                                       // 10126\n  // the callback that's passed to _write(chunk,cb)                                                                    // 10127\n  this.onwrite = function(er) {                                                                                        // 10128\n    onwrite(stream, er);                                                                                               // 10129\n  };                                                                                                                   // 10130\n                                                                                                                       // 10131\n  // the callback that the user supplies to write(chunk,encoding,cb)                                                   // 10132\n  this.writecb = null;                                                                                                 // 10133\n                                                                                                                       // 10134\n  // the amount that is being written when _write is called.                                                           // 10135\n  this.writelen = 0;                                                                                                   // 10136\n                                                                                                                       // 10137\n  this.buffer = [];                                                                                                    // 10138\n                                                                                                                       // 10139\n  // number of pending user-supplied write callbacks                                                                   // 10140\n  // this must be 0 before 'finish' can be emitted                                                                     // 10141\n  this.pendingcb = 0;                                                                                                  // 10142\n                                                                                                                       // 10143\n  // emit prefinish if the only thing we're waiting for is _write cbs                                                  // 10144\n  // This is relevant for synchronous Transform streams                                                                // 10145\n  this.prefinished = false;                                                                                            // 10146\n                                                                                                                       // 10147\n  // True if the error was already emitted and should not be thrown again                                              // 10148\n  this.errorEmitted = false;                                                                                           // 10149\n}                                                                                                                      // 10150\n                                                                                                                       // 10151\nfunction Writable(options) {                                                                                           // 10152\n  var Duplex = require('./_stream_duplex');                                                                            // 10153\n                                                                                                                       // 10154\n  // Writable ctor is applied to Duplexes, though they're not                                                          // 10155\n  // instanceof Writable, they're instanceof Readable.                                                                 // 10156\n  if (!(this instanceof Writable) && !(this instanceof Duplex))                                                        // 10157\n    return new Writable(options);                                                                                      // 10158\n                                                                                                                       // 10159\n  this._writableState = new WritableState(options, this);                                                              // 10160\n                                                                                                                       // 10161\n  // legacy.                                                                                                           // 10162\n  this.writable = true;                                                                                                // 10163\n                                                                                                                       // 10164\n  Stream.call(this);                                                                                                   // 10165\n}                                                                                                                      // 10166\n                                                                                                                       // 10167\n// Otherwise people can pipe Writable streams, which is just wrong.                                                    // 10168\nWritable.prototype.pipe = function() {                                                                                 // 10169\n  this.emit('error', new Error('Cannot pipe. Not readable.'));                                                         // 10170\n};                                                                                                                     // 10171\n                                                                                                                       // 10172\n                                                                                                                       // 10173\nfunction writeAfterEnd(stream, state, cb) {                                                                            // 10174\n  var er = new Error('write after end');                                                                               // 10175\n  // TODO: defer error events consistently everywhere, not just the cb                                                 // 10176\n  stream.emit('error', er);                                                                                            // 10177\n  process.nextTick(function() {                                                                                        // 10178\n    cb(er);                                                                                                            // 10179\n  });                                                                                                                  // 10180\n}                                                                                                                      // 10181\n                                                                                                                       // 10182\n// If we get something that is not a buffer, string, null, or undefined,                                               // 10183\n// and we're not in objectMode, then that's an error.                                                                  // 10184\n// Otherwise stream chunks are all considered to be of length=1, and the                                               // 10185\n// watermarks determine how many objects to keep in the buffer, rather than                                            // 10186\n// how many bytes or characters.                                                                                       // 10187\nfunction validChunk(stream, state, chunk, cb) {                                                                        // 10188\n  var valid = true;                                                                                                    // 10189\n  if (!util.isBuffer(chunk) &&                                                                                         // 10190\n      !util.isString(chunk) &&                                                                                         // 10191\n      !util.isNullOrUndefined(chunk) &&                                                                                // 10192\n      !state.objectMode) {                                                                                             // 10193\n    var er = new TypeError('Invalid non-string/buffer chunk');                                                         // 10194\n    stream.emit('error', er);                                                                                          // 10195\n    process.nextTick(function() {                                                                                      // 10196\n      cb(er);                                                                                                          // 10197\n    });                                                                                                                // 10198\n    valid = false;                                                                                                     // 10199\n  }                                                                                                                    // 10200\n  return valid;                                                                                                        // 10201\n}                                                                                                                      // 10202\n                                                                                                                       // 10203\nWritable.prototype.write = function(chunk, encoding, cb) {                                                             // 10204\n  var state = this._writableState;                                                                                     // 10205\n  var ret = false;                                                                                                     // 10206\n                                                                                                                       // 10207\n  if (util.isFunction(encoding)) {                                                                                     // 10208\n    cb = encoding;                                                                                                     // 10209\n    encoding = null;                                                                                                   // 10210\n  }                                                                                                                    // 10211\n                                                                                                                       // 10212\n  if (util.isBuffer(chunk))                                                                                            // 10213\n    encoding = 'buffer';                                                                                               // 10214\n  else if (!encoding)                                                                                                  // 10215\n    encoding = state.defaultEncoding;                                                                                  // 10216\n                                                                                                                       // 10217\n  if (!util.isFunction(cb))                                                                                            // 10218\n    cb = function() {};                                                                                                // 10219\n                                                                                                                       // 10220\n  if (state.ended)                                                                                                     // 10221\n    writeAfterEnd(this, state, cb);                                                                                    // 10222\n  else if (validChunk(this, state, chunk, cb)) {                                                                       // 10223\n    state.pendingcb++;                                                                                                 // 10224\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);                                                             // 10225\n  }                                                                                                                    // 10226\n                                                                                                                       // 10227\n  return ret;                                                                                                          // 10228\n};                                                                                                                     // 10229\n                                                                                                                       // 10230\nWritable.prototype.cork = function() {                                                                                 // 10231\n  var state = this._writableState;                                                                                     // 10232\n                                                                                                                       // 10233\n  state.corked++;                                                                                                      // 10234\n};                                                                                                                     // 10235\n                                                                                                                       // 10236\nWritable.prototype.uncork = function() {                                                                               // 10237\n  var state = this._writableState;                                                                                     // 10238\n                                                                                                                       // 10239\n  if (state.corked) {                                                                                                  // 10240\n    state.corked--;                                                                                                    // 10241\n                                                                                                                       // 10242\n    if (!state.writing &&                                                                                              // 10243\n        !state.corked &&                                                                                               // 10244\n        !state.finished &&                                                                                             // 10245\n        !state.bufferProcessing &&                                                                                     // 10246\n        state.buffer.length)                                                                                           // 10247\n      clearBuffer(this, state);                                                                                        // 10248\n  }                                                                                                                    // 10249\n};                                                                                                                     // 10250\n                                                                                                                       // 10251\nfunction decodeChunk(state, chunk, encoding) {                                                                         // 10252\n  if (!state.objectMode &&                                                                                             // 10253\n      state.decodeStrings !== false &&                                                                                 // 10254\n      util.isString(chunk)) {                                                                                          // 10255\n    chunk = new Buffer(chunk, encoding);                                                                               // 10256\n  }                                                                                                                    // 10257\n  return chunk;                                                                                                        // 10258\n}                                                                                                                      // 10259\n                                                                                                                       // 10260\n// if we're already writing something, then just put this                                                              // 10261\n// in the queue, and wait our turn.  Otherwise, call _write                                                            // 10262\n// If we return false, then we need a drain event, so set that flag.                                                   // 10263\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {                                                           // 10264\n  chunk = decodeChunk(state, chunk, encoding);                                                                         // 10265\n  if (util.isBuffer(chunk))                                                                                            // 10266\n    encoding = 'buffer';                                                                                               // 10267\n  var len = state.objectMode ? 1 : chunk.length;                                                                       // 10268\n                                                                                                                       // 10269\n  state.length += len;                                                                                                 // 10270\n                                                                                                                       // 10271\n  var ret = state.length < state.highWaterMark;                                                                        // 10272\n  // we must ensure that previous needDrain will not be reset to false.                                                // 10273\n  if (!ret)                                                                                                            // 10274\n    state.needDrain = true;                                                                                            // 10275\n                                                                                                                       // 10276\n  if (state.writing || state.corked)                                                                                   // 10277\n    state.buffer.push(new WriteReq(chunk, encoding, cb));                                                              // 10278\n  else                                                                                                                 // 10279\n    doWrite(stream, state, false, len, chunk, encoding, cb);                                                           // 10280\n                                                                                                                       // 10281\n  return ret;                                                                                                          // 10282\n}                                                                                                                      // 10283\n                                                                                                                       // 10284\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {                                                    // 10285\n  state.writelen = len;                                                                                                // 10286\n  state.writecb = cb;                                                                                                  // 10287\n  state.writing = true;                                                                                                // 10288\n  state.sync = true;                                                                                                   // 10289\n  if (writev)                                                                                                          // 10290\n    stream._writev(chunk, state.onwrite);                                                                              // 10291\n  else                                                                                                                 // 10292\n    stream._write(chunk, encoding, state.onwrite);                                                                     // 10293\n  state.sync = false;                                                                                                  // 10294\n}                                                                                                                      // 10295\n                                                                                                                       // 10296\nfunction onwriteError(stream, state, sync, er, cb) {                                                                   // 10297\n  if (sync)                                                                                                            // 10298\n    process.nextTick(function() {                                                                                      // 10299\n      state.pendingcb--;                                                                                               // 10300\n      cb(er);                                                                                                          // 10301\n    });                                                                                                                // 10302\n  else {                                                                                                               // 10303\n    state.pendingcb--;                                                                                                 // 10304\n    cb(er);                                                                                                            // 10305\n  }                                                                                                                    // 10306\n                                                                                                                       // 10307\n  stream._writableState.errorEmitted = true;                                                                           // 10308\n  stream.emit('error', er);                                                                                            // 10309\n}                                                                                                                      // 10310\n                                                                                                                       // 10311\nfunction onwriteStateUpdate(state) {                                                                                   // 10312\n  state.writing = false;                                                                                               // 10313\n  state.writecb = null;                                                                                                // 10314\n  state.length -= state.writelen;                                                                                      // 10315\n  state.writelen = 0;                                                                                                  // 10316\n}                                                                                                                      // 10317\n                                                                                                                       // 10318\nfunction onwrite(stream, er) {                                                                                         // 10319\n  var state = stream._writableState;                                                                                   // 10320\n  var sync = state.sync;                                                                                               // 10321\n  var cb = state.writecb;                                                                                              // 10322\n                                                                                                                       // 10323\n  onwriteStateUpdate(state);                                                                                           // 10324\n                                                                                                                       // 10325\n  if (er)                                                                                                              // 10326\n    onwriteError(stream, state, sync, er, cb);                                                                         // 10327\n  else {                                                                                                               // 10328\n    // Check if we're actually ready to finish, but don't emit yet                                                     // 10329\n    var finished = needFinish(stream, state);                                                                          // 10330\n                                                                                                                       // 10331\n    if (!finished &&                                                                                                   // 10332\n        !state.corked &&                                                                                               // 10333\n        !state.bufferProcessing &&                                                                                     // 10334\n        state.buffer.length) {                                                                                         // 10335\n      clearBuffer(stream, state);                                                                                      // 10336\n    }                                                                                                                  // 10337\n                                                                                                                       // 10338\n    if (sync) {                                                                                                        // 10339\n      process.nextTick(function() {                                                                                    // 10340\n        afterWrite(stream, state, finished, cb);                                                                       // 10341\n      });                                                                                                              // 10342\n    } else {                                                                                                           // 10343\n      afterWrite(stream, state, finished, cb);                                                                         // 10344\n    }                                                                                                                  // 10345\n  }                                                                                                                    // 10346\n}                                                                                                                      // 10347\n                                                                                                                       // 10348\nfunction afterWrite(stream, state, finished, cb) {                                                                     // 10349\n  if (!finished)                                                                                                       // 10350\n    onwriteDrain(stream, state);                                                                                       // 10351\n  state.pendingcb--;                                                                                                   // 10352\n  cb();                                                                                                                // 10353\n  finishMaybe(stream, state);                                                                                          // 10354\n}                                                                                                                      // 10355\n                                                                                                                       // 10356\n// Must force callback to be called on nextTick, so that we don't                                                      // 10357\n// emit 'drain' before the write() consumer gets the 'false' return                                                    // 10358\n// value, and has a chance to attach a 'drain' listener.                                                               // 10359\nfunction onwriteDrain(stream, state) {                                                                                 // 10360\n  if (state.length === 0 && state.needDrain) {                                                                         // 10361\n    state.needDrain = false;                                                                                           // 10362\n    stream.emit('drain');                                                                                              // 10363\n  }                                                                                                                    // 10364\n}                                                                                                                      // 10365\n                                                                                                                       // 10366\n                                                                                                                       // 10367\n// if there's something in the buffer waiting, then process it                                                         // 10368\nfunction clearBuffer(stream, state) {                                                                                  // 10369\n  state.bufferProcessing = true;                                                                                       // 10370\n                                                                                                                       // 10371\n  if (stream._writev && state.buffer.length > 1) {                                                                     // 10372\n    // Fast case, write everything using _writev()                                                                     // 10373\n    var cbs = [];                                                                                                      // 10374\n    for (var c = 0; c < state.buffer.length; c++)                                                                      // 10375\n      cbs.push(state.buffer[c].callback);                                                                              // 10376\n                                                                                                                       // 10377\n    // count the one we are adding, as well.                                                                           // 10378\n    // TODO(isaacs) clean this up                                                                                      // 10379\n    state.pendingcb++;                                                                                                 // 10380\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {                                       // 10381\n      for (var i = 0; i < cbs.length; i++) {                                                                           // 10382\n        state.pendingcb--;                                                                                             // 10383\n        cbs[i](err);                                                                                                   // 10384\n      }                                                                                                                // 10385\n    });                                                                                                                // 10386\n                                                                                                                       // 10387\n    // Clear buffer                                                                                                    // 10388\n    state.buffer = [];                                                                                                 // 10389\n  } else {                                                                                                             // 10390\n    // Slow case, write chunks one-by-one                                                                              // 10391\n    for (var c = 0; c < state.buffer.length; c++) {                                                                    // 10392\n      var entry = state.buffer[c];                                                                                     // 10393\n      var chunk = entry.chunk;                                                                                         // 10394\n      var encoding = entry.encoding;                                                                                   // 10395\n      var cb = entry.callback;                                                                                         // 10396\n      var len = state.objectMode ? 1 : chunk.length;                                                                   // 10397\n                                                                                                                       // 10398\n      doWrite(stream, state, false, len, chunk, encoding, cb);                                                         // 10399\n                                                                                                                       // 10400\n      // if we didn't call the onwrite immediately, then                                                               // 10401\n      // it means that we need to wait until it does.                                                                  // 10402\n      // also, that means that the chunk and cb are currently                                                          // 10403\n      // being processed, so move the buffer counter past them.                                                        // 10404\n      if (state.writing) {                                                                                             // 10405\n        c++;                                                                                                           // 10406\n        break;                                                                                                         // 10407\n      }                                                                                                                // 10408\n    }                                                                                                                  // 10409\n                                                                                                                       // 10410\n    if (c < state.buffer.length)                                                                                       // 10411\n      state.buffer = state.buffer.slice(c);                                                                            // 10412\n    else                                                                                                               // 10413\n      state.buffer.length = 0;                                                                                         // 10414\n  }                                                                                                                    // 10415\n                                                                                                                       // 10416\n  state.bufferProcessing = false;                                                                                      // 10417\n}                                                                                                                      // 10418\n                                                                                                                       // 10419\nWritable.prototype._write = function(chunk, encoding, cb) {                                                            // 10420\n  cb(new Error('not implemented'));                                                                                    // 10421\n                                                                                                                       // 10422\n};                                                                                                                     // 10423\n                                                                                                                       // 10424\nWritable.prototype._writev = null;                                                                                     // 10425\n                                                                                                                       // 10426\nWritable.prototype.end = function(chunk, encoding, cb) {                                                               // 10427\n  var state = this._writableState;                                                                                     // 10428\n                                                                                                                       // 10429\n  if (util.isFunction(chunk)) {                                                                                        // 10430\n    cb = chunk;                                                                                                        // 10431\n    chunk = null;                                                                                                      // 10432\n    encoding = null;                                                                                                   // 10433\n  } else if (util.isFunction(encoding)) {                                                                              // 10434\n    cb = encoding;                                                                                                     // 10435\n    encoding = null;                                                                                                   // 10436\n  }                                                                                                                    // 10437\n                                                                                                                       // 10438\n  if (!util.isNullOrUndefined(chunk))                                                                                  // 10439\n    this.write(chunk, encoding);                                                                                       // 10440\n                                                                                                                       // 10441\n  // .end() fully uncorks                                                                                              // 10442\n  if (state.corked) {                                                                                                  // 10443\n    state.corked = 1;                                                                                                  // 10444\n    this.uncork();                                                                                                     // 10445\n  }                                                                                                                    // 10446\n                                                                                                                       // 10447\n  // ignore unnecessary end() calls.                                                                                   // 10448\n  if (!state.ending && !state.finished)                                                                                // 10449\n    endWritable(this, state, cb);                                                                                      // 10450\n};                                                                                                                     // 10451\n                                                                                                                       // 10452\n                                                                                                                       // 10453\nfunction needFinish(stream, state) {                                                                                   // 10454\n  return (state.ending &&                                                                                              // 10455\n          state.length === 0 &&                                                                                        // 10456\n          !state.finished &&                                                                                           // 10457\n          !state.writing);                                                                                             // 10458\n}                                                                                                                      // 10459\n                                                                                                                       // 10460\nfunction prefinish(stream, state) {                                                                                    // 10461\n  if (!state.prefinished) {                                                                                            // 10462\n    state.prefinished = true;                                                                                          // 10463\n    stream.emit('prefinish');                                                                                          // 10464\n  }                                                                                                                    // 10465\n}                                                                                                                      // 10466\n                                                                                                                       // 10467\nfunction finishMaybe(stream, state) {                                                                                  // 10468\n  var need = needFinish(stream, state);                                                                                // 10469\n  if (need) {                                                                                                          // 10470\n    if (state.pendingcb === 0) {                                                                                       // 10471\n      prefinish(stream, state);                                                                                        // 10472\n      state.finished = true;                                                                                           // 10473\n      stream.emit('finish');                                                                                           // 10474\n    } else                                                                                                             // 10475\n      prefinish(stream, state);                                                                                        // 10476\n  }                                                                                                                    // 10477\n  return need;                                                                                                         // 10478\n}                                                                                                                      // 10479\n                                                                                                                       // 10480\nfunction endWritable(stream, state, cb) {                                                                              // 10481\n  state.ending = true;                                                                                                 // 10482\n  finishMaybe(stream, state);                                                                                          // 10483\n  if (cb) {                                                                                                            // 10484\n    if (state.finished)                                                                                                // 10485\n      process.nextTick(cb);                                                                                            // 10486\n    else                                                                                                               // 10487\n      stream.once('finish', cb);                                                                                       // 10488\n  }                                                                                                                    // 10489\n  state.ended = true;                                                                                                  // 10490\n}                                                                                                                      // 10491\n                                                                                                                       // 10492\n}).call(this,require('_process'))                                                                                      // 10493\n},{\"./_stream_duplex\":53,\"_process\":51,\"buffer\":43,\"core-util-is\":58,\"inherits\":48,\"stream\":63}],58:[function(require,module,exports){\n(function (Buffer){                                                                                                    // 10495\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 10496\n//                                                                                                                     // 10497\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 10498\n// copy of this software and associated documentation files (the                                                       // 10499\n// \"Software\"), to deal in the Software without restriction, including                                                 // 10500\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 10501\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 10502\n// persons to whom the Software is furnished to do so, subject to the                                                  // 10503\n// following conditions:                                                                                               // 10504\n//                                                                                                                     // 10505\n// The above copyright notice and this permission notice shall be included                                             // 10506\n// in all copies or substantial portions of the Software.                                                              // 10507\n//                                                                                                                     // 10508\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 10509\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 10510\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 10511\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 10512\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 10513\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 10514\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 10515\n                                                                                                                       // 10516\n// NOTE: These type checking functions intentionally don't use `instanceof`                                            // 10517\n// because it is fragile and can be easily faked with `Object.create()`.                                               // 10518\nfunction isArray(ar) {                                                                                                 // 10519\n  return Array.isArray(ar);                                                                                            // 10520\n}                                                                                                                      // 10521\nexports.isArray = isArray;                                                                                             // 10522\n                                                                                                                       // 10523\nfunction isBoolean(arg) {                                                                                              // 10524\n  return typeof arg === 'boolean';                                                                                     // 10525\n}                                                                                                                      // 10526\nexports.isBoolean = isBoolean;                                                                                         // 10527\n                                                                                                                       // 10528\nfunction isNull(arg) {                                                                                                 // 10529\n  return arg === null;                                                                                                 // 10530\n}                                                                                                                      // 10531\nexports.isNull = isNull;                                                                                               // 10532\n                                                                                                                       // 10533\nfunction isNullOrUndefined(arg) {                                                                                      // 10534\n  return arg == null;                                                                                                  // 10535\n}                                                                                                                      // 10536\nexports.isNullOrUndefined = isNullOrUndefined;                                                                         // 10537\n                                                                                                                       // 10538\nfunction isNumber(arg) {                                                                                               // 10539\n  return typeof arg === 'number';                                                                                      // 10540\n}                                                                                                                      // 10541\nexports.isNumber = isNumber;                                                                                           // 10542\n                                                                                                                       // 10543\nfunction isString(arg) {                                                                                               // 10544\n  return typeof arg === 'string';                                                                                      // 10545\n}                                                                                                                      // 10546\nexports.isString = isString;                                                                                           // 10547\n                                                                                                                       // 10548\nfunction isSymbol(arg) {                                                                                               // 10549\n  return typeof arg === 'symbol';                                                                                      // 10550\n}                                                                                                                      // 10551\nexports.isSymbol = isSymbol;                                                                                           // 10552\n                                                                                                                       // 10553\nfunction isUndefined(arg) {                                                                                            // 10554\n  return arg === void 0;                                                                                               // 10555\n}                                                                                                                      // 10556\nexports.isUndefined = isUndefined;                                                                                     // 10557\n                                                                                                                       // 10558\nfunction isRegExp(re) {                                                                                                // 10559\n  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 10560\n}                                                                                                                      // 10561\nexports.isRegExp = isRegExp;                                                                                           // 10562\n                                                                                                                       // 10563\nfunction isObject(arg) {                                                                                               // 10564\n  return typeof arg === 'object' && arg !== null;                                                                      // 10565\n}                                                                                                                      // 10566\nexports.isObject = isObject;                                                                                           // 10567\n                                                                                                                       // 10568\nfunction isDate(d) {                                                                                                   // 10569\n  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 10570\n}                                                                                                                      // 10571\nexports.isDate = isDate;                                                                                               // 10572\n                                                                                                                       // 10573\nfunction isError(e) {                                                                                                  // 10574\n  return isObject(e) &&                                                                                                // 10575\n      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 10576\n}                                                                                                                      // 10577\nexports.isError = isError;                                                                                             // 10578\n                                                                                                                       // 10579\nfunction isFunction(arg) {                                                                                             // 10580\n  return typeof arg === 'function';                                                                                    // 10581\n}                                                                                                                      // 10582\nexports.isFunction = isFunction;                                                                                       // 10583\n                                                                                                                       // 10584\nfunction isPrimitive(arg) {                                                                                            // 10585\n  return arg === null ||                                                                                               // 10586\n         typeof arg === 'boolean' ||                                                                                   // 10587\n         typeof arg === 'number' ||                                                                                    // 10588\n         typeof arg === 'string' ||                                                                                    // 10589\n         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 10590\n         typeof arg === 'undefined';                                                                                   // 10591\n}                                                                                                                      // 10592\nexports.isPrimitive = isPrimitive;                                                                                     // 10593\n                                                                                                                       // 10594\nfunction isBuffer(arg) {                                                                                               // 10595\n  return Buffer.isBuffer(arg);                                                                                         // 10596\n}                                                                                                                      // 10597\nexports.isBuffer = isBuffer;                                                                                           // 10598\n                                                                                                                       // 10599\nfunction objectToString(o) {                                                                                           // 10600\n  return Object.prototype.toString.call(o);                                                                            // 10601\n}                                                                                                                      // 10602\n}).call(this,require(\"buffer\").Buffer)                                                                                 // 10603\n},{\"buffer\":43}],59:[function(require,module,exports){                                                                 // 10604\nmodule.exports = require(\"./lib/_stream_passthrough.js\")                                                               // 10605\n                                                                                                                       // 10606\n},{\"./lib/_stream_passthrough.js\":54}],60:[function(require,module,exports){                                           // 10607\nexports = module.exports = require('./lib/_stream_readable.js');                                                       // 10608\nexports.Stream = require('stream');                                                                                    // 10609\nexports.Readable = exports;                                                                                            // 10610\nexports.Writable = require('./lib/_stream_writable.js');                                                               // 10611\nexports.Duplex = require('./lib/_stream_duplex.js');                                                                   // 10612\nexports.Transform = require('./lib/_stream_transform.js');                                                             // 10613\nexports.PassThrough = require('./lib/_stream_passthrough.js');                                                         // 10614\n                                                                                                                       // 10615\n},{\"./lib/_stream_duplex.js\":53,\"./lib/_stream_passthrough.js\":54,\"./lib/_stream_readable.js\":55,\"./lib/_stream_transform.js\":56,\"./lib/_stream_writable.js\":57,\"stream\":63}],61:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")                                                                 // 10617\n                                                                                                                       // 10618\n},{\"./lib/_stream_transform.js\":56}],62:[function(require,module,exports){                                             // 10619\nmodule.exports = require(\"./lib/_stream_writable.js\")                                                                  // 10620\n                                                                                                                       // 10621\n},{\"./lib/_stream_writable.js\":57}],63:[function(require,module,exports){                                              // 10622\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 10623\n//                                                                                                                     // 10624\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 10625\n// copy of this software and associated documentation files (the                                                       // 10626\n// \"Software\"), to deal in the Software without restriction, including                                                 // 10627\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 10628\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 10629\n// persons to whom the Software is furnished to do so, subject to the                                                  // 10630\n// following conditions:                                                                                               // 10631\n//                                                                                                                     // 10632\n// The above copyright notice and this permission notice shall be included                                             // 10633\n// in all copies or substantial portions of the Software.                                                              // 10634\n//                                                                                                                     // 10635\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 10636\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 10637\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 10638\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 10639\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 10640\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 10641\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 10642\n                                                                                                                       // 10643\nmodule.exports = Stream;                                                                                               // 10644\n                                                                                                                       // 10645\nvar EE = require('events').EventEmitter;                                                                               // 10646\nvar inherits = require('inherits');                                                                                    // 10647\n                                                                                                                       // 10648\ninherits(Stream, EE);                                                                                                  // 10649\nStream.Readable = require('readable-stream/readable.js');                                                              // 10650\nStream.Writable = require('readable-stream/writable.js');                                                              // 10651\nStream.Duplex = require('readable-stream/duplex.js');                                                                  // 10652\nStream.Transform = require('readable-stream/transform.js');                                                            // 10653\nStream.PassThrough = require('readable-stream/passthrough.js');                                                        // 10654\n                                                                                                                       // 10655\n// Backwards-compat with node 0.4.x                                                                                    // 10656\nStream.Stream = Stream;                                                                                                // 10657\n                                                                                                                       // 10658\n                                                                                                                       // 10659\n                                                                                                                       // 10660\n// old-style streams.  Note that the pipe method (the only relevant                                                    // 10661\n// part of this class) is overridden in the Readable class.                                                            // 10662\n                                                                                                                       // 10663\nfunction Stream() {                                                                                                    // 10664\n  EE.call(this);                                                                                                       // 10665\n}                                                                                                                      // 10666\n                                                                                                                       // 10667\nStream.prototype.pipe = function(dest, options) {                                                                      // 10668\n  var source = this;                                                                                                   // 10669\n                                                                                                                       // 10670\n  function ondata(chunk) {                                                                                             // 10671\n    if (dest.writable) {                                                                                               // 10672\n      if (false === dest.write(chunk) && source.pause) {                                                               // 10673\n        source.pause();                                                                                                // 10674\n      }                                                                                                                // 10675\n    }                                                                                                                  // 10676\n  }                                                                                                                    // 10677\n                                                                                                                       // 10678\n  source.on('data', ondata);                                                                                           // 10679\n                                                                                                                       // 10680\n  function ondrain() {                                                                                                 // 10681\n    if (source.readable && source.resume) {                                                                            // 10682\n      source.resume();                                                                                                 // 10683\n    }                                                                                                                  // 10684\n  }                                                                                                                    // 10685\n                                                                                                                       // 10686\n  dest.on('drain', ondrain);                                                                                           // 10687\n                                                                                                                       // 10688\n  // If the 'end' option is not supplied, dest.end() will be called when                                               // 10689\n  // source gets the 'end' or 'close' events.  Only dest.end() once.                                                   // 10690\n  if (!dest._isStdio && (!options || options.end !== false)) {                                                         // 10691\n    source.on('end', onend);                                                                                           // 10692\n    source.on('close', onclose);                                                                                       // 10693\n  }                                                                                                                    // 10694\n                                                                                                                       // 10695\n  var didOnEnd = false;                                                                                                // 10696\n  function onend() {                                                                                                   // 10697\n    if (didOnEnd) return;                                                                                              // 10698\n    didOnEnd = true;                                                                                                   // 10699\n                                                                                                                       // 10700\n    dest.end();                                                                                                        // 10701\n  }                                                                                                                    // 10702\n                                                                                                                       // 10703\n                                                                                                                       // 10704\n  function onclose() {                                                                                                 // 10705\n    if (didOnEnd) return;                                                                                              // 10706\n    didOnEnd = true;                                                                                                   // 10707\n                                                                                                                       // 10708\n    if (typeof dest.destroy === 'function') dest.destroy();                                                            // 10709\n  }                                                                                                                    // 10710\n                                                                                                                       // 10711\n  // don't leave dangling pipes when there are errors.                                                                 // 10712\n  function onerror(er) {                                                                                               // 10713\n    cleanup();                                                                                                         // 10714\n    if (EE.listenerCount(this, 'error') === 0) {                                                                       // 10715\n      throw er; // Unhandled stream error in pipe.                                                                     // 10716\n    }                                                                                                                  // 10717\n  }                                                                                                                    // 10718\n                                                                                                                       // 10719\n  source.on('error', onerror);                                                                                         // 10720\n  dest.on('error', onerror);                                                                                           // 10721\n                                                                                                                       // 10722\n  // remove all the event listeners that were added.                                                                   // 10723\n  function cleanup() {                                                                                                 // 10724\n    source.removeListener('data', ondata);                                                                             // 10725\n    dest.removeListener('drain', ondrain);                                                                             // 10726\n                                                                                                                       // 10727\n    source.removeListener('end', onend);                                                                               // 10728\n    source.removeListener('close', onclose);                                                                           // 10729\n                                                                                                                       // 10730\n    source.removeListener('error', onerror);                                                                           // 10731\n    dest.removeListener('error', onerror);                                                                             // 10732\n                                                                                                                       // 10733\n    source.removeListener('end', cleanup);                                                                             // 10734\n    source.removeListener('close', cleanup);                                                                           // 10735\n                                                                                                                       // 10736\n    dest.removeListener('close', cleanup);                                                                             // 10737\n  }                                                                                                                    // 10738\n                                                                                                                       // 10739\n  source.on('end', cleanup);                                                                                           // 10740\n  source.on('close', cleanup);                                                                                         // 10741\n                                                                                                                       // 10742\n  dest.on('close', cleanup);                                                                                           // 10743\n                                                                                                                       // 10744\n  dest.emit('pipe', source);                                                                                           // 10745\n                                                                                                                       // 10746\n  // Allow for unix-like usage: A.pipe(B).pipe(C)                                                                      // 10747\n  return dest;                                                                                                         // 10748\n};                                                                                                                     // 10749\n                                                                                                                       // 10750\n},{\"events\":47,\"inherits\":48,\"readable-stream/duplex.js\":52,\"readable-stream/passthrough.js\":59,\"readable-stream/readable.js\":60,\"readable-stream/transform.js\":61,\"readable-stream/writable.js\":62}],64:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 10752\n//                                                                                                                     // 10753\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 10754\n// copy of this software and associated documentation files (the                                                       // 10755\n// \"Software\"), to deal in the Software without restriction, including                                                 // 10756\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 10757\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 10758\n// persons to whom the Software is furnished to do so, subject to the                                                  // 10759\n// following conditions:                                                                                               // 10760\n//                                                                                                                     // 10761\n// The above copyright notice and this permission notice shall be included                                             // 10762\n// in all copies or substantial portions of the Software.                                                              // 10763\n//                                                                                                                     // 10764\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 10765\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 10766\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 10767\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 10768\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 10769\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 10770\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 10771\n                                                                                                                       // 10772\nvar Buffer = require('buffer').Buffer;                                                                                 // 10773\n                                                                                                                       // 10774\nvar isBufferEncoding = Buffer.isEncoding                                                                               // 10775\n  || function(encoding) {                                                                                              // 10776\n       switch (encoding && encoding.toLowerCase()) {                                                                   // 10777\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;                                                                                        // 10779\n       }                                                                                                               // 10780\n     }                                                                                                                 // 10781\n                                                                                                                       // 10782\n                                                                                                                       // 10783\nfunction assertEncoding(encoding) {                                                                                    // 10784\n  if (encoding && !isBufferEncoding(encoding)) {                                                                       // 10785\n    throw new Error('Unknown encoding: ' + encoding);                                                                  // 10786\n  }                                                                                                                    // 10787\n}                                                                                                                      // 10788\n                                                                                                                       // 10789\n// StringDecoder provides an interface for efficiently splitting a series of                                           // 10790\n// buffers into a series of JS strings without breaking apart multi-byte                                               // 10791\n// characters. CESU-8 is handled as part of the UTF-8 encoding.                                                        // 10792\n//                                                                                                                     // 10793\n// @TODO Handling all encodings inside a single object makes it very difficult                                         // 10794\n// to reason about this code, so it should be split up in the future.                                                  // 10795\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code                                        // 10796\n// points as used by CESU-8.                                                                                           // 10797\nvar StringDecoder = exports.StringDecoder = function(encoding) {                                                       // 10798\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');                                              // 10799\n  assertEncoding(encoding);                                                                                            // 10800\n  switch (this.encoding) {                                                                                             // 10801\n    case 'utf8':                                                                                                       // 10802\n      // CESU-8 represents each of Surrogate Pair by 3-bytes                                                           // 10803\n      this.surrogateSize = 3;                                                                                          // 10804\n      break;                                                                                                           // 10805\n    case 'ucs2':                                                                                                       // 10806\n    case 'utf16le':                                                                                                    // 10807\n      // UTF-16 represents each of Surrogate Pair by 2-bytes                                                           // 10808\n      this.surrogateSize = 2;                                                                                          // 10809\n      this.detectIncompleteChar = utf16DetectIncompleteChar;                                                           // 10810\n      break;                                                                                                           // 10811\n    case 'base64':                                                                                                     // 10812\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.                                                    // 10813\n      this.surrogateSize = 3;                                                                                          // 10814\n      this.detectIncompleteChar = base64DetectIncompleteChar;                                                          // 10815\n      break;                                                                                                           // 10816\n    default:                                                                                                           // 10817\n      this.write = passThroughWrite;                                                                                   // 10818\n      return;                                                                                                          // 10819\n  }                                                                                                                    // 10820\n                                                                                                                       // 10821\n  // Enough space to store all bytes of a single character. UTF-8 needs 4                                              // 10822\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).                                                    // 10823\n  this.charBuffer = new Buffer(6);                                                                                     // 10824\n  // Number of bytes received for the current incomplete multi-byte character.                                         // 10825\n  this.charReceived = 0;                                                                                               // 10826\n  // Number of bytes expected for the current incomplete multi-byte character.                                         // 10827\n  this.charLength = 0;                                                                                                 // 10828\n};                                                                                                                     // 10829\n                                                                                                                       // 10830\n                                                                                                                       // 10831\n// write decodes the given buffer and returns it as JS string that is                                                  // 10832\n// guaranteed to not contain any partial multi-byte characters. Any partial                                            // 10833\n// character found at the end of the buffer is buffered up, and will be                                                // 10834\n// returned when calling write again with the remaining bytes.                                                         // 10835\n//                                                                                                                     // 10836\n// Note: Converting a Buffer containing an orphan surrogate to a String                                                // 10837\n// currently works, but converting a String to a Buffer (via `new Buffer`, or                                          // 10838\n// Buffer#write) will replace incomplete surrogates with the unicode                                                   // 10839\n// replacement character. See https://codereview.chromium.org/121173009/ .                                             // 10840\nStringDecoder.prototype.write = function(buffer) {                                                                     // 10841\n  var charStr = '';                                                                                                    // 10842\n  // if our last write ended with an incomplete multibyte character                                                    // 10843\n  while (this.charLength) {                                                                                            // 10844\n    // determine how many remaining bytes this buffer has to offer for this char                                       // 10845\n    var available = (buffer.length >= this.charLength - this.charReceived) ?                                           // 10846\n        this.charLength - this.charReceived :                                                                          // 10847\n        buffer.length;                                                                                                 // 10848\n                                                                                                                       // 10849\n    // add the new bytes to the char buffer                                                                            // 10850\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);                                                     // 10851\n    this.charReceived += available;                                                                                    // 10852\n                                                                                                                       // 10853\n    if (this.charReceived < this.charLength) {                                                                         // 10854\n      // still not enough chars in this buffer? wait for more ...                                                      // 10855\n      return '';                                                                                                       // 10856\n    }                                                                                                                  // 10857\n                                                                                                                       // 10858\n    // remove bytes belonging to the current character from the buffer                                                 // 10859\n    buffer = buffer.slice(available, buffer.length);                                                                   // 10860\n                                                                                                                       // 10861\n    // get the character that was split                                                                                // 10862\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);                                       // 10863\n                                                                                                                       // 10864\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                             // 10865\n    var charCode = charStr.charCodeAt(charStr.length - 1);                                                             // 10866\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                    // 10867\n      this.charLength += this.surrogateSize;                                                                           // 10868\n      charStr = '';                                                                                                    // 10869\n      continue;                                                                                                        // 10870\n    }                                                                                                                  // 10871\n    this.charReceived = this.charLength = 0;                                                                           // 10872\n                                                                                                                       // 10873\n    // if there are no more bytes in this buffer, just emit our char                                                   // 10874\n    if (buffer.length === 0) {                                                                                         // 10875\n      return charStr;                                                                                                  // 10876\n    }                                                                                                                  // 10877\n    break;                                                                                                             // 10878\n  }                                                                                                                    // 10879\n                                                                                                                       // 10880\n  // determine and set charLength / charReceived                                                                       // 10881\n  this.detectIncompleteChar(buffer);                                                                                   // 10882\n                                                                                                                       // 10883\n  var end = buffer.length;                                                                                             // 10884\n  if (this.charLength) {                                                                                               // 10885\n    // buffer the incomplete character bytes we got                                                                    // 10886\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);                                           // 10887\n    end -= this.charReceived;                                                                                          // 10888\n  }                                                                                                                    // 10889\n                                                                                                                       // 10890\n  charStr += buffer.toString(this.encoding, 0, end);                                                                   // 10891\n                                                                                                                       // 10892\n  var end = charStr.length - 1;                                                                                        // 10893\n  var charCode = charStr.charCodeAt(end);                                                                              // 10894\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                               // 10895\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                      // 10896\n    var size = this.surrogateSize;                                                                                     // 10897\n    this.charLength += size;                                                                                           // 10898\n    this.charReceived += size;                                                                                         // 10899\n    this.charBuffer.copy(this.charBuffer, size, 0, size);                                                              // 10900\n    buffer.copy(this.charBuffer, 0, 0, size);                                                                          // 10901\n    return charStr.substring(0, end);                                                                                  // 10902\n  }                                                                                                                    // 10903\n                                                                                                                       // 10904\n  // or just emit the charStr                                                                                          // 10905\n  return charStr;                                                                                                      // 10906\n};                                                                                                                     // 10907\n                                                                                                                       // 10908\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at                                        // 10909\n// the end of the given buffer. If so, it sets this.charLength to the byte                                             // 10910\n// length that character, and sets this.charReceived to the number of bytes                                            // 10911\n// that are available for this character.                                                                              // 10912\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {                                                      // 10913\n  // determine how many bytes we have to check at the end of this buffer                                               // 10914\n  var i = (buffer.length >= 3) ? 3 : buffer.length;                                                                    // 10915\n                                                                                                                       // 10916\n  // Figure out if one of the last i bytes of our buffer announces an                                                  // 10917\n  // incomplete char.                                                                                                  // 10918\n  for (; i > 0; i--) {                                                                                                 // 10919\n    var c = buffer[buffer.length - i];                                                                                 // 10920\n                                                                                                                       // 10921\n    // See http://en.wikipedia.org/wiki/UTF-8#Description                                                              // 10922\n                                                                                                                       // 10923\n    // 110XXXXX                                                                                                        // 10924\n    if (i == 1 && c >> 5 == 0x06) {                                                                                    // 10925\n      this.charLength = 2;                                                                                             // 10926\n      break;                                                                                                           // 10927\n    }                                                                                                                  // 10928\n                                                                                                                       // 10929\n    // 1110XXXX                                                                                                        // 10930\n    if (i <= 2 && c >> 4 == 0x0E) {                                                                                    // 10931\n      this.charLength = 3;                                                                                             // 10932\n      break;                                                                                                           // 10933\n    }                                                                                                                  // 10934\n                                                                                                                       // 10935\n    // 11110XXX                                                                                                        // 10936\n    if (i <= 3 && c >> 3 == 0x1E) {                                                                                    // 10937\n      this.charLength = 4;                                                                                             // 10938\n      break;                                                                                                           // 10939\n    }                                                                                                                  // 10940\n  }                                                                                                                    // 10941\n  this.charReceived = i;                                                                                               // 10942\n};                                                                                                                     // 10943\n                                                                                                                       // 10944\nStringDecoder.prototype.end = function(buffer) {                                                                       // 10945\n  var res = '';                                                                                                        // 10946\n  if (buffer && buffer.length)                                                                                         // 10947\n    res = this.write(buffer);                                                                                          // 10948\n                                                                                                                       // 10949\n  if (this.charReceived) {                                                                                             // 10950\n    var cr = this.charReceived;                                                                                        // 10951\n    var buf = this.charBuffer;                                                                                         // 10952\n    var enc = this.encoding;                                                                                           // 10953\n    res += buf.slice(0, cr).toString(enc);                                                                             // 10954\n  }                                                                                                                    // 10955\n                                                                                                                       // 10956\n  return res;                                                                                                          // 10957\n};                                                                                                                     // 10958\n                                                                                                                       // 10959\nfunction passThroughWrite(buffer) {                                                                                    // 10960\n  return buffer.toString(this.encoding);                                                                               // 10961\n}                                                                                                                      // 10962\n                                                                                                                       // 10963\nfunction utf16DetectIncompleteChar(buffer) {                                                                           // 10964\n  this.charReceived = buffer.length % 2;                                                                               // 10965\n  this.charLength = this.charReceived ? 2 : 0;                                                                         // 10966\n}                                                                                                                      // 10967\n                                                                                                                       // 10968\nfunction base64DetectIncompleteChar(buffer) {                                                                          // 10969\n  this.charReceived = buffer.length % 3;                                                                               // 10970\n  this.charLength = this.charReceived ? 3 : 0;                                                                         // 10971\n}                                                                                                                      // 10972\n                                                                                                                       // 10973\n},{\"buffer\":43}],65:[function(require,module,exports){                                                                 // 10974\nmodule.exports = function isBuffer(arg) {                                                                              // 10975\n  return arg && typeof arg === 'object'                                                                                // 10976\n    && typeof arg.copy === 'function'                                                                                  // 10977\n    && typeof arg.fill === 'function'                                                                                  // 10978\n    && typeof arg.readUInt8 === 'function';                                                                            // 10979\n}                                                                                                                      // 10980\n},{}],66:[function(require,module,exports){                                                                            // 10981\n(function (process,global){                                                                                            // 10982\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 10983\n//                                                                                                                     // 10984\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 10985\n// copy of this software and associated documentation files (the                                                       // 10986\n// \"Software\"), to deal in the Software without restriction, including                                                 // 10987\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 10988\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 10989\n// persons to whom the Software is furnished to do so, subject to the                                                  // 10990\n// following conditions:                                                                                               // 10991\n//                                                                                                                     // 10992\n// The above copyright notice and this permission notice shall be included                                             // 10993\n// in all copies or substantial portions of the Software.                                                              // 10994\n//                                                                                                                     // 10995\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 10996\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 10997\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 10998\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 10999\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 11000\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 11001\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 11002\n                                                                                                                       // 11003\nvar formatRegExp = /%[sdj%]/g;                                                                                         // 11004\nexports.format = function(f) {                                                                                         // 11005\n  if (!isString(f)) {                                                                                                  // 11006\n    var objects = [];                                                                                                  // 11007\n    for (var i = 0; i < arguments.length; i++) {                                                                       // 11008\n      objects.push(inspect(arguments[i]));                                                                             // 11009\n    }                                                                                                                  // 11010\n    return objects.join(' ');                                                                                          // 11011\n  }                                                                                                                    // 11012\n                                                                                                                       // 11013\n  var i = 1;                                                                                                           // 11014\n  var args = arguments;                                                                                                // 11015\n  var len = args.length;                                                                                               // 11016\n  var str = String(f).replace(formatRegExp, function(x) {                                                              // 11017\n    if (x === '%%') return '%';                                                                                        // 11018\n    if (i >= len) return x;                                                                                            // 11019\n    switch (x) {                                                                                                       // 11020\n      case '%s': return String(args[i++]);                                                                             // 11021\n      case '%d': return Number(args[i++]);                                                                             // 11022\n      case '%j':                                                                                                       // 11023\n        try {                                                                                                          // 11024\n          return JSON.stringify(args[i++]);                                                                            // 11025\n        } catch (_) {                                                                                                  // 11026\n          return '[Circular]';                                                                                         // 11027\n        }                                                                                                              // 11028\n      default:                                                                                                         // 11029\n        return x;                                                                                                      // 11030\n    }                                                                                                                  // 11031\n  });                                                                                                                  // 11032\n  for (var x = args[i]; i < len; x = args[++i]) {                                                                      // 11033\n    if (isNull(x) || !isObject(x)) {                                                                                   // 11034\n      str += ' ' + x;                                                                                                  // 11035\n    } else {                                                                                                           // 11036\n      str += ' ' + inspect(x);                                                                                         // 11037\n    }                                                                                                                  // 11038\n  }                                                                                                                    // 11039\n  return str;                                                                                                          // 11040\n};                                                                                                                     // 11041\n                                                                                                                       // 11042\n                                                                                                                       // 11043\n// Mark that a method should not be used.                                                                              // 11044\n// Returns a modified function which warns once by default.                                                            // 11045\n// If --no-deprecation is set, then it is a no-op.                                                                     // 11046\nexports.deprecate = function(fn, msg) {                                                                                // 11047\n  // Allow for deprecating things in the process of starting up.                                                       // 11048\n  if (isUndefined(global.process)) {                                                                                   // 11049\n    return function() {                                                                                                // 11050\n      return exports.deprecate(fn, msg).apply(this, arguments);                                                        // 11051\n    };                                                                                                                 // 11052\n  }                                                                                                                    // 11053\n                                                                                                                       // 11054\n  if (process.noDeprecation === true) {                                                                                // 11055\n    return fn;                                                                                                         // 11056\n  }                                                                                                                    // 11057\n                                                                                                                       // 11058\n  var warned = false;                                                                                                  // 11059\n  function deprecated() {                                                                                              // 11060\n    if (!warned) {                                                                                                     // 11061\n      if (process.throwDeprecation) {                                                                                  // 11062\n        throw new Error(msg);                                                                                          // 11063\n      } else if (process.traceDeprecation) {                                                                           // 11064\n        console.trace(msg);                                                                                            // 11065\n      } else {                                                                                                         // 11066\n        console.error(msg);                                                                                            // 11067\n      }                                                                                                                // 11068\n      warned = true;                                                                                                   // 11069\n    }                                                                                                                  // 11070\n    return fn.apply(this, arguments);                                                                                  // 11071\n  }                                                                                                                    // 11072\n                                                                                                                       // 11073\n  return deprecated;                                                                                                   // 11074\n};                                                                                                                     // 11075\n                                                                                                                       // 11076\n                                                                                                                       // 11077\nvar debugs = {};                                                                                                       // 11078\nvar debugEnviron;                                                                                                      // 11079\nexports.debuglog = function(set) {                                                                                     // 11080\n  if (isUndefined(debugEnviron))                                                                                       // 11081\n    debugEnviron = process.env.NODE_DEBUG || '';                                                                       // 11082\n  set = set.toUpperCase();                                                                                             // 11083\n  if (!debugs[set]) {                                                                                                  // 11084\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {                                                     // 11085\n      var pid = process.pid;                                                                                           // 11086\n      debugs[set] = function() {                                                                                       // 11087\n        var msg = exports.format.apply(exports, arguments);                                                            // 11088\n        console.error('%s %d: %s', set, pid, msg);                                                                     // 11089\n      };                                                                                                               // 11090\n    } else {                                                                                                           // 11091\n      debugs[set] = function() {};                                                                                     // 11092\n    }                                                                                                                  // 11093\n  }                                                                                                                    // 11094\n  return debugs[set];                                                                                                  // 11095\n};                                                                                                                     // 11096\n                                                                                                                       // 11097\n                                                                                                                       // 11098\n/**                                                                                                                    // 11099\n * Echos the value of a value. Trys to print the value out                                                             // 11100\n * in the best way possible given the different types.                                                                 // 11101\n *                                                                                                                     // 11102\n * @param {Object} obj The object to print out.                                                                        // 11103\n * @param {Object} opts Optional options object that alters the output.                                                // 11104\n */                                                                                                                    // 11105\n/* legacy: obj, showHidden, depth, colors*/                                                                            // 11106\nfunction inspect(obj, opts) {                                                                                          // 11107\n  // default options                                                                                                   // 11108\n  var ctx = {                                                                                                          // 11109\n    seen: [],                                                                                                          // 11110\n    stylize: stylizeNoColor                                                                                            // 11111\n  };                                                                                                                   // 11112\n  // legacy...                                                                                                         // 11113\n  if (arguments.length >= 3) ctx.depth = arguments[2];                                                                 // 11114\n  if (arguments.length >= 4) ctx.colors = arguments[3];                                                                // 11115\n  if (isBoolean(opts)) {                                                                                               // 11116\n    // legacy...                                                                                                       // 11117\n    ctx.showHidden = opts;                                                                                             // 11118\n  } else if (opts) {                                                                                                   // 11119\n    // got an \"options\" object                                                                                         // 11120\n    exports._extend(ctx, opts);                                                                                        // 11121\n  }                                                                                                                    // 11122\n  // set default options                                                                                               // 11123\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;                                                             // 11124\n  if (isUndefined(ctx.depth)) ctx.depth = 2;                                                                           // 11125\n  if (isUndefined(ctx.colors)) ctx.colors = false;                                                                     // 11126\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;                                                        // 11127\n  if (ctx.colors) ctx.stylize = stylizeWithColor;                                                                      // 11128\n  return formatValue(ctx, obj, ctx.depth);                                                                             // 11129\n}                                                                                                                      // 11130\nexports.inspect = inspect;                                                                                             // 11131\n                                                                                                                       // 11132\n                                                                                                                       // 11133\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics                                                              // 11134\ninspect.colors = {                                                                                                     // 11135\n  'bold' : [1, 22],                                                                                                    // 11136\n  'italic' : [3, 23],                                                                                                  // 11137\n  'underline' : [4, 24],                                                                                               // 11138\n  'inverse' : [7, 27],                                                                                                 // 11139\n  'white' : [37, 39],                                                                                                  // 11140\n  'grey' : [90, 39],                                                                                                   // 11141\n  'black' : [30, 39],                                                                                                  // 11142\n  'blue' : [34, 39],                                                                                                   // 11143\n  'cyan' : [36, 39],                                                                                                   // 11144\n  'green' : [32, 39],                                                                                                  // 11145\n  'magenta' : [35, 39],                                                                                                // 11146\n  'red' : [31, 39],                                                                                                    // 11147\n  'yellow' : [33, 39]                                                                                                  // 11148\n};                                                                                                                     // 11149\n                                                                                                                       // 11150\n// Don't use 'blue' not visible on cmd.exe                                                                             // 11151\ninspect.styles = {                                                                                                     // 11152\n  'special': 'cyan',                                                                                                   // 11153\n  'number': 'yellow',                                                                                                  // 11154\n  'boolean': 'yellow',                                                                                                 // 11155\n  'undefined': 'grey',                                                                                                 // 11156\n  'null': 'bold',                                                                                                      // 11157\n  'string': 'green',                                                                                                   // 11158\n  'date': 'magenta',                                                                                                   // 11159\n  // \"name\": intentionally not styling                                                                                 // 11160\n  'regexp': 'red'                                                                                                      // 11161\n};                                                                                                                     // 11162\n                                                                                                                       // 11163\n                                                                                                                       // 11164\nfunction stylizeWithColor(str, styleType) {                                                                            // 11165\n  var style = inspect.styles[styleType];                                                                               // 11166\n                                                                                                                       // 11167\n  if (style) {                                                                                                         // 11168\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +                                                          // 11169\n           '\\u001b[' + inspect.colors[style][1] + 'm';                                                                 // 11170\n  } else {                                                                                                             // 11171\n    return str;                                                                                                        // 11172\n  }                                                                                                                    // 11173\n}                                                                                                                      // 11174\n                                                                                                                       // 11175\n                                                                                                                       // 11176\nfunction stylizeNoColor(str, styleType) {                                                                              // 11177\n  return str;                                                                                                          // 11178\n}                                                                                                                      // 11179\n                                                                                                                       // 11180\n                                                                                                                       // 11181\nfunction arrayToHash(array) {                                                                                          // 11182\n  var hash = {};                                                                                                       // 11183\n                                                                                                                       // 11184\n  array.forEach(function(val, idx) {                                                                                   // 11185\n    hash[val] = true;                                                                                                  // 11186\n  });                                                                                                                  // 11187\n                                                                                                                       // 11188\n  return hash;                                                                                                         // 11189\n}                                                                                                                      // 11190\n                                                                                                                       // 11191\n                                                                                                                       // 11192\nfunction formatValue(ctx, value, recurseTimes) {                                                                       // 11193\n  // Provide a hook for user-specified inspect functions.                                                              // 11194\n  // Check that value is an object with an inspect function on it                                                      // 11195\n  if (ctx.customInspect &&                                                                                             // 11196\n      value &&                                                                                                         // 11197\n      isFunction(value.inspect) &&                                                                                     // 11198\n      // Filter out the util module, it's inspect function is special                                                  // 11199\n      value.inspect !== exports.inspect &&                                                                             // 11200\n      // Also filter out any prototype objects using the circular check.                                               // 11201\n      !(value.constructor && value.constructor.prototype === value)) {                                                 // 11202\n    var ret = value.inspect(recurseTimes, ctx);                                                                        // 11203\n    if (!isString(ret)) {                                                                                              // 11204\n      ret = formatValue(ctx, ret, recurseTimes);                                                                       // 11205\n    }                                                                                                                  // 11206\n    return ret;                                                                                                        // 11207\n  }                                                                                                                    // 11208\n                                                                                                                       // 11209\n  // Primitive types cannot have properties                                                                            // 11210\n  var primitive = formatPrimitive(ctx, value);                                                                         // 11211\n  if (primitive) {                                                                                                     // 11212\n    return primitive;                                                                                                  // 11213\n  }                                                                                                                    // 11214\n                                                                                                                       // 11215\n  // Look up the keys of the object.                                                                                   // 11216\n  var keys = Object.keys(value);                                                                                       // 11217\n  var visibleKeys = arrayToHash(keys);                                                                                 // 11218\n                                                                                                                       // 11219\n  if (ctx.showHidden) {                                                                                                // 11220\n    keys = Object.getOwnPropertyNames(value);                                                                          // 11221\n  }                                                                                                                    // 11222\n                                                                                                                       // 11223\n  // IE doesn't make error fields non-enumerable                                                                       // 11224\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx                                                 // 11225\n  if (isError(value)                                                                                                   // 11226\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {                                         // 11227\n    return formatError(value);                                                                                         // 11228\n  }                                                                                                                    // 11229\n                                                                                                                       // 11230\n  // Some type of object without properties can be shortcutted.                                                        // 11231\n  if (keys.length === 0) {                                                                                             // 11232\n    if (isFunction(value)) {                                                                                           // 11233\n      var name = value.name ? ': ' + value.name : '';                                                                  // 11234\n      return ctx.stylize('[Function' + name + ']', 'special');                                                         // 11235\n    }                                                                                                                  // 11236\n    if (isRegExp(value)) {                                                                                             // 11237\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 11238\n    }                                                                                                                  // 11239\n    if (isDate(value)) {                                                                                               // 11240\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');                                                 // 11241\n    }                                                                                                                  // 11242\n    if (isError(value)) {                                                                                              // 11243\n      return formatError(value);                                                                                       // 11244\n    }                                                                                                                  // 11245\n  }                                                                                                                    // 11246\n                                                                                                                       // 11247\n  var base = '', array = false, braces = ['{', '}'];                                                                   // 11248\n                                                                                                                       // 11249\n  // Make Array say that they are Array                                                                                // 11250\n  if (isArray(value)) {                                                                                                // 11251\n    array = true;                                                                                                      // 11252\n    braces = ['[', ']'];                                                                                               // 11253\n  }                                                                                                                    // 11254\n                                                                                                                       // 11255\n  // Make functions say that they are functions                                                                        // 11256\n  if (isFunction(value)) {                                                                                             // 11257\n    var n = value.name ? ': ' + value.name : '';                                                                       // 11258\n    base = ' [Function' + n + ']';                                                                                     // 11259\n  }                                                                                                                    // 11260\n                                                                                                                       // 11261\n  // Make RegExps say that they are RegExps                                                                            // 11262\n  if (isRegExp(value)) {                                                                                               // 11263\n    base = ' ' + RegExp.prototype.toString.call(value);                                                                // 11264\n  }                                                                                                                    // 11265\n                                                                                                                       // 11266\n  // Make dates with properties first say the date                                                                     // 11267\n  if (isDate(value)) {                                                                                                 // 11268\n    base = ' ' + Date.prototype.toUTCString.call(value);                                                               // 11269\n  }                                                                                                                    // 11270\n                                                                                                                       // 11271\n  // Make error with message first say the error                                                                       // 11272\n  if (isError(value)) {                                                                                                // 11273\n    base = ' ' + formatError(value);                                                                                   // 11274\n  }                                                                                                                    // 11275\n                                                                                                                       // 11276\n  if (keys.length === 0 && (!array || value.length == 0)) {                                                            // 11277\n    return braces[0] + base + braces[1];                                                                               // 11278\n  }                                                                                                                    // 11279\n                                                                                                                       // 11280\n  if (recurseTimes < 0) {                                                                                              // 11281\n    if (isRegExp(value)) {                                                                                             // 11282\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 11283\n    } else {                                                                                                           // 11284\n      return ctx.stylize('[Object]', 'special');                                                                       // 11285\n    }                                                                                                                  // 11286\n  }                                                                                                                    // 11287\n                                                                                                                       // 11288\n  ctx.seen.push(value);                                                                                                // 11289\n                                                                                                                       // 11290\n  var output;                                                                                                          // 11291\n  if (array) {                                                                                                         // 11292\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                                 // 11293\n  } else {                                                                                                             // 11294\n    output = keys.map(function(key) {                                                                                  // 11295\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                        // 11296\n    });                                                                                                                // 11297\n  }                                                                                                                    // 11298\n                                                                                                                       // 11299\n  ctx.seen.pop();                                                                                                      // 11300\n                                                                                                                       // 11301\n  return reduceToSingleString(output, base, braces);                                                                   // 11302\n}                                                                                                                      // 11303\n                                                                                                                       // 11304\n                                                                                                                       // 11305\nfunction formatPrimitive(ctx, value) {                                                                                 // 11306\n  if (isUndefined(value))                                                                                              // 11307\n    return ctx.stylize('undefined', 'undefined');                                                                      // 11308\n  if (isString(value)) {                                                                                               // 11309\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')                                                    // 11310\n                                             .replace(/'/g, \"\\\\'\")                                                     // 11311\n                                             .replace(/\\\\\"/g, '\"') + '\\'';                                             // 11312\n    return ctx.stylize(simple, 'string');                                                                              // 11313\n  }                                                                                                                    // 11314\n  if (isNumber(value))                                                                                                 // 11315\n    return ctx.stylize('' + value, 'number');                                                                          // 11316\n  if (isBoolean(value))                                                                                                // 11317\n    return ctx.stylize('' + value, 'boolean');                                                                         // 11318\n  // For some reason typeof null is \"object\", so special case here.                                                    // 11319\n  if (isNull(value))                                                                                                   // 11320\n    return ctx.stylize('null', 'null');                                                                                // 11321\n}                                                                                                                      // 11322\n                                                                                                                       // 11323\n                                                                                                                       // 11324\nfunction formatError(value) {                                                                                          // 11325\n  return '[' + Error.prototype.toString.call(value) + ']';                                                             // 11326\n}                                                                                                                      // 11327\n                                                                                                                       // 11328\n                                                                                                                       // 11329\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                                    // 11330\n  var output = [];                                                                                                     // 11331\n  for (var i = 0, l = value.length; i < l; ++i) {                                                                      // 11332\n    if (hasOwnProperty(value, String(i))) {                                                                            // 11333\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 11334\n          String(i), true));                                                                                           // 11335\n    } else {                                                                                                           // 11336\n      output.push('');                                                                                                 // 11337\n    }                                                                                                                  // 11338\n  }                                                                                                                    // 11339\n  keys.forEach(function(key) {                                                                                         // 11340\n    if (!key.match(/^\\d+$/)) {                                                                                         // 11341\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 11342\n          key, true));                                                                                                 // 11343\n    }                                                                                                                  // 11344\n  });                                                                                                                  // 11345\n  return output;                                                                                                       // 11346\n}                                                                                                                      // 11347\n                                                                                                                       // 11348\n                                                                                                                       // 11349\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                           // 11350\n  var name, str, desc;                                                                                                 // 11351\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };                                         // 11352\n  if (desc.get) {                                                                                                      // 11353\n    if (desc.set) {                                                                                                    // 11354\n      str = ctx.stylize('[Getter/Setter]', 'special');                                                                 // 11355\n    } else {                                                                                                           // 11356\n      str = ctx.stylize('[Getter]', 'special');                                                                        // 11357\n    }                                                                                                                  // 11358\n  } else {                                                                                                             // 11359\n    if (desc.set) {                                                                                                    // 11360\n      str = ctx.stylize('[Setter]', 'special');                                                                        // 11361\n    }                                                                                                                  // 11362\n  }                                                                                                                    // 11363\n  if (!hasOwnProperty(visibleKeys, key)) {                                                                             // 11364\n    name = '[' + key + ']';                                                                                            // 11365\n  }                                                                                                                    // 11366\n  if (!str) {                                                                                                          // 11367\n    if (ctx.seen.indexOf(desc.value) < 0) {                                                                            // 11368\n      if (isNull(recurseTimes)) {                                                                                      // 11369\n        str = formatValue(ctx, desc.value, null);                                                                      // 11370\n      } else {                                                                                                         // 11371\n        str = formatValue(ctx, desc.value, recurseTimes - 1);                                                          // 11372\n      }                                                                                                                // 11373\n      if (str.indexOf('\\n') > -1) {                                                                                    // 11374\n        if (array) {                                                                                                   // 11375\n          str = str.split('\\n').map(function(line) {                                                                   // 11376\n            return '  ' + line;                                                                                        // 11377\n          }).join('\\n').substr(2);                                                                                     // 11378\n        } else {                                                                                                       // 11379\n          str = '\\n' + str.split('\\n').map(function(line) {                                                            // 11380\n            return '   ' + line;                                                                                       // 11381\n          }).join('\\n');                                                                                               // 11382\n        }                                                                                                              // 11383\n      }                                                                                                                // 11384\n    } else {                                                                                                           // 11385\n      str = ctx.stylize('[Circular]', 'special');                                                                      // 11386\n    }                                                                                                                  // 11387\n  }                                                                                                                    // 11388\n  if (isUndefined(name)) {                                                                                             // 11389\n    if (array && key.match(/^\\d+$/)) {                                                                                 // 11390\n      return str;                                                                                                      // 11391\n    }                                                                                                                  // 11392\n    name = JSON.stringify('' + key);                                                                                   // 11393\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {                                                                  // 11394\n      name = name.substr(1, name.length - 2);                                                                          // 11395\n      name = ctx.stylize(name, 'name');                                                                                // 11396\n    } else {                                                                                                           // 11397\n      name = name.replace(/'/g, \"\\\\'\")                                                                                 // 11398\n                 .replace(/\\\\\"/g, '\"')                                                                                 // 11399\n                 .replace(/(^\"|\"$)/g, \"'\");                                                                            // 11400\n      name = ctx.stylize(name, 'string');                                                                              // 11401\n    }                                                                                                                  // 11402\n  }                                                                                                                    // 11403\n                                                                                                                       // 11404\n  return name + ': ' + str;                                                                                            // 11405\n}                                                                                                                      // 11406\n                                                                                                                       // 11407\n                                                                                                                       // 11408\nfunction reduceToSingleString(output, base, braces) {                                                                  // 11409\n  var numLinesEst = 0;                                                                                                 // 11410\n  var length = output.reduce(function(prev, cur) {                                                                     // 11411\n    numLinesEst++;                                                                                                     // 11412\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;                                                                         // 11413\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;                                                       // 11414\n  }, 0);                                                                                                               // 11415\n                                                                                                                       // 11416\n  if (length > 60) {                                                                                                   // 11417\n    return braces[0] +                                                                                                 // 11418\n           (base === '' ? '' : base + '\\n ') +                                                                         // 11419\n           ' ' +                                                                                                       // 11420\n           output.join(',\\n  ') +                                                                                      // 11421\n           ' ' +                                                                                                       // 11422\n           braces[1];                                                                                                  // 11423\n  }                                                                                                                    // 11424\n                                                                                                                       // 11425\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                                 // 11426\n}                                                                                                                      // 11427\n                                                                                                                       // 11428\n                                                                                                                       // 11429\n// NOTE: These type checking functions intentionally don't use `instanceof`                                            // 11430\n// because it is fragile and can be easily faked with `Object.create()`.                                               // 11431\nfunction isArray(ar) {                                                                                                 // 11432\n  return Array.isArray(ar);                                                                                            // 11433\n}                                                                                                                      // 11434\nexports.isArray = isArray;                                                                                             // 11435\n                                                                                                                       // 11436\nfunction isBoolean(arg) {                                                                                              // 11437\n  return typeof arg === 'boolean';                                                                                     // 11438\n}                                                                                                                      // 11439\nexports.isBoolean = isBoolean;                                                                                         // 11440\n                                                                                                                       // 11441\nfunction isNull(arg) {                                                                                                 // 11442\n  return arg === null;                                                                                                 // 11443\n}                                                                                                                      // 11444\nexports.isNull = isNull;                                                                                               // 11445\n                                                                                                                       // 11446\nfunction isNullOrUndefined(arg) {                                                                                      // 11447\n  return arg == null;                                                                                                  // 11448\n}                                                                                                                      // 11449\nexports.isNullOrUndefined = isNullOrUndefined;                                                                         // 11450\n                                                                                                                       // 11451\nfunction isNumber(arg) {                                                                                               // 11452\n  return typeof arg === 'number';                                                                                      // 11453\n}                                                                                                                      // 11454\nexports.isNumber = isNumber;                                                                                           // 11455\n                                                                                                                       // 11456\nfunction isString(arg) {                                                                                               // 11457\n  return typeof arg === 'string';                                                                                      // 11458\n}                                                                                                                      // 11459\nexports.isString = isString;                                                                                           // 11460\n                                                                                                                       // 11461\nfunction isSymbol(arg) {                                                                                               // 11462\n  return typeof arg === 'symbol';                                                                                      // 11463\n}                                                                                                                      // 11464\nexports.isSymbol = isSymbol;                                                                                           // 11465\n                                                                                                                       // 11466\nfunction isUndefined(arg) {                                                                                            // 11467\n  return arg === void 0;                                                                                               // 11468\n}                                                                                                                      // 11469\nexports.isUndefined = isUndefined;                                                                                     // 11470\n                                                                                                                       // 11471\nfunction isRegExp(re) {                                                                                                // 11472\n  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 11473\n}                                                                                                                      // 11474\nexports.isRegExp = isRegExp;                                                                                           // 11475\n                                                                                                                       // 11476\nfunction isObject(arg) {                                                                                               // 11477\n  return typeof arg === 'object' && arg !== null;                                                                      // 11478\n}                                                                                                                      // 11479\nexports.isObject = isObject;                                                                                           // 11480\n                                                                                                                       // 11481\nfunction isDate(d) {                                                                                                   // 11482\n  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 11483\n}                                                                                                                      // 11484\nexports.isDate = isDate;                                                                                               // 11485\n                                                                                                                       // 11486\nfunction isError(e) {                                                                                                  // 11487\n  return isObject(e) &&                                                                                                // 11488\n      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 11489\n}                                                                                                                      // 11490\nexports.isError = isError;                                                                                             // 11491\n                                                                                                                       // 11492\nfunction isFunction(arg) {                                                                                             // 11493\n  return typeof arg === 'function';                                                                                    // 11494\n}                                                                                                                      // 11495\nexports.isFunction = isFunction;                                                                                       // 11496\n                                                                                                                       // 11497\nfunction isPrimitive(arg) {                                                                                            // 11498\n  return arg === null ||                                                                                               // 11499\n         typeof arg === 'boolean' ||                                                                                   // 11500\n         typeof arg === 'number' ||                                                                                    // 11501\n         typeof arg === 'string' ||                                                                                    // 11502\n         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 11503\n         typeof arg === 'undefined';                                                                                   // 11504\n}                                                                                                                      // 11505\nexports.isPrimitive = isPrimitive;                                                                                     // 11506\n                                                                                                                       // 11507\nexports.isBuffer = require('./support/isBuffer');                                                                      // 11508\n                                                                                                                       // 11509\nfunction objectToString(o) {                                                                                           // 11510\n  return Object.prototype.toString.call(o);                                                                            // 11511\n}                                                                                                                      // 11512\n                                                                                                                       // 11513\n                                                                                                                       // 11514\nfunction pad(n) {                                                                                                      // 11515\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);                                                               // 11516\n}                                                                                                                      // 11517\n                                                                                                                       // 11518\n                                                                                                                       // 11519\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',                                           // 11520\n              'Oct', 'Nov', 'Dec'];                                                                                    // 11521\n                                                                                                                       // 11522\n// 26 Feb 16:19:34                                                                                                     // 11523\nfunction timestamp() {                                                                                                 // 11524\n  var d = new Date();                                                                                                  // 11525\n  var time = [pad(d.getHours()),                                                                                       // 11526\n              pad(d.getMinutes()),                                                                                     // 11527\n              pad(d.getSeconds())].join(':');                                                                          // 11528\n  return [d.getDate(), months[d.getMonth()], time].join(' ');                                                          // 11529\n}                                                                                                                      // 11530\n                                                                                                                       // 11531\n                                                                                                                       // 11532\n// log is just a thin wrapper to console.log that prepends a timestamp                                                 // 11533\nexports.log = function() {                                                                                             // 11534\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));                                       // 11535\n};                                                                                                                     // 11536\n                                                                                                                       // 11537\n                                                                                                                       // 11538\n/**                                                                                                                    // 11539\n * Inherit the prototype methods from one constructor into another.                                                    // 11540\n *                                                                                                                     // 11541\n * The Function.prototype.inherits from lang.js rewritten as a standalone                                              // 11542\n * function (not on Function.prototype). NOTE: If this file is to be loaded                                            // 11543\n * during bootstrapping this function needs to be rewritten using some native                                          // 11544\n * functions as prototype setup using normal JavaScript does not work as                                               // 11545\n * expected during bootstrapping (see mirror.js in r114903).                                                           // 11546\n *                                                                                                                     // 11547\n * @param {function} ctor Constructor function which needs to inherit the                                              // 11548\n *     prototype.                                                                                                      // 11549\n * @param {function} superCtor Constructor function to inherit prototype from.                                         // 11550\n */                                                                                                                    // 11551\nexports.inherits = require('inherits');                                                                                // 11552\n                                                                                                                       // 11553\nexports._extend = function(origin, add) {                                                                              // 11554\n  // Don't do anything if add isn't an object                                                                          // 11555\n  if (!add || !isObject(add)) return origin;                                                                           // 11556\n                                                                                                                       // 11557\n  var keys = Object.keys(add);                                                                                         // 11558\n  var i = keys.length;                                                                                                 // 11559\n  while (i--) {                                                                                                        // 11560\n    origin[keys[i]] = add[keys[i]];                                                                                    // 11561\n  }                                                                                                                    // 11562\n  return origin;                                                                                                       // 11563\n};                                                                                                                     // 11564\n                                                                                                                       // 11565\nfunction hasOwnProperty(obj, prop) {                                                                                   // 11566\n  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 11567\n}                                                                                                                      // 11568\n                                                                                                                       // 11569\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":65,\"_process\":51,\"inherits\":48}],67:[function(require,module,exports){                         // 11571\n/* See LICENSE file for terms of use */                                                                                // 11572\n                                                                                                                       // 11573\n/*                                                                                                                     // 11574\n * Text diff implementation.                                                                                           // 11575\n *                                                                                                                     // 11576\n * This library supports the following APIS:                                                                           // 11577\n * JsDiff.diffChars: Character by character diff                                                                       // 11578\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace                                       // 11579\n * JsDiff.diffLines: Line based diff                                                                                   // 11580\n *                                                                                                                     // 11581\n * JsDiff.diffCss: Diff targeted at CSS content                                                                        // 11582\n *                                                                                                                     // 11583\n * These methods are based on the implementation proposed in                                                           // 11584\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).                                                   // 11585\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927                                                      // 11586\n */                                                                                                                    // 11587\n(function(global, undefined) {                                                                                         // 11588\n  var objectPrototypeToString = Object.prototype.toString;                                                             // 11589\n                                                                                                                       // 11590\n  /*istanbul ignore next*/                                                                                             // 11591\n  function map(arr, mapper, that) {                                                                                    // 11592\n    if (Array.prototype.map) {                                                                                         // 11593\n      return Array.prototype.map.call(arr, mapper, that);                                                              // 11594\n    }                                                                                                                  // 11595\n                                                                                                                       // 11596\n    var other = new Array(arr.length);                                                                                 // 11597\n                                                                                                                       // 11598\n    for (var i = 0, n = arr.length; i < n; i++) {                                                                      // 11599\n      other[i] = mapper.call(that, arr[i], i, arr);                                                                    // 11600\n    }                                                                                                                  // 11601\n    return other;                                                                                                      // 11602\n  }                                                                                                                    // 11603\n  function clonePath(path) {                                                                                           // 11604\n    return { newPos: path.newPos, components: path.components.slice(0) };                                              // 11605\n  }                                                                                                                    // 11606\n  function removeEmpty(array) {                                                                                        // 11607\n    var ret = [];                                                                                                      // 11608\n    for (var i = 0; i < array.length; i++) {                                                                           // 11609\n      if (array[i]) {                                                                                                  // 11610\n        ret.push(array[i]);                                                                                            // 11611\n      }                                                                                                                // 11612\n    }                                                                                                                  // 11613\n    return ret;                                                                                                        // 11614\n  }                                                                                                                    // 11615\n  function escapeHTML(s) {                                                                                             // 11616\n    var n = s;                                                                                                         // 11617\n    n = n.replace(/&/g, '&amp;');                                                                                      // 11618\n    n = n.replace(/</g, '&lt;');                                                                                       // 11619\n    n = n.replace(/>/g, '&gt;');                                                                                       // 11620\n    n = n.replace(/\"/g, '&quot;');                                                                                     // 11621\n                                                                                                                       // 11622\n    return n;                                                                                                          // 11623\n  }                                                                                                                    // 11624\n                                                                                                                       // 11625\n  // This function handles the presence of circular references by bailing out when encountering an                     // 11626\n  // object that is already on the \"stack\" of items being processed.                                                   // 11627\n  function canonicalize(obj, stack, replacementStack) {                                                                // 11628\n    stack = stack || [];                                                                                               // 11629\n    replacementStack = replacementStack || [];                                                                         // 11630\n                                                                                                                       // 11631\n    var i;                                                                                                             // 11632\n                                                                                                                       // 11633\n    for (i = 0; i < stack.length; i += 1) {                                                                            // 11634\n      if (stack[i] === obj) {                                                                                          // 11635\n        return replacementStack[i];                                                                                    // 11636\n      }                                                                                                                // 11637\n    }                                                                                                                  // 11638\n                                                                                                                       // 11639\n    var canonicalizedObj;                                                                                              // 11640\n                                                                                                                       // 11641\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {                                                      // 11642\n      stack.push(obj);                                                                                                 // 11643\n      canonicalizedObj = new Array(obj.length);                                                                        // 11644\n      replacementStack.push(canonicalizedObj);                                                                         // 11645\n      for (i = 0; i < obj.length; i += 1) {                                                                            // 11646\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);                                           // 11647\n      }                                                                                                                // 11648\n      stack.pop();                                                                                                     // 11649\n      replacementStack.pop();                                                                                          // 11650\n    } else if (typeof obj === 'object' && obj !== null) {                                                              // 11651\n      stack.push(obj);                                                                                                 // 11652\n      canonicalizedObj = {};                                                                                           // 11653\n      replacementStack.push(canonicalizedObj);                                                                         // 11654\n      var sortedKeys = [],                                                                                             // 11655\n          key;                                                                                                         // 11656\n      for (key in obj) {                                                                                               // 11657\n        sortedKeys.push(key);                                                                                          // 11658\n      }                                                                                                                // 11659\n      sortedKeys.sort();                                                                                               // 11660\n      for (i = 0; i < sortedKeys.length; i += 1) {                                                                     // 11661\n        key = sortedKeys[i];                                                                                           // 11662\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);                                       // 11663\n      }                                                                                                                // 11664\n      stack.pop();                                                                                                     // 11665\n      replacementStack.pop();                                                                                          // 11666\n    } else {                                                                                                           // 11667\n      canonicalizedObj = obj;                                                                                          // 11668\n    }                                                                                                                  // 11669\n    return canonicalizedObj;                                                                                           // 11670\n  }                                                                                                                    // 11671\n                                                                                                                       // 11672\n  function buildValues(components, newString, oldString, useLongestToken) {                                            // 11673\n    var componentPos = 0,                                                                                              // 11674\n        componentLen = components.length,                                                                              // 11675\n        newPos = 0,                                                                                                    // 11676\n        oldPos = 0;                                                                                                    // 11677\n                                                                                                                       // 11678\n    for (; componentPos < componentLen; componentPos++) {                                                              // 11679\n      var component = components[componentPos];                                                                        // 11680\n      if (!component.removed) {                                                                                        // 11681\n        if (!component.added && useLongestToken) {                                                                     // 11682\n          var value = newString.slice(newPos, newPos + component.count);                                               // 11683\n          value = map(value, function(value, i) {                                                                      // 11684\n            var oldValue = oldString[oldPos + i];                                                                      // 11685\n            return oldValue.length > value.length ? oldValue : value;                                                  // 11686\n          });                                                                                                          // 11687\n                                                                                                                       // 11688\n          component.value = value.join('');                                                                            // 11689\n        } else {                                                                                                       // 11690\n          component.value = newString.slice(newPos, newPos + component.count).join('');                                // 11691\n        }                                                                                                              // 11692\n        newPos += component.count;                                                                                     // 11693\n                                                                                                                       // 11694\n        // Common case                                                                                                 // 11695\n        if (!component.added) {                                                                                        // 11696\n          oldPos += component.count;                                                                                   // 11697\n        }                                                                                                              // 11698\n      } else {                                                                                                         // 11699\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');                                  // 11700\n        oldPos += component.count;                                                                                     // 11701\n                                                                                                                       // 11702\n        // Reverse add and remove so removes are output first to match common convention                               // 11703\n        // The diffing algorithm is tied to add then remove output and this is the simplest                            // 11704\n        // route to get the desired output with minimal overhead.                                                      // 11705\n        if (componentPos && components[componentPos - 1].added) {                                                      // 11706\n          var tmp = components[componentPos - 1];                                                                      // 11707\n          components[componentPos - 1] = components[componentPos];                                                     // 11708\n          components[componentPos] = tmp;                                                                              // 11709\n        }                                                                                                              // 11710\n      }                                                                                                                // 11711\n    }                                                                                                                  // 11712\n                                                                                                                       // 11713\n    return components;                                                                                                 // 11714\n  }                                                                                                                    // 11715\n                                                                                                                       // 11716\n  function Diff(ignoreWhitespace) {                                                                                    // 11717\n    this.ignoreWhitespace = ignoreWhitespace;                                                                          // 11718\n  }                                                                                                                    // 11719\n  Diff.prototype = {                                                                                                   // 11720\n    diff: function(oldString, newString, callback) {                                                                   // 11721\n      var self = this;                                                                                                 // 11722\n                                                                                                                       // 11723\n      function done(value) {                                                                                           // 11724\n        if (callback) {                                                                                                // 11725\n          setTimeout(function() { callback(undefined, value); }, 0);                                                   // 11726\n          return true;                                                                                                 // 11727\n        } else {                                                                                                       // 11728\n          return value;                                                                                                // 11729\n        }                                                                                                              // 11730\n      }                                                                                                                // 11731\n                                                                                                                       // 11732\n      // Handle the identity case (this is due to unrolling editLength == 0                                            // 11733\n      if (newString === oldString) {                                                                                   // 11734\n        return done([{ value: newString }]);                                                                           // 11735\n      }                                                                                                                // 11736\n      if (!newString) {                                                                                                // 11737\n        return done([{ value: oldString, removed: true }]);                                                            // 11738\n      }                                                                                                                // 11739\n      if (!oldString) {                                                                                                // 11740\n        return done([{ value: newString, added: true }]);                                                              // 11741\n      }                                                                                                                // 11742\n                                                                                                                       // 11743\n      newString = this.tokenize(newString);                                                                            // 11744\n      oldString = this.tokenize(oldString);                                                                            // 11745\n                                                                                                                       // 11746\n      var newLen = newString.length, oldLen = oldString.length;                                                        // 11747\n      var editLength = 1;                                                                                              // 11748\n      var maxEditLength = newLen + oldLen;                                                                             // 11749\n      var bestPath = [{ newPos: -1, components: [] }];                                                                 // 11750\n                                                                                                                       // 11751\n      // Seed editLength = 0, i.e. the content starts with the same values                                             // 11752\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);                                           // 11753\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                  // 11754\n        // Identity per the equality and tokenizer                                                                     // 11755\n        return done([{value: newString.join('')}]);                                                                    // 11756\n      }                                                                                                                // 11757\n                                                                                                                       // 11758\n      // Main worker method. checks all permutations of a given edit length for acceptance.                            // 11759\n      function execEditLength() {                                                                                      // 11760\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {                      // 11761\n          var basePath;                                                                                                // 11762\n          var addPath = bestPath[diagonalPath - 1],                                                                    // 11763\n              removePath = bestPath[diagonalPath + 1],                                                                 // 11764\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;                                            // 11765\n          if (addPath) {                                                                                               // 11766\n            // No one else is going to attempt to use this value, clear it                                             // 11767\n            bestPath[diagonalPath - 1] = undefined;                                                                    // 11768\n          }                                                                                                            // 11769\n                                                                                                                       // 11770\n          var canAdd = addPath && addPath.newPos + 1 < newLen,                                                         // 11771\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;                                                // 11772\n          if (!canAdd && !canRemove) {                                                                                 // 11773\n            // If this path is a terminal then prune                                                                   // 11774\n            bestPath[diagonalPath] = undefined;                                                                        // 11775\n            continue;                                                                                                  // 11776\n          }                                                                                                            // 11777\n                                                                                                                       // 11778\n          // Select the diagonal that we want to branch from. We select the prior                                      // 11779\n          // path whose position in the new string is the farthest from the origin                                     // 11780\n          // and does not pass the bounds of the diff graph                                                            // 11781\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {                                          // 11782\n            basePath = clonePath(removePath);                                                                          // 11783\n            self.pushComponent(basePath.components, undefined, true);                                                  // 11784\n          } else {                                                                                                     // 11785\n            basePath = addPath;   // No need to clone, we've pulled it from the list                                   // 11786\n            basePath.newPos++;                                                                                         // 11787\n            self.pushComponent(basePath.components, true, undefined);                                                  // 11788\n          }                                                                                                            // 11789\n                                                                                                                       // 11790\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);                                   // 11791\n                                                                                                                       // 11792\n          // If we have hit the end of both strings, then we are done                                                  // 11793\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                 // 11794\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));                 // 11795\n          } else {                                                                                                     // 11796\n            // Otherwise track this path as a potential candidate and continue.                                        // 11797\n            bestPath[diagonalPath] = basePath;                                                                         // 11798\n          }                                                                                                            // 11799\n        }                                                                                                              // 11800\n                                                                                                                       // 11801\n        editLength++;                                                                                                  // 11802\n      }                                                                                                                // 11803\n                                                                                                                       // 11804\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the                              // 11805\n      // sync and async mode which is never fun. Loops over execEditLength until a value                               // 11806\n      // is produced.                                                                                                  // 11807\n      if (callback) {                                                                                                  // 11808\n        (function exec() {                                                                                             // 11809\n          setTimeout(function() {                                                                                      // 11810\n            // This should not happen, but we want to be safe.                                                         // 11811\n            /*istanbul ignore next */                                                                                  // 11812\n            if (editLength > maxEditLength) {                                                                          // 11813\n              return callback();                                                                                       // 11814\n            }                                                                                                          // 11815\n                                                                                                                       // 11816\n            if (!execEditLength()) {                                                                                   // 11817\n              exec();                                                                                                  // 11818\n            }                                                                                                          // 11819\n          }, 0);                                                                                                       // 11820\n        }());                                                                                                          // 11821\n      } else {                                                                                                         // 11822\n        while (editLength <= maxEditLength) {                                                                          // 11823\n          var ret = execEditLength();                                                                                  // 11824\n          if (ret) {                                                                                                   // 11825\n            return ret;                                                                                                // 11826\n          }                                                                                                            // 11827\n        }                                                                                                              // 11828\n      }                                                                                                                // 11829\n    },                                                                                                                 // 11830\n                                                                                                                       // 11831\n    pushComponent: function(components, added, removed) {                                                              // 11832\n      var last = components[components.length - 1];                                                                    // 11833\n      if (last && last.added === added && last.removed === removed) {                                                  // 11834\n        // We need to clone here as the component clone operation is just                                              // 11835\n        // as shallow array clone                                                                                      // 11836\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };                  // 11837\n      } else {                                                                                                         // 11838\n        components.push({count: 1, added: added, removed: removed });                                                  // 11839\n      }                                                                                                                // 11840\n    },                                                                                                                 // 11841\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {                                            // 11842\n      var newLen = newString.length,                                                                                   // 11843\n          oldLen = oldString.length,                                                                                   // 11844\n          newPos = basePath.newPos,                                                                                    // 11845\n          oldPos = newPos - diagonalPath,                                                                              // 11846\n                                                                                                                       // 11847\n          commonCount = 0;                                                                                             // 11848\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;                                                                                                      // 11850\n        oldPos++;                                                                                                      // 11851\n        commonCount++;                                                                                                 // 11852\n      }                                                                                                                // 11853\n                                                                                                                       // 11854\n      if (commonCount) {                                                                                               // 11855\n        basePath.components.push({count: commonCount});                                                                // 11856\n      }                                                                                                                // 11857\n                                                                                                                       // 11858\n      basePath.newPos = newPos;                                                                                        // 11859\n      return oldPos;                                                                                                   // 11860\n    },                                                                                                                 // 11861\n                                                                                                                       // 11862\n    equals: function(left, right) {                                                                                    // 11863\n      var reWhitespace = /\\S/;                                                                                         // 11864\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));       // 11865\n    },                                                                                                                 // 11866\n    tokenize: function(value) {                                                                                        // 11867\n      return value.split('');                                                                                          // 11868\n    }                                                                                                                  // 11869\n  };                                                                                                                   // 11870\n                                                                                                                       // 11871\n  var CharDiff = new Diff();                                                                                           // 11872\n                                                                                                                       // 11873\n  var WordDiff = new Diff(true);                                                                                       // 11874\n  var WordWithSpaceDiff = new Diff();                                                                                  // 11875\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {                                                   // 11876\n    return removeEmpty(value.split(/(\\s+|\\b)/));                                                                       // 11877\n  };                                                                                                                   // 11878\n                                                                                                                       // 11879\n  var CssDiff = new Diff(true);                                                                                        // 11880\n  CssDiff.tokenize = function(value) {                                                                                 // 11881\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));                                                                  // 11882\n  };                                                                                                                   // 11883\n                                                                                                                       // 11884\n  var LineDiff = new Diff();                                                                                           // 11885\n                                                                                                                       // 11886\n  var TrimmedLineDiff = new Diff();                                                                                    // 11887\n  TrimmedLineDiff.ignoreTrim = true;                                                                                   // 11888\n                                                                                                                       // 11889\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {                                                     // 11890\n    var retLines = [],                                                                                                 // 11891\n        lines = value.split(/^/m);                                                                                     // 11892\n    for (var i = 0; i < lines.length; i++) {                                                                           // 11893\n      var line = lines[i],                                                                                             // 11894\n          lastLine = lines[i - 1],                                                                                     // 11895\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];                                                // 11896\n                                                                                                                       // 11897\n      // Merge lines that may contain windows new lines                                                                // 11898\n      if (line === '\\n' && lastLineLastChar === '\\r') {                                                                // 11899\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';                         // 11900\n      } else {                                                                                                         // 11901\n        if (this.ignoreTrim) {                                                                                         // 11902\n          line = line.trim();                                                                                          // 11903\n          // add a newline unless this is the last line.                                                               // 11904\n          if (i < lines.length - 1) {                                                                                  // 11905\n            line += '\\n';                                                                                              // 11906\n          }                                                                                                            // 11907\n        }                                                                                                              // 11908\n        retLines.push(line);                                                                                           // 11909\n      }                                                                                                                // 11910\n    }                                                                                                                  // 11911\n                                                                                                                       // 11912\n    return retLines;                                                                                                   // 11913\n  };                                                                                                                   // 11914\n                                                                                                                       // 11915\n  var PatchDiff = new Diff();                                                                                          // 11916\n  PatchDiff.tokenize = function(value) {                                                                               // 11917\n    var ret = [],                                                                                                      // 11918\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);                                                                   // 11919\n                                                                                                                       // 11920\n    // Ignore the final empty token that occurs if the string ends with a new line                                     // 11921\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {                                                              // 11922\n      linesAndNewlines.pop();                                                                                          // 11923\n    }                                                                                                                  // 11924\n                                                                                                                       // 11925\n    // Merge the content and line separators into single tokens                                                        // 11926\n    for (var i = 0; i < linesAndNewlines.length; i++) {                                                                // 11927\n      var line = linesAndNewlines[i];                                                                                  // 11928\n                                                                                                                       // 11929\n      if (i % 2) {                                                                                                     // 11930\n        ret[ret.length - 1] += line;                                                                                   // 11931\n      } else {                                                                                                         // 11932\n        ret.push(line);                                                                                                // 11933\n      }                                                                                                                // 11934\n    }                                                                                                                  // 11935\n    return ret;                                                                                                        // 11936\n  };                                                                                                                   // 11937\n                                                                                                                       // 11938\n  var SentenceDiff = new Diff();                                                                                       // 11939\n  SentenceDiff.tokenize = function(value) {                                                                            // 11940\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));                                                          // 11941\n  };                                                                                                                   // 11942\n                                                                                                                       // 11943\n  var JsonDiff = new Diff();                                                                                           // 11944\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a                         // 11945\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:            // 11946\n  JsonDiff.useLongestToken = true;                                                                                     // 11947\n  JsonDiff.tokenize = LineDiff.tokenize;                                                                               // 11948\n  JsonDiff.equals = function(left, right) {                                                                            // 11949\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));                       // 11950\n  };                                                                                                                   // 11951\n                                                                                                                       // 11952\n  var JsDiff = {                                                                                                       // 11953\n    Diff: Diff,                                                                                                        // 11954\n                                                                                                                       // 11955\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },                 // 11956\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },                 // 11957\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },                 // 11959\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },   // 11960\n                                                                                                                       // 11961\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },         // 11962\n                                                                                                                       // 11963\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },                    // 11964\n    diffJson: function(oldObj, newObj, callback) {                                                                     // 11965\n      return JsonDiff.diff(                                                                                            // 11966\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),                   // 11967\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),                   // 11968\n        callback                                                                                                       // 11969\n      );                                                                                                               // 11970\n    },                                                                                                                 // 11971\n                                                                                                                       // 11972\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {                    // 11973\n      var ret = [];                                                                                                    // 11974\n                                                                                                                       // 11975\n      if (oldFileName == newFileName) {                                                                                // 11976\n        ret.push('Index: ' + oldFileName);                                                                             // 11977\n      }                                                                                                                // 11978\n      ret.push('===================================================================');                                 // 11979\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));                     // 11980\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));                     // 11981\n                                                                                                                       // 11982\n      var diff = PatchDiff.diff(oldStr, newStr);                                                                       // 11983\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier                             // 11984\n                                                                                                                       // 11985\n      // Formats a given set of lines for printing as context lines in a patch                                         // 11986\n      function contextLines(lines) {                                                                                   // 11987\n        return map(lines, function(entry) { return ' ' + entry; });                                                    // 11988\n      }                                                                                                                // 11989\n                                                                                                                       // 11990\n      // Outputs the no newline at end of file warning if needed                                                       // 11991\n      function eofNL(curRange, i, current) {                                                                           // 11992\n        var last = diff[diff.length - 2],                                                                              // 11993\n            isLast = i === diff.length - 2,                                                                            // 11994\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;                                      // 11995\n                                                                                                                       // 11996\n        // Figure out if this is the last line for the given file and missing NL                                       // 11997\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {                                                // 11998\n          curRange.push('\\\\ No newline at end of file');                                                               // 11999\n        }                                                                                                              // 12000\n      }                                                                                                                // 12001\n                                                                                                                       // 12002\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],                                                         // 12003\n          oldLine = 1, newLine = 1;                                                                                    // 12004\n      for (var i = 0; i < diff.length; i++) {                                                                          // 12005\n        var current = diff[i],                                                                                         // 12006\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');                                     // 12007\n        current.lines = lines;                                                                                         // 12008\n                                                                                                                       // 12009\n        if (current.added || current.removed) {                                                                        // 12010\n          // If we have previous context, start with that                                                              // 12011\n          if (!oldRangeStart) {                                                                                        // 12012\n            var prev = diff[i - 1];                                                                                    // 12013\n            oldRangeStart = oldLine;                                                                                   // 12014\n            newRangeStart = newLine;                                                                                   // 12015\n                                                                                                                       // 12016\n            if (prev) {                                                                                                // 12017\n              curRange = contextLines(prev.lines.slice(-4));                                                           // 12018\n              oldRangeStart -= curRange.length;                                                                        // 12019\n              newRangeStart -= curRange.length;                                                                        // 12020\n            }                                                                                                          // 12021\n          }                                                                                                            // 12022\n                                                                                                                       // 12023\n          // Output our changes                                                                                        // 12024\n          curRange.push.apply(curRange, map(lines, function(entry) {                                                   // 12025\n            return (current.added ? '+' : '-') + entry;                                                                // 12026\n          }));                                                                                                         // 12027\n          eofNL(curRange, i, current);                                                                                 // 12028\n                                                                                                                       // 12029\n          // Track the updated file position                                                                           // 12030\n          if (current.added) {                                                                                         // 12031\n            newLine += lines.length;                                                                                   // 12032\n          } else {                                                                                                     // 12033\n            oldLine += lines.length;                                                                                   // 12034\n          }                                                                                                            // 12035\n        } else {                                                                                                       // 12036\n          // Identical context lines. Track line changes                                                               // 12037\n          if (oldRangeStart) {                                                                                         // 12038\n            // Close out any changes that have been output (or join overlapping)                                       // 12039\n            if (lines.length <= 8 && i < diff.length - 2) {                                                            // 12040\n              // Overlapping                                                                                           // 12041\n              curRange.push.apply(curRange, contextLines(lines));                                                      // 12042\n            } else {                                                                                                   // 12043\n              // end the range and output                                                                              // 12044\n              var contextSize = Math.min(lines.length, 4);                                                             // 12045\n              ret.push(                                                                                                // 12046\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)                               // 12047\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)                               // 12048\n                  + ' @@');                                                                                            // 12049\n              ret.push.apply(ret, curRange);                                                                           // 12050\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));                                          // 12051\n              if (lines.length <= 4) {                                                                                 // 12052\n                eofNL(ret, i, current);                                                                                // 12053\n              }                                                                                                        // 12054\n                                                                                                                       // 12055\n              oldRangeStart = 0;                                                                                       // 12056\n              newRangeStart = 0;                                                                                       // 12057\n              curRange = [];                                                                                           // 12058\n            }                                                                                                          // 12059\n          }                                                                                                            // 12060\n          oldLine += lines.length;                                                                                     // 12061\n          newLine += lines.length;                                                                                     // 12062\n        }                                                                                                              // 12063\n      }                                                                                                                // 12064\n                                                                                                                       // 12065\n      return ret.join('\\n') + '\\n';                                                                                    // 12066\n    },                                                                                                                 // 12067\n                                                                                                                       // 12068\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {                                            // 12069\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);                     // 12070\n    },                                                                                                                 // 12071\n                                                                                                                       // 12072\n    applyPatch: function(oldStr, uniDiff) {                                                                            // 12073\n      var diffstr = uniDiff.split('\\n'),                                                                               // 12074\n          hunks = [],                                                                                                  // 12075\n          i = 0,                                                                                                       // 12076\n          remEOFNL = false,                                                                                            // 12077\n          addEOFNL = false;                                                                                            // 12078\n                                                                                                                       // 12079\n      // Skip to the first change hunk                                                                                 // 12080\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {                                                        // 12081\n        i++;                                                                                                           // 12082\n      }                                                                                                                // 12083\n                                                                                                                       // 12084\n      // Parse the unified diff                                                                                        // 12085\n      for (; i < diffstr.length; i++) {                                                                                // 12086\n        if (diffstr[i][0] === '@') {                                                                                   // 12087\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);                                      // 12088\n          hunks.unshift({                                                                                              // 12089\n            start: chnukHeader[3],                                                                                     // 12090\n            oldlength: +chnukHeader[2],                                                                                // 12091\n            removed: [],                                                                                               // 12092\n            newlength: chnukHeader[4],                                                                                 // 12093\n            added: []                                                                                                  // 12094\n          });                                                                                                          // 12095\n        } else if (diffstr[i][0] === '+') {                                                                            // 12096\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 12097\n        } else if (diffstr[i][0] === '-') {                                                                            // 12098\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 12099\n        } else if (diffstr[i][0] === ' ') {                                                                            // 12100\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 12101\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 12102\n        } else if (diffstr[i][0] === '\\\\') {                                                                           // 12103\n          if (diffstr[i - 1][0] === '+') {                                                                             // 12104\n            remEOFNL = true;                                                                                           // 12105\n          } else if (diffstr[i - 1][0] === '-') {                                                                      // 12106\n            addEOFNL = true;                                                                                           // 12107\n          }                                                                                                            // 12108\n        }                                                                                                              // 12109\n      }                                                                                                                // 12110\n                                                                                                                       // 12111\n      // Apply the diff to the input                                                                                   // 12112\n      var lines = oldStr.split('\\n');                                                                                  // 12113\n      for (i = hunks.length - 1; i >= 0; i--) {                                                                        // 12114\n        var hunk = hunks[i];                                                                                           // 12115\n        // Sanity check the input string. Bail if we don't match.                                                      // 12116\n        for (var j = 0; j < hunk.oldlength; j++) {                                                                     // 12117\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {                                                         // 12118\n            return false;                                                                                              // 12119\n          }                                                                                                            // 12120\n        }                                                                                                              // 12121\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));                      // 12122\n      }                                                                                                                // 12123\n                                                                                                                       // 12124\n      // Handle EOFNL insertion/removal                                                                                // 12125\n      if (remEOFNL) {                                                                                                  // 12126\n        while (!lines[lines.length - 1]) {                                                                             // 12127\n          lines.pop();                                                                                                 // 12128\n        }                                                                                                              // 12129\n      } else if (addEOFNL) {                                                                                           // 12130\n        lines.push('');                                                                                                // 12131\n      }                                                                                                                // 12132\n      return lines.join('\\n');                                                                                         // 12133\n    },                                                                                                                 // 12134\n                                                                                                                       // 12135\n    convertChangesToXML: function(changes) {                                                                           // 12136\n      var ret = [];                                                                                                    // 12137\n      for (var i = 0; i < changes.length; i++) {                                                                       // 12138\n        var change = changes[i];                                                                                       // 12139\n        if (change.added) {                                                                                            // 12140\n          ret.push('<ins>');                                                                                           // 12141\n        } else if (change.removed) {                                                                                   // 12142\n          ret.push('<del>');                                                                                           // 12143\n        }                                                                                                              // 12144\n                                                                                                                       // 12145\n        ret.push(escapeHTML(change.value));                                                                            // 12146\n                                                                                                                       // 12147\n        if (change.added) {                                                                                            // 12148\n          ret.push('</ins>');                                                                                          // 12149\n        } else if (change.removed) {                                                                                   // 12150\n          ret.push('</del>');                                                                                          // 12151\n        }                                                                                                              // 12152\n      }                                                                                                                // 12153\n      return ret.join('');                                                                                             // 12154\n    },                                                                                                                 // 12155\n                                                                                                                       // 12156\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API                                                  // 12157\n    convertChangesToDMP: function(changes) {                                                                           // 12158\n      var ret = [],                                                                                                    // 12159\n          change,                                                                                                      // 12160\n          operation;                                                                                                   // 12161\n      for (var i = 0; i < changes.length; i++) {                                                                       // 12162\n        change = changes[i];                                                                                           // 12163\n        if (change.added) {                                                                                            // 12164\n          operation = 1;                                                                                               // 12165\n        } else if (change.removed) {                                                                                   // 12166\n          operation = -1;                                                                                              // 12167\n        } else {                                                                                                       // 12168\n          operation = 0;                                                                                               // 12169\n        }                                                                                                              // 12170\n                                                                                                                       // 12171\n        ret.push([operation, change.value]);                                                                           // 12172\n      }                                                                                                                // 12173\n      return ret;                                                                                                      // 12174\n    },                                                                                                                 // 12175\n                                                                                                                       // 12176\n    canonicalize: canonicalize                                                                                         // 12177\n  };                                                                                                                   // 12178\n                                                                                                                       // 12179\n  /*istanbul ignore next */                                                                                            // 12180\n  /*global module */                                                                                                   // 12181\n  if (typeof module !== 'undefined' && module.exports) {                                                               // 12182\n    module.exports = JsDiff;                                                                                           // 12183\n  } else if (typeof define === 'function' && define.amd) {                                                             // 12184\n    /*global define */                                                                                                 // 12185\n    define([], function() { return JsDiff; });                                                                         // 12186\n  } else if (typeof global.JsDiff === 'undefined') {                                                                   // 12187\n    global.JsDiff = JsDiff;                                                                                            // 12188\n  }                                                                                                                    // 12189\n}(this));                                                                                                              // 12190\n                                                                                                                       // 12191\n},{}],68:[function(require,module,exports){                                                                            // 12192\n'use strict';                                                                                                          // 12193\n                                                                                                                       // 12194\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;                                                                          // 12195\n                                                                                                                       // 12196\nmodule.exports = function (str) {                                                                                      // 12197\n\tif (typeof str !== 'string') {                                                                                        // 12198\n\t\tthrow new TypeError('Expected a string');                                                                            // 12199\n\t}                                                                                                                     // 12200\n                                                                                                                       // 12201\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');                                                                        // 12202\n};                                                                                                                     // 12203\n                                                                                                                       // 12204\n},{}],69:[function(require,module,exports){                                                                            // 12205\n(function (process){                                                                                                   // 12206\n// Growl - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)                                                // 12207\n                                                                                                                       // 12208\n/**                                                                                                                    // 12209\n * Module dependencies.                                                                                                // 12210\n */                                                                                                                    // 12211\n                                                                                                                       // 12212\nvar exec = require('child_process').exec                                                                               // 12213\n  , fs = require('fs')                                                                                                 // 12214\n  , path = require('path')                                                                                             // 12215\n  , exists = fs.existsSync || path.existsSync                                                                          // 12216\n  , os = require('os')                                                                                                 // 12217\n  , quote = JSON.stringify                                                                                             // 12218\n  , cmd;                                                                                                               // 12219\n                                                                                                                       // 12220\nfunction which(name) {                                                                                                 // 12221\n  var paths = process.env.PATH.split(':');                                                                             // 12222\n  var loc;                                                                                                             // 12223\n                                                                                                                       // 12224\n  for (var i = 0, len = paths.length; i < len; ++i) {                                                                  // 12225\n    loc = path.join(paths[i], name);                                                                                   // 12226\n    if (exists(loc)) return loc;                                                                                       // 12227\n  }                                                                                                                    // 12228\n}                                                                                                                      // 12229\n                                                                                                                       // 12230\nswitch(os.type()) {                                                                                                    // 12231\n  case 'Darwin':                                                                                                       // 12232\n    if (which('terminal-notifier')) {                                                                                  // 12233\n      cmd = {                                                                                                          // 12234\n          type: \"Darwin-NotificationCenter\"                                                                            // 12235\n        , pkg: \"terminal-notifier\"                                                                                     // 12236\n        , msg: '-message'                                                                                              // 12237\n        , title: '-title'                                                                                              // 12238\n        , subtitle: '-subtitle'                                                                                        // 12239\n        , priority: {                                                                                                  // 12240\n              cmd: '-execute'                                                                                          // 12241\n            , range: []                                                                                                // 12242\n          }                                                                                                            // 12243\n      };                                                                                                               // 12244\n    } else {                                                                                                           // 12245\n      cmd = {                                                                                                          // 12246\n          type: \"Darwin-Growl\"                                                                                         // 12247\n        , pkg: \"growlnotify\"                                                                                           // 12248\n        , msg: '-m'                                                                                                    // 12249\n        , sticky: '--sticky'                                                                                           // 12250\n        , priority: {                                                                                                  // 12251\n              cmd: '--priority'                                                                                        // 12252\n            , range: [                                                                                                 // 12253\n                -2                                                                                                     // 12254\n              , -1                                                                                                     // 12255\n              , 0                                                                                                      // 12256\n              , 1                                                                                                      // 12257\n              , 2                                                                                                      // 12258\n              , \"Very Low\"                                                                                             // 12259\n              , \"Moderate\"                                                                                             // 12260\n              , \"Normal\"                                                                                               // 12261\n              , \"High\"                                                                                                 // 12262\n              , \"Emergency\"                                                                                            // 12263\n            ]                                                                                                          // 12264\n          }                                                                                                            // 12265\n      };                                                                                                               // 12266\n    }                                                                                                                  // 12267\n    break;                                                                                                             // 12268\n  case 'Linux':                                                                                                        // 12269\n    cmd = {                                                                                                            // 12270\n        type: \"Linux\"                                                                                                  // 12271\n      , pkg: \"notify-send\"                                                                                             // 12272\n      , msg: ''                                                                                                        // 12273\n      , sticky: '-t 0'                                                                                                 // 12274\n      , icon: '-i'                                                                                                     // 12275\n      , priority: {                                                                                                    // 12276\n          cmd: '-u'                                                                                                    // 12277\n        , range: [                                                                                                     // 12278\n            \"low\"                                                                                                      // 12279\n          , \"normal\"                                                                                                   // 12280\n          , \"critical\"                                                                                                 // 12281\n        ]                                                                                                              // 12282\n      }                                                                                                                // 12283\n    };                                                                                                                 // 12284\n    break;                                                                                                             // 12285\n  case 'Windows_NT':                                                                                                   // 12286\n    cmd = {                                                                                                            // 12287\n        type: \"Windows\"                                                                                                // 12288\n      , pkg: \"growlnotify\"                                                                                             // 12289\n      , msg: ''                                                                                                        // 12290\n      , sticky: '/s:true'                                                                                              // 12291\n      , title: '/t:'                                                                                                   // 12292\n      , icon: '/i:'                                                                                                    // 12293\n      , priority: {                                                                                                    // 12294\n            cmd: '/p:'                                                                                                 // 12295\n          , range: [                                                                                                   // 12296\n              -2                                                                                                       // 12297\n            , -1                                                                                                       // 12298\n            , 0                                                                                                        // 12299\n            , 1                                                                                                        // 12300\n            , 2                                                                                                        // 12301\n          ]                                                                                                            // 12302\n        }                                                                                                              // 12303\n    };                                                                                                                 // 12304\n    break;                                                                                                             // 12305\n}                                                                                                                      // 12306\n                                                                                                                       // 12307\n/**                                                                                                                    // 12308\n * Expose `growl`.                                                                                                     // 12309\n */                                                                                                                    // 12310\n                                                                                                                       // 12311\nexports = module.exports = growl;                                                                                      // 12312\n                                                                                                                       // 12313\n/**                                                                                                                    // 12314\n * Node-growl version.                                                                                                 // 12315\n */                                                                                                                    // 12316\n                                                                                                                       // 12317\nexports.version = '1.4.1'                                                                                              // 12318\n                                                                                                                       // 12319\n/**                                                                                                                    // 12320\n * Send growl notification _msg_ with _options_.                                                                       // 12321\n *                                                                                                                     // 12322\n * Options:                                                                                                            // 12323\n *                                                                                                                     // 12324\n *  - title   Notification title                                                                                       // 12325\n *  - sticky  Make the notification stick (defaults to false)                                                          // 12326\n *  - priority  Specify an int or named key (default is 0)                                                             // 12327\n *  - name    Application name (defaults to growlnotify)                                                               // 12328\n *  - image                                                                                                            // 12329\n *    - path to an icon sets --iconpath                                                                                // 12330\n *    - path to an image sets --image                                                                                  // 12331\n *    - capitalized word sets --appIcon                                                                                // 12332\n *    - filename uses extname as --icon                                                                                // 12333\n *    - otherwise treated as --icon                                                                                    // 12334\n *                                                                                                                     // 12335\n * Examples:                                                                                                           // 12336\n *                                                                                                                     // 12337\n *   growl('New email')                                                                                                // 12338\n *   growl('5 new emails', { title: 'Thunderbird' })                                                                   // 12339\n *   growl('Email sent', function(){                                                                                   // 12340\n *     // ... notification sent                                                                                        // 12341\n *   })                                                                                                                // 12342\n *                                                                                                                     // 12343\n * @param {string} msg                                                                                                 // 12344\n * @param {object} options                                                                                             // 12345\n * @param {function} fn                                                                                                // 12346\n * @api public                                                                                                         // 12347\n */                                                                                                                    // 12348\n                                                                                                                       // 12349\nfunction growl(msg, options, fn) {                                                                                     // 12350\n  var image                                                                                                            // 12351\n    , args                                                                                                             // 12352\n    , options = options || {}                                                                                          // 12353\n    , fn = fn || function(){};                                                                                         // 12354\n                                                                                                                       // 12355\n  // noop                                                                                                              // 12356\n  if (!cmd) return fn(new Error('growl not supported on this platform'));                                              // 12357\n  args = [cmd.pkg];                                                                                                    // 12358\n                                                                                                                       // 12359\n  // image                                                                                                             // 12360\n  if (image = options.image) {                                                                                         // 12361\n    switch(cmd.type) {                                                                                                 // 12362\n      case 'Darwin-Growl':                                                                                             // 12363\n        var flag, ext = path.extname(image).substr(1)                                                                  // 12364\n        flag = flag || ext == 'icns' && 'iconpath'                                                                     // 12365\n        flag = flag || /^[A-Z]/.test(image) && 'appIcon'                                                               // 12366\n        flag = flag || /^png|gif|jpe?g$/.test(ext) && 'image'                                                          // 12367\n        flag = flag || ext && (image = ext) && 'icon'                                                                  // 12368\n        flag = flag || 'icon'                                                                                          // 12369\n        args.push('--' + flag, quote(image))                                                                           // 12370\n        break;                                                                                                         // 12371\n      case 'Linux':                                                                                                    // 12372\n        args.push(cmd.icon, quote(image));                                                                             // 12373\n        // libnotify defaults to sticky, set a hint for transient notifications                                        // 12374\n        if (!options.sticky) args.push('--hint=int:transient:1');                                                      // 12375\n        break;                                                                                                         // 12376\n      case 'Windows':                                                                                                  // 12377\n        args.push(cmd.icon + quote(image));                                                                            // 12378\n        break;                                                                                                         // 12379\n    }                                                                                                                  // 12380\n  }                                                                                                                    // 12381\n                                                                                                                       // 12382\n  // sticky                                                                                                            // 12383\n  if (options.sticky) args.push(cmd.sticky);                                                                           // 12384\n                                                                                                                       // 12385\n  // priority                                                                                                          // 12386\n  if (options.priority) {                                                                                              // 12387\n    var priority = options.priority + '';                                                                              // 12388\n    var checkindexOf = cmd.priority.range.indexOf(priority);                                                           // 12389\n    if (~cmd.priority.range.indexOf(priority)) {                                                                       // 12390\n      args.push(cmd.priority, options.priority);                                                                       // 12391\n    }                                                                                                                  // 12392\n  }                                                                                                                    // 12393\n                                                                                                                       // 12394\n  // name                                                                                                              // 12395\n  if (options.name && cmd.type === \"Darwin-Growl\") {                                                                   // 12396\n    args.push('--name', options.name);                                                                                 // 12397\n  }                                                                                                                    // 12398\n                                                                                                                       // 12399\n  switch(cmd.type) {                                                                                                   // 12400\n    case 'Darwin-Growl':                                                                                               // 12401\n      args.push(cmd.msg);                                                                                              // 12402\n      args.push(quote(msg));                                                                                           // 12403\n      if (options.title) args.push(quote(options.title));                                                              // 12404\n      break;                                                                                                           // 12405\n    case 'Darwin-NotificationCenter':                                                                                  // 12406\n      args.push(cmd.msg);                                                                                              // 12407\n      args.push(quote(msg));                                                                                           // 12408\n      if (options.title) {                                                                                             // 12409\n        args.push(cmd.title);                                                                                          // 12410\n        args.push(quote(options.title));                                                                               // 12411\n      }                                                                                                                // 12412\n      if (options.subtitle) {                                                                                          // 12413\n        args.push(cmd.subtitle);                                                                                       // 12414\n        args.push(quote(options.subtitle));                                                                            // 12415\n      }                                                                                                                // 12416\n      break;                                                                                                           // 12417\n    case 'Darwin-Growl':                                                                                               // 12418\n      args.push(cmd.msg);                                                                                              // 12419\n      args.push(quote(msg));                                                                                           // 12420\n      if (options.title) args.push(quote(options.title));                                                              // 12421\n      break;                                                                                                           // 12422\n    case 'Linux':                                                                                                      // 12423\n      if (options.title) {                                                                                             // 12424\n        args.push(quote(options.title));                                                                               // 12425\n        args.push(cmd.msg);                                                                                            // 12426\n        args.push(quote(msg));                                                                                         // 12427\n      } else {                                                                                                         // 12428\n        args.push(quote(msg));                                                                                         // 12429\n      }                                                                                                                // 12430\n      break;                                                                                                           // 12431\n    case 'Windows':                                                                                                    // 12432\n      args.push(quote(msg));                                                                                           // 12433\n      if (options.title) args.push(cmd.title + quote(options.title));                                                  // 12434\n      break;                                                                                                           // 12435\n  }                                                                                                                    // 12436\n                                                                                                                       // 12437\n  // execute                                                                                                           // 12438\n  exec(args.join(' '), fn);                                                                                            // 12439\n};                                                                                                                     // 12440\n                                                                                                                       // 12441\n}).call(this,require('_process'))                                                                                      // 12442\n},{\"_process\":51,\"child_process\":41,\"fs\":41,\"os\":50,\"path\":41}],70:[function(require,module,exports){                  // 12443\n(function (process){                                                                                                   // 12444\nvar path = require('path');                                                                                            // 12445\nvar fs = require('fs');                                                                                                // 12446\nvar _0777 = parseInt('0777', 8);                                                                                       // 12447\n                                                                                                                       // 12448\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;                                                               // 12449\n                                                                                                                       // 12450\nfunction mkdirP (p, opts, f, made) {                                                                                   // 12451\n    if (typeof opts === 'function') {                                                                                  // 12452\n        f = opts;                                                                                                      // 12453\n        opts = {};                                                                                                     // 12454\n    }                                                                                                                  // 12455\n    else if (!opts || typeof opts !== 'object') {                                                                      // 12456\n        opts = { mode: opts };                                                                                         // 12457\n    }                                                                                                                  // 12458\n                                                                                                                       // 12459\n    var mode = opts.mode;                                                                                              // 12460\n    var xfs = opts.fs || fs;                                                                                           // 12461\n                                                                                                                       // 12462\n    if (mode === undefined) {                                                                                          // 12463\n        mode = _0777 & (~process.umask());                                                                             // 12464\n    }                                                                                                                  // 12465\n    if (!made) made = null;                                                                                            // 12466\n                                                                                                                       // 12467\n    var cb = f || function () {};                                                                                      // 12468\n    p = path.resolve(p);                                                                                               // 12469\n                                                                                                                       // 12470\n    xfs.mkdir(p, mode, function (er) {                                                                                 // 12471\n        if (!er) {                                                                                                     // 12472\n            made = made || p;                                                                                          // 12473\n            return cb(null, made);                                                                                     // 12474\n        }                                                                                                              // 12475\n        switch (er.code) {                                                                                             // 12476\n            case 'ENOENT':                                                                                             // 12477\n                mkdirP(path.dirname(p), opts, function (er, made) {                                                    // 12478\n                    if (er) cb(er, made);                                                                              // 12479\n                    else mkdirP(p, opts, cb, made);                                                                    // 12480\n                });                                                                                                    // 12481\n                break;                                                                                                 // 12482\n                                                                                                                       // 12483\n            // In the case of any other error, just see if there's a dir                                               // 12484\n            // there already.  If so, then hooray!  If not, then something                                             // 12485\n            // is borked.                                                                                              // 12486\n            default:                                                                                                   // 12487\n                xfs.stat(p, function (er2, stat) {                                                                     // 12488\n                    // if the stat fails, then that's super weird.                                                     // 12489\n                    // let the original error be the failure reason.                                                   // 12490\n                    if (er2 || !stat.isDirectory()) cb(er, made)                                                       // 12491\n                    else cb(null, made);                                                                               // 12492\n                });                                                                                                    // 12493\n                break;                                                                                                 // 12494\n        }                                                                                                              // 12495\n    });                                                                                                                // 12496\n}                                                                                                                      // 12497\n                                                                                                                       // 12498\nmkdirP.sync = function sync (p, opts, made) {                                                                          // 12499\n    if (!opts || typeof opts !== 'object') {                                                                           // 12500\n        opts = { mode: opts };                                                                                         // 12501\n    }                                                                                                                  // 12502\n                                                                                                                       // 12503\n    var mode = opts.mode;                                                                                              // 12504\n    var xfs = opts.fs || fs;                                                                                           // 12505\n                                                                                                                       // 12506\n    if (mode === undefined) {                                                                                          // 12507\n        mode = _0777 & (~process.umask());                                                                             // 12508\n    }                                                                                                                  // 12509\n    if (!made) made = null;                                                                                            // 12510\n                                                                                                                       // 12511\n    p = path.resolve(p);                                                                                               // 12512\n                                                                                                                       // 12513\n    try {                                                                                                              // 12514\n        xfs.mkdirSync(p, mode);                                                                                        // 12515\n        made = made || p;                                                                                              // 12516\n    }                                                                                                                  // 12517\n    catch (err0) {                                                                                                     // 12518\n        switch (err0.code) {                                                                                           // 12519\n            case 'ENOENT' :                                                                                            // 12520\n                made = sync(path.dirname(p), opts, made);                                                              // 12521\n                sync(p, opts, made);                                                                                   // 12522\n                break;                                                                                                 // 12523\n                                                                                                                       // 12524\n            // In the case of any other error, just see if there's a dir                                               // 12525\n            // there already.  If so, then hooray!  If not, then something                                             // 12526\n            // is borked.                                                                                              // 12527\n            default:                                                                                                   // 12528\n                var stat;                                                                                              // 12529\n                try {                                                                                                  // 12530\n                    stat = xfs.statSync(p);                                                                            // 12531\n                }                                                                                                      // 12532\n                catch (err1) {                                                                                         // 12533\n                    throw err0;                                                                                        // 12534\n                }                                                                                                      // 12535\n                if (!stat.isDirectory()) throw err0;                                                                   // 12536\n                break;                                                                                                 // 12537\n        }                                                                                                              // 12538\n    }                                                                                                                  // 12539\n                                                                                                                       // 12540\n    return made;                                                                                                       // 12541\n};                                                                                                                     // 12542\n                                                                                                                       // 12543\n}).call(this,require('_process'))                                                                                      // 12544\n},{\"_process\":51,\"fs\":41,\"path\":41}],71:[function(require,module,exports){                                             // 12545\n(function (process,global){                                                                                            // 12546\n/**                                                                                                                    // 12547\n * Shim process.stdout.                                                                                                // 12548\n */                                                                                                                    // 12549\n                                                                                                                       // 12550\nprocess.stdout = require('browser-stdout')();                                                                          // 12551\n                                                                                                                       // 12552\nvar Mocha = require('../');                                                                                            // 12553\n                                                                                                                       // 12554\n/**                                                                                                                    // 12555\n * Create a Mocha instance.                                                                                            // 12556\n *                                                                                                                     // 12557\n * @return {undefined}                                                                                                 // 12558\n */                                                                                                                    // 12559\n                                                                                                                       // 12560\nvar mocha = new Mocha({ reporter: 'html' });                                                                           // 12561\n                                                                                                                       // 12562\n/**                                                                                                                    // 12563\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 12564\n */                                                                                                                    // 12565\n                                                                                                                       // 12566\nvar Date = global.Date;                                                                                                // 12567\nvar setTimeout = global.setTimeout;                                                                                    // 12568\nvar setInterval = global.setInterval;                                                                                  // 12569\nvar clearTimeout = global.clearTimeout;                                                                                // 12570\nvar clearInterval = global.clearInterval;                                                                              // 12571\n                                                                                                                       // 12572\nvar uncaughtExceptionHandlers = [];                                                                                    // 12573\n                                                                                                                       // 12574\nvar originalOnerrorHandler = global.onerror;                                                                           // 12575\n                                                                                                                       // 12576\n/**                                                                                                                    // 12577\n * Remove uncaughtException listener.                                                                                  // 12578\n * Revert to original onerror handler if previously defined.                                                           // 12579\n */                                                                                                                    // 12580\n                                                                                                                       // 12581\nprocess.removeListener = function(e, fn){                                                                              // 12582\n  if ('uncaughtException' == e) {                                                                                      // 12583\n    if (originalOnerrorHandler) {                                                                                      // 12584\n      global.onerror = originalOnerrorHandler;                                                                         // 12585\n    } else {                                                                                                           // 12586\n      global.onerror = function() {};                                                                                  // 12587\n    }                                                                                                                  // 12588\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);                                                        // 12589\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }                                                           // 12590\n  }                                                                                                                    // 12591\n};                                                                                                                     // 12592\n                                                                                                                       // 12593\n/**                                                                                                                    // 12594\n * Implements uncaughtException listener.                                                                              // 12595\n */                                                                                                                    // 12596\n                                                                                                                       // 12597\nprocess.on = function(e, fn){                                                                                          // 12598\n  if ('uncaughtException' == e) {                                                                                      // 12599\n    global.onerror = function(err, url, line){                                                                         // 12600\n      fn(new Error(err + ' (' + url + ':' + line + ')'));                                                              // 12601\n      return !mocha.allowUncaught;                                                                                     // 12602\n    };                                                                                                                 // 12603\n    uncaughtExceptionHandlers.push(fn);                                                                                // 12604\n  }                                                                                                                    // 12605\n};                                                                                                                     // 12606\n                                                                                                                       // 12607\n// The BDD UI is registered by default, but no UI will be functional in the                                            // 12608\n// browser without an explicit call to the overridden `mocha.ui` (see below).                                          // 12609\n// Ensure that this default UI does not expose its methods to the global scope.                                        // 12610\nmocha.suite.removeAllListeners('pre-require');                                                                         // 12611\n                                                                                                                       // 12612\nvar immediateQueue = []                                                                                                // 12613\n  , immediateTimeout;                                                                                                  // 12614\n                                                                                                                       // 12615\nfunction timeslice() {                                                                                                 // 12616\n  var immediateStart = new Date().getTime();                                                                           // 12617\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {                                     // 12618\n    immediateQueue.shift()();                                                                                          // 12619\n  }                                                                                                                    // 12620\n  if (immediateQueue.length) {                                                                                         // 12621\n    immediateTimeout = setTimeout(timeslice, 0);                                                                       // 12622\n  } else {                                                                                                             // 12623\n    immediateTimeout = null;                                                                                           // 12624\n  }                                                                                                                    // 12625\n}                                                                                                                      // 12626\n                                                                                                                       // 12627\n/**                                                                                                                    // 12628\n * High-performance override of Runner.immediately.                                                                    // 12629\n */                                                                                                                    // 12630\n                                                                                                                       // 12631\nMocha.Runner.immediately = function(callback) {                                                                        // 12632\n  immediateQueue.push(callback);                                                                                       // 12633\n  if (!immediateTimeout) {                                                                                             // 12634\n    immediateTimeout = setTimeout(timeslice, 0);                                                                       // 12635\n  }                                                                                                                    // 12636\n};                                                                                                                     // 12637\n                                                                                                                       // 12638\n/**                                                                                                                    // 12639\n * Function to allow assertion libraries to throw errors directly into mocha.                                          // 12640\n * This is useful when running tests in a browser because window.onerror will                                          // 12641\n * only receive the 'message' attribute of the Error.                                                                  // 12642\n */                                                                                                                    // 12643\nmocha.throwError = function(err) {                                                                                     // 12644\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {                                                       // 12645\n    fn(err);                                                                                                           // 12646\n  });                                                                                                                  // 12647\n  throw err;                                                                                                           // 12648\n};                                                                                                                     // 12649\n                                                                                                                       // 12650\n/**                                                                                                                    // 12651\n * Override ui to ensure that the ui functions are initialized.                                                        // 12652\n * Normally this would happen in Mocha.prototype.loadFiles.                                                            // 12653\n */                                                                                                                    // 12654\n                                                                                                                       // 12655\nmocha.ui = function(ui){                                                                                               // 12656\n  Mocha.prototype.ui.call(this, ui);                                                                                   // 12657\n  this.suite.emit('pre-require', global, null, this);                                                                  // 12658\n  return this;                                                                                                         // 12659\n};                                                                                                                     // 12660\n                                                                                                                       // 12661\n/**                                                                                                                    // 12662\n * Setup mocha with the given setting options.                                                                         // 12663\n */                                                                                                                    // 12664\n                                                                                                                       // 12665\nmocha.setup = function(opts){                                                                                          // 12666\n  if ('string' == typeof opts) opts = { ui: opts };                                                                    // 12667\n  for (var opt in opts) this[opt](opts[opt]);                                                                          // 12668\n  return this;                                                                                                         // 12669\n};                                                                                                                     // 12670\n                                                                                                                       // 12671\n/**                                                                                                                    // 12672\n * Run mocha, returning the Runner.                                                                                    // 12673\n */                                                                                                                    // 12674\n                                                                                                                       // 12675\nmocha.run = function(fn){                                                                                              // 12676\n  var options = mocha.options;                                                                                         // 12677\n  mocha.globals('location');                                                                                           // 12678\n                                                                                                                       // 12679\n  var query = Mocha.utils.parseQuery(global.location.search || '');                                                    // 12680\n  if (query.grep) mocha.grep(new RegExp(query.grep));                                                                  // 12681\n  if (query.fgrep) mocha.grep(query.fgrep);                                                                            // 12682\n  if (query.invert) mocha.invert();                                                                                    // 12683\n                                                                                                                       // 12684\n  return Mocha.prototype.run.call(mocha, function(err){                                                                // 12685\n    // The DOM Document is not available in Web Workers.                                                               // 12686\n    var document = global.document;                                                                                    // 12687\n    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {                             // 12688\n      Mocha.utils.highlightTags('code');                                                                               // 12689\n    }                                                                                                                  // 12690\n    if (fn) fn(err);                                                                                                   // 12691\n  });                                                                                                                  // 12692\n};                                                                                                                     // 12693\n                                                                                                                       // 12694\n/**                                                                                                                    // 12695\n * Expose the process shim.                                                                                            // 12696\n * https://github.com/mochajs/mocha/pull/916                                                                           // 12697\n */                                                                                                                    // 12698\n                                                                                                                       // 12699\nMocha.process = process;                                                                                               // 12700\n                                                                                                                       // 12701\n/**                                                                                                                    // 12702\n * Expose mocha.                                                                                                       // 12703\n */                                                                                                                    // 12704\n                                                                                                                       // 12705\nglobal.Mocha = Mocha;                                                                                                  // 12706\nglobal.mocha = mocha;                                                                                                  // 12707\n                                                                                                                       // 12708\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../\":1,\"_process\":51,\"browser-stdout\":40}]},{},[71]);                                                              // 12710\n                                                                                                                       // 12711\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"mocha.js\":function(require,exports,module,__filename,__dirname){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/mocha.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * mocha                                                                                                               // 2\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>                                                               // 3\n * MIT Licensed                                                                                                        // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Module dependencies.                                                                                                // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nvar escapeRe = require('escape-string-regexp');                                                                        // 11\nvar path = require('path');                                                                                            // 12\nvar reporters = require('./reporters');                                                                                // 13\nvar utils = require('./utils');                                                                                        // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Expose `Mocha`.                                                                                                     // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nexports = module.exports = Mocha;                                                                                      // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * To require local UIs and reporters when running in node.                                                            // 23\n */                                                                                                                    // 24\n                                                                                                                       // 25\nif (!process.browser) {                                                                                                // 26\n  var cwd = process.cwd();                                                                                             // 27\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));                                                              // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Expose internals.                                                                                                   // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nexports.utils = utils;                                                                                                 // 35\nexports.interfaces = require('./interfaces');                                                                          // 36\nexports.reporters = reporters;                                                                                         // 37\nexports.Runnable = require('./runnable');                                                                              // 38\nexports.Context = require('./context');                                                                                // 39\nexports.Runner = require('./runner');                                                                                  // 40\nexports.Suite = require('./suite');                                                                                    // 41\nexports.Hook = require('./hook');                                                                                      // 42\nexports.Test = require('./test');                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Return image `name` path.                                                                                           // 46\n *                                                                                                                     // 47\n * @api private                                                                                                        // 48\n * @param {string} name                                                                                                // 49\n * @return {string}                                                                                                    // 50\n */                                                                                                                    // 51\nfunction image(name) {                                                                                                 // 52\n  return path.join(__dirname, '../images', name + '.png');                                                             // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Set up mocha with `options`.                                                                                        // 57\n *                                                                                                                     // 58\n * Options:                                                                                                            // 59\n *                                                                                                                     // 60\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc                                                                           // 61\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`                                                // 62\n *   - `globals` array of accepted globals                                                                             // 63\n *   - `timeout` timeout in milliseconds                                                                               // 64\n *   - `retries` number of times to retry failed tests                                                                 // 65\n *   - `bail` bail on the first test failure                                                                           // 66\n *   - `slow` milliseconds to wait before considering a test slow                                                      // 67\n *   - `ignoreLeaks` ignore global leaks                                                                               // 68\n *   - `fullTrace` display the full stack-trace on failing                                                             // 69\n *   - `grep` string or regexp to filter tests with                                                                    // 70\n *                                                                                                                     // 71\n * @param {Object} options                                                                                             // 72\n * @api public                                                                                                         // 73\n */                                                                                                                    // 74\nfunction Mocha(options) {                                                                                              // 75\n  options = options || {};                                                                                             // 76\n  this.files = [];                                                                                                     // 77\n  this.options = options;                                                                                              // 78\n  if (options.grep) {                                                                                                  // 79\n    this.grep(new RegExp(options.grep));                                                                               // 80\n  }                                                                                                                    // 81\n  if (options.fgrep) {                                                                                                 // 82\n    this.grep(options.fgrep);                                                                                          // 83\n  }                                                                                                                    // 84\n  this.suite = new exports.Suite('', new exports.Context());                                                           // 85\n  this.ui(options.ui);                                                                                                 // 86\n  this.bail(options.bail);                                                                                             // 87\n  this.reporter(options.reporter, options.reporterOptions);                                                            // 88\n  if (typeof options.timeout !== 'undefined' && options.timeout !== null) {                                            // 89\n    this.timeout(options.timeout);                                                                                     // 90\n  }                                                                                                                    // 91\n  if (typeof options.retries !== 'undefined' && options.retries !== null) {                                            // 92\n    this.retries(options.retries);                                                                                     // 93\n  }                                                                                                                    // 94\n  this.useColors(options.useColors);                                                                                   // 95\n  if (options.enableTimeouts !== null) {                                                                               // 96\n    this.enableTimeouts(options.enableTimeouts);                                                                       // 97\n  }                                                                                                                    // 98\n  if (options.slow) {                                                                                                  // 99\n    this.slow(options.slow);                                                                                           // 100\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n  this.suite.on('pre-require', function(context) {                                                                     // 103\n    exports.afterEach = context.afterEach || context.teardown;                                                         // 104\n    exports.after = context.after || context.suiteTeardown;                                                            // 105\n    exports.beforeEach = context.beforeEach || context.setup;                                                          // 106\n    exports.before = context.before || context.suiteSetup;                                                             // 107\n    exports.describe = context.describe || context.suite;                                                              // 108\n    exports.it = context.it || context.test;                                                                           // 109\n    exports.setup = context.setup || context.beforeEach;                                                               // 110\n    exports.suiteSetup = context.suiteSetup || context.before;                                                         // 111\n    exports.suiteTeardown = context.suiteTeardown || context.after;                                                    // 112\n    exports.suite = context.suite || context.describe;                                                                 // 113\n    exports.teardown = context.teardown || context.afterEach;                                                          // 114\n    exports.test = context.test || context.it;                                                                         // 115\n    exports.run = context.run;                                                                                         // 116\n  });                                                                                                                  // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * Enable or disable bailing on the first failure.                                                                     // 121\n *                                                                                                                     // 122\n * @api public                                                                                                         // 123\n * @param {boolean} [bail]                                                                                             // 124\n */                                                                                                                    // 125\nMocha.prototype.bail = function(bail) {                                                                                // 126\n  if (!arguments.length) {                                                                                             // 127\n    bail = true;                                                                                                       // 128\n  }                                                                                                                    // 129\n  this.suite.bail(bail);                                                                                               // 130\n  return this;                                                                                                         // 131\n};                                                                                                                     // 132\n                                                                                                                       // 133\n/**                                                                                                                    // 134\n * Add test `file`.                                                                                                    // 135\n *                                                                                                                     // 136\n * @api public                                                                                                         // 137\n * @param {string} file                                                                                                // 138\n */                                                                                                                    // 139\nMocha.prototype.addFile = function(file) {                                                                             // 140\n  this.files.push(file);                                                                                               // 141\n  return this;                                                                                                         // 142\n};                                                                                                                     // 143\n                                                                                                                       // 144\n/**                                                                                                                    // 145\n * Set reporter to `reporter`, defaults to \"spec\".                                                                     // 146\n *                                                                                                                     // 147\n * @param {String|Function} reporter name or constructor                                                               // 148\n * @param {Object} reporterOptions optional options                                                                    // 149\n * @api public                                                                                                         // 150\n * @param {string|Function} reporter name or constructor                                                               // 151\n * @param {Object} reporterOptions optional options                                                                    // 152\n */                                                                                                                    // 153\nMocha.prototype.reporter = function(reporter, reporterOptions) {                                                       // 154\n  if (typeof reporter === 'function') {                                                                                // 155\n    this._reporter = reporter;                                                                                         // 156\n  } else {                                                                                                             // 157\n    reporter = reporter || 'spec';                                                                                     // 158\n    var _reporter;                                                                                                     // 159\n    // Try to load a built-in reporter.                                                                                // 160\n    if (reporters[reporter]) {                                                                                         // 161\n      _reporter = reporters[reporter];                                                                                 // 162\n    }                                                                                                                  // 163\n    // Try to load reporters from process.cwd() and node_modules                                                       // 164\n    if (!_reporter) {                                                                                                  // 165\n      try {                                                                                                            // 166\n        _reporter = require(reporter);                                                                                 // 167\n      } catch (err) {                                                                                                  // 168\n        err.message.indexOf('Cannot find module') !== -1                                                               // 169\n          ? console.warn('\"' + reporter + '\" reporter not found')                                                      // 170\n          : console.warn('\"' + reporter + '\" reporter blew up with error:\\n' + err.stack);                             // 171\n      }                                                                                                                // 172\n    }                                                                                                                  // 173\n    if (!_reporter && reporter === 'teamcity') {                                                                       // 174\n      console.warn('The Teamcity reporter was moved to a package named '                                               // 175\n        + 'mocha-teamcity-reporter '                                                                                   // 176\n        + '(https://npmjs.org/package/mocha-teamcity-reporter).');                                                     // 177\n    }                                                                                                                  // 178\n    if (!_reporter) {                                                                                                  // 179\n      throw new Error('invalid reporter \"' + reporter + '\"');                                                          // 180\n    }                                                                                                                  // 181\n    this._reporter = _reporter;                                                                                        // 182\n  }                                                                                                                    // 183\n  this.options.reporterOptions = reporterOptions;                                                                      // 184\n  return this;                                                                                                         // 185\n};                                                                                                                     // 186\n                                                                                                                       // 187\n/**                                                                                                                    // 188\n * Set test UI `name`, defaults to \"bdd\".                                                                              // 189\n *                                                                                                                     // 190\n * @api public                                                                                                         // 191\n * @param {string} bdd                                                                                                 // 192\n */                                                                                                                    // 193\nMocha.prototype.ui = function(name) {                                                                                  // 194\n  name = name || 'bdd';                                                                                                // 195\n  this._ui = exports.interfaces[name];                                                                                 // 196\n  if (!this._ui) {                                                                                                     // 197\n    try {                                                                                                              // 198\n      this._ui = require(name);                                                                                        // 199\n    } catch (err) {                                                                                                    // 200\n      throw new Error('invalid interface \"' + name + '\"');                                                             // 201\n    }                                                                                                                  // 202\n  }                                                                                                                    // 203\n  this._ui = this._ui(this.suite);                                                                                     // 204\n  return this;                                                                                                         // 205\n};                                                                                                                     // 206\n                                                                                                                       // 207\n/**                                                                                                                    // 208\n * Load registered files.                                                                                              // 209\n *                                                                                                                     // 210\n * @api private                                                                                                        // 211\n */                                                                                                                    // 212\nMocha.prototype.loadFiles = function(fn) {                                                                             // 213\n  var self = this;                                                                                                     // 214\n  var suite = this.suite;                                                                                              // 215\n  this.files.forEach(function(file) {                                                                                  // 216\n    file = path.resolve(file);                                                                                         // 217\n    suite.emit('pre-require', global, file, self);                                                                     // 218\n    suite.emit('require', require(file), file, self);                                                                  // 219\n    suite.emit('post-require', global, file, self);                                                                    // 220\n  });                                                                                                                  // 221\n  fn && fn();                                                                                                          // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\n/**                                                                                                                    // 225\n * Enable growl support.                                                                                               // 226\n *                                                                                                                     // 227\n * @api private                                                                                                        // 228\n */                                                                                                                    // 229\nMocha.prototype._growl = function(runner, reporter) {                                                                  // 230\n  var notify = require('growl');                                                                                       // 231\n                                                                                                                       // 232\n  runner.on('end', function() {                                                                                        // 233\n    var stats = reporter.stats;                                                                                        // 234\n    if (stats.failures) {                                                                                              // 235\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';                                              // 236\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });                                          // 237\n    } else {                                                                                                           // 238\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {                                             // 239\n        name: 'mocha',                                                                                                 // 240\n        title: 'Passed',                                                                                               // 241\n        image: image('ok')                                                                                             // 242\n      });                                                                                                              // 243\n    }                                                                                                                  // 244\n  });                                                                                                                  // 245\n};                                                                                                                     // 246\n                                                                                                                       // 247\n/**                                                                                                                    // 248\n * Add regexp to grep, if `re` is a string it is escaped.                                                              // 249\n *                                                                                                                     // 250\n * @param {RegExp|String} re                                                                                           // 251\n * @return {Mocha}                                                                                                     // 252\n * @api public                                                                                                         // 253\n * @param {RegExp|string} re                                                                                           // 254\n * @return {Mocha}                                                                                                     // 255\n */                                                                                                                    // 256\nMocha.prototype.grep = function(re) {                                                                                  // 257\n  this.options.grep = typeof re === 'string' ? new RegExp(escapeRe(re)) : re;                                          // 258\n  return this;                                                                                                         // 259\n};                                                                                                                     // 260\n                                                                                                                       // 261\n/**                                                                                                                    // 262\n * Invert `.grep()` matches.                                                                                           // 263\n *                                                                                                                     // 264\n * @return {Mocha}                                                                                                     // 265\n * @api public                                                                                                         // 266\n */                                                                                                                    // 267\nMocha.prototype.invert = function() {                                                                                  // 268\n  this.options.invert = true;                                                                                          // 269\n  return this;                                                                                                         // 270\n};                                                                                                                     // 271\n                                                                                                                       // 272\n/**                                                                                                                    // 273\n * Ignore global leaks.                                                                                                // 274\n *                                                                                                                     // 275\n * @param {Boolean} ignore                                                                                             // 276\n * @return {Mocha}                                                                                                     // 277\n * @api public                                                                                                         // 278\n * @param {boolean} ignore                                                                                             // 279\n * @return {Mocha}                                                                                                     // 280\n */                                                                                                                    // 281\nMocha.prototype.ignoreLeaks = function(ignore) {                                                                       // 282\n  this.options.ignoreLeaks = Boolean(ignore);                                                                          // 283\n  return this;                                                                                                         // 284\n};                                                                                                                     // 285\n                                                                                                                       // 286\n/**                                                                                                                    // 287\n * Enable global leak checking.                                                                                        // 288\n *                                                                                                                     // 289\n * @return {Mocha}                                                                                                     // 290\n * @api public                                                                                                         // 291\n */                                                                                                                    // 292\nMocha.prototype.checkLeaks = function() {                                                                              // 293\n  this.options.ignoreLeaks = false;                                                                                    // 294\n  return this;                                                                                                         // 295\n};                                                                                                                     // 296\n                                                                                                                       // 297\n/**                                                                                                                    // 298\n * Display long stack-trace on failing                                                                                 // 299\n *                                                                                                                     // 300\n * @return {Mocha}                                                                                                     // 301\n * @api public                                                                                                         // 302\n */                                                                                                                    // 303\nMocha.prototype.fullTrace = function() {                                                                               // 304\n  this.options.fullStackTrace = true;                                                                                  // 305\n  return this;                                                                                                         // 306\n};                                                                                                                     // 307\n                                                                                                                       // 308\n/**                                                                                                                    // 309\n * Enable growl support.                                                                                               // 310\n *                                                                                                                     // 311\n * @return {Mocha}                                                                                                     // 312\n * @api public                                                                                                         // 313\n */                                                                                                                    // 314\nMocha.prototype.growl = function() {                                                                                   // 315\n  this.options.growl = true;                                                                                           // 316\n  return this;                                                                                                         // 317\n};                                                                                                                     // 318\n                                                                                                                       // 319\n/**                                                                                                                    // 320\n * Ignore `globals` array or string.                                                                                   // 321\n *                                                                                                                     // 322\n * @param {Array|String} globals                                                                                       // 323\n * @return {Mocha}                                                                                                     // 324\n * @api public                                                                                                         // 325\n * @param {Array|string} globals                                                                                       // 326\n * @return {Mocha}                                                                                                     // 327\n */                                                                                                                    // 328\nMocha.prototype.globals = function(globals) {                                                                          // 329\n  this.options.globals = (this.options.globals || []).concat(globals);                                                 // 330\n  return this;                                                                                                         // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\n/**                                                                                                                    // 334\n * Emit color output.                                                                                                  // 335\n *                                                                                                                     // 336\n * @param {Boolean} colors                                                                                             // 337\n * @return {Mocha}                                                                                                     // 338\n * @api public                                                                                                         // 339\n * @param {boolean} colors                                                                                             // 340\n * @return {Mocha}                                                                                                     // 341\n */                                                                                                                    // 342\nMocha.prototype.useColors = function(colors) {                                                                         // 343\n  if (colors !== undefined) {                                                                                          // 344\n    this.options.useColors = colors;                                                                                   // 345\n  }                                                                                                                    // 346\n  return this;                                                                                                         // 347\n};                                                                                                                     // 348\n                                                                                                                       // 349\n/**                                                                                                                    // 350\n * Use inline diffs rather than +/-.                                                                                   // 351\n *                                                                                                                     // 352\n * @param {Boolean} inlineDiffs                                                                                        // 353\n * @return {Mocha}                                                                                                     // 354\n * @api public                                                                                                         // 355\n * @param {boolean} inlineDiffs                                                                                        // 356\n * @return {Mocha}                                                                                                     // 357\n */                                                                                                                    // 358\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {                                                               // 359\n  this.options.useInlineDiffs = inlineDiffs !== undefined && inlineDiffs;                                              // 360\n  return this;                                                                                                         // 361\n};                                                                                                                     // 362\n                                                                                                                       // 363\n/**                                                                                                                    // 364\n * Set the timeout in milliseconds.                                                                                    // 365\n *                                                                                                                     // 366\n * @param {Number} timeout                                                                                             // 367\n * @return {Mocha}                                                                                                     // 368\n * @api public                                                                                                         // 369\n * @param {number} timeout                                                                                             // 370\n * @return {Mocha}                                                                                                     // 371\n */                                                                                                                    // 372\nMocha.prototype.timeout = function(timeout) {                                                                          // 373\n  this.suite.timeout(timeout);                                                                                         // 374\n  return this;                                                                                                         // 375\n};                                                                                                                     // 376\n                                                                                                                       // 377\n/**                                                                                                                    // 378\n * Set the number of times to retry failed tests.                                                                      // 379\n *                                                                                                                     // 380\n * @param {Number} retry times                                                                                         // 381\n * @return {Mocha}                                                                                                     // 382\n * @api public                                                                                                         // 383\n */                                                                                                                    // 384\nMocha.prototype.retries = function(n) {                                                                                // 385\n  this.suite.retries(n);                                                                                               // 386\n  return this;                                                                                                         // 387\n};                                                                                                                     // 388\n                                                                                                                       // 389\n/**                                                                                                                    // 390\n * Set slowness threshold in milliseconds.                                                                             // 391\n *                                                                                                                     // 392\n * @param {Number} slow                                                                                                // 393\n * @return {Mocha}                                                                                                     // 394\n * @api public                                                                                                         // 395\n * @param {number} slow                                                                                                // 396\n * @return {Mocha}                                                                                                     // 397\n */                                                                                                                    // 398\nMocha.prototype.slow = function(slow) {                                                                                // 399\n  this.suite.slow(slow);                                                                                               // 400\n  return this;                                                                                                         // 401\n};                                                                                                                     // 402\n                                                                                                                       // 403\n/**                                                                                                                    // 404\n * Enable timeouts.                                                                                                    // 405\n *                                                                                                                     // 406\n * @param {Boolean} enabled                                                                                            // 407\n * @return {Mocha}                                                                                                     // 408\n * @api public                                                                                                         // 409\n * @param {boolean} enabled                                                                                            // 410\n * @return {Mocha}                                                                                                     // 411\n */                                                                                                                    // 412\nMocha.prototype.enableTimeouts = function(enabled) {                                                                   // 413\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined ? enabled : true);                               // 414\n  return this;                                                                                                         // 415\n};                                                                                                                     // 416\n                                                                                                                       // 417\n/**                                                                                                                    // 418\n * Makes all tests async (accepting a callback)                                                                        // 419\n *                                                                                                                     // 420\n * @return {Mocha}                                                                                                     // 421\n * @api public                                                                                                         // 422\n */                                                                                                                    // 423\nMocha.prototype.asyncOnly = function() {                                                                               // 424\n  this.options.asyncOnly = true;                                                                                       // 425\n  return this;                                                                                                         // 426\n};                                                                                                                     // 427\n                                                                                                                       // 428\n/**                                                                                                                    // 429\n * Disable syntax highlighting (in browser).                                                                           // 430\n *                                                                                                                     // 431\n * @api public                                                                                                         // 432\n */                                                                                                                    // 433\nMocha.prototype.noHighlighting = function() {                                                                          // 434\n  this.options.noHighlighting = true;                                                                                  // 435\n  return this;                                                                                                         // 436\n};                                                                                                                     // 437\n                                                                                                                       // 438\n/**                                                                                                                    // 439\n * Enable uncaught errors to propagate (in browser).                                                                   // 440\n *                                                                                                                     // 441\n * @return {Mocha}                                                                                                     // 442\n * @api public                                                                                                         // 443\n */                                                                                                                    // 444\nMocha.prototype.allowUncaught = function() {                                                                           // 445\n  this.options.allowUncaught = true;                                                                                   // 446\n  return this;                                                                                                         // 447\n};                                                                                                                     // 448\n                                                                                                                       // 449\n/**                                                                                                                    // 450\n * Delay root suite execution.                                                                                         // 451\n * @returns {Mocha}                                                                                                    // 452\n */                                                                                                                    // 453\nMocha.prototype.delay = function delay() {                                                                             // 454\n  this.options.delay = true;                                                                                           // 455\n  return this;                                                                                                         // 456\n};                                                                                                                     // 457\n                                                                                                                       // 458\n/**                                                                                                                    // 459\n * Run tests and invoke `fn()` when complete.                                                                          // 460\n *                                                                                                                     // 461\n * @api public                                                                                                         // 462\n * @param {Function} fn                                                                                                // 463\n * @return {Runner}                                                                                                    // 464\n */                                                                                                                    // 465\nMocha.prototype.run = function(fn) {                                                                                   // 466\n  if (this.files.length) {                                                                                             // 467\n    this.loadFiles();                                                                                                  // 468\n  }                                                                                                                    // 469\n  var suite = this.suite;                                                                                              // 470\n  var options = this.options;                                                                                          // 471\n  options.files = this.files;                                                                                          // 472\n  var runner = new exports.Runner(suite, options.delay);                                                               // 473\n  var reporter = new this._reporter(runner, options);                                                                  // 474\n  runner.ignoreLeaks = options.ignoreLeaks !== false;                                                                  // 475\n  runner.fullStackTrace = options.fullStackTrace;                                                                      // 476\n  runner.asyncOnly = options.asyncOnly;                                                                                // 477\n  runner.allowUncaught = options.allowUncaught;                                                                        // 478\n  if (options.grep) {                                                                                                  // 479\n    runner.grep(options.grep, options.invert);                                                                         // 480\n  }                                                                                                                    // 481\n  if (options.globals) {                                                                                               // 482\n    runner.globals(options.globals);                                                                                   // 483\n  }                                                                                                                    // 484\n  if (options.growl) {                                                                                                 // 485\n    this._growl(runner, reporter);                                                                                     // 486\n  }                                                                                                                    // 487\n  if (options.useColors !== undefined) {                                                                               // 488\n    exports.reporters.Base.useColors = options.useColors;                                                              // 489\n  }                                                                                                                    // 490\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;                                                         // 491\n                                                                                                                       // 492\n  function done(failures) {                                                                                            // 493\n    if (reporter.done) {                                                                                               // 494\n      reporter.done(failures, fn);                                                                                     // 495\n    } else {                                                                                                           // 496\n      fn && fn(failures);                                                                                              // 497\n    }                                                                                                                  // 498\n  }                                                                                                                    // 499\n                                                                                                                       // 500\n  return runner.run(done);                                                                                             // 501\n};                                                                                                                     // 502\n                                                                                                                       // 503\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reporters\":{\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/index.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Alias exports to a their normalized format Mocha#reporter to prevent a need                                         // 1\n// for dynamic (try/catch) requires, which Browserify doesn't handle.                                                  // 2\nexports.Base = exports.base = require('./base');                                                                       // 3\nexports.Dot = exports.dot = require('./dot');                                                                          // 4\nexports.Doc = exports.doc = require('./doc');                                                                          // 5\nexports.TAP = exports.tap = require('./tap');                                                                          // 6\nexports.JSON = exports.json = require('./json');                                                                       // 7\nexports.HTML = exports.html = require('./html');                                                                       // 8\nexports.List = exports.list = require('./list');                                                                       // 9\nexports.Min = exports.min = require('./min');                                                                          // 10\nexports.Spec = exports.spec = require('./spec');                                                                       // 11\nexports.Nyan = exports.nyan = require('./nyan');                                                                       // 12\nexports.XUnit = exports.xunit = require('./xunit');                                                                    // 13\nexports.Markdown = exports.markdown = require('./markdown');                                                           // 14\nexports.Progress = exports.progress = require('./progress');                                                           // 15\nexports.Landing = exports.landing = require('./landing');                                                              // 16\nexports.JSONCov = exports['json-cov'] = require('./json-cov');                                                         // 17\nexports.HTMLCov = exports['html-cov'] = require('./html-cov');                                                         // 18\nexports.JSONStream = exports['json-stream'] = require('./json-stream');                                                // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/base.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar tty = require('tty');                                                                                              // 5\nvar diff = require('diff');                                                                                            // 6\nvar ms = require('../ms');                                                                                             // 7\nvar utils = require('../utils');                                                                                       // 8\nvar supportsColor = process.browser ? null : require('supports-color');                                                // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Expose `Base`.                                                                                                      // 12\n */                                                                                                                    // 13\n                                                                                                                       // 14\nexports = module.exports = Base;                                                                                       // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Save timer references to avoid Sinon interfering.                                                                   // 18\n * See: https://github.com/mochajs/mocha/issues/237                                                                    // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 22\nvar Date = global.Date;                                                                                                // 23\nvar setTimeout = global.setTimeout;                                                                                    // 24\nvar setInterval = global.setInterval;                                                                                  // 25\nvar clearTimeout = global.clearTimeout;                                                                                // 26\nvar clearInterval = global.clearInterval;                                                                              // 27\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * Check if both stdio streams are associated with a tty.                                                              // 31\n */                                                                                                                    // 32\n                                                                                                                       // 33\nvar isatty = tty.isatty(1) && tty.isatty(2);                                                                           // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Enable coloring by default, except in the browser interface.                                                        // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));                   // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Inline diffs instead of +/-                                                                                         // 43\n */                                                                                                                    // 44\n                                                                                                                       // 45\nexports.inlineDiffs = false;                                                                                           // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Default color map.                                                                                                  // 49\n */                                                                                                                    // 50\n                                                                                                                       // 51\nexports.colors = {                                                                                                     // 52\n  pass: 90,                                                                                                            // 53\n  fail: 31,                                                                                                            // 54\n  'bright pass': 92,                                                                                                   // 55\n  'bright fail': 91,                                                                                                   // 56\n  'bright yellow': 93,                                                                                                 // 57\n  pending: 36,                                                                                                         // 58\n  suite: 0,                                                                                                            // 59\n  'error title': 0,                                                                                                    // 60\n  'error message': 31,                                                                                                 // 61\n  'error stack': 90,                                                                                                   // 62\n  checkmark: 32,                                                                                                       // 63\n  fast: 90,                                                                                                            // 64\n  medium: 33,                                                                                                          // 65\n  slow: 31,                                                                                                            // 66\n  green: 32,                                                                                                           // 67\n  light: 90,                                                                                                           // 68\n  'diff gutter': 90,                                                                                                   // 69\n  'diff added': 32,                                                                                                    // 70\n  'diff removed': 31                                                                                                   // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Default symbol map.                                                                                                 // 75\n */                                                                                                                    // 76\n                                                                                                                       // 77\nexports.symbols = {                                                                                                    // 78\n  ok: '✓',                                                                                                             // 79\n  err: '✖',                                                                                                            // 80\n  dot: '․'                                                                                                             // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n// With node.js on Windows: use symbols available in terminal default fonts                                            // 84\nif (process.platform === 'win32') {                                                                                    // 85\n  exports.symbols.ok = '\\u221A';                                                                                       // 86\n  exports.symbols.err = '\\u00D7';                                                                                      // 87\n  exports.symbols.dot = '.';                                                                                           // 88\n}                                                                                                                      // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * Color `str` with the given `type`,                                                                                  // 92\n * allowing colors to be disabled,                                                                                     // 93\n * as well as user-defined color                                                                                       // 94\n * schemes.                                                                                                            // 95\n *                                                                                                                     // 96\n * @param {string} type                                                                                                // 97\n * @param {string} str                                                                                                 // 98\n * @return {string}                                                                                                    // 99\n * @api private                                                                                                        // 100\n */                                                                                                                    // 101\nvar color = exports.color = function(type, str) {                                                                      // 102\n  if (!exports.useColors) {                                                                                            // 103\n    return String(str);                                                                                                // 104\n  }                                                                                                                    // 105\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';                                                   // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * Expose term window size, with some defaults for when stderr is not a tty.                                           // 110\n */                                                                                                                    // 111\n                                                                                                                       // 112\nexports.window = {                                                                                                     // 113\n  width: 75                                                                                                            // 114\n};                                                                                                                     // 115\n                                                                                                                       // 116\nif (isatty) {                                                                                                          // 117\n  exports.window.width = process.stdout.getWindowSize                                                                  // 118\n      ? process.stdout.getWindowSize(1)[0]                                                                             // 119\n      : tty.getWindowSize()[1];                                                                                        // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\n/**                                                                                                                    // 123\n * Expose some basic cursor interactions that are common among reporters.                                              // 124\n */                                                                                                                    // 125\n                                                                                                                       // 126\nexports.cursor = {                                                                                                     // 127\n  hide: function() {                                                                                                   // 128\n    isatty && process.stdout.write('\\u001b[?25l');                                                                     // 129\n  },                                                                                                                   // 130\n                                                                                                                       // 131\n  show: function() {                                                                                                   // 132\n    isatty && process.stdout.write('\\u001b[?25h');                                                                     // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  deleteLine: function() {                                                                                             // 136\n    isatty && process.stdout.write('\\u001b[2K');                                                                       // 137\n  },                                                                                                                   // 138\n                                                                                                                       // 139\n  beginningOfLine: function() {                                                                                        // 140\n    isatty && process.stdout.write('\\u001b[0G');                                                                       // 141\n  },                                                                                                                   // 142\n                                                                                                                       // 143\n  CR: function() {                                                                                                     // 144\n    if (isatty) {                                                                                                      // 145\n      exports.cursor.deleteLine();                                                                                     // 146\n      exports.cursor.beginningOfLine();                                                                                // 147\n    } else {                                                                                                           // 148\n      process.stdout.write('\\r');                                                                                      // 149\n    }                                                                                                                  // 150\n  }                                                                                                                    // 151\n};                                                                                                                     // 152\n                                                                                                                       // 153\n/**                                                                                                                    // 154\n * Outut the given `failures` as a list.                                                                               // 155\n *                                                                                                                     // 156\n * @param {Array} failures                                                                                             // 157\n * @api public                                                                                                         // 158\n */                                                                                                                    // 159\n                                                                                                                       // 160\nexports.list = function(failures) {                                                                                    // 161\n  console.log();                                                                                                       // 162\n  failures.forEach(function(test, i) {                                                                                 // 163\n    // format                                                                                                          // 164\n    var fmt = color('error title', '  %s) %s:\\n')                                                                      // 165\n      + color('error message', '     %s')                                                                              // 166\n      + color('error stack', '\\n%s\\n');                                                                                // 167\n                                                                                                                       // 168\n    // msg                                                                                                             // 169\n    var msg;                                                                                                           // 170\n    var err = test.err;                                                                                                // 171\n    var message;                                                                                                       // 172\n    if (err.message) {                                                                                                 // 173\n      message = err.message;                                                                                           // 174\n    } else if (typeof err.inspect === 'function') {                                                                    // 175\n      message = err.inspect() + '';                                                                                    // 176\n    } else {                                                                                                           // 177\n      message = '';                                                                                                    // 178\n    }                                                                                                                  // 179\n    var stack = err.stack || message;                                                                                  // 180\n    var index = stack.indexOf(message);                                                                                // 181\n    var actual = err.actual;                                                                                           // 182\n    var expected = err.expected;                                                                                       // 183\n    var escape = true;                                                                                                 // 184\n                                                                                                                       // 185\n    if (index === -1) {                                                                                                // 186\n      msg = message;                                                                                                   // 187\n    } else {                                                                                                           // 188\n      index += message.length;                                                                                         // 189\n      msg = stack.slice(0, index);                                                                                     // 190\n      // remove msg from stack                                                                                         // 191\n      stack = stack.slice(index + 1);                                                                                  // 192\n    }                                                                                                                  // 193\n                                                                                                                       // 194\n    // uncaught                                                                                                        // 195\n    if (err.uncaught) {                                                                                                // 196\n      msg = 'Uncaught ' + msg;                                                                                         // 197\n    }                                                                                                                  // 198\n    // explicitly show diff                                                                                            // 199\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {                              // 200\n      escape = false;                                                                                                  // 201\n      if (!(utils.isString(actual) && utils.isString(expected))) {                                                     // 202\n        err.actual = actual = utils.stringify(actual);                                                                 // 203\n        err.expected = expected = utils.stringify(expected);                                                           // 204\n      }                                                                                                                // 205\n                                                                                                                       // 206\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');                                    // 207\n      var match = message.match(/^([^:]+): expected/);                                                                 // 208\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);                                               // 209\n                                                                                                                       // 210\n      if (exports.inlineDiffs) {                                                                                       // 211\n        msg += inlineDiff(err, escape);                                                                                // 212\n      } else {                                                                                                         // 213\n        msg += unifiedDiff(err, escape);                                                                               // 214\n      }                                                                                                                // 215\n    }                                                                                                                  // 216\n                                                                                                                       // 217\n    // indent stack trace                                                                                              // 218\n    stack = stack.replace(/^/gm, '  ');                                                                                // 219\n                                                                                                                       // 220\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);                                                           // 221\n  });                                                                                                                  // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\n/**                                                                                                                    // 225\n * Initialize a new `Base` reporter.                                                                                   // 226\n *                                                                                                                     // 227\n * All other reporters generally                                                                                       // 228\n * inherit from this reporter, providing                                                                               // 229\n * stats such as test duration, number                                                                                 // 230\n * of tests passed / failed etc.                                                                                       // 231\n *                                                                                                                     // 232\n * @param {Runner} runner                                                                                              // 233\n * @api public                                                                                                         // 234\n */                                                                                                                    // 235\n                                                                                                                       // 236\nfunction Base(runner) {                                                                                                // 237\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };                                // 238\n  var failures = this.failures = [];                                                                                   // 239\n                                                                                                                       // 240\n  if (!runner) {                                                                                                       // 241\n    return;                                                                                                            // 242\n  }                                                                                                                    // 243\n  this.runner = runner;                                                                                                // 244\n                                                                                                                       // 245\n  runner.stats = stats;                                                                                                // 246\n                                                                                                                       // 247\n  runner.on('start', function() {                                                                                      // 248\n    stats.start = new Date();                                                                                          // 249\n  });                                                                                                                  // 250\n                                                                                                                       // 251\n  runner.on('suite', function(suite) {                                                                                 // 252\n    stats.suites = stats.suites || 0;                                                                                  // 253\n    suite.root || stats.suites++;                                                                                      // 254\n  });                                                                                                                  // 255\n                                                                                                                       // 256\n  runner.on('test end', function() {                                                                                   // 257\n    stats.tests = stats.tests || 0;                                                                                    // 258\n    stats.tests++;                                                                                                     // 259\n  });                                                                                                                  // 260\n                                                                                                                       // 261\n  runner.on('pass', function(test) {                                                                                   // 262\n    stats.passes = stats.passes || 0;                                                                                  // 263\n                                                                                                                       // 264\n    if (test.duration > test.slow()) {                                                                                 // 265\n      test.speed = 'slow';                                                                                             // 266\n    } else if (test.duration > test.slow() / 2) {                                                                      // 267\n      test.speed = 'medium';                                                                                           // 268\n    } else {                                                                                                           // 269\n      test.speed = 'fast';                                                                                             // 270\n    }                                                                                                                  // 271\n                                                                                                                       // 272\n    stats.passes++;                                                                                                    // 273\n  });                                                                                                                  // 274\n                                                                                                                       // 275\n  runner.on('fail', function(test, err) {                                                                              // 276\n    stats.failures = stats.failures || 0;                                                                              // 277\n    stats.failures++;                                                                                                  // 278\n    test.err = err;                                                                                                    // 279\n    failures.push(test);                                                                                               // 280\n  });                                                                                                                  // 281\n                                                                                                                       // 282\n  runner.on('end', function() {                                                                                        // 283\n    stats.end = new Date();                                                                                            // 284\n    stats.duration = new Date() - stats.start;                                                                         // 285\n  });                                                                                                                  // 286\n                                                                                                                       // 287\n  runner.on('pending', function() {                                                                                    // 288\n    stats.pending++;                                                                                                   // 289\n  });                                                                                                                  // 290\n}                                                                                                                      // 291\n                                                                                                                       // 292\n/**                                                                                                                    // 293\n * Output common epilogue used by many of                                                                              // 294\n * the bundled reporters.                                                                                              // 295\n *                                                                                                                     // 296\n * @api public                                                                                                         // 297\n */                                                                                                                    // 298\nBase.prototype.epilogue = function() {                                                                                 // 299\n  var stats = this.stats;                                                                                              // 300\n  var fmt;                                                                                                             // 301\n                                                                                                                       // 302\n  console.log();                                                                                                       // 303\n                                                                                                                       // 304\n  // passes                                                                                                            // 305\n  fmt = color('bright pass', ' ')                                                                                      // 306\n    + color('green', ' %d passing')                                                                                    // 307\n    + color('light', ' (%s)');                                                                                         // 308\n                                                                                                                       // 309\n  console.log(fmt,                                                                                                     // 310\n    stats.passes || 0,                                                                                                 // 311\n    ms(stats.duration));                                                                                               // 312\n                                                                                                                       // 313\n  // pending                                                                                                           // 314\n  if (stats.pending) {                                                                                                 // 315\n    fmt = color('pending', ' ')                                                                                        // 316\n      + color('pending', ' %d pending');                                                                               // 317\n                                                                                                                       // 318\n    console.log(fmt, stats.pending);                                                                                   // 319\n  }                                                                                                                    // 320\n                                                                                                                       // 321\n  // failures                                                                                                          // 322\n  if (stats.failures) {                                                                                                // 323\n    fmt = color('fail', '  %d failing');                                                                               // 324\n                                                                                                                       // 325\n    console.log(fmt, stats.failures);                                                                                  // 326\n                                                                                                                       // 327\n    Base.list(this.failures);                                                                                          // 328\n    console.log();                                                                                                     // 329\n  }                                                                                                                    // 330\n                                                                                                                       // 331\n  console.log();                                                                                                       // 332\n};                                                                                                                     // 333\n                                                                                                                       // 334\n/**                                                                                                                    // 335\n * Pad the given `str` to `len`.                                                                                       // 336\n *                                                                                                                     // 337\n * @api private                                                                                                        // 338\n * @param {string} str                                                                                                 // 339\n * @param {string} len                                                                                                 // 340\n * @return {string}                                                                                                    // 341\n */                                                                                                                    // 342\nfunction pad(str, len) {                                                                                               // 343\n  str = String(str);                                                                                                   // 344\n  return Array(len - str.length + 1).join(' ') + str;                                                                  // 345\n}                                                                                                                      // 346\n                                                                                                                       // 347\n/**                                                                                                                    // 348\n * Returns an inline diff between 2 strings with coloured ANSI output                                                  // 349\n *                                                                                                                     // 350\n * @api private                                                                                                        // 351\n * @param {Error} err with actual/expected                                                                             // 352\n * @param {boolean} escape                                                                                             // 353\n * @return {string} Diff                                                                                               // 354\n */                                                                                                                    // 355\nfunction inlineDiff(err, escape) {                                                                                     // 356\n  var msg = errorDiff(err, 'WordsWithSpace', escape);                                                                  // 357\n                                                                                                                       // 358\n  // linenos                                                                                                           // 359\n  var lines = msg.split('\\n');                                                                                         // 360\n  if (lines.length > 4) {                                                                                              // 361\n    var width = String(lines.length).length;                                                                           // 362\n    msg = lines.map(function(str, i) {                                                                                 // 363\n      return pad(++i, width) + ' |' + ' ' + str;                                                                       // 364\n    }).join('\\n');                                                                                                     // 365\n  }                                                                                                                    // 366\n                                                                                                                       // 367\n  // legend                                                                                                            // 368\n  msg = '\\n'                                                                                                           // 369\n    + color('diff removed', 'actual')                                                                                  // 370\n    + ' '                                                                                                              // 371\n    + color('diff added', 'expected')                                                                                  // 372\n    + '\\n\\n'                                                                                                           // 373\n    + msg                                                                                                              // 374\n    + '\\n';                                                                                                            // 375\n                                                                                                                       // 376\n  // indent                                                                                                            // 377\n  msg = msg.replace(/^/gm, '      ');                                                                                  // 378\n  return msg;                                                                                                          // 379\n}                                                                                                                      // 380\n                                                                                                                       // 381\n/**                                                                                                                    // 382\n * Returns a unified diff between two strings.                                                                         // 383\n *                                                                                                                     // 384\n * @api private                                                                                                        // 385\n * @param {Error} err with actual/expected                                                                             // 386\n * @param {boolean} escape                                                                                             // 387\n * @return {string} The diff.                                                                                          // 388\n */                                                                                                                    // 389\nfunction unifiedDiff(err, escape) {                                                                                    // 390\n  var indent = '      ';                                                                                               // 391\n  function cleanUp(line) {                                                                                             // 392\n    if (escape) {                                                                                                      // 393\n      line = escapeInvisibles(line);                                                                                   // 394\n    }                                                                                                                  // 395\n    if (line[0] === '+') {                                                                                             // 396\n      return indent + colorLines('diff added', line);                                                                  // 397\n    }                                                                                                                  // 398\n    if (line[0] === '-') {                                                                                             // 399\n      return indent + colorLines('diff removed', line);                                                                // 400\n    }                                                                                                                  // 401\n    if (line.match(/\\@\\@/)) {                                                                                          // 402\n      return null;                                                                                                     // 403\n    }                                                                                                                  // 404\n    if (line.match(/\\\\ No newline/)) {                                                                                 // 405\n      return null;                                                                                                     // 406\n    }                                                                                                                  // 407\n    return indent + line;                                                                                              // 408\n  }                                                                                                                    // 409\n  function notBlank(line) {                                                                                            // 410\n    return typeof line !== 'undefined' && line !== null;                                                               // 411\n  }                                                                                                                    // 412\n  var msg = diff.createPatch('string', err.actual, err.expected);                                                      // 413\n  var lines = msg.split('\\n').splice(4);                                                                               // 414\n  return '\\n      '                                                                                                    // 415\n    + colorLines('diff added', '+ expected') + ' '                                                                     // 416\n    + colorLines('diff removed', '- actual')                                                                           // 417\n    + '\\n\\n'                                                                                                           // 418\n    + lines.map(cleanUp).filter(notBlank).join('\\n');                                                                  // 419\n}                                                                                                                      // 420\n                                                                                                                       // 421\n/**                                                                                                                    // 422\n * Return a character diff for `err`.                                                                                  // 423\n *                                                                                                                     // 424\n * @api private                                                                                                        // 425\n * @param {Error} err                                                                                                  // 426\n * @param {string} type                                                                                                // 427\n * @param {boolean} escape                                                                                             // 428\n * @return {string}                                                                                                    // 429\n */                                                                                                                    // 430\nfunction errorDiff(err, type, escape) {                                                                                // 431\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;                                                     // 432\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;                                               // 433\n  return diff['diff' + type](actual, expected).map(function(str) {                                                     // 434\n    if (str.added) {                                                                                                   // 435\n      return colorLines('diff added', str.value);                                                                      // 436\n    }                                                                                                                  // 437\n    if (str.removed) {                                                                                                 // 438\n      return colorLines('diff removed', str.value);                                                                    // 439\n    }                                                                                                                  // 440\n    return str.value;                                                                                                  // 441\n  }).join('');                                                                                                         // 442\n}                                                                                                                      // 443\n                                                                                                                       // 444\n/**                                                                                                                    // 445\n * Returns a string with all invisible characters in plain text                                                        // 446\n *                                                                                                                     // 447\n * @api private                                                                                                        // 448\n * @param {string} line                                                                                                // 449\n * @return {string}                                                                                                    // 450\n */                                                                                                                    // 451\nfunction escapeInvisibles(line) {                                                                                      // 452\n  return line.replace(/\\t/g, '<tab>')                                                                                  // 453\n    .replace(/\\r/g, '<CR>')                                                                                            // 454\n    .replace(/\\n/g, '<LF>\\n');                                                                                         // 455\n}                                                                                                                      // 456\n                                                                                                                       // 457\n/**                                                                                                                    // 458\n * Color lines for `str`, using the color `name`.                                                                      // 459\n *                                                                                                                     // 460\n * @api private                                                                                                        // 461\n * @param {string} name                                                                                                // 462\n * @param {string} str                                                                                                 // 463\n * @return {string}                                                                                                    // 464\n */                                                                                                                    // 465\nfunction colorLines(name, str) {                                                                                       // 466\n  return str.split('\\n').map(function(str) {                                                                           // 467\n    return color(name, str);                                                                                           // 468\n  }).join('\\n');                                                                                                       // 469\n}                                                                                                                      // 470\n                                                                                                                       // 471\n/**                                                                                                                    // 472\n * Object#toString reference.                                                                                          // 473\n */                                                                                                                    // 474\nvar objToString = Object.prototype.toString;                                                                           // 475\n                                                                                                                       // 476\n/**                                                                                                                    // 477\n * Check that a / b have the same type.                                                                                // 478\n *                                                                                                                     // 479\n * @api private                                                                                                        // 480\n * @param {Object} a                                                                                                   // 481\n * @param {Object} b                                                                                                   // 482\n * @return {boolean}                                                                                                   // 483\n */                                                                                                                    // 484\nfunction sameType(a, b) {                                                                                              // 485\n  return objToString.call(a) === objToString.call(b);                                                                  // 486\n}                                                                                                                      // 487\n                                                                                                                       // 488\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dot.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/dot.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\nvar color = Base.color;                                                                                                // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * Expose `Dot`.                                                                                                       // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\nexports = module.exports = Dot;                                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Initialize a new `Dot` matrix test reporter.                                                                        // 16\n *                                                                                                                     // 17\n * @api public                                                                                                         // 18\n * @param {Runner} runner                                                                                              // 19\n */                                                                                                                    // 20\nfunction Dot(runner) {                                                                                                 // 21\n  Base.call(this, runner);                                                                                             // 22\n                                                                                                                       // 23\n  var self = this;                                                                                                     // 24\n  var width = Base.window.width * .75 | 0;                                                                             // 25\n  var n = -1;                                                                                                          // 26\n                                                                                                                       // 27\n  runner.on('start', function() {                                                                                      // 28\n    process.stdout.write('\\n');                                                                                        // 29\n  });                                                                                                                  // 30\n                                                                                                                       // 31\n  runner.on('pending', function() {                                                                                    // 32\n    if (++n % width === 0) {                                                                                           // 33\n      process.stdout.write('\\n  ');                                                                                    // 34\n    }                                                                                                                  // 35\n    process.stdout.write(color('pending', Base.symbols.dot));                                                          // 36\n  });                                                                                                                  // 37\n                                                                                                                       // 38\n  runner.on('pass', function(test) {                                                                                   // 39\n    if (++n % width === 0) {                                                                                           // 40\n      process.stdout.write('\\n  ');                                                                                    // 41\n    }                                                                                                                  // 42\n    if (test.speed === 'slow') {                                                                                       // 43\n      process.stdout.write(color('bright yellow', Base.symbols.dot));                                                  // 44\n    } else {                                                                                                           // 45\n      process.stdout.write(color(test.speed, Base.symbols.dot));                                                       // 46\n    }                                                                                                                  // 47\n  });                                                                                                                  // 48\n                                                                                                                       // 49\n  runner.on('fail', function() {                                                                                       // 50\n    if (++n % width === 0) {                                                                                           // 51\n      process.stdout.write('\\n  ');                                                                                    // 52\n    }                                                                                                                  // 53\n    process.stdout.write(color('fail', Base.symbols.dot));                                                             // 54\n  });                                                                                                                  // 55\n                                                                                                                       // 56\n  runner.on('end', function() {                                                                                        // 57\n    console.log();                                                                                                     // 58\n    self.epilogue();                                                                                                   // 59\n  });                                                                                                                  // 60\n}                                                                                                                      // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Inherit from `Base.prototype`.                                                                                      // 64\n */                                                                                                                    // 65\ninherits(Dot, Base);                                                                                                   // 66\n                                                                                                                       // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doc.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/doc.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar utils = require('../utils');                                                                                       // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Doc`.                                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nexports = module.exports = Doc;                                                                                        // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Doc` reporter.                                                                                    // 15\n *                                                                                                                     // 16\n * @param {Runner} runner                                                                                              // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\nfunction Doc(runner) {                                                                                                 // 20\n  Base.call(this, runner);                                                                                             // 21\n                                                                                                                       // 22\n  var indents = 2;                                                                                                     // 23\n                                                                                                                       // 24\n  function indent() {                                                                                                  // 25\n    return Array(indents).join('  ');                                                                                  // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  runner.on('suite', function(suite) {                                                                                 // 29\n    if (suite.root) {                                                                                                  // 30\n      return;                                                                                                          // 31\n    }                                                                                                                  // 32\n    ++indents;                                                                                                         // 33\n    console.log('%s<section class=\"suite\">', indent());                                                                // 34\n    ++indents;                                                                                                         // 35\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));                                                 // 36\n    console.log('%s<dl>', indent());                                                                                   // 37\n  });                                                                                                                  // 38\n                                                                                                                       // 39\n  runner.on('suite end', function(suite) {                                                                             // 40\n    if (suite.root) {                                                                                                  // 41\n      return;                                                                                                          // 42\n    }                                                                                                                  // 43\n    console.log('%s</dl>', indent());                                                                                  // 44\n    --indents;                                                                                                         // 45\n    console.log('%s</section>', indent());                                                                             // 46\n    --indents;                                                                                                         // 47\n  });                                                                                                                  // 48\n                                                                                                                       // 49\n  runner.on('pass', function(test) {                                                                                   // 50\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));                                                // 51\n    var code = utils.escape(utils.clean(test.body));                                                                   // 52\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);                                            // 53\n  });                                                                                                                  // 54\n                                                                                                                       // 55\n  runner.on('fail', function(test, err) {                                                                              // 56\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));                                  // 57\n    var code = utils.escape(utils.clean(test.fn.body));                                                                // 58\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);                              // 59\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));                                         // 60\n  });                                                                                                                  // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/tap.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Expose `TAP`.                                                                                                       // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nexports = module.exports = TAP;                                                                                        // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Initialize a new `TAP` reporter.                                                                                    // 14\n *                                                                                                                     // 15\n * @api public                                                                                                         // 16\n * @param {Runner} runner                                                                                              // 17\n */                                                                                                                    // 18\nfunction TAP(runner) {                                                                                                 // 19\n  Base.call(this, runner);                                                                                             // 20\n                                                                                                                       // 21\n  var n = 1;                                                                                                           // 22\n  var passes = 0;                                                                                                      // 23\n  var failures = 0;                                                                                                    // 24\n                                                                                                                       // 25\n  runner.on('start', function() {                                                                                      // 26\n    var total = runner.grepTotal(runner.suite);                                                                        // 27\n    console.log('%d..%d', 1, total);                                                                                   // 28\n  });                                                                                                                  // 29\n                                                                                                                       // 30\n  runner.on('test end', function() {                                                                                   // 31\n    ++n;                                                                                                               // 32\n  });                                                                                                                  // 33\n                                                                                                                       // 34\n  runner.on('pending', function(test) {                                                                                // 35\n    console.log('ok %d %s # SKIP -', n, title(test));                                                                  // 36\n  });                                                                                                                  // 37\n                                                                                                                       // 38\n  runner.on('pass', function(test) {                                                                                   // 39\n    passes++;                                                                                                          // 40\n    console.log('ok %d %s', n, title(test));                                                                           // 41\n  });                                                                                                                  // 42\n                                                                                                                       // 43\n  runner.on('fail', function(test, err) {                                                                              // 44\n    failures++;                                                                                                        // 45\n    console.log('not ok %d %s', n, title(test));                                                                       // 46\n    if (err.stack) {                                                                                                   // 47\n      console.log(err.stack.replace(/^/gm, '  '));                                                                     // 48\n    }                                                                                                                  // 49\n  });                                                                                                                  // 50\n                                                                                                                       // 51\n  runner.on('end', function() {                                                                                        // 52\n    console.log('# tests ' + (passes + failures));                                                                     // 53\n    console.log('# pass ' + passes);                                                                                   // 54\n    console.log('# fail ' + failures);                                                                                 // 55\n  });                                                                                                                  // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Return a TAP-safe title of `test`                                                                                   // 60\n *                                                                                                                     // 61\n * @api private                                                                                                        // 62\n * @param {Object} test                                                                                                // 63\n * @return {String}                                                                                                    // 64\n */                                                                                                                    // 65\nfunction title(test) {                                                                                                 // 66\n  return test.fullTitle().replace(/#/g, '');                                                                           // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"json.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/json.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Expose `JSON`.                                                                                                      // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nexports = module.exports = JSONReporter;                                                                               // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Initialize a new `JSON` reporter.                                                                                   // 14\n *                                                                                                                     // 15\n * @api public                                                                                                         // 16\n * @param {Runner} runner                                                                                              // 17\n */                                                                                                                    // 18\nfunction JSONReporter(runner) {                                                                                        // 19\n  Base.call(this, runner);                                                                                             // 20\n                                                                                                                       // 21\n  var self = this;                                                                                                     // 22\n  var tests = [];                                                                                                      // 23\n  var pending = [];                                                                                                    // 24\n  var failures = [];                                                                                                   // 25\n  var passes = [];                                                                                                     // 26\n                                                                                                                       // 27\n  runner.on('test end', function(test) {                                                                               // 28\n    tests.push(test);                                                                                                  // 29\n  });                                                                                                                  // 30\n                                                                                                                       // 31\n  runner.on('pass', function(test) {                                                                                   // 32\n    passes.push(test);                                                                                                 // 33\n  });                                                                                                                  // 34\n                                                                                                                       // 35\n  runner.on('fail', function(test) {                                                                                   // 36\n    failures.push(test);                                                                                               // 37\n  });                                                                                                                  // 38\n                                                                                                                       // 39\n  runner.on('pending', function(test) {                                                                                // 40\n    pending.push(test);                                                                                                // 41\n  });                                                                                                                  // 42\n                                                                                                                       // 43\n  runner.on('end', function() {                                                                                        // 44\n    var obj = {                                                                                                        // 45\n      stats: self.stats,                                                                                               // 46\n      tests: tests.map(clean),                                                                                         // 47\n      pending: pending.map(clean),                                                                                     // 48\n      failures: failures.map(clean),                                                                                   // 49\n      passes: passes.map(clean)                                                                                        // 50\n    };                                                                                                                 // 51\n                                                                                                                       // 52\n    runner.testResults = obj;                                                                                          // 53\n                                                                                                                       // 54\n    process.stdout.write(JSON.stringify(obj, null, 2));                                                                // 55\n  });                                                                                                                  // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Return a plain-object representation of `test`                                                                      // 60\n * free of cyclic properties etc.                                                                                      // 61\n *                                                                                                                     // 62\n * @api private                                                                                                        // 63\n * @param {Object} test                                                                                                // 64\n * @return {Object}                                                                                                    // 65\n */                                                                                                                    // 66\nfunction clean(test) {                                                                                                 // 67\n  return {                                                                                                             // 68\n    title: test.title,                                                                                                 // 69\n    fullTitle: test.fullTitle(),                                                                                       // 70\n    duration: test.duration,                                                                                           // 71\n    currentRetry: test.currentRetry(),                                                                                 // 72\n    err: errorJSON(test.err || {})                                                                                     // 73\n  };                                                                                                                   // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\n/**                                                                                                                    // 77\n * Transform `error` into a JSON object.                                                                               // 78\n *                                                                                                                     // 79\n * @api private                                                                                                        // 80\n * @param {Error} err                                                                                                  // 81\n * @return {Object}                                                                                                    // 82\n */                                                                                                                    // 83\nfunction errorJSON(err) {                                                                                              // 84\n  var res = {};                                                                                                        // 85\n  Object.getOwnPropertyNames(err).forEach(function(key) {                                                              // 86\n    res[key] = err[key];                                                                                               // 87\n  }, err);                                                                                                             // 88\n  return res;                                                                                                          // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"html.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/html.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */                                                                                               // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Module dependencies.                                                                                                // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nvar Base = require('./base');                                                                                          // 7\nvar utils = require('../utils');                                                                                       // 8\nvar Progress = require('../browser/progress');                                                                         // 9\nvar escapeRe = require('escape-string-regexp');                                                                        // 10\nvar escape = utils.escape;                                                                                             // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 17\nvar Date = global.Date;                                                                                                // 18\nvar setTimeout = global.setTimeout;                                                                                    // 19\nvar setInterval = global.setInterval;                                                                                  // 20\nvar clearTimeout = global.clearTimeout;                                                                                // 21\nvar clearInterval = global.clearInterval;                                                                              // 22\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Expose `HTML`.                                                                                                      // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports = module.exports = HTML;                                                                                       // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Stats template.                                                                                                     // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar statsTemplate = '<ul id=\"mocha-stats\">'                                                                            // 35\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'                                               // 36\n  + '<li class=\"passes\"><a href=\"javascript:void(0);\">passes:</a> <em>0</em></li>'                                     // 37\n  + '<li class=\"failures\"><a href=\"javascript:void(0);\">failures:</a> <em>0</em></li>'                                 // 38\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'                                                                  // 39\n  + '</ul>';                                                                                                           // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Initialize a new `HTML` reporter.                                                                                   // 43\n *                                                                                                                     // 44\n * @api public                                                                                                         // 45\n * @param {Runner} runner                                                                                              // 46\n */                                                                                                                    // 47\nfunction HTML(runner) {                                                                                                // 48\n  Base.call(this, runner);                                                                                             // 49\n                                                                                                                       // 50\n  var self = this;                                                                                                     // 51\n  var stats = this.stats;                                                                                              // 52\n  var stat = fragment(statsTemplate);                                                                                  // 53\n  var items = stat.getElementsByTagName('li');                                                                         // 54\n  var passes = items[1].getElementsByTagName('em')[0];                                                                 // 55\n  var passesLink = items[1].getElementsByTagName('a')[0];                                                              // 56\n  var failures = items[2].getElementsByTagName('em')[0];                                                               // 57\n  var failuresLink = items[2].getElementsByTagName('a')[0];                                                            // 58\n  var duration = items[3].getElementsByTagName('em')[0];                                                               // 59\n  var canvas = stat.getElementsByTagName('canvas')[0];                                                                 // 60\n  var report = fragment('<ul id=\"mocha-report\"></ul>');                                                                // 61\n  var stack = [report];                                                                                                // 62\n  var progress;                                                                                                        // 63\n  var ctx;                                                                                                             // 64\n  var root = document.getElementById('mocha');                                                                         // 65\n                                                                                                                       // 66\n  if (canvas.getContext) {                                                                                             // 67\n    var ratio = window.devicePixelRatio || 1;                                                                          // 68\n    canvas.style.width = canvas.width;                                                                                 // 69\n    canvas.style.height = canvas.height;                                                                               // 70\n    canvas.width *= ratio;                                                                                             // 71\n    canvas.height *= ratio;                                                                                            // 72\n    ctx = canvas.getContext('2d');                                                                                     // 73\n    ctx.scale(ratio, ratio);                                                                                           // 74\n    progress = new Progress();                                                                                         // 75\n  }                                                                                                                    // 76\n                                                                                                                       // 77\n  if (!root) {                                                                                                         // 78\n    return error('#mocha div missing, add it to your document');                                                       // 79\n  }                                                                                                                    // 80\n                                                                                                                       // 81\n  // pass toggle                                                                                                       // 82\n  on(passesLink, 'click', function() {                                                                                 // 83\n    unhide();                                                                                                          // 84\n    var name = (/pass/).test(report.className) ? '' : ' pass';                                                         // 85\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 86\n    if (report.className.trim()) {                                                                                     // 87\n      hideSuitesWithout('test pass');                                                                                  // 88\n    }                                                                                                                  // 89\n  });                                                                                                                  // 90\n                                                                                                                       // 91\n  // failure toggle                                                                                                    // 92\n  on(failuresLink, 'click', function() {                                                                               // 93\n    unhide();                                                                                                          // 94\n    var name = (/fail/).test(report.className) ? '' : ' fail';                                                         // 95\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 96\n    if (report.className.trim()) {                                                                                     // 97\n      hideSuitesWithout('test fail');                                                                                  // 98\n    }                                                                                                                  // 99\n  });                                                                                                                  // 100\n                                                                                                                       // 101\n  root.appendChild(stat);                                                                                              // 102\n  root.appendChild(report);                                                                                            // 103\n                                                                                                                       // 104\n  if (progress) {                                                                                                      // 105\n    progress.size(40);                                                                                                 // 106\n  }                                                                                                                    // 107\n                                                                                                                       // 108\n  runner.on('suite', function(suite) {                                                                                 // 109\n    if (suite.root) {                                                                                                  // 110\n      return;                                                                                                          // 111\n    }                                                                                                                  // 112\n                                                                                                                       // 113\n    // suite                                                                                                           // 114\n    var url = self.suiteURL(suite);                                                                                    // 115\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));                // 116\n                                                                                                                       // 117\n    // container                                                                                                       // 118\n    stack[0].appendChild(el);                                                                                          // 119\n    stack.unshift(document.createElement('ul'));                                                                       // 120\n    el.appendChild(stack[0]);                                                                                          // 121\n  });                                                                                                                  // 122\n                                                                                                                       // 123\n  runner.on('suite end', function(suite) {                                                                             // 124\n    if (suite.root) {                                                                                                  // 125\n      return;                                                                                                          // 126\n    }                                                                                                                  // 127\n    stack.shift();                                                                                                     // 128\n  });                                                                                                                  // 129\n                                                                                                                       // 130\n  runner.on('fail', function(test) {                                                                                   // 131\n    // For type = 'test' its possible that the test failed due to multiple                                             // 132\n    // done() calls. So report the issue here.                                                                         // 133\n    if (test.type === 'hook'                                                                                           // 134\n      || test.type === 'test') {                                                                                       // 135\n      runner.emit('test end', test);                                                                                   // 136\n    }                                                                                                                  // 137\n  });                                                                                                                  // 138\n                                                                                                                       // 139\n  runner.on('test end', function(test) {                                                                               // 140\n    // TODO: add to stats                                                                                              // 141\n    var percent = stats.tests / this.total * 100 | 0;                                                                  // 142\n    if (progress) {                                                                                                    // 143\n      progress.update(percent).draw(ctx);                                                                              // 144\n    }                                                                                                                  // 145\n                                                                                                                       // 146\n    // update stats                                                                                                    // 147\n    var ms = new Date() - stats.start;                                                                                 // 148\n    text(passes, stats.passes);                                                                                        // 149\n    text(failures, stats.failures);                                                                                    // 150\n    text(duration, (ms / 1000).toFixed(2));                                                                            // 151\n                                                                                                                       // 152\n    // test                                                                                                            // 153\n    var el;                                                                                                            // 154\n    if (test.state === 'passed') {                                                                                     // 155\n      var url = self.testURL(test);                                                                                    // 156\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {                                                                                         // 158\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);                                     // 159\n    } else {                                                                                                           // 160\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline                                                               // 162\n      var message = test.err.toString();                                                                               // 163\n                                                                                                                       // 164\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we                                           // 165\n      // check for the result of the stringifying.                                                                     // 166\n      if (message === '[object Error]') {                                                                              // 167\n        message = test.err.message;                                                                                    // 168\n      }                                                                                                                // 169\n                                                                                                                       // 170\n      if (test.err.stack) {                                                                                            // 171\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);                                                 // 172\n        if (indexOfMessage === -1) {                                                                                   // 173\n          stackString = test.err.stack;                                                                                // 174\n        } else {                                                                                                       // 175\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);                               // 176\n        }                                                                                                              // 177\n      } else if (test.err.sourceURL && test.err.line !== undefined) {                                                  // 178\n        // Safari doesn't give you a stack. Let's at least provide a source line.                                      // 179\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';                                          // 180\n      }                                                                                                                // 181\n                                                                                                                       // 182\n      stackString = stackString || '';                                                                                 // 183\n                                                                                                                       // 184\n      if (test.err.htmlMessage && stackString) {                                                                       // 185\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {                                                                               // 187\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));                            // 188\n      } else {                                                                                                         // 189\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));                               // 190\n      }                                                                                                                // 191\n    }                                                                                                                  // 192\n                                                                                                                       // 193\n    // toggle code                                                                                                     // 194\n    // TODO: defer                                                                                                     // 195\n    if (!test.pending) {                                                                                               // 196\n      var h2 = el.getElementsByTagName('h2')[0];                                                                       // 197\n                                                                                                                       // 198\n      on(h2, 'click', function() {                                                                                     // 199\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';                                           // 200\n      });                                                                                                              // 201\n                                                                                                                       // 202\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));                                        // 203\n      el.appendChild(pre);                                                                                             // 204\n      pre.style.display = 'none';                                                                                      // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.                                 // 208\n    if (stack[0]) {                                                                                                    // 209\n      stack[0].appendChild(el);                                                                                        // 210\n    }                                                                                                                  // 211\n  });                                                                                                                  // 212\n}                                                                                                                      // 213\n                                                                                                                       // 214\n/**                                                                                                                    // 215\n * Makes a URL, preserving querystring (\"search\") parameters.                                                          // 216\n *                                                                                                                     // 217\n * @param {string} s                                                                                                   // 218\n * @return {string} A new URL.                                                                                         // 219\n */                                                                                                                    // 220\nfunction makeUrl(s) {                                                                                                  // 221\n  var search = window.location.search;                                                                                 // 222\n                                                                                                                       // 223\n  // Remove previous grep query parameter if present                                                                   // 224\n  if (search) {                                                                                                        // 225\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');                                               // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));         // 229\n}                                                                                                                      // 230\n                                                                                                                       // 231\n/**                                                                                                                    // 232\n * Provide suite URL.                                                                                                  // 233\n *                                                                                                                     // 234\n * @param {Object} [suite]                                                                                             // 235\n */                                                                                                                    // 236\nHTML.prototype.suiteURL = function(suite) {                                                                            // 237\n  return makeUrl(suite.fullTitle());                                                                                   // 238\n};                                                                                                                     // 239\n                                                                                                                       // 240\n/**                                                                                                                    // 241\n * Provide test URL.                                                                                                   // 242\n *                                                                                                                     // 243\n * @param {Object} [test]                                                                                              // 244\n */                                                                                                                    // 245\nHTML.prototype.testURL = function(test) {                                                                              // 246\n  return makeUrl(test.fullTitle());                                                                                    // 247\n};                                                                                                                     // 248\n                                                                                                                       // 249\n/**                                                                                                                    // 250\n * Display error `msg`.                                                                                                // 251\n *                                                                                                                     // 252\n * @param {string} msg                                                                                                 // 253\n */                                                                                                                    // 254\nfunction error(msg) {                                                                                                  // 255\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));                                          // 256\n}                                                                                                                      // 257\n                                                                                                                       // 258\n/**                                                                                                                    // 259\n * Return a DOM fragment from `html`.                                                                                  // 260\n *                                                                                                                     // 261\n * @param {string} html                                                                                                // 262\n */                                                                                                                    // 263\nfunction fragment(html) {                                                                                              // 264\n  var args = arguments;                                                                                                // 265\n  var div = document.createElement('div');                                                                             // 266\n  var i = 1;                                                                                                           // 267\n                                                                                                                       // 268\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {                                                         // 269\n    switch (type) {                                                                                                    // 270\n      case 's': return String(args[i++]);                                                                              // 271\n      case 'e': return escape(args[i++]);                                                                              // 272\n      // no default                                                                                                    // 273\n    }                                                                                                                  // 274\n  });                                                                                                                  // 275\n                                                                                                                       // 276\n  return div.firstChild;                                                                                               // 277\n}                                                                                                                      // 278\n                                                                                                                       // 279\n/**                                                                                                                    // 280\n * Check for suites that do not have elements                                                                          // 281\n * with `classname`, and hide them.                                                                                    // 282\n *                                                                                                                     // 283\n * @param {text} classname                                                                                             // 284\n */                                                                                                                    // 285\nfunction hideSuitesWithout(classname) {                                                                                // 286\n  var suites = document.getElementsByClassName('suite');                                                               // 287\n  for (var i = 0; i < suites.length; i++) {                                                                            // 288\n    var els = suites[i].getElementsByClassName(classname);                                                             // 289\n    if (!els.length) {                                                                                                 // 290\n      suites[i].className += ' hidden';                                                                                // 291\n    }                                                                                                                  // 292\n  }                                                                                                                    // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\n/**                                                                                                                    // 296\n * Unhide .hidden suites.                                                                                              // 297\n */                                                                                                                    // 298\nfunction unhide() {                                                                                                    // 299\n  var els = document.getElementsByClassName('suite hidden');                                                           // 300\n  for (var i = 0; i < els.length; ++i) {                                                                               // 301\n    els[i].className = els[i].className.replace('suite hidden', 'suite');                                              // 302\n  }                                                                                                                    // 303\n}                                                                                                                      // 304\n                                                                                                                       // 305\n/**                                                                                                                    // 306\n * Set an element's text contents.                                                                                     // 307\n *                                                                                                                     // 308\n * @param {HTMLElement} el                                                                                             // 309\n * @param {string} contents                                                                                            // 310\n */                                                                                                                    // 311\nfunction text(el, contents) {                                                                                          // 312\n  if (el.textContent) {                                                                                                // 313\n    el.textContent = contents;                                                                                         // 314\n  } else {                                                                                                             // 315\n    el.innerText = contents;                                                                                           // 316\n  }                                                                                                                    // 317\n}                                                                                                                      // 318\n                                                                                                                       // 319\n/**                                                                                                                    // 320\n * Listen on `event` with callback `fn`.                                                                               // 321\n */                                                                                                                    // 322\nfunction on(el, event, fn) {                                                                                           // 323\n  if (el.addEventListener) {                                                                                           // 324\n    el.addEventListener(event, fn, false);                                                                             // 325\n  } else {                                                                                                             // 326\n    el.attachEvent('on' + event, fn);                                                                                  // 327\n  }                                                                                                                    // 328\n}                                                                                                                      // 329\n                                                                                                                       // 330\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/list.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\nvar color = Base.color;                                                                                                // 7\nvar cursor = Base.cursor;                                                                                              // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Expose `List`.                                                                                                      // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nexports = module.exports = List;                                                                                       // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Initialize a new `List` test reporter.                                                                              // 17\n *                                                                                                                     // 18\n * @api public                                                                                                         // 19\n * @param {Runner} runner                                                                                              // 20\n */                                                                                                                    // 21\nfunction List(runner) {                                                                                                // 22\n  Base.call(this, runner);                                                                                             // 23\n                                                                                                                       // 24\n  var self = this;                                                                                                     // 25\n  var n = 0;                                                                                                           // 26\n                                                                                                                       // 27\n  runner.on('start', function() {                                                                                      // 28\n    console.log();                                                                                                     // 29\n  });                                                                                                                  // 30\n                                                                                                                       // 31\n  runner.on('test', function(test) {                                                                                   // 32\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));                                             // 33\n  });                                                                                                                  // 34\n                                                                                                                       // 35\n  runner.on('pending', function(test) {                                                                                // 36\n    var fmt = color('checkmark', '  -')                                                                                // 37\n      + color('pending', ' %s');                                                                                       // 38\n    console.log(fmt, test.fullTitle());                                                                                // 39\n  });                                                                                                                  // 40\n                                                                                                                       // 41\n  runner.on('pass', function(test) {                                                                                   // 42\n    var fmt = color('checkmark', '  ' + Base.symbols.dot)                                                              // 43\n      + color('pass', ' %s: ')                                                                                         // 44\n      + color(test.speed, '%dms');                                                                                     // 45\n    cursor.CR();                                                                                                       // 46\n    console.log(fmt, test.fullTitle(), test.duration);                                                                 // 47\n  });                                                                                                                  // 48\n                                                                                                                       // 49\n  runner.on('fail', function(test) {                                                                                   // 50\n    cursor.CR();                                                                                                       // 51\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());                                                     // 52\n  });                                                                                                                  // 53\n                                                                                                                       // 54\n  runner.on('end', self.epilogue.bind(self));                                                                          // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Inherit from `Base.prototype`.                                                                                      // 59\n */                                                                                                                    // 60\ninherits(List, Base);                                                                                                  // 61\n                                                                                                                       // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"min.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/min.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Min`.                                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nexports = module.exports = Min;                                                                                        // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Min` minimal test reporter (best used with --watch).                                              // 15\n *                                                                                                                     // 16\n * @api public                                                                                                         // 17\n * @param {Runner} runner                                                                                              // 18\n */                                                                                                                    // 19\nfunction Min(runner) {                                                                                                 // 20\n  Base.call(this, runner);                                                                                             // 21\n                                                                                                                       // 22\n  runner.on('start', function() {                                                                                      // 23\n    // clear screen                                                                                                    // 24\n    process.stdout.write('\\u001b[2J');                                                                                 // 25\n    // set cursor position                                                                                             // 26\n    process.stdout.write('\\u001b[1;3H');                                                                               // 27\n  });                                                                                                                  // 28\n                                                                                                                       // 29\n  runner.on('end', this.epilogue.bind(this));                                                                          // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Inherit from `Base.prototype`.                                                                                      // 34\n */                                                                                                                    // 35\ninherits(Min, Base);                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"spec.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/spec.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\nvar color = Base.color;                                                                                                // 7\nvar cursor = Base.cursor;                                                                                              // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Expose `Spec`.                                                                                                      // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nexports = module.exports = Spec;                                                                                       // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Initialize a new `Spec` test reporter.                                                                              // 17\n *                                                                                                                     // 18\n * @api public                                                                                                         // 19\n * @param {Runner} runner                                                                                              // 20\n */                                                                                                                    // 21\nfunction Spec(runner) {                                                                                                // 22\n  Base.call(this, runner);                                                                                             // 23\n                                                                                                                       // 24\n  var self = this;                                                                                                     // 25\n  var indents = 0;                                                                                                     // 26\n  var n = 0;                                                                                                           // 27\n                                                                                                                       // 28\n  function indent() {                                                                                                  // 29\n    return Array(indents).join('  ');                                                                                  // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  runner.on('start', function() {                                                                                      // 33\n    console.log();                                                                                                     // 34\n  });                                                                                                                  // 35\n                                                                                                                       // 36\n  runner.on('suite', function(suite) {                                                                                 // 37\n    ++indents;                                                                                                         // 38\n    console.log(color('suite', '%s%s'), indent(), suite.title);                                                        // 39\n  });                                                                                                                  // 40\n                                                                                                                       // 41\n  runner.on('suite end', function() {                                                                                  // 42\n    --indents;                                                                                                         // 43\n    if (indents === 1) {                                                                                               // 44\n      console.log();                                                                                                   // 45\n    }                                                                                                                  // 46\n  });                                                                                                                  // 47\n                                                                                                                       // 48\n  runner.on('pending', function(test) {                                                                                // 49\n    var fmt = indent() + color('pending', '  - %s');                                                                   // 50\n    console.log(fmt, test.title);                                                                                      // 51\n  });                                                                                                                  // 52\n                                                                                                                       // 53\n  runner.on('pass', function(test) {                                                                                   // 54\n    var fmt;                                                                                                           // 55\n    if (test.speed === 'fast') {                                                                                       // 56\n      fmt = indent()                                                                                                   // 57\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                   // 58\n        + color('pass', ' %s');                                                                                        // 59\n      cursor.CR();                                                                                                     // 60\n      console.log(fmt, test.title);                                                                                    // 61\n    } else {                                                                                                           // 62\n      fmt = indent()                                                                                                   // 63\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                   // 64\n        + color('pass', ' %s')                                                                                         // 65\n        + color(test.speed, ' (%dms)');                                                                                // 66\n      cursor.CR();                                                                                                     // 67\n      console.log(fmt, test.title, test.duration);                                                                     // 68\n    }                                                                                                                  // 69\n  });                                                                                                                  // 70\n                                                                                                                       // 71\n  runner.on('fail', function(test) {                                                                                   // 72\n    cursor.CR();                                                                                                       // 73\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);                                                // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  runner.on('end', self.epilogue.bind(self));                                                                          // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\n/**                                                                                                                    // 80\n * Inherit from `Base.prototype`.                                                                                      // 81\n */                                                                                                                    // 82\ninherits(Spec, Base);                                                                                                  // 83\n                                                                                                                       // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"nyan.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/nyan.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Dot`.                                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nexports = module.exports = NyanCat;                                                                                    // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Dot` matrix test reporter.                                                                        // 15\n *                                                                                                                     // 16\n * @param {Runner} runner                                                                                              // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction NyanCat(runner) {                                                                                             // 21\n  Base.call(this, runner);                                                                                             // 22\n                                                                                                                       // 23\n  var self = this;                                                                                                     // 24\n  var width = Base.window.width * .75 | 0;                                                                             // 25\n  var nyanCatWidth = this.nyanCatWidth = 11;                                                                           // 26\n                                                                                                                       // 27\n  this.colorIndex = 0;                                                                                                 // 28\n  this.numberOfLines = 4;                                                                                              // 29\n  this.rainbowColors = self.generateColors();                                                                          // 30\n  this.scoreboardWidth = 5;                                                                                            // 31\n  this.tick = 0;                                                                                                       // 32\n  this.trajectories = [[], [], [], []];                                                                                // 33\n  this.trajectoryWidthMax = (width - nyanCatWidth);                                                                    // 34\n                                                                                                                       // 35\n  runner.on('start', function() {                                                                                      // 36\n    Base.cursor.hide();                                                                                                // 37\n    self.draw();                                                                                                       // 38\n  });                                                                                                                  // 39\n                                                                                                                       // 40\n  runner.on('pending', function() {                                                                                    // 41\n    self.draw();                                                                                                       // 42\n  });                                                                                                                  // 43\n                                                                                                                       // 44\n  runner.on('pass', function() {                                                                                       // 45\n    self.draw();                                                                                                       // 46\n  });                                                                                                                  // 47\n                                                                                                                       // 48\n  runner.on('fail', function() {                                                                                       // 49\n    self.draw();                                                                                                       // 50\n  });                                                                                                                  // 51\n                                                                                                                       // 52\n  runner.on('end', function() {                                                                                        // 53\n    Base.cursor.show();                                                                                                // 54\n    for (var i = 0; i < self.numberOfLines; i++) {                                                                     // 55\n      write('\\n');                                                                                                     // 56\n    }                                                                                                                  // 57\n    self.epilogue();                                                                                                   // 58\n  });                                                                                                                  // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Inherit from `Base.prototype`.                                                                                      // 63\n */                                                                                                                    // 64\ninherits(NyanCat, Base);                                                                                               // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Draw the nyan cat                                                                                                   // 68\n *                                                                                                                     // 69\n * @api private                                                                                                        // 70\n */                                                                                                                    // 71\n                                                                                                                       // 72\nNyanCat.prototype.draw = function() {                                                                                  // 73\n  this.appendRainbow();                                                                                                // 74\n  this.drawScoreboard();                                                                                               // 75\n  this.drawRainbow();                                                                                                  // 76\n  this.drawNyanCat();                                                                                                  // 77\n  this.tick = !this.tick;                                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Draw the \"scoreboard\" showing the number                                                                            // 82\n * of passes, failures and pending tests.                                                                              // 83\n *                                                                                                                     // 84\n * @api private                                                                                                        // 85\n */                                                                                                                    // 86\n                                                                                                                       // 87\nNyanCat.prototype.drawScoreboard = function() {                                                                        // 88\n  var stats = this.stats;                                                                                              // 89\n                                                                                                                       // 90\n  function draw(type, n) {                                                                                             // 91\n    write(' ');                                                                                                        // 92\n    write(Base.color(type, n));                                                                                        // 93\n    write('\\n');                                                                                                       // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n  draw('green', stats.passes);                                                                                         // 97\n  draw('fail', stats.failures);                                                                                        // 98\n  draw('pending', stats.pending);                                                                                      // 99\n  write('\\n');                                                                                                         // 100\n                                                                                                                       // 101\n  this.cursorUp(this.numberOfLines);                                                                                   // 102\n};                                                                                                                     // 103\n                                                                                                                       // 104\n/**                                                                                                                    // 105\n * Append the rainbow.                                                                                                 // 106\n *                                                                                                                     // 107\n * @api private                                                                                                        // 108\n */                                                                                                                    // 109\n                                                                                                                       // 110\nNyanCat.prototype.appendRainbow = function() {                                                                         // 111\n  var segment = this.tick ? '_' : '-';                                                                                 // 112\n  var rainbowified = this.rainbowify(segment);                                                                         // 113\n                                                                                                                       // 114\n  for (var index = 0; index < this.numberOfLines; index++) {                                                           // 115\n    var trajectory = this.trajectories[index];                                                                         // 116\n    if (trajectory.length >= this.trajectoryWidthMax) {                                                                // 117\n      trajectory.shift();                                                                                              // 118\n    }                                                                                                                  // 119\n    trajectory.push(rainbowified);                                                                                     // 120\n  }                                                                                                                    // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * Draw the rainbow.                                                                                                   // 125\n *                                                                                                                     // 126\n * @api private                                                                                                        // 127\n */                                                                                                                    // 128\n                                                                                                                       // 129\nNyanCat.prototype.drawRainbow = function() {                                                                           // 130\n  var self = this;                                                                                                     // 131\n                                                                                                                       // 132\n  this.trajectories.forEach(function(line) {                                                                           // 133\n    write('\\u001b[' + self.scoreboardWidth + 'C');                                                                     // 134\n    write(line.join(''));                                                                                              // 135\n    write('\\n');                                                                                                       // 136\n  });                                                                                                                  // 137\n                                                                                                                       // 138\n  this.cursorUp(this.numberOfLines);                                                                                   // 139\n};                                                                                                                     // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\n * Draw the nyan cat                                                                                                   // 143\n *                                                                                                                     // 144\n * @api private                                                                                                        // 145\n */                                                                                                                    // 146\nNyanCat.prototype.drawNyanCat = function() {                                                                           // 147\n  var self = this;                                                                                                     // 148\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;                                                 // 149\n  var dist = '\\u001b[' + startWidth + 'C';                                                                             // 150\n  var padding = '';                                                                                                    // 151\n                                                                                                                       // 152\n  write(dist);                                                                                                         // 153\n  write('_,------,');                                                                                                  // 154\n  write('\\n');                                                                                                         // 155\n                                                                                                                       // 156\n  write(dist);                                                                                                         // 157\n  padding = self.tick ? '  ' : '   ';                                                                                  // 158\n  write('_|' + padding + '/\\\\_/\\\\ ');                                                                                  // 159\n  write('\\n');                                                                                                         // 160\n                                                                                                                       // 161\n  write(dist);                                                                                                         // 162\n  padding = self.tick ? '_' : '__';                                                                                    // 163\n  var tail = self.tick ? '~' : '^';                                                                                    // 164\n  write(tail + '|' + padding + this.face() + ' ');                                                                     // 165\n  write('\\n');                                                                                                         // 166\n                                                                                                                       // 167\n  write(dist);                                                                                                         // 168\n  padding = self.tick ? ' ' : '  ';                                                                                    // 169\n  write(padding + '\"\"  \"\" ');                                                                                          // 170\n  write('\\n');                                                                                                         // 171\n                                                                                                                       // 172\n  this.cursorUp(this.numberOfLines);                                                                                   // 173\n};                                                                                                                     // 174\n                                                                                                                       // 175\n/**                                                                                                                    // 176\n * Draw nyan cat face.                                                                                                 // 177\n *                                                                                                                     // 178\n * @api private                                                                                                        // 179\n * @return {string}                                                                                                    // 180\n */                                                                                                                    // 181\n                                                                                                                       // 182\nNyanCat.prototype.face = function() {                                                                                  // 183\n  var stats = this.stats;                                                                                              // 184\n  if (stats.failures) {                                                                                                // 185\n    return '( x .x)';                                                                                                  // 186\n  } else if (stats.pending) {                                                                                          // 187\n    return '( o .o)';                                                                                                  // 188\n  } else if (stats.passes) {                                                                                           // 189\n    return '( ^ .^)';                                                                                                  // 190\n  }                                                                                                                    // 191\n  return '( - .-)';                                                                                                    // 192\n};                                                                                                                     // 193\n                                                                                                                       // 194\n/**                                                                                                                    // 195\n * Move cursor up `n`.                                                                                                 // 196\n *                                                                                                                     // 197\n * @api private                                                                                                        // 198\n * @param {number} n                                                                                                   // 199\n */                                                                                                                    // 200\n                                                                                                                       // 201\nNyanCat.prototype.cursorUp = function(n) {                                                                             // 202\n  write('\\u001b[' + n + 'A');                                                                                          // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\n/**                                                                                                                    // 206\n * Move cursor down `n`.                                                                                               // 207\n *                                                                                                                     // 208\n * @api private                                                                                                        // 209\n * @param {number} n                                                                                                   // 210\n */                                                                                                                    // 211\n                                                                                                                       // 212\nNyanCat.prototype.cursorDown = function(n) {                                                                           // 213\n  write('\\u001b[' + n + 'B');                                                                                          // 214\n};                                                                                                                     // 215\n                                                                                                                       // 216\n/**                                                                                                                    // 217\n * Generate rainbow colors.                                                                                            // 218\n *                                                                                                                     // 219\n * @api private                                                                                                        // 220\n * @return {Array}                                                                                                     // 221\n */                                                                                                                    // 222\nNyanCat.prototype.generateColors = function() {                                                                        // 223\n  var colors = [];                                                                                                     // 224\n                                                                                                                       // 225\n  for (var i = 0; i < (6 * 7); i++) {                                                                                  // 226\n    var pi3 = Math.floor(Math.PI / 3);                                                                                 // 227\n    var n = (i * (1.0 / 6));                                                                                           // 228\n    var r = Math.floor(3 * Math.sin(n) + 3);                                                                           // 229\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);                                                                 // 230\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);                                                                 // 231\n    colors.push(36 * r + 6 * g + b + 16);                                                                              // 232\n  }                                                                                                                    // 233\n                                                                                                                       // 234\n  return colors;                                                                                                       // 235\n};                                                                                                                     // 236\n                                                                                                                       // 237\n/**                                                                                                                    // 238\n * Apply rainbow to the given `str`.                                                                                   // 239\n *                                                                                                                     // 240\n * @api private                                                                                                        // 241\n * @param {string} str                                                                                                 // 242\n * @return {string}                                                                                                    // 243\n */                                                                                                                    // 244\nNyanCat.prototype.rainbowify = function(str) {                                                                         // 245\n  if (!Base.useColors) {                                                                                               // 246\n    return str;                                                                                                        // 247\n  }                                                                                                                    // 248\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];                                         // 249\n  this.colorIndex += 1;                                                                                                // 250\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';                                                             // 251\n};                                                                                                                     // 252\n                                                                                                                       // 253\n/**                                                                                                                    // 254\n * Stdout helper.                                                                                                      // 255\n *                                                                                                                     // 256\n * @param {string} string A message to write to stdout.                                                                // 257\n */                                                                                                                    // 258\nfunction write(string) {                                                                                               // 259\n  process.stdout.write(string);                                                                                        // 260\n}                                                                                                                      // 261\n                                                                                                                       // 262\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"xunit.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/xunit.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar utils = require('../utils');                                                                                       // 6\nvar inherits = utils.inherits;                                                                                         // 7\nvar fs = require('fs');                                                                                                // 8\nvar escape = utils.escape;                                                                                             // 9\nvar mkdirp = require('mkdirp');                                                                                        // 10\nvar path = require('path');                                                                                            // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 17\nvar Date = global.Date;                                                                                                // 18\nvar setTimeout = global.setTimeout;                                                                                    // 19\nvar setInterval = global.setInterval;                                                                                  // 20\nvar clearTimeout = global.clearTimeout;                                                                                // 21\nvar clearInterval = global.clearInterval;                                                                              // 22\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Expose `XUnit`.                                                                                                     // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports = module.exports = XUnit;                                                                                      // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Initialize a new `XUnit` reporter.                                                                                  // 32\n *                                                                                                                     // 33\n * @api public                                                                                                         // 34\n * @param {Runner} runner                                                                                              // 35\n */                                                                                                                    // 36\nfunction XUnit(runner, options) {                                                                                      // 37\n  Base.call(this, runner);                                                                                             // 38\n                                                                                                                       // 39\n  var stats = this.stats;                                                                                              // 40\n  var tests = [];                                                                                                      // 41\n  var self = this;                                                                                                     // 42\n                                                                                                                       // 43\n  if (options.reporterOptions && options.reporterOptions.output) {                                                     // 44\n    if (!fs.createWriteStream) {                                                                                       // 45\n      throw new Error('file output not supported in browser');                                                         // 46\n    }                                                                                                                  // 47\n    mkdirp.sync(path.dirname(options.reporterOptions.output));                                                         // 48\n    self.fileStream = fs.createWriteStream(options.reporterOptions.output);                                            // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  runner.on('pending', function(test) {                                                                                // 52\n    tests.push(test);                                                                                                  // 53\n  });                                                                                                                  // 54\n                                                                                                                       // 55\n  runner.on('pass', function(test) {                                                                                   // 56\n    tests.push(test);                                                                                                  // 57\n  });                                                                                                                  // 58\n                                                                                                                       // 59\n  runner.on('fail', function(test) {                                                                                   // 60\n    tests.push(test);                                                                                                  // 61\n  });                                                                                                                  // 62\n                                                                                                                       // 63\n  runner.on('end', function() {                                                                                        // 64\n    self.write(tag('testsuite', {                                                                                      // 65\n      name: 'Mocha Tests',                                                                                             // 66\n      tests: stats.tests,                                                                                              // 67\n      failures: stats.failures,                                                                                        // 68\n      errors: stats.failures,                                                                                          // 69\n      skipped: stats.tests - stats.failures - stats.passes,                                                            // 70\n      timestamp: (new Date()).toUTCString(),                                                                           // 71\n      time: (stats.duration / 1000) || 0                                                                               // 72\n    }, false));                                                                                                        // 73\n                                                                                                                       // 74\n    tests.forEach(function(t) {                                                                                        // 75\n      self.test(t);                                                                                                    // 76\n    });                                                                                                                // 77\n                                                                                                                       // 78\n    self.write('</testsuite>');                                                                                        // 79\n  });                                                                                                                  // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/**                                                                                                                    // 83\n * Inherit from `Base.prototype`.                                                                                      // 84\n */                                                                                                                    // 85\ninherits(XUnit, Base);                                                                                                 // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * Override done to close the stream (if it's a file).                                                                 // 89\n *                                                                                                                     // 90\n * @param failures                                                                                                     // 91\n * @param {Function} fn                                                                                                // 92\n */                                                                                                                    // 93\nXUnit.prototype.done = function(failures, fn) {                                                                        // 94\n  if (this.fileStream) {                                                                                               // 95\n    this.fileStream.end(function() {                                                                                   // 96\n      fn(failures);                                                                                                    // 97\n    });                                                                                                                // 98\n  } else {                                                                                                             // 99\n    fn(failures);                                                                                                      // 100\n  }                                                                                                                    // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Write out the given line.                                                                                           // 105\n *                                                                                                                     // 106\n * @param {string} line                                                                                                // 107\n */                                                                                                                    // 108\nXUnit.prototype.write = function(line) {                                                                               // 109\n  if (this.fileStream) {                                                                                               // 110\n    this.fileStream.write(line + '\\n');                                                                                // 111\n  } else if (typeof process === 'object' && process.stdout) {                                                          // 112\n    process.stdout.write(line + '\\n');                                                                                 // 113\n  } else {                                                                                                             // 114\n    console.log(line);                                                                                                 // 115\n  }                                                                                                                    // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * Output tag for the given `test.`                                                                                    // 120\n *                                                                                                                     // 121\n * @param {Test} test                                                                                                  // 122\n */                                                                                                                    // 123\nXUnit.prototype.test = function(test) {                                                                                // 124\n  var attrs = {                                                                                                        // 125\n    classname: test.parent.fullTitle(),                                                                                // 126\n    name: test.title,                                                                                                  // 127\n    time: (test.duration / 1000) || 0                                                                                  // 128\n  };                                                                                                                   // 129\n                                                                                                                       // 130\n  if (test.state === 'failed') {                                                                                       // 131\n    var err = test.err;                                                                                                // 132\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + '\\n' + err.stack))));\n  } else if (test.pending) {                                                                                           // 134\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));                                               // 135\n  } else {                                                                                                             // 136\n    this.write(tag('testcase', attrs, true));                                                                          // 137\n  }                                                                                                                    // 138\n};                                                                                                                     // 139\n                                                                                                                       // 140\n/**                                                                                                                    // 141\n * HTML tag helper.                                                                                                    // 142\n *                                                                                                                     // 143\n * @param name                                                                                                         // 144\n * @param attrs                                                                                                        // 145\n * @param close                                                                                                        // 146\n * @param content                                                                                                      // 147\n * @return {string}                                                                                                    // 148\n */                                                                                                                    // 149\nfunction tag(name, attrs, close, content) {                                                                            // 150\n  var end = close ? '/>' : '>';                                                                                        // 151\n  var pairs = [];                                                                                                      // 152\n  var tag;                                                                                                             // 153\n                                                                                                                       // 154\n  for (var key in attrs) {                                                                                             // 155\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {                                                            // 156\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');                                                               // 157\n    }                                                                                                                  // 158\n  }                                                                                                                    // 159\n                                                                                                                       // 160\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;                                                // 161\n  if (content) {                                                                                                       // 162\n    tag += content + '</' + name + end;                                                                                // 163\n  }                                                                                                                    // 164\n  return tag;                                                                                                          // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\n/**                                                                                                                    // 168\n * Return cdata escaped CDATA `str`.                                                                                   // 169\n */                                                                                                                    // 170\n                                                                                                                       // 171\nfunction cdata(str) {                                                                                                  // 172\n  return '<![CDATA[' + escape(str) + ']]>';                                                                            // 173\n}                                                                                                                      // 174\n                                                                                                                       // 175\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"markdown.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/markdown.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar utils = require('../utils');                                                                                       // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Constants                                                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar SUITE_PREFIX = '$';                                                                                                // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Expose `Markdown`.                                                                                                  // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nexports = module.exports = Markdown;                                                                                   // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Initialize a new `Markdown` reporter.                                                                               // 21\n *                                                                                                                     // 22\n * @api public                                                                                                         // 23\n * @param {Runner} runner                                                                                              // 24\n */                                                                                                                    // 25\nfunction Markdown(runner) {                                                                                            // 26\n  Base.call(this, runner);                                                                                             // 27\n                                                                                                                       // 28\n  var level = 0;                                                                                                       // 29\n  var buf = '';                                                                                                        // 30\n                                                                                                                       // 31\n  function title(str) {                                                                                                // 32\n    return Array(level).join('#') + ' ' + str;                                                                         // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  function mapTOC(suite, obj) {                                                                                        // 36\n    var ret = obj;                                                                                                     // 37\n    var key = SUITE_PREFIX + suite.title;                                                                              // 38\n                                                                                                                       // 39\n    obj = obj[key] = obj[key] || { suite: suite };                                                                     // 40\n    suite.suites.forEach(function(suite) {                                                                             // 41\n      mapTOC(suite, obj);                                                                                              // 42\n    });                                                                                                                // 43\n                                                                                                                       // 44\n    return ret;                                                                                                        // 45\n  }                                                                                                                    // 46\n                                                                                                                       // 47\n  function stringifyTOC(obj, level) {                                                                                  // 48\n    ++level;                                                                                                           // 49\n    var buf = '';                                                                                                      // 50\n    var link;                                                                                                          // 51\n    for (var key in obj) {                                                                                             // 52\n      if (key === 'suite') {                                                                                           // 53\n        continue;                                                                                                      // 54\n      }                                                                                                                // 55\n      if (key !== SUITE_PREFIX) {                                                                                      // 56\n        link = ' - [' + key.substring(1) + ']';                                                                        // 57\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';                                                 // 58\n        buf += Array(level).join('  ') + link;                                                                         // 59\n      }                                                                                                                // 60\n      buf += stringifyTOC(obj[key], level);                                                                            // 61\n    }                                                                                                                  // 62\n    return buf;                                                                                                        // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  function generateTOC(suite) {                                                                                        // 66\n    var obj = mapTOC(suite, {});                                                                                       // 67\n    return stringifyTOC(obj, 0);                                                                                       // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  generateTOC(runner.suite);                                                                                           // 71\n                                                                                                                       // 72\n  runner.on('suite', function(suite) {                                                                                 // 73\n    ++level;                                                                                                           // 74\n    var slug = utils.slug(suite.fullTitle());                                                                          // 75\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';                                                                       // 76\n    buf += title(suite.title) + '\\n';                                                                                  // 77\n  });                                                                                                                  // 78\n                                                                                                                       // 79\n  runner.on('suite end', function() {                                                                                  // 80\n    --level;                                                                                                           // 81\n  });                                                                                                                  // 82\n                                                                                                                       // 83\n  runner.on('pass', function(test) {                                                                                   // 84\n    var code = utils.clean(test.body);                                                                                 // 85\n    buf += test.title + '.\\n';                                                                                         // 86\n    buf += '\\n```js\\n';                                                                                                // 87\n    buf += code + '\\n';                                                                                                // 88\n    buf += '```\\n\\n';                                                                                                  // 89\n  });                                                                                                                  // 90\n                                                                                                                       // 91\n  runner.on('end', function() {                                                                                        // 92\n    process.stdout.write('# TOC\\n');                                                                                   // 93\n    process.stdout.write(generateTOC(runner.suite));                                                                   // 94\n    process.stdout.write(buf);                                                                                         // 95\n  });                                                                                                                  // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"progress.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/progress.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\nvar color = Base.color;                                                                                                // 7\nvar cursor = Base.cursor;                                                                                              // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Expose `Progress`.                                                                                                  // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nexports = module.exports = Progress;                                                                                   // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * General progress bar color.                                                                                         // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nBase.colors.progress = 90;                                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Initialize a new `Progress` bar test reporter.                                                                      // 23\n *                                                                                                                     // 24\n * @api public                                                                                                         // 25\n * @param {Runner} runner                                                                                              // 26\n * @param {Object} options                                                                                             // 27\n */                                                                                                                    // 28\nfunction Progress(runner, options) {                                                                                   // 29\n  Base.call(this, runner);                                                                                             // 30\n                                                                                                                       // 31\n  var self = this;                                                                                                     // 32\n  var width = Base.window.width * .50 | 0;                                                                             // 33\n  var total = runner.total;                                                                                            // 34\n  var complete = 0;                                                                                                    // 35\n  var lastN = -1;                                                                                                      // 36\n                                                                                                                       // 37\n  // default chars                                                                                                     // 38\n  options = options || {};                                                                                             // 39\n  options.open = options.open || '[';                                                                                  // 40\n  options.complete = options.complete || '▬';                                                                          // 41\n  options.incomplete = options.incomplete || Base.symbols.dot;                                                         // 42\n  options.close = options.close || ']';                                                                                // 43\n  options.verbose = false;                                                                                             // 44\n                                                                                                                       // 45\n  // tests started                                                                                                     // 46\n  runner.on('start', function() {                                                                                      // 47\n    console.log();                                                                                                     // 48\n    cursor.hide();                                                                                                     // 49\n  });                                                                                                                  // 50\n                                                                                                                       // 51\n  // tests complete                                                                                                    // 52\n  runner.on('test end', function() {                                                                                   // 53\n    complete++;                                                                                                        // 54\n                                                                                                                       // 55\n    var percent = complete / total;                                                                                    // 56\n    var n = width * percent | 0;                                                                                       // 57\n    var i = width - n;                                                                                                 // 58\n                                                                                                                       // 59\n    if (n === lastN && !options.verbose) {                                                                             // 60\n      // Don't re-render the line if it hasn't changed                                                                 // 61\n      return;                                                                                                          // 62\n    }                                                                                                                  // 63\n    lastN = n;                                                                                                         // 64\n                                                                                                                       // 65\n    cursor.CR();                                                                                                       // 66\n    process.stdout.write('\\u001b[J');                                                                                  // 67\n    process.stdout.write(color('progress', '  ' + options.open));                                                      // 68\n    process.stdout.write(Array(n).join(options.complete));                                                             // 69\n    process.stdout.write(Array(i).join(options.incomplete));                                                           // 70\n    process.stdout.write(color('progress', options.close));                                                            // 71\n    if (options.verbose) {                                                                                             // 72\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));                                        // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  // tests are complete, output some stats                                                                             // 77\n  // and the failures if any                                                                                           // 78\n  runner.on('end', function() {                                                                                        // 79\n    cursor.show();                                                                                                     // 80\n    console.log();                                                                                                     // 81\n    self.epilogue();                                                                                                   // 82\n  });                                                                                                                  // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\n/**                                                                                                                    // 86\n * Inherit from `Base.prototype`.                                                                                      // 87\n */                                                                                                                    // 88\ninherits(Progress, Base);                                                                                              // 89\n                                                                                                                       // 90\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"landing.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/landing.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\nvar inherits = require('../utils').inherits;                                                                           // 6\nvar cursor = Base.cursor;                                                                                              // 7\nvar color = Base.color;                                                                                                // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Expose `Landing`.                                                                                                   // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nexports = module.exports = Landing;                                                                                    // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Airplane color.                                                                                                     // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nBase.colors.plane = 0;                                                                                                 // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Airplane crash color.                                                                                               // 23\n */                                                                                                                    // 24\n                                                                                                                       // 25\nBase.colors['plane crash'] = 31;                                                                                       // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Runway color.                                                                                                       // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nBase.colors.runway = 90;                                                                                               // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Initialize a new `Landing` reporter.                                                                                // 35\n *                                                                                                                     // 36\n * @api public                                                                                                         // 37\n * @param {Runner} runner                                                                                              // 38\n */                                                                                                                    // 39\nfunction Landing(runner) {                                                                                             // 40\n  Base.call(this, runner);                                                                                             // 41\n                                                                                                                       // 42\n  var self = this;                                                                                                     // 43\n  var width = Base.window.width * .75 | 0;                                                                             // 44\n  var total = runner.total;                                                                                            // 45\n  var stream = process.stdout;                                                                                         // 46\n  var plane = color('plane', '✈');                                                                                     // 47\n  var crashed = -1;                                                                                                    // 48\n  var n = 0;                                                                                                           // 49\n                                                                                                                       // 50\n  function runway() {                                                                                                  // 51\n    var buf = Array(width).join('-');                                                                                  // 52\n    return '  ' + color('runway', buf);                                                                                // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  runner.on('start', function() {                                                                                      // 56\n    stream.write('\\n\\n\\n  ');                                                                                          // 57\n    cursor.hide();                                                                                                     // 58\n  });                                                                                                                  // 59\n                                                                                                                       // 60\n  runner.on('test end', function(test) {                                                                               // 61\n    // check if the plane crashed                                                                                      // 62\n    var col = crashed === -1 ? width * ++n / total | 0 : crashed;                                                      // 63\n                                                                                                                       // 64\n    // show the crash                                                                                                  // 65\n    if (test.state === 'failed') {                                                                                     // 66\n      plane = color('plane crash', '✈');                                                                               // 67\n      crashed = col;                                                                                                   // 68\n    }                                                                                                                  // 69\n                                                                                                                       // 70\n    // render landing strip                                                                                            // 71\n    stream.write('\\u001b[' + (width + 1) + 'D\\u001b[2A');                                                              // 72\n    stream.write(runway());                                                                                            // 73\n    stream.write('\\n  ');                                                                                              // 74\n    stream.write(color('runway', Array(col).join('⋅')));                                                               // 75\n    stream.write(plane);                                                                                               // 76\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));                                                // 77\n    stream.write(runway());                                                                                            // 78\n    stream.write('\\u001b[0m');                                                                                         // 79\n  });                                                                                                                  // 80\n                                                                                                                       // 81\n  runner.on('end', function() {                                                                                        // 82\n    cursor.show();                                                                                                     // 83\n    console.log();                                                                                                     // 84\n    self.epilogue();                                                                                                   // 85\n  });                                                                                                                  // 86\n}                                                                                                                      // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * Inherit from `Base.prototype`.                                                                                      // 90\n */                                                                                                                    // 91\ninherits(Landing, Base);                                                                                               // 92\n                                                                                                                       // 93\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"json-cov.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/json-cov.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Expose `JSONCov`.                                                                                                   // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nexports = module.exports = JSONCov;                                                                                    // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Initialize a new `JsCoverage` reporter.                                                                             // 14\n *                                                                                                                     // 15\n * @api public                                                                                                         // 16\n * @param {Runner} runner                                                                                              // 17\n * @param {boolean} output                                                                                             // 18\n */                                                                                                                    // 19\nfunction JSONCov(runner, output) {                                                                                     // 20\n  Base.call(this, runner);                                                                                             // 21\n                                                                                                                       // 22\n  output = arguments.length === 1 || output;                                                                           // 23\n  var self = this;                                                                                                     // 24\n  var tests = [];                                                                                                      // 25\n  var failures = [];                                                                                                   // 26\n  var passes = [];                                                                                                     // 27\n                                                                                                                       // 28\n  runner.on('test end', function(test) {                                                                               // 29\n    tests.push(test);                                                                                                  // 30\n  });                                                                                                                  // 31\n                                                                                                                       // 32\n  runner.on('pass', function(test) {                                                                                   // 33\n    passes.push(test);                                                                                                 // 34\n  });                                                                                                                  // 35\n                                                                                                                       // 36\n  runner.on('fail', function(test) {                                                                                   // 37\n    failures.push(test);                                                                                               // 38\n  });                                                                                                                  // 39\n                                                                                                                       // 40\n  runner.on('end', function() {                                                                                        // 41\n    var cov = global._$jscoverage || {};                                                                               // 42\n    var result = self.cov = map(cov);                                                                                  // 43\n    result.stats = self.stats;                                                                                         // 44\n    result.tests = tests.map(clean);                                                                                   // 45\n    result.failures = failures.map(clean);                                                                             // 46\n    result.passes = passes.map(clean);                                                                                 // 47\n    if (!output) {                                                                                                     // 48\n      return;                                                                                                          // 49\n    }                                                                                                                  // 50\n    process.stdout.write(JSON.stringify(result, null, 2));                                                             // 51\n  });                                                                                                                  // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Map jscoverage data to a JSON structure                                                                             // 56\n * suitable for reporting.                                                                                             // 57\n *                                                                                                                     // 58\n * @api private                                                                                                        // 59\n * @param {Object} cov                                                                                                 // 60\n * @return {Object}                                                                                                    // 61\n */                                                                                                                    // 62\n                                                                                                                       // 63\nfunction map(cov) {                                                                                                    // 64\n  var ret = {                                                                                                          // 65\n    instrumentation: 'node-jscoverage',                                                                                // 66\n    sloc: 0,                                                                                                           // 67\n    hits: 0,                                                                                                           // 68\n    misses: 0,                                                                                                         // 69\n    coverage: 0,                                                                                                       // 70\n    files: []                                                                                                          // 71\n  };                                                                                                                   // 72\n                                                                                                                       // 73\n  for (var filename in cov) {                                                                                          // 74\n    if (Object.prototype.hasOwnProperty.call(cov, filename)) {                                                         // 75\n      var data = coverage(filename, cov[filename]);                                                                    // 76\n      ret.files.push(data);                                                                                            // 77\n      ret.hits += data.hits;                                                                                           // 78\n      ret.misses += data.misses;                                                                                       // 79\n      ret.sloc += data.sloc;                                                                                           // 80\n    }                                                                                                                  // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  ret.files.sort(function(a, b) {                                                                                      // 84\n    return a.filename.localeCompare(b.filename);                                                                       // 85\n  });                                                                                                                  // 86\n                                                                                                                       // 87\n  if (ret.sloc > 0) {                                                                                                  // 88\n    ret.coverage = (ret.hits / ret.sloc) * 100;                                                                        // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n  return ret;                                                                                                          // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\n/**                                                                                                                    // 95\n * Map jscoverage data for a single source file                                                                        // 96\n * to a JSON structure suitable for reporting.                                                                         // 97\n *                                                                                                                     // 98\n * @api private                                                                                                        // 99\n * @param {string} filename name of the source file                                                                    // 100\n * @param {Object} data jscoverage coverage data                                                                       // 101\n * @return {Object}                                                                                                    // 102\n */                                                                                                                    // 103\nfunction coverage(filename, data) {                                                                                    // 104\n  var ret = {                                                                                                          // 105\n    filename: filename,                                                                                                // 106\n    coverage: 0,                                                                                                       // 107\n    hits: 0,                                                                                                           // 108\n    misses: 0,                                                                                                         // 109\n    sloc: 0,                                                                                                           // 110\n    source: {}                                                                                                         // 111\n  };                                                                                                                   // 112\n                                                                                                                       // 113\n  data.source.forEach(function(line, num) {                                                                            // 114\n    num++;                                                                                                             // 115\n                                                                                                                       // 116\n    if (data[num] === 0) {                                                                                             // 117\n      ret.misses++;                                                                                                    // 118\n      ret.sloc++;                                                                                                      // 119\n    } else if (data[num] !== undefined) {                                                                              // 120\n      ret.hits++;                                                                                                      // 121\n      ret.sloc++;                                                                                                      // 122\n    }                                                                                                                  // 123\n                                                                                                                       // 124\n    ret.source[num] = {                                                                                                // 125\n      source: line,                                                                                                    // 126\n      coverage: data[num] === undefined ? '' : data[num]                                                               // 127\n    };                                                                                                                 // 128\n  });                                                                                                                  // 129\n                                                                                                                       // 130\n  ret.coverage = ret.hits / ret.sloc * 100;                                                                            // 131\n                                                                                                                       // 132\n  return ret;                                                                                                          // 133\n}                                                                                                                      // 134\n                                                                                                                       // 135\n/**                                                                                                                    // 136\n * Return a plain-object representation of `test`                                                                      // 137\n * free of cyclic properties etc.                                                                                      // 138\n *                                                                                                                     // 139\n * @api private                                                                                                        // 140\n * @param {Object} test                                                                                                // 141\n * @return {Object}                                                                                                    // 142\n */                                                                                                                    // 143\nfunction clean(test) {                                                                                                 // 144\n  return {                                                                                                             // 145\n    duration: test.duration,                                                                                           // 146\n    currentRetry: test.currentRetry(),                                                                                 // 147\n    fullTitle: test.fullTitle(),                                                                                       // 148\n    title: test.title                                                                                                  // 149\n  };                                                                                                                   // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"html-cov.js\":function(require,exports,module,__filename,__dirname){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/html-cov.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar JSONCov = require('./json-cov');                                                                                   // 5\nvar readFileSync = require('fs').readFileSync;                                                                         // 6\nvar join = require('path').join;                                                                                       // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * Expose `HTMLCov`.                                                                                                   // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\nexports = module.exports = HTMLCov;                                                                                    // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Initialize a new `JsCoverage` reporter.                                                                             // 16\n *                                                                                                                     // 17\n * @api public                                                                                                         // 18\n * @param {Runner} runner                                                                                              // 19\n */                                                                                                                    // 20\nfunction HTMLCov(runner) {                                                                                             // 21\n  var jade = require('jade');                                                                                          // 22\n  var file = join(__dirname, '/templates/coverage.jade');                                                              // 23\n  var str = readFileSync(file, 'utf8');                                                                                // 24\n  var fn = jade.compile(str, { filename: file });                                                                      // 25\n  var self = this;                                                                                                     // 26\n                                                                                                                       // 27\n  JSONCov.call(this, runner, false);                                                                                   // 28\n                                                                                                                       // 29\n  runner.on('end', function() {                                                                                        // 30\n    process.stdout.write(fn({                                                                                          // 31\n      cov: self.cov,                                                                                                   // 32\n      coverageClass: coverageClass                                                                                     // 33\n    }));                                                                                                               // 34\n  });                                                                                                                  // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Return coverage class for a given coverage percentage.                                                              // 39\n *                                                                                                                     // 40\n * @api private                                                                                                        // 41\n * @param {number} coveragePctg                                                                                        // 42\n * @return {string}                                                                                                    // 43\n */                                                                                                                    // 44\nfunction coverageClass(coveragePctg) {                                                                                 // 45\n  if (coveragePctg >= 75) {                                                                                            // 46\n    return 'high';                                                                                                     // 47\n  }                                                                                                                    // 48\n  if (coveragePctg >= 50) {                                                                                            // 49\n    return 'medium';                                                                                                   // 50\n  }                                                                                                                    // 51\n  if (coveragePctg >= 25) {                                                                                            // 52\n    return 'low';                                                                                                      // 53\n  }                                                                                                                    // 54\n  return 'terrible';                                                                                                   // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"json-stream.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/reporters/json-stream.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Base = require('./base');                                                                                          // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Expose `List`.                                                                                                      // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nexports = module.exports = List;                                                                                       // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Initialize a new `List` test reporter.                                                                              // 14\n *                                                                                                                     // 15\n * @api public                                                                                                         // 16\n * @param {Runner} runner                                                                                              // 17\n */                                                                                                                    // 18\nfunction List(runner) {                                                                                                // 19\n  Base.call(this, runner);                                                                                             // 20\n                                                                                                                       // 21\n  var self = this;                                                                                                     // 22\n  var total = runner.total;                                                                                            // 23\n                                                                                                                       // 24\n  runner.on('start', function() {                                                                                      // 25\n    console.log(JSON.stringify(['start', { total: total }]));                                                          // 26\n  });                                                                                                                  // 27\n                                                                                                                       // 28\n  runner.on('pass', function(test) {                                                                                   // 29\n    console.log(JSON.stringify(['pass', clean(test)]));                                                                // 30\n  });                                                                                                                  // 31\n                                                                                                                       // 32\n  runner.on('fail', function(test, err) {                                                                              // 33\n    test = clean(test);                                                                                                // 34\n    test.err = err.message;                                                                                            // 35\n    test.stack = err.stack || null;                                                                                    // 36\n    console.log(JSON.stringify(['fail', test]));                                                                       // 37\n  });                                                                                                                  // 38\n                                                                                                                       // 39\n  runner.on('end', function() {                                                                                        // 40\n    process.stdout.write(JSON.stringify(['end', self.stats]));                                                         // 41\n  });                                                                                                                  // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Return a plain-object representation of `test`                                                                      // 46\n * free of cyclic properties etc.                                                                                      // 47\n *                                                                                                                     // 48\n * @api private                                                                                                        // 49\n * @param {Object} test                                                                                                // 50\n * @return {Object}                                                                                                    // 51\n */                                                                                                                    // 52\nfunction clean(test) {                                                                                                 // 53\n  return {                                                                                                             // 54\n    title: test.title,                                                                                                 // 55\n    fullTitle: test.fullTitle(),                                                                                       // 56\n    duration: test.duration,                                                                                           // 57\n    currentRetry: test.currentRetry()                                                                                  // 58\n  };                                                                                                                   // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ms.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/ms.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar s = 1000;                                                                                                          // 5\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25;                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Parse or format the given `val`.                                                                                    // 12\n *                                                                                                                     // 13\n * Options:                                                                                                            // 14\n *                                                                                                                     // 15\n *  - `long` verbose formatting [false]                                                                                // 16\n *                                                                                                                     // 17\n * @api public                                                                                                         // 18\n * @param {string|number} val                                                                                          // 19\n * @param {Object} options                                                                                             // 20\n * @return {string|number}                                                                                             // 21\n */                                                                                                                    // 22\nmodule.exports = function(val, options) {                                                                              // 23\n  options = options || {};                                                                                             // 24\n  if (typeof val === 'string') {                                                                                       // 25\n    return parse(val);                                                                                                 // 26\n  }                                                                                                                    // 27\n  // https://github.com/mochajs/mocha/pull/1035                                                                        // 28\n  return options['long'] ? longFormat(val) : shortFormat(val);                                                         // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Parse the given `str` and return milliseconds.                                                                      // 33\n *                                                                                                                     // 34\n * @api private                                                                                                        // 35\n * @param {string} str                                                                                                 // 36\n * @return {number}                                                                                                    // 37\n */                                                                                                                    // 38\nfunction parse(str) {                                                                                                  // 39\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);                // 40\n  if (!match) {                                                                                                        // 41\n    return;                                                                                                            // 42\n  }                                                                                                                    // 43\n  var n = parseFloat(match[1]);                                                                                        // 44\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 45\n  switch (type) {                                                                                                      // 46\n    case 'years':                                                                                                      // 47\n    case 'year':                                                                                                       // 48\n    case 'y':                                                                                                          // 49\n      return n * y;                                                                                                    // 50\n    case 'days':                                                                                                       // 51\n    case 'day':                                                                                                        // 52\n    case 'd':                                                                                                          // 53\n      return n * d;                                                                                                    // 54\n    case 'hours':                                                                                                      // 55\n    case 'hour':                                                                                                       // 56\n    case 'h':                                                                                                          // 57\n      return n * h;                                                                                                    // 58\n    case 'minutes':                                                                                                    // 59\n    case 'minute':                                                                                                     // 60\n    case 'm':                                                                                                          // 61\n      return n * m;                                                                                                    // 62\n    case 'seconds':                                                                                                    // 63\n    case 'second':                                                                                                     // 64\n    case 's':                                                                                                          // 65\n      return n * s;                                                                                                    // 66\n    case 'ms':                                                                                                         // 67\n      return n;                                                                                                        // 68\n    default:                                                                                                           // 69\n      // No default case                                                                                               // 70\n  }                                                                                                                    // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Short format for `ms`.                                                                                              // 75\n *                                                                                                                     // 76\n * @api private                                                                                                        // 77\n * @param {number} ms                                                                                                  // 78\n * @return {string}                                                                                                    // 79\n */                                                                                                                    // 80\nfunction shortFormat(ms) {                                                                                             // 81\n  if (ms >= d) {                                                                                                       // 82\n    return Math.round(ms / d) + 'd';                                                                                   // 83\n  }                                                                                                                    // 84\n  if (ms >= h) {                                                                                                       // 85\n    return Math.round(ms / h) + 'h';                                                                                   // 86\n  }                                                                                                                    // 87\n  if (ms >= m) {                                                                                                       // 88\n    return Math.round(ms / m) + 'm';                                                                                   // 89\n  }                                                                                                                    // 90\n  if (ms >= s) {                                                                                                       // 91\n    return Math.round(ms / s) + 's';                                                                                   // 92\n  }                                                                                                                    // 93\n  return ms + 'ms';                                                                                                    // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Long format for `ms`.                                                                                               // 98\n *                                                                                                                     // 99\n * @api private                                                                                                        // 100\n * @param {number} ms                                                                                                  // 101\n * @return {string}                                                                                                    // 102\n */                                                                                                                    // 103\nfunction longFormat(ms) {                                                                                              // 104\n  return plural(ms, d, 'day')                                                                                          // 105\n    || plural(ms, h, 'hour')                                                                                           // 106\n    || plural(ms, m, 'minute')                                                                                         // 107\n    || plural(ms, s, 'second')                                                                                         // 108\n    || ms + ' ms';                                                                                                     // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Pluralization helper.                                                                                               // 113\n *                                                                                                                     // 114\n * @api private                                                                                                        // 115\n * @param {number} ms                                                                                                  // 116\n * @param {number} n                                                                                                   // 117\n * @param {string} name                                                                                                // 118\n */                                                                                                                    // 119\nfunction plural(ms, n, name) {                                                                                         // 120\n  if (ms < n) {                                                                                                        // 121\n    return;                                                                                                            // 122\n  }                                                                                                                    // 123\n  if (ms < n * 1.5) {                                                                                                  // 124\n    return Math.floor(ms / n) + ' ' + name;                                                                            // 125\n  }                                                                                                                    // 126\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/utils.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */                                                                                               // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Module dependencies.                                                                                                // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nvar basename = require('path').basename;                                                                               // 7\nvar debug = require('debug')('mocha:watch');                                                                           // 8\nvar exists = require('fs').existsSync || require('path').existsSync;                                                   // 9\nvar glob = require('glob');                                                                                            // 10\nvar join = require('path').join;                                                                                       // 11\nvar readdirSync = require('fs').readdirSync;                                                                           // 12\nvar statSync = require('fs').statSync;                                                                                 // 13\nvar watchFile = require('fs').watchFile;                                                                               // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Ignored directories.                                                                                                // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nvar ignore = ['node_modules', '.git'];                                                                                 // 20\n                                                                                                                       // 21\nexports.inherits = require('util').inherits;                                                                           // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Escape special characters in the given string of html.                                                              // 25\n *                                                                                                                     // 26\n * @api private                                                                                                        // 27\n * @param  {string} html                                                                                               // 28\n * @return {string}                                                                                                    // 29\n */                                                                                                                    // 30\nexports.escape = function(html) {                                                                                      // 31\n  return String(html)                                                                                                  // 32\n    .replace(/&/g, '&amp;')                                                                                            // 33\n    .replace(/\"/g, '&quot;')                                                                                           // 34\n    .replace(/</g, '&lt;')                                                                                             // 35\n    .replace(/>/g, '&gt;');                                                                                            // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Array#forEach (<=IE8)                                                                                               // 40\n *                                                                                                                     // 41\n * @api private                                                                                                        // 42\n * @param {Array} arr                                                                                                  // 43\n * @param {Function} fn                                                                                                // 44\n * @param {Object} scope                                                                                               // 45\n */                                                                                                                    // 46\nexports.forEach = function(arr, fn, scope) {                                                                           // 47\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 48\n    fn.call(scope, arr[i], i);                                                                                         // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Test if the given obj is type of string.                                                                            // 54\n *                                                                                                                     // 55\n * @api private                                                                                                        // 56\n * @param {Object} obj                                                                                                 // 57\n * @return {boolean}                                                                                                   // 58\n */                                                                                                                    // 59\nexports.isString = function(obj) {                                                                                     // 60\n  return typeof obj === 'string';                                                                                      // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Array#map (<=IE8)                                                                                                   // 65\n *                                                                                                                     // 66\n * @api private                                                                                                        // 67\n * @param {Array} arr                                                                                                  // 68\n * @param {Function} fn                                                                                                // 69\n * @param {Object} scope                                                                                               // 70\n * @return {Array}                                                                                                     // 71\n */                                                                                                                    // 72\nexports.map = function(arr, fn, scope) {                                                                               // 73\n  var result = [];                                                                                                     // 74\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 75\n    result.push(fn.call(scope, arr[i], i, arr));                                                                       // 76\n  }                                                                                                                    // 77\n  return result;                                                                                                       // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Array#indexOf (<=IE8)                                                                                               // 82\n *                                                                                                                     // 83\n * @api private                                                                                                        // 84\n * @param {Array} arr                                                                                                  // 85\n * @param {Object} obj to find index of                                                                                // 86\n * @param {number} start                                                                                               // 87\n * @return {number}                                                                                                    // 88\n */                                                                                                                    // 89\nexports.indexOf = function(arr, obj, start) {                                                                          // 90\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                               // 91\n    if (arr[i] === obj) {                                                                                              // 92\n      return i;                                                                                                        // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n  return -1;                                                                                                           // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * Array#reduce (<=IE8)                                                                                                // 100\n *                                                                                                                     // 101\n * @api private                                                                                                        // 102\n * @param {Array} arr                                                                                                  // 103\n * @param {Function} fn                                                                                                // 104\n * @param {Object} val Initial value.                                                                                  // 105\n * @return {*}                                                                                                         // 106\n */                                                                                                                    // 107\nexports.reduce = function(arr, fn, val) {                                                                              // 108\n  var rval = val;                                                                                                      // 109\n                                                                                                                       // 110\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 111\n    rval = fn(rval, arr[i], i, arr);                                                                                   // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n  return rval;                                                                                                         // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * Array#filter (<=IE8)                                                                                                // 119\n *                                                                                                                     // 120\n * @api private                                                                                                        // 121\n * @param {Array} arr                                                                                                  // 122\n * @param {Function} fn                                                                                                // 123\n * @return {Array}                                                                                                     // 124\n */                                                                                                                    // 125\nexports.filter = function(arr, fn) {                                                                                   // 126\n  var ret = [];                                                                                                        // 127\n                                                                                                                       // 128\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 129\n    var val = arr[i];                                                                                                  // 130\n    if (fn(val, i, arr)) {                                                                                             // 131\n      ret.push(val);                                                                                                   // 132\n    }                                                                                                                  // 133\n  }                                                                                                                    // 134\n                                                                                                                       // 135\n  return ret;                                                                                                          // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * Object.keys (<=IE8)                                                                                                 // 140\n *                                                                                                                     // 141\n * @api private                                                                                                        // 142\n * @param {Object} obj                                                                                                 // 143\n * @return {Array} keys                                                                                                // 144\n */                                                                                                                    // 145\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {                                       // 146\n  var keys = [];                                                                                                       // 147\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8                                                  // 148\n                                                                                                                       // 149\n  for (var key in obj) {                                                                                               // 150\n    if (has.call(obj, key)) {                                                                                          // 151\n      keys.push(key);                                                                                                  // 152\n    }                                                                                                                  // 153\n  }                                                                                                                    // 154\n                                                                                                                       // 155\n  return keys;                                                                                                         // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Watch the given `files` for changes                                                                                 // 160\n * and invoke `fn(file)` on modification.                                                                              // 161\n *                                                                                                                     // 162\n * @api private                                                                                                        // 163\n * @param {Array} files                                                                                                // 164\n * @param {Function} fn                                                                                                // 165\n */                                                                                                                    // 166\nexports.watch = function(files, fn) {                                                                                  // 167\n  var options = { interval: 100 };                                                                                     // 168\n  files.forEach(function(file) {                                                                                       // 169\n    debug('file %s', file);                                                                                            // 170\n    watchFile(file, options, function(curr, prev) {                                                                    // 171\n      if (prev.mtime < curr.mtime) {                                                                                   // 172\n        fn(file);                                                                                                      // 173\n      }                                                                                                                // 174\n    });                                                                                                                // 175\n  });                                                                                                                  // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * Array.isArray (<=IE8)                                                                                               // 180\n *                                                                                                                     // 181\n * @api private                                                                                                        // 182\n * @param {Object} obj                                                                                                 // 183\n * @return {Boolean}                                                                                                   // 184\n */                                                                                                                    // 185\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {                                    // 186\n  return Object.prototype.toString.call(obj) === '[object Array]';                                                     // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\nexports.isArray = isArray;                                                                                             // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n * Buffer.prototype.toJSON polyfill.                                                                                   // 193\n *                                                                                                                     // 194\n * @type {Function}                                                                                                    // 195\n */                                                                                                                    // 196\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {                                                               // 197\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {                                                    // 198\n    return Array.prototype.slice.call(this, 0);                                                                        // 199\n  };                                                                                                                   // 200\n}                                                                                                                      // 201\n                                                                                                                       // 202\n/**                                                                                                                    // 203\n * Ignored files.                                                                                                      // 204\n *                                                                                                                     // 205\n * @api private                                                                                                        // 206\n * @param {string} path                                                                                                // 207\n * @return {boolean}                                                                                                   // 208\n */                                                                                                                    // 209\nfunction ignored(path) {                                                                                               // 210\n  return !~ignore.indexOf(path);                                                                                       // 211\n}                                                                                                                      // 212\n                                                                                                                       // 213\n/**                                                                                                                    // 214\n * Lookup files in the given `dir`.                                                                                    // 215\n *                                                                                                                     // 216\n * @api private                                                                                                        // 217\n * @param {string} dir                                                                                                 // 218\n * @param {string[]} [ext=['.js']]                                                                                     // 219\n * @param {Array} [ret=[]]                                                                                             // 220\n * @return {Array}                                                                                                     // 221\n */                                                                                                                    // 222\nexports.files = function(dir, ext, ret) {                                                                              // 223\n  ret = ret || [];                                                                                                     // 224\n  ext = ext || ['js'];                                                                                                 // 225\n                                                                                                                       // 226\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');                                                                  // 227\n                                                                                                                       // 228\n  readdirSync(dir)                                                                                                     // 229\n    .filter(ignored)                                                                                                   // 230\n    .forEach(function(path) {                                                                                          // 231\n      path = join(dir, path);                                                                                          // 232\n      if (statSync(path).isDirectory()) {                                                                              // 233\n        exports.files(path, ext, ret);                                                                                 // 234\n      } else if (path.match(re)) {                                                                                     // 235\n        ret.push(path);                                                                                                // 236\n      }                                                                                                                // 237\n    });                                                                                                                // 238\n                                                                                                                       // 239\n  return ret;                                                                                                          // 240\n};                                                                                                                     // 241\n                                                                                                                       // 242\n/**                                                                                                                    // 243\n * Compute a slug from the given `str`.                                                                                // 244\n *                                                                                                                     // 245\n * @api private                                                                                                        // 246\n * @param {string} str                                                                                                 // 247\n * @return {string}                                                                                                    // 248\n */                                                                                                                    // 249\nexports.slug = function(str) {                                                                                         // 250\n  return str                                                                                                           // 251\n    .toLowerCase()                                                                                                     // 252\n    .replace(/ +/g, '-')                                                                                               // 253\n    .replace(/[^-\\w]/g, '');                                                                                           // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\n/**                                                                                                                    // 257\n * Strip the function definition from `str`, and re-indent for pre whitespace.                                         // 258\n *                                                                                                                     // 259\n * @param {string} str                                                                                                 // 260\n * @return {string}                                                                                                    // 261\n */                                                                                                                    // 262\nexports.clean = function(str) {                                                                                        // 263\n  str = str                                                                                                            // 264\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')                                                   // 265\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')                                                             // 266\n    .replace(/\\s+\\}$/, '');                                                                                            // 267\n                                                                                                                       // 268\n  var spaces = str.match(/^\\n?( *)/)[1].length;                                                                        // 269\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;                                                                         // 270\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                        // 271\n                                                                                                                       // 272\n  str = str.replace(re, '');                                                                                           // 273\n                                                                                                                       // 274\n  return exports.trim(str);                                                                                            // 275\n};                                                                                                                     // 276\n                                                                                                                       // 277\n/**                                                                                                                    // 278\n * Trim the given `str`.                                                                                               // 279\n *                                                                                                                     // 280\n * @api private                                                                                                        // 281\n * @param {string} str                                                                                                 // 282\n * @return {string}                                                                                                    // 283\n */                                                                                                                    // 284\nexports.trim = function(str) {                                                                                         // 285\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                                // 286\n};                                                                                                                     // 287\n                                                                                                                       // 288\n/**                                                                                                                    // 289\n * Parse the given `qs`.                                                                                               // 290\n *                                                                                                                     // 291\n * @api private                                                                                                        // 292\n * @param {string} qs                                                                                                  // 293\n * @return {Object}                                                                                                    // 294\n */                                                                                                                    // 295\nexports.parseQuery = function(qs) {                                                                                    // 296\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {                                          // 297\n    var i = pair.indexOf('=');                                                                                         // 298\n    var key = pair.slice(0, i);                                                                                        // 299\n    var val = pair.slice(++i);                                                                                         // 300\n                                                                                                                       // 301\n    obj[key] = decodeURIComponent(val);                                                                                // 302\n    return obj;                                                                                                        // 303\n  }, {});                                                                                                              // 304\n};                                                                                                                     // 305\n                                                                                                                       // 306\n/**                                                                                                                    // 307\n * Highlight the given string of `js`.                                                                                 // 308\n *                                                                                                                     // 309\n * @api private                                                                                                        // 310\n * @param {string} js                                                                                                  // 311\n * @return {string}                                                                                                    // 312\n */                                                                                                                    // 313\nfunction highlight(js) {                                                                                               // 314\n  return js                                                                                                            // 315\n    .replace(/</g, '&lt;')                                                                                             // 316\n    .replace(/>/g, '&gt;')                                                                                             // 317\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')                                                        // 318\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')                                                            // 319\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')                                                         // 320\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')                                                              // 321\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')                    // 322\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');                      // 323\n}                                                                                                                      // 324\n                                                                                                                       // 325\n/**                                                                                                                    // 326\n * Highlight the contents of tag `name`.                                                                               // 327\n *                                                                                                                     // 328\n * @api private                                                                                                        // 329\n * @param {string} name                                                                                                // 330\n */                                                                                                                    // 331\nexports.highlightTags = function(name) {                                                                               // 332\n  var code = document.getElementById('mocha').getElementsByTagName(name);                                              // 333\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 334\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                  // 335\n  }                                                                                                                    // 336\n};                                                                                                                     // 337\n                                                                                                                       // 338\n/**                                                                                                                    // 339\n * If a value could have properties, and has none, this function is called,                                            // 340\n * which returns a string representation of the empty value.                                                           // 341\n *                                                                                                                     // 342\n * Functions w/ no properties return `'[Function]'`                                                                    // 343\n * Arrays w/ length === 0 return `'[]'`                                                                                // 344\n * Objects w/ no properties return `'{}'`                                                                              // 345\n * All else: return result of `value.toString()`                                                                       // 346\n *                                                                                                                     // 347\n * @api private                                                                                                        // 348\n * @param {*} value The value to inspect.                                                                              // 349\n * @param {string} [type] The type of the value, if known.                                                             // 350\n * @returns {string}                                                                                                   // 351\n */                                                                                                                    // 352\nfunction emptyRepresentation(value, type) {                                                                            // 353\n  type = type || exports.type(value);                                                                                  // 354\n                                                                                                                       // 355\n  switch (type) {                                                                                                      // 356\n    case 'function':                                                                                                   // 357\n      return '[Function]';                                                                                             // 358\n    case 'object':                                                                                                     // 359\n      return '{}';                                                                                                     // 360\n    case 'array':                                                                                                      // 361\n      return '[]';                                                                                                     // 362\n    default:                                                                                                           // 363\n      return value.toString();                                                                                         // 364\n  }                                                                                                                    // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\n/**                                                                                                                    // 368\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it                                        // 369\n * is.                                                                                                                 // 370\n *                                                                                                                     // 371\n * @api private                                                                                                        // 372\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString               // 373\n * @param {*} value The value to test.                                                                                 // 374\n * @returns {string}                                                                                                   // 375\n * @example                                                                                                            // 376\n * type({}) // 'object'                                                                                                // 377\n * type([]) // 'array'                                                                                                 // 378\n * type(1) // 'number'                                                                                                 // 379\n * type(false) // 'boolean'                                                                                            // 380\n * type(Infinity) // 'number'                                                                                          // 381\n * type(null) // 'null'                                                                                                // 382\n * type(new Date()) // 'date'                                                                                          // 383\n * type(/foo/) // 'regexp'                                                                                             // 384\n * type('type') // 'string'                                                                                            // 385\n * type(global) // 'global'                                                                                            // 386\n */                                                                                                                    // 387\nexports.type = function type(value) {                                                                                  // 388\n  if (value === undefined) {                                                                                           // 389\n    return 'undefined';                                                                                                // 390\n  } else if (value === null) {                                                                                         // 391\n    return 'null';                                                                                                     // 392\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {                                                // 393\n    return 'buffer';                                                                                                   // 394\n  }                                                                                                                    // 395\n  return Object.prototype.toString.call(value)                                                                         // 396\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')                                                                                  // 397\n    .toLowerCase();                                                                                                    // 398\n};                                                                                                                     // 399\n                                                                                                                       // 400\n/**                                                                                                                    // 401\n * Stringify `value`. Different behavior depending on type of value:                                                   // 402\n *                                                                                                                     // 403\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.                              // 404\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.     // 405\n * - If `value` is an *empty* object, function, or array, return result of function                                    // 406\n *   {@link emptyRepresentation}.                                                                                      // 407\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of                         // 408\n *   JSON.stringify().                                                                                                 // 409\n *                                                                                                                     // 410\n * @api private                                                                                                        // 411\n * @see exports.type                                                                                                   // 412\n * @param {*} value                                                                                                    // 413\n * @return {string}                                                                                                    // 414\n */                                                                                                                    // 415\nexports.stringify = function(value) {                                                                                  // 416\n  var type = exports.type(value);                                                                                      // 417\n                                                                                                                       // 418\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {                                                      // 419\n    if (type !== 'buffer') {                                                                                           // 420\n      return jsonStringify(value);                                                                                     // 421\n    }                                                                                                                  // 422\n    var json = value.toJSON();                                                                                         // 423\n    // Based on the toJSON result                                                                                      // 424\n    return jsonStringify(json.data && json.type ? json.data : json, 2)                                                 // 425\n      .replace(/,(\\n|$)/g, '$1');                                                                                      // 426\n  }                                                                                                                    // 427\n                                                                                                                       // 428\n  for (var prop in value) {                                                                                            // 429\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {                                                           // 430\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');                                  // 431\n    }                                                                                                                  // 432\n  }                                                                                                                    // 433\n                                                                                                                       // 434\n  return emptyRepresentation(value, type);                                                                             // 435\n};                                                                                                                     // 436\n                                                                                                                       // 437\n/**                                                                                                                    // 438\n * like JSON.stringify but more sense.                                                                                 // 439\n *                                                                                                                     // 440\n * @api private                                                                                                        // 441\n * @param {Object}  object                                                                                             // 442\n * @param {number=} spaces                                                                                             // 443\n * @param {number=} depth                                                                                              // 444\n * @returns {*}                                                                                                        // 445\n */                                                                                                                    // 446\nfunction jsonStringify(object, spaces, depth) {                                                                        // 447\n  if (typeof spaces === 'undefined') {                                                                                 // 448\n    // primitive types                                                                                                 // 449\n    return _stringify(object);                                                                                         // 450\n  }                                                                                                                    // 451\n                                                                                                                       // 452\n  depth = depth || 1;                                                                                                  // 453\n  var space = spaces * depth;                                                                                          // 454\n  var str = isArray(object) ? '[' : '{';                                                                               // 455\n  var end = isArray(object) ? ']' : '}';                                                                               // 456\n  var length = object.length || exports.keys(object).length;                                                           // 457\n  // `.repeat()` polyfill                                                                                              // 458\n  function repeat(s, n) {                                                                                              // 459\n    return new Array(n).join(s);                                                                                       // 460\n  }                                                                                                                    // 461\n                                                                                                                       // 462\n  function _stringify(val) {                                                                                           // 463\n    switch (exports.type(val)) {                                                                                       // 464\n      case 'null':                                                                                                     // 465\n      case 'undefined':                                                                                                // 466\n        val = '[' + val + ']';                                                                                         // 467\n        break;                                                                                                         // 468\n      case 'array':                                                                                                    // 469\n      case 'object':                                                                                                   // 470\n        val = jsonStringify(val, spaces, depth + 1);                                                                   // 471\n        break;                                                                                                         // 472\n      case 'boolean':                                                                                                  // 473\n      case 'regexp':                                                                                                   // 474\n      case 'number':                                                                                                   // 475\n        val = val === 0 && (1 / val) === -Infinity // `-0`                                                             // 476\n          ? '-0'                                                                                                       // 477\n          : val.toString();                                                                                            // 478\n        break;                                                                                                         // 479\n      case 'date':                                                                                                     // 480\n        var sDate = isNaN(val.getTime())        // Invalid date                                                        // 481\n          ? val.toString()                                                                                             // 482\n          : val.toISOString();                                                                                         // 483\n        val = '[Date: ' + sDate + ']';                                                                                 // 484\n        break;                                                                                                         // 485\n      case 'buffer':                                                                                                   // 486\n        var json = val.toJSON();                                                                                       // 487\n        // Based on the toJSON result                                                                                  // 488\n        json = json.data && json.type ? json.data : json;                                                              // 489\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';                                                   // 490\n        break;                                                                                                         // 491\n      default:                                                                                                         // 492\n        val = (val === '[Function]' || val === '[Circular]')                                                           // 493\n          ? val                                                                                                        // 494\n          : JSON.stringify(val); // string                                                                             // 495\n    }                                                                                                                  // 496\n    return val;                                                                                                        // 497\n  }                                                                                                                    // 498\n                                                                                                                       // 499\n  for (var i in object) {                                                                                              // 500\n    if (!object.hasOwnProperty(i)) {                                                                                   // 501\n      continue; // not my business                                                                                     // 502\n    }                                                                                                                  // 503\n    --length;                                                                                                          // 504\n    str += '\\n ' + repeat(' ', space)                                                                                  // 505\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key                                                                // 506\n      + _stringify(object[i])                     // value                                                             // 507\n      + (length ? ',' : '');                     // comma                                                              // 508\n  }                                                                                                                    // 509\n                                                                                                                       // 510\n  return str                                                                                                           // 511\n    // [], {}                                                                                                          // 512\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);                                                    // 513\n}                                                                                                                      // 514\n                                                                                                                       // 515\n/**                                                                                                                    // 516\n * Test if a value is a buffer.                                                                                        // 517\n *                                                                                                                     // 518\n * @api private                                                                                                        // 519\n * @param {*} value The value to test.                                                                                 // 520\n * @return {boolean} True if `value` is a buffer, otherwise false                                                      // 521\n */                                                                                                                    // 522\nexports.isBuffer = function(value) {                                                                                   // 523\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);                                                      // 524\n};                                                                                                                     // 525\n                                                                                                                       // 526\n/**                                                                                                                    // 527\n * Return a new Thing that has the keys in sorted order. Recursive.                                                    // 528\n *                                                                                                                     // 529\n * If the Thing...                                                                                                     // 530\n * - has already been seen, return string `'[Circular]'`                                                               // 531\n * - is `undefined`, return string `'[undefined]'`                                                                     // 532\n * - is `null`, return value `null`                                                                                    // 533\n * - is some other primitive, return the value                                                                         // 534\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method    // 535\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.                // 536\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`                // 537\n *                                                                                                                     // 538\n * @api private                                                                                                        // 539\n * @see {@link exports.stringify}                                                                                      // 540\n * @param {*} value Thing to inspect.  May or may not have properties.                                                 // 541\n * @param {Array} [stack=[]] Stack of seen values                                                                      // 542\n * @return {(Object|Array|Function|string|undefined)}                                                                  // 543\n */                                                                                                                    // 544\nexports.canonicalize = function(value, stack) {                                                                        // 545\n  var canonicalizedObj;                                                                                                // 546\n  /* eslint-disable no-unused-vars */                                                                                  // 547\n  var prop;                                                                                                            // 548\n  /* eslint-enable no-unused-vars */                                                                                   // 549\n  var type = exports.type(value);                                                                                      // 550\n  function withStack(value, fn) {                                                                                      // 551\n    stack.push(value);                                                                                                 // 552\n    fn();                                                                                                              // 553\n    stack.pop();                                                                                                       // 554\n  }                                                                                                                    // 555\n                                                                                                                       // 556\n  stack = stack || [];                                                                                                 // 557\n                                                                                                                       // 558\n  if (exports.indexOf(stack, value) !== -1) {                                                                          // 559\n    return '[Circular]';                                                                                               // 560\n  }                                                                                                                    // 561\n                                                                                                                       // 562\n  switch (type) {                                                                                                      // 563\n    case 'undefined':                                                                                                  // 564\n    case 'buffer':                                                                                                     // 565\n    case 'null':                                                                                                       // 566\n      canonicalizedObj = value;                                                                                        // 567\n      break;                                                                                                           // 568\n    case 'array':                                                                                                      // 569\n      withStack(value, function() {                                                                                    // 570\n        canonicalizedObj = exports.map(value, function(item) {                                                         // 571\n          return exports.canonicalize(item, stack);                                                                    // 572\n        });                                                                                                            // 573\n      });                                                                                                              // 574\n      break;                                                                                                           // 575\n    case 'function':                                                                                                   // 576\n      /* eslint-disable guard-for-in */                                                                                // 577\n      for (prop in value) {                                                                                            // 578\n        canonicalizedObj = {};                                                                                         // 579\n        break;                                                                                                         // 580\n      }                                                                                                                // 581\n      /* eslint-enable guard-for-in */                                                                                 // 582\n      if (!canonicalizedObj) {                                                                                         // 583\n        canonicalizedObj = emptyRepresentation(value, type);                                                           // 584\n        break;                                                                                                         // 585\n      }                                                                                                                // 586\n    /* falls through */                                                                                                // 587\n    case 'object':                                                                                                     // 588\n      canonicalizedObj = canonicalizedObj || {};                                                                       // 589\n      withStack(value, function() {                                                                                    // 590\n        exports.forEach(exports.keys(value).sort(), function(key) {                                                    // 591\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);                                             // 592\n        });                                                                                                            // 593\n      });                                                                                                              // 594\n      break;                                                                                                           // 595\n    case 'date':                                                                                                       // 596\n    case 'number':                                                                                                     // 597\n    case 'regexp':                                                                                                     // 598\n    case 'boolean':                                                                                                    // 599\n      canonicalizedObj = value;                                                                                        // 600\n      break;                                                                                                           // 601\n    default:                                                                                                           // 602\n      canonicalizedObj = value + '';                                                                                   // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  return canonicalizedObj;                                                                                             // 606\n};                                                                                                                     // 607\n                                                                                                                       // 608\n/**                                                                                                                    // 609\n * Lookup file names at the given `path`.                                                                              // 610\n *                                                                                                                     // 611\n * @api public                                                                                                         // 612\n * @param {string} path Base path to start searching from.                                                             // 613\n * @param {string[]} extensions File extensions to look for.                                                           // 614\n * @param {boolean} recursive Whether or not to recurse into subdirectories.                                           // 615\n * @return {string[]} An array of paths.                                                                               // 616\n */                                                                                                                    // 617\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {                                              // 618\n  var files = [];                                                                                                      // 619\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');                                                           // 620\n                                                                                                                       // 621\n  if (!exists(path)) {                                                                                                 // 622\n    if (exists(path + '.js')) {                                                                                        // 623\n      path += '.js';                                                                                                   // 624\n    } else {                                                                                                           // 625\n      files = glob.sync(path);                                                                                         // 626\n      if (!files.length) {                                                                                             // 627\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");                                            // 628\n      }                                                                                                                // 629\n      return files;                                                                                                    // 630\n    }                                                                                                                  // 631\n  }                                                                                                                    // 632\n                                                                                                                       // 633\n  try {                                                                                                                // 634\n    var stat = statSync(path);                                                                                         // 635\n    if (stat.isFile()) {                                                                                               // 636\n      return path;                                                                                                     // 637\n    }                                                                                                                  // 638\n  } catch (err) {                                                                                                      // 639\n    // ignore error                                                                                                    // 640\n    return;                                                                                                            // 641\n  }                                                                                                                    // 642\n                                                                                                                       // 643\n  readdirSync(path).forEach(function(file) {                                                                           // 644\n    file = join(path, file);                                                                                           // 645\n    try {                                                                                                              // 646\n      var stat = statSync(file);                                                                                       // 647\n      if (stat.isDirectory()) {                                                                                        // 648\n        if (recursive) {                                                                                               // 649\n          files = files.concat(lookupFiles(file, extensions, recursive));                                              // 650\n        }                                                                                                              // 651\n        return;                                                                                                        // 652\n      }                                                                                                                // 653\n    } catch (err) {                                                                                                    // 654\n      // ignore error                                                                                                  // 655\n      return;                                                                                                          // 656\n    }                                                                                                                  // 657\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {                                               // 658\n      return;                                                                                                          // 659\n    }                                                                                                                  // 660\n    files.push(file);                                                                                                  // 661\n  });                                                                                                                  // 662\n                                                                                                                       // 663\n  return files;                                                                                                        // 664\n};                                                                                                                     // 665\n                                                                                                                       // 666\n/**                                                                                                                    // 667\n * Generate an undefined error with a message warning the user.                                                        // 668\n *                                                                                                                     // 669\n * @return {Error}                                                                                                     // 670\n */                                                                                                                    // 671\n                                                                                                                       // 672\nexports.undefinedError = function() {                                                                                  // 673\n  return new Error('Caught undefined error, did you throw without specifying what?');                                  // 674\n};                                                                                                                     // 675\n                                                                                                                       // 676\n/**                                                                                                                    // 677\n * Generate an undefined error if `err` is not defined.                                                                // 678\n *                                                                                                                     // 679\n * @param {Error} err                                                                                                  // 680\n * @return {Error}                                                                                                     // 681\n */                                                                                                                    // 682\n                                                                                                                       // 683\nexports.getError = function(err) {                                                                                     // 684\n  return err || exports.undefinedError();                                                                              // 685\n};                                                                                                                     // 686\n                                                                                                                       // 687\n/**                                                                                                                    // 688\n * @summary                                                                                                            // 689\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)                                  // 690\n * @description                                                                                                        // 691\n * When invoking this function you get a filter function that get the Error.stack as an input,                         // 692\n * and return a prettify output.                                                                                       // 693\n * (i.e: strip Mocha and internal node functions from stack trace).                                                    // 694\n * @returns {Function}                                                                                                 // 695\n */                                                                                                                    // 696\nexports.stackTraceFilter = function() {                                                                                // 697\n  // TODO: Replace with `process.browser`                                                                              // 698\n  var slash = '/';                                                                                                     // 699\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };                                       // 700\n  var cwd = is.node                                                                                                    // 701\n      ? process.cwd() + slash                                                                                          // 702\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');                 // 703\n                                                                                                                       // 704\n  function isMochaInternal(line) {                                                                                     // 705\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))                                                   // 706\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))                                                     // 707\n      || (~line.indexOf('components' + slash + 'mocha' + slash))                                                       // 708\n      || (~line.indexOf(slash + 'mocha.js'));                                                                          // 709\n  }                                                                                                                    // 710\n                                                                                                                       // 711\n  function isNodeInternal(line) {                                                                                      // 712\n    return (~line.indexOf('(timers.js:'))                                                                              // 713\n      || (~line.indexOf('(events.js:'))                                                                                // 714\n      || (~line.indexOf('(node.js:'))                                                                                  // 715\n      || (~line.indexOf('(module.js:'))                                                                                // 716\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))                                                   // 717\n      || false;                                                                                                        // 718\n  }                                                                                                                    // 719\n                                                                                                                       // 720\n  return function(stack) {                                                                                             // 721\n    stack = stack.split('\\n');                                                                                         // 722\n                                                                                                                       // 723\n    stack = exports.reduce(stack, function(list, line) {                                                               // 724\n      if (isMochaInternal(line)) {                                                                                     // 725\n        return list;                                                                                                   // 726\n      }                                                                                                                // 727\n                                                                                                                       // 728\n      if (is.node && isNodeInternal(line)) {                                                                           // 729\n        return list;                                                                                                   // 730\n      }                                                                                                                // 731\n                                                                                                                       // 732\n      // Clean up cwd(absolute)                                                                                        // 733\n      list.push(line.replace(cwd, ''));                                                                                // 734\n      return list;                                                                                                     // 735\n    }, []);                                                                                                            // 736\n                                                                                                                       // 737\n    return stack.join('\\n');                                                                                           // 738\n  };                                                                                                                   // 739\n};                                                                                                                     // 740\n                                                                                                                       // 741\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser\":{\"progress.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/browser/progress.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Expose `Progress`.                                                                                                  // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nmodule.exports = Progress;                                                                                             // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Initialize a new `Progress` indicator.                                                                              // 8\n */                                                                                                                    // 9\nfunction Progress() {                                                                                                  // 10\n  this.percent = 0;                                                                                                    // 11\n  this.size(0);                                                                                                        // 12\n  this.fontSize(11);                                                                                                   // 13\n  this.font('helvetica, arial, sans-serif');                                                                           // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Set progress size to `size`.                                                                                        // 18\n *                                                                                                                     // 19\n * @api public                                                                                                         // 20\n * @param {number} size                                                                                                // 21\n * @return {Progress} Progress instance.                                                                               // 22\n */                                                                                                                    // 23\nProgress.prototype.size = function(size) {                                                                             // 24\n  this._size = size;                                                                                                   // 25\n  return this;                                                                                                         // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Set text to `text`.                                                                                                 // 30\n *                                                                                                                     // 31\n * @api public                                                                                                         // 32\n * @param {string} text                                                                                                // 33\n * @return {Progress} Progress instance.                                                                               // 34\n */                                                                                                                    // 35\nProgress.prototype.text = function(text) {                                                                             // 36\n  this._text = text;                                                                                                   // 37\n  return this;                                                                                                         // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Set font size to `size`.                                                                                            // 42\n *                                                                                                                     // 43\n * @api public                                                                                                         // 44\n * @param {number} size                                                                                                // 45\n * @return {Progress} Progress instance.                                                                               // 46\n */                                                                                                                    // 47\nProgress.prototype.fontSize = function(size) {                                                                         // 48\n  this._fontSize = size;                                                                                               // 49\n  return this;                                                                                                         // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Set font to `family`.                                                                                               // 54\n *                                                                                                                     // 55\n * @param {string} family                                                                                              // 56\n * @return {Progress} Progress instance.                                                                               // 57\n */                                                                                                                    // 58\nProgress.prototype.font = function(family) {                                                                           // 59\n  this._font = family;                                                                                                 // 60\n  return this;                                                                                                         // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Update percentage to `n`.                                                                                           // 65\n *                                                                                                                     // 66\n * @param {number} n                                                                                                   // 67\n * @return {Progress} Progress instance.                                                                               // 68\n */                                                                                                                    // 69\nProgress.prototype.update = function(n) {                                                                              // 70\n  this.percent = n;                                                                                                    // 71\n  return this;                                                                                                         // 72\n};                                                                                                                     // 73\n                                                                                                                       // 74\n/**                                                                                                                    // 75\n * Draw on `ctx`.                                                                                                      // 76\n *                                                                                                                     // 77\n * @param {CanvasRenderingContext2d} ctx                                                                               // 78\n * @return {Progress} Progress instance.                                                                               // 79\n */                                                                                                                    // 80\nProgress.prototype.draw = function(ctx) {                                                                              // 81\n  try {                                                                                                                // 82\n    var percent = Math.min(this.percent, 100);                                                                         // 83\n    var size = this._size;                                                                                             // 84\n    var half = size / 2;                                                                                               // 85\n    var x = half;                                                                                                      // 86\n    var y = half;                                                                                                      // 87\n    var rad = half - 1;                                                                                                // 88\n    var fontSize = this._fontSize;                                                                                     // 89\n                                                                                                                       // 90\n    ctx.font = fontSize + 'px ' + this._font;                                                                          // 91\n                                                                                                                       // 92\n    var angle = Math.PI * 2 * (percent / 100);                                                                         // 93\n    ctx.clearRect(0, 0, size, size);                                                                                   // 94\n                                                                                                                       // 95\n    // outer circle                                                                                                    // 96\n    ctx.strokeStyle = '#9f9f9f';                                                                                       // 97\n    ctx.beginPath();                                                                                                   // 98\n    ctx.arc(x, y, rad, 0, angle, false);                                                                               // 99\n    ctx.stroke();                                                                                                      // 100\n                                                                                                                       // 101\n    // inner circle                                                                                                    // 102\n    ctx.strokeStyle = '#eee';                                                                                          // 103\n    ctx.beginPath();                                                                                                   // 104\n    ctx.arc(x, y, rad - 1, 0, angle, true);                                                                            // 105\n    ctx.stroke();                                                                                                      // 106\n                                                                                                                       // 107\n    // text                                                                                                            // 108\n    var text = this._text || (percent | 0) + '%';                                                                      // 109\n    var w = ctx.measureText(text).width;                                                                               // 110\n                                                                                                                       // 111\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);                                                           // 112\n  } catch (err) {                                                                                                      // 113\n    // don't fail if we can't render progress                                                                          // 114\n  }                                                                                                                    // 115\n  return this;                                                                                                         // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"interfaces\":{\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/index.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.bdd = require('./bdd');                                                                                        // 1\nexports.tdd = require('./tdd');                                                                                        // 2\nexports.qunit = require('./qunit');                                                                                    // 3\nexports.exports = require('./exports');                                                                                // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bdd.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/bdd.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Suite = require('../suite');                                                                                       // 5\nvar Test = require('../test');                                                                                         // 6\nvar escapeRe = require('escape-string-regexp');                                                                        // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * BDD-style interface:                                                                                                // 10\n *                                                                                                                     // 11\n *      describe('Array', function() {                                                                                 // 12\n *        describe('#indexOf()', function() {                                                                          // 13\n *          it('should return -1 when not present', function() {                                                       // 14\n *            // ...                                                                                                   // 15\n *          });                                                                                                        // 16\n *                                                                                                                     // 17\n *          it('should return the index when present', function() {                                                    // 18\n *            // ...                                                                                                   // 19\n *          });                                                                                                        // 20\n *        });                                                                                                          // 21\n *      });                                                                                                            // 22\n *                                                                                                                     // 23\n * @param {Suite} suite Root suite.                                                                                    // 24\n */                                                                                                                    // 25\nmodule.exports = function(suite) {                                                                                     // 26\n  var suites = [suite];                                                                                                // 27\n                                                                                                                       // 28\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 29\n    var common = require('./common')(suites, context);                                                                 // 30\n                                                                                                                       // 31\n    context.before = common.before;                                                                                    // 32\n    context.after = common.after;                                                                                      // 33\n    context.beforeEach = common.beforeEach;                                                                            // 34\n    context.afterEach = common.afterEach;                                                                              // 35\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 36\n    /**                                                                                                                // 37\n     * Describe a \"suite\" with the given `title`                                                                       // 38\n     * and callback `fn` containing nested suites                                                                      // 39\n     * and/or tests.                                                                                                   // 40\n     */                                                                                                                // 41\n                                                                                                                       // 42\n    context.describe = context.context = function(title, fn) {                                                         // 43\n      var suite = Suite.create(suites[0], title);                                                                      // 44\n      suite.file = file;                                                                                               // 45\n      suites.unshift(suite);                                                                                           // 46\n      fn.call(suite);                                                                                                  // 47\n      suites.shift();                                                                                                  // 48\n      return suite;                                                                                                    // 49\n    };                                                                                                                 // 50\n                                                                                                                       // 51\n    /**                                                                                                                // 52\n     * Pending describe.                                                                                               // 53\n     */                                                                                                                // 54\n                                                                                                                       // 55\n    context.xdescribe = context.xcontext = context.describe.skip = function(title, fn) {                               // 56\n      var suite = Suite.create(suites[0], title);                                                                      // 57\n      suite.pending = true;                                                                                            // 58\n      suites.unshift(suite);                                                                                           // 59\n      fn.call(suite);                                                                                                  // 60\n      suites.shift();                                                                                                  // 61\n    };                                                                                                                 // 62\n                                                                                                                       // 63\n    /**                                                                                                                // 64\n     * Exclusive suite.                                                                                                // 65\n     */                                                                                                                // 66\n                                                                                                                       // 67\n    context.describe.only = function(title, fn) {                                                                      // 68\n      var suite = context.describe(title, fn);                                                                         // 69\n      mocha.grep(suite.fullTitle());                                                                                   // 70\n      return suite;                                                                                                    // 71\n    };                                                                                                                 // 72\n                                                                                                                       // 73\n    /**                                                                                                                // 74\n     * Describe a specification or test-case                                                                           // 75\n     * with the given `title` and callback `fn`                                                                        // 76\n     * acting as a thunk.                                                                                              // 77\n     */                                                                                                                // 78\n                                                                                                                       // 79\n    var it = context.it = context.specify = function(title, fn) {                                                      // 80\n      var suite = suites[0];                                                                                           // 81\n      if (suite.pending) {                                                                                             // 82\n        fn = null;                                                                                                     // 83\n      }                                                                                                                // 84\n      var test = new Test(title, fn);                                                                                  // 85\n      test.file = file;                                                                                                // 86\n      suite.addTest(test);                                                                                             // 87\n      return test;                                                                                                     // 88\n    };                                                                                                                 // 89\n                                                                                                                       // 90\n    /**                                                                                                                // 91\n     * Exclusive test-case.                                                                                            // 92\n     */                                                                                                                // 93\n                                                                                                                       // 94\n    context.it.only = function(title, fn) {                                                                            // 95\n      var test = it(title, fn);                                                                                        // 96\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 97\n      mocha.grep(new RegExp(reString));                                                                                // 98\n      return test;                                                                                                     // 99\n    };                                                                                                                 // 100\n                                                                                                                       // 101\n    /**                                                                                                                // 102\n     * Pending test case.                                                                                              // 103\n     */                                                                                                                // 104\n                                                                                                                       // 105\n    context.xit = context.xspecify = context.it.skip = function(title) {                                               // 106\n      context.it(title);                                                                                               // 107\n    };                                                                                                                 // 108\n                                                                                                                       // 109\n    /**                                                                                                                // 110\n     * Number of attempts to retry.                                                                                    // 111\n     */                                                                                                                // 112\n    context.it.retries = function(n) {                                                                                 // 113\n      context.retries(n);                                                                                              // 114\n    };                                                                                                                 // 115\n  });                                                                                                                  // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/common.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Functions common to more than one interface.                                                                        // 4\n *                                                                                                                     // 5\n * @param {Suite[]} suites                                                                                             // 6\n * @param {Context} context                                                                                            // 7\n * @return {Object} An object containing common functions.                                                             // 8\n */                                                                                                                    // 9\nmodule.exports = function(suites, context) {                                                                           // 10\n  return {                                                                                                             // 11\n    /**                                                                                                                // 12\n     * This is only present if flag --delay is passed into Mocha. It triggers                                          // 13\n     * root suite execution.                                                                                           // 14\n     *                                                                                                                 // 15\n     * @param {Suite} suite The root wuite.                                                                            // 16\n     * @return {Function} A function which runs the root suite                                                         // 17\n     */                                                                                                                // 18\n    runWithSuite: function runWithSuite(suite) {                                                                       // 19\n      return function run() {                                                                                          // 20\n        suite.run();                                                                                                   // 21\n      };                                                                                                               // 22\n    },                                                                                                                 // 23\n                                                                                                                       // 24\n    /**                                                                                                                // 25\n     * Execute before running tests.                                                                                   // 26\n     *                                                                                                                 // 27\n     * @param {string} name                                                                                            // 28\n     * @param {Function} fn                                                                                            // 29\n     */                                                                                                                // 30\n    before: function(name, fn) {                                                                                       // 31\n      suites[0].beforeAll(name, fn);                                                                                   // 32\n    },                                                                                                                 // 33\n                                                                                                                       // 34\n    /**                                                                                                                // 35\n     * Execute after running tests.                                                                                    // 36\n     *                                                                                                                 // 37\n     * @param {string} name                                                                                            // 38\n     * @param {Function} fn                                                                                            // 39\n     */                                                                                                                // 40\n    after: function(name, fn) {                                                                                        // 41\n      suites[0].afterAll(name, fn);                                                                                    // 42\n    },                                                                                                                 // 43\n                                                                                                                       // 44\n    /**                                                                                                                // 45\n     * Execute before each test case.                                                                                  // 46\n     *                                                                                                                 // 47\n     * @param {string} name                                                                                            // 48\n     * @param {Function} fn                                                                                            // 49\n     */                                                                                                                // 50\n    beforeEach: function(name, fn) {                                                                                   // 51\n      suites[0].beforeEach(name, fn);                                                                                  // 52\n    },                                                                                                                 // 53\n                                                                                                                       // 54\n    /**                                                                                                                // 55\n     * Execute after each test case.                                                                                   // 56\n     *                                                                                                                 // 57\n     * @param {string} name                                                                                            // 58\n     * @param {Function} fn                                                                                            // 59\n     */                                                                                                                // 60\n    afterEach: function(name, fn) {                                                                                    // 61\n      suites[0].afterEach(name, fn);                                                                                   // 62\n    },                                                                                                                 // 63\n                                                                                                                       // 64\n    test: {                                                                                                            // 65\n      /**                                                                                                              // 66\n       * Pending test case.                                                                                            // 67\n       *                                                                                                               // 68\n       * @param {string} title                                                                                         // 69\n       */                                                                                                              // 70\n      skip: function(title) {                                                                                          // 71\n        context.test(title);                                                                                           // 72\n      },                                                                                                               // 73\n                                                                                                                       // 74\n      /**                                                                                                              // 75\n       * Number of retry attempts                                                                                      // 76\n       *                                                                                                               // 77\n       * @param {string} n                                                                                             // 78\n       */                                                                                                              // 79\n      retries: function(n) {                                                                                           // 80\n        context.retries(n);                                                                                            // 81\n      }                                                                                                                // 82\n    }                                                                                                                  // 83\n  };                                                                                                                   // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tdd.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/tdd.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Suite = require('../suite');                                                                                       // 5\nvar Test = require('../test');                                                                                         // 6\nvar escapeRe = require('escape-string-regexp');                                                                        // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * TDD-style interface:                                                                                                // 10\n *                                                                                                                     // 11\n *      suite('Array', function() {                                                                                    // 12\n *        suite('#indexOf()', function() {                                                                             // 13\n *          suiteSetup(function() {                                                                                    // 14\n *                                                                                                                     // 15\n *          });                                                                                                        // 16\n *                                                                                                                     // 17\n *          test('should return -1 when not present', function() {                                                     // 18\n *                                                                                                                     // 19\n *          });                                                                                                        // 20\n *                                                                                                                     // 21\n *          test('should return the index when present', function() {                                                  // 22\n *                                                                                                                     // 23\n *          });                                                                                                        // 24\n *                                                                                                                     // 25\n *          suiteTeardown(function() {                                                                                 // 26\n *                                                                                                                     // 27\n *          });                                                                                                        // 28\n *        });                                                                                                          // 29\n *      });                                                                                                            // 30\n *                                                                                                                     // 31\n * @param {Suite} suite Root suite.                                                                                    // 32\n */                                                                                                                    // 33\nmodule.exports = function(suite) {                                                                                     // 34\n  var suites = [suite];                                                                                                // 35\n                                                                                                                       // 36\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 37\n    var common = require('./common')(suites, context);                                                                 // 38\n                                                                                                                       // 39\n    context.setup = common.beforeEach;                                                                                 // 40\n    context.teardown = common.afterEach;                                                                               // 41\n    context.suiteSetup = common.before;                                                                                // 42\n    context.suiteTeardown = common.after;                                                                              // 43\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 44\n                                                                                                                       // 45\n    /**                                                                                                                // 46\n     * Describe a \"suite\" with the given `title` and callback `fn` containing                                          // 47\n     * nested suites and/or tests.                                                                                     // 48\n     */                                                                                                                // 49\n    context.suite = function(title, fn) {                                                                              // 50\n      var suite = Suite.create(suites[0], title);                                                                      // 51\n      suite.file = file;                                                                                               // 52\n      suites.unshift(suite);                                                                                           // 53\n      fn.call(suite);                                                                                                  // 54\n      suites.shift();                                                                                                  // 55\n      return suite;                                                                                                    // 56\n    };                                                                                                                 // 57\n                                                                                                                       // 58\n    /**                                                                                                                // 59\n     * Pending suite.                                                                                                  // 60\n     */                                                                                                                // 61\n    context.suite.skip = function(title, fn) {                                                                         // 62\n      var suite = Suite.create(suites[0], title);                                                                      // 63\n      suite.pending = true;                                                                                            // 64\n      suites.unshift(suite);                                                                                           // 65\n      fn.call(suite);                                                                                                  // 66\n      suites.shift();                                                                                                  // 67\n    };                                                                                                                 // 68\n                                                                                                                       // 69\n    /**                                                                                                                // 70\n     * Exclusive test-case.                                                                                            // 71\n     */                                                                                                                // 72\n    context.suite.only = function(title, fn) {                                                                         // 73\n      var suite = context.suite(title, fn);                                                                            // 74\n      mocha.grep(suite.fullTitle());                                                                                   // 75\n    };                                                                                                                 // 76\n                                                                                                                       // 77\n    /**                                                                                                                // 78\n     * Describe a specification or test-case with the given `title` and                                                // 79\n     * callback `fn` acting as a thunk.                                                                                // 80\n     */                                                                                                                // 81\n    context.test = function(title, fn) {                                                                               // 82\n      var suite = suites[0];                                                                                           // 83\n      if (suite.pending) {                                                                                             // 84\n        fn = null;                                                                                                     // 85\n      }                                                                                                                // 86\n      var test = new Test(title, fn);                                                                                  // 87\n      test.file = file;                                                                                                // 88\n      suite.addTest(test);                                                                                             // 89\n      return test;                                                                                                     // 90\n    };                                                                                                                 // 91\n                                                                                                                       // 92\n    /**                                                                                                                // 93\n     * Exclusive test-case.                                                                                            // 94\n     */                                                                                                                // 95\n                                                                                                                       // 96\n    context.test.only = function(title, fn) {                                                                          // 97\n      var test = context.test(title, fn);                                                                              // 98\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 99\n      mocha.grep(new RegExp(reString));                                                                                // 100\n    };                                                                                                                 // 101\n                                                                                                                       // 102\n    context.test.skip = common.test.skip;                                                                              // 103\n    context.test.retries = common.test.retries;                                                                        // 104\n  });                                                                                                                  // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"qunit.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/qunit.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Suite = require('../suite');                                                                                       // 5\nvar Test = require('../test');                                                                                         // 6\nvar escapeRe = require('escape-string-regexp');                                                                        // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * QUnit-style interface:                                                                                              // 10\n *                                                                                                                     // 11\n *     suite('Array');                                                                                                 // 12\n *                                                                                                                     // 13\n *     test('#length', function() {                                                                                    // 14\n *       var arr = [1,2,3];                                                                                            // 15\n *       ok(arr.length == 3);                                                                                          // 16\n *     });                                                                                                             // 17\n *                                                                                                                     // 18\n *     test('#indexOf()', function() {                                                                                 // 19\n *       var arr = [1,2,3];                                                                                            // 20\n *       ok(arr.indexOf(1) == 0);                                                                                      // 21\n *       ok(arr.indexOf(2) == 1);                                                                                      // 22\n *       ok(arr.indexOf(3) == 2);                                                                                      // 23\n *     });                                                                                                             // 24\n *                                                                                                                     // 25\n *     suite('String');                                                                                                // 26\n *                                                                                                                     // 27\n *     test('#length', function() {                                                                                    // 28\n *       ok('foo'.length == 3);                                                                                        // 29\n *     });                                                                                                             // 30\n *                                                                                                                     // 31\n * @param {Suite} suite Root suite.                                                                                    // 32\n */                                                                                                                    // 33\nmodule.exports = function(suite) {                                                                                     // 34\n  var suites = [suite];                                                                                                // 35\n                                                                                                                       // 36\n  suite.on('pre-require', function(context, file, mocha) {                                                             // 37\n    var common = require('./common')(suites, context);                                                                 // 38\n                                                                                                                       // 39\n    context.before = common.before;                                                                                    // 40\n    context.after = common.after;                                                                                      // 41\n    context.beforeEach = common.beforeEach;                                                                            // 42\n    context.afterEach = common.afterEach;                                                                              // 43\n    context.run = mocha.options.delay && common.runWithSuite(suite);                                                   // 44\n    /**                                                                                                                // 45\n     * Describe a \"suite\" with the given `title`.                                                                      // 46\n     */                                                                                                                // 47\n                                                                                                                       // 48\n    context.suite = function(title) {                                                                                  // 49\n      if (suites.length > 1) {                                                                                         // 50\n        suites.shift();                                                                                                // 51\n      }                                                                                                                // 52\n      var suite = Suite.create(suites[0], title);                                                                      // 53\n      suite.file = file;                                                                                               // 54\n      suites.unshift(suite);                                                                                           // 55\n      return suite;                                                                                                    // 56\n    };                                                                                                                 // 57\n                                                                                                                       // 58\n    /**                                                                                                                // 59\n     * Exclusive test-case.                                                                                            // 60\n     */                                                                                                                // 61\n                                                                                                                       // 62\n    context.suite.only = function(title, fn) {                                                                         // 63\n      var suite = context.suite(title, fn);                                                                            // 64\n      mocha.grep(suite.fullTitle());                                                                                   // 65\n    };                                                                                                                 // 66\n                                                                                                                       // 67\n    /**                                                                                                                // 68\n     * Describe a specification or test-case                                                                           // 69\n     * with the given `title` and callback `fn`                                                                        // 70\n     * acting as a thunk.                                                                                              // 71\n     */                                                                                                                // 72\n                                                                                                                       // 73\n    context.test = function(title, fn) {                                                                               // 74\n      var test = new Test(title, fn);                                                                                  // 75\n      test.file = file;                                                                                                // 76\n      suites[0].addTest(test);                                                                                         // 77\n      return test;                                                                                                     // 78\n    };                                                                                                                 // 79\n                                                                                                                       // 80\n    /**                                                                                                                // 81\n     * Exclusive test-case.                                                                                            // 82\n     */                                                                                                                // 83\n                                                                                                                       // 84\n    context.test.only = function(title, fn) {                                                                          // 85\n      var test = context.test(title, fn);                                                                              // 86\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';                                                           // 87\n      mocha.grep(new RegExp(reString));                                                                                // 88\n    };                                                                                                                 // 89\n                                                                                                                       // 90\n    context.test.skip = common.test.skip;                                                                              // 91\n    context.test.retries = common.test.retries;                                                                        // 92\n  });                                                                                                                  // 93\n};                                                                                                                     // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exports.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/interfaces/exports.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Suite = require('../suite');                                                                                       // 5\nvar Test = require('../test');                                                                                         // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * TDD-style interface:                                                                                                // 9\n *                                                                                                                     // 10\n *     exports.Array = {                                                                                               // 11\n *       '#indexOf()': {                                                                                               // 12\n *         'should return -1 when the value is not present': function() {                                              // 13\n *                                                                                                                     // 14\n *         },                                                                                                          // 15\n *                                                                                                                     // 16\n *         'should return the correct index when the value is present': function() {                                   // 17\n *                                                                                                                     // 18\n *         }                                                                                                           // 19\n *       }                                                                                                             // 20\n *     };                                                                                                              // 21\n *                                                                                                                     // 22\n * @param {Suite} suite Root suite.                                                                                    // 23\n */                                                                                                                    // 24\nmodule.exports = function(suite) {                                                                                     // 25\n  var suites = [suite];                                                                                                // 26\n                                                                                                                       // 27\n  suite.on('require', visit);                                                                                          // 28\n                                                                                                                       // 29\n  function visit(obj, file) {                                                                                          // 30\n    var suite;                                                                                                         // 31\n    for (var key in obj) {                                                                                             // 32\n      if (typeof obj[key] === 'function') {                                                                            // 33\n        var fn = obj[key];                                                                                             // 34\n        switch (key) {                                                                                                 // 35\n          case 'before':                                                                                               // 36\n            suites[0].beforeAll(fn);                                                                                   // 37\n            break;                                                                                                     // 38\n          case 'after':                                                                                                // 39\n            suites[0].afterAll(fn);                                                                                    // 40\n            break;                                                                                                     // 41\n          case 'beforeEach':                                                                                           // 42\n            suites[0].beforeEach(fn);                                                                                  // 43\n            break;                                                                                                     // 44\n          case 'afterEach':                                                                                            // 45\n            suites[0].afterEach(fn);                                                                                   // 46\n            break;                                                                                                     // 47\n          default:                                                                                                     // 48\n            var test = new Test(key, fn);                                                                              // 49\n            test.file = file;                                                                                          // 50\n            suites[0].addTest(test);                                                                                   // 51\n        }                                                                                                              // 52\n      } else {                                                                                                         // 53\n        suite = Suite.create(suites[0], key);                                                                          // 54\n        suites.unshift(suite);                                                                                         // 55\n        visit(obj[key], file);                                                                                         // 56\n        suites.shift();                                                                                                // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n  }                                                                                                                    // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"suite.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/suite.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5\nvar Hook = require('./hook');                                                                                          // 6\nvar utils = require('./utils');                                                                                        // 7\nvar inherits = utils.inherits;                                                                                         // 8\nvar debug = require('debug')('mocha:suite');                                                                           // 9\nvar milliseconds = require('./ms');                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Expose `Suite`.                                                                                                     // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\nexports = module.exports = Suite;                                                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite                                        // 19\n * with the same title is already present, that suite is returned to provide                                           // 20\n * nicer reporter and more flexible meta-testing.                                                                      // 21\n *                                                                                                                     // 22\n * @api public                                                                                                         // 23\n * @param {Suite} parent                                                                                               // 24\n * @param {string} title                                                                                               // 25\n * @return {Suite}                                                                                                     // 26\n */                                                                                                                    // 27\nexports.create = function(parent, title) {                                                                             // 28\n  var suite = new Suite(title, parent.ctx);                                                                            // 29\n  suite.parent = parent;                                                                                               // 30\n  if (parent.pending) {                                                                                                // 31\n    suite.pending = true;                                                                                              // 32\n  }                                                                                                                    // 33\n  title = suite.fullTitle();                                                                                           // 34\n  parent.addSuite(suite);                                                                                              // 35\n  return suite;                                                                                                        // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Initialize a new `Suite` with the given `title` and `ctx`.                                                          // 40\n *                                                                                                                     // 41\n * @api private                                                                                                        // 42\n * @param {string} title                                                                                               // 43\n * @param {Context} parentContext                                                                                      // 44\n */                                                                                                                    // 45\nfunction Suite(title, parentContext) {                                                                                 // 46\n  this.title = title;                                                                                                  // 47\n  function Context() {}                                                                                                // 48\n  Context.prototype = parentContext;                                                                                   // 49\n  this.ctx = new Context();                                                                                            // 50\n  this.suites = [];                                                                                                    // 51\n  this.tests = [];                                                                                                     // 52\n  this.pending = false;                                                                                                // 53\n  this._beforeEach = [];                                                                                               // 54\n  this._beforeAll = [];                                                                                                // 55\n  this._afterEach = [];                                                                                                // 56\n  this._afterAll = [];                                                                                                 // 57\n  this.root = !title;                                                                                                  // 58\n  this._timeout = 2000;                                                                                                // 59\n  this._enableTimeouts = true;                                                                                         // 60\n  this._slow = 75;                                                                                                     // 61\n  this._bail = false;                                                                                                  // 62\n  this._retries = -1;                                                                                                  // 63\n  this.delayed = false;                                                                                                // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Inherit from `EventEmitter.prototype`.                                                                              // 68\n */                                                                                                                    // 69\ninherits(Suite, EventEmitter);                                                                                         // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Return a clone of this `Suite`.                                                                                     // 73\n *                                                                                                                     // 74\n * @api private                                                                                                        // 75\n * @return {Suite}                                                                                                     // 76\n */                                                                                                                    // 77\nSuite.prototype.clone = function() {                                                                                   // 78\n  var suite = new Suite(this.title);                                                                                   // 79\n  debug('clone');                                                                                                      // 80\n  suite.ctx = this.ctx;                                                                                                // 81\n  suite.timeout(this.timeout());                                                                                       // 82\n  suite.retries(this.retries());                                                                                       // 83\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 84\n  suite.slow(this.slow());                                                                                             // 85\n  suite.bail(this.bail());                                                                                             // 86\n  return suite;                                                                                                        // 87\n};                                                                                                                     // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Set timeout `ms` or short-hand such as \"2s\".                                                                        // 91\n *                                                                                                                     // 92\n * @api private                                                                                                        // 93\n * @param {number|string} ms                                                                                           // 94\n * @return {Suite|number} for chaining                                                                                 // 95\n */                                                                                                                    // 96\nSuite.prototype.timeout = function(ms) {                                                                               // 97\n  if (!arguments.length) {                                                                                             // 98\n    return this._timeout;                                                                                              // 99\n  }                                                                                                                    // 100\n  if (ms.toString() === '0') {                                                                                         // 101\n    this._enableTimeouts = false;                                                                                      // 102\n  }                                                                                                                    // 103\n  if (typeof ms === 'string') {                                                                                        // 104\n    ms = milliseconds(ms);                                                                                             // 105\n  }                                                                                                                    // 106\n  debug('timeout %d', ms);                                                                                             // 107\n  this._timeout = parseInt(ms, 10);                                                                                    // 108\n  return this;                                                                                                         // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Set number of times to retry a failed test.                                                                         // 113\n *                                                                                                                     // 114\n * @api private                                                                                                        // 115\n * @param {number|string} n                                                                                            // 116\n * @return {Suite|number} for chaining                                                                                 // 117\n */                                                                                                                    // 118\nSuite.prototype.retries = function(n) {                                                                                // 119\n  if (!arguments.length) {                                                                                             // 120\n    return this._retries;                                                                                              // 121\n  }                                                                                                                    // 122\n  debug('retries %d', n);                                                                                              // 123\n  this._retries = parseInt(n, 10) || 0;                                                                                // 124\n  return this;                                                                                                         // 125\n};                                                                                                                     // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\n  * Set timeout to `enabled`.                                                                                          // 129\n  *                                                                                                                    // 130\n  * @api private                                                                                                       // 131\n  * @param {boolean} enabled                                                                                           // 132\n  * @return {Suite|boolean} self or enabled                                                                            // 133\n  */                                                                                                                   // 134\nSuite.prototype.enableTimeouts = function(enabled) {                                                                   // 135\n  if (!arguments.length) {                                                                                             // 136\n    return this._enableTimeouts;                                                                                       // 137\n  }                                                                                                                    // 138\n  debug('enableTimeouts %s', enabled);                                                                                 // 139\n  this._enableTimeouts = enabled;                                                                                      // 140\n  return this;                                                                                                         // 141\n};                                                                                                                     // 142\n                                                                                                                       // 143\n/**                                                                                                                    // 144\n * Set slow `ms` or short-hand such as \"2s\".                                                                           // 145\n *                                                                                                                     // 146\n * @api private                                                                                                        // 147\n * @param {number|string} ms                                                                                           // 148\n * @return {Suite|number} for chaining                                                                                 // 149\n */                                                                                                                    // 150\nSuite.prototype.slow = function(ms) {                                                                                  // 151\n  if (!arguments.length) {                                                                                             // 152\n    return this._slow;                                                                                                 // 153\n  }                                                                                                                    // 154\n  if (typeof ms === 'string') {                                                                                        // 155\n    ms = milliseconds(ms);                                                                                             // 156\n  }                                                                                                                    // 157\n  debug('slow %d', ms);                                                                                                // 158\n  this._slow = ms;                                                                                                     // 159\n  return this;                                                                                                         // 160\n};                                                                                                                     // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Sets whether to bail after first error.                                                                             // 164\n *                                                                                                                     // 165\n * @api private                                                                                                        // 166\n * @param {boolean} bail                                                                                               // 167\n * @return {Suite|number} for chaining                                                                                 // 168\n */                                                                                                                    // 169\nSuite.prototype.bail = function(bail) {                                                                                // 170\n  if (!arguments.length) {                                                                                             // 171\n    return this._bail;                                                                                                 // 172\n  }                                                                                                                    // 173\n  debug('bail %s', bail);                                                                                              // 174\n  this._bail = bail;                                                                                                   // 175\n  return this;                                                                                                         // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * Run `fn(test[, done])` before running tests.                                                                        // 180\n *                                                                                                                     // 181\n * @api private                                                                                                        // 182\n * @param {string} title                                                                                               // 183\n * @param {Function} fn                                                                                                // 184\n * @return {Suite} for chaining                                                                                        // 185\n */                                                                                                                    // 186\nSuite.prototype.beforeAll = function(title, fn) {                                                                      // 187\n  if (this.pending) {                                                                                                  // 188\n    return this;                                                                                                       // 189\n  }                                                                                                                    // 190\n  if (typeof title === 'function') {                                                                                   // 191\n    fn = title;                                                                                                        // 192\n    title = fn.name;                                                                                                   // 193\n  }                                                                                                                    // 194\n  title = '\"before all\" hook' + (title ? ': ' + title : '');                                                           // 195\n                                                                                                                       // 196\n  var hook = new Hook(title, fn);                                                                                      // 197\n  hook.parent = this;                                                                                                  // 198\n  hook.timeout(this.timeout());                                                                                        // 199\n  hook.retries(this.retries());                                                                                        // 200\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 201\n  hook.slow(this.slow());                                                                                              // 202\n  hook.ctx = this.ctx;                                                                                                 // 203\n  this._beforeAll.push(hook);                                                                                          // 204\n  this.emit('beforeAll', hook);                                                                                        // 205\n  return this;                                                                                                         // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * Run `fn(test[, done])` after running tests.                                                                         // 210\n *                                                                                                                     // 211\n * @api private                                                                                                        // 212\n * @param {string} title                                                                                               // 213\n * @param {Function} fn                                                                                                // 214\n * @return {Suite} for chaining                                                                                        // 215\n */                                                                                                                    // 216\nSuite.prototype.afterAll = function(title, fn) {                                                                       // 217\n  if (this.pending) {                                                                                                  // 218\n    return this;                                                                                                       // 219\n  }                                                                                                                    // 220\n  if (typeof title === 'function') {                                                                                   // 221\n    fn = title;                                                                                                        // 222\n    title = fn.name;                                                                                                   // 223\n  }                                                                                                                    // 224\n  title = '\"after all\" hook' + (title ? ': ' + title : '');                                                            // 225\n                                                                                                                       // 226\n  var hook = new Hook(title, fn);                                                                                      // 227\n  hook.parent = this;                                                                                                  // 228\n  hook.timeout(this.timeout());                                                                                        // 229\n  hook.retries(this.retries());                                                                                        // 230\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 231\n  hook.slow(this.slow());                                                                                              // 232\n  hook.ctx = this.ctx;                                                                                                 // 233\n  this._afterAll.push(hook);                                                                                           // 234\n  this.emit('afterAll', hook);                                                                                         // 235\n  return this;                                                                                                         // 236\n};                                                                                                                     // 237\n                                                                                                                       // 238\n/**                                                                                                                    // 239\n * Run `fn(test[, done])` before each test case.                                                                       // 240\n *                                                                                                                     // 241\n * @api private                                                                                                        // 242\n * @param {string} title                                                                                               // 243\n * @param {Function} fn                                                                                                // 244\n * @return {Suite} for chaining                                                                                        // 245\n */                                                                                                                    // 246\nSuite.prototype.beforeEach = function(title, fn) {                                                                     // 247\n  if (this.pending) {                                                                                                  // 248\n    return this;                                                                                                       // 249\n  }                                                                                                                    // 250\n  if (typeof title === 'function') {                                                                                   // 251\n    fn = title;                                                                                                        // 252\n    title = fn.name;                                                                                                   // 253\n  }                                                                                                                    // 254\n  title = '\"before each\" hook' + (title ? ': ' + title : '');                                                          // 255\n                                                                                                                       // 256\n  var hook = new Hook(title, fn);                                                                                      // 257\n  hook.parent = this;                                                                                                  // 258\n  hook.timeout(this.timeout());                                                                                        // 259\n  hook.retries(this.retries());                                                                                        // 260\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 261\n  hook.slow(this.slow());                                                                                              // 262\n  hook.ctx = this.ctx;                                                                                                 // 263\n  this._beforeEach.push(hook);                                                                                         // 264\n  this.emit('beforeEach', hook);                                                                                       // 265\n  return this;                                                                                                         // 266\n};                                                                                                                     // 267\n                                                                                                                       // 268\n/**                                                                                                                    // 269\n * Run `fn(test[, done])` after each test case.                                                                        // 270\n *                                                                                                                     // 271\n * @api private                                                                                                        // 272\n * @param {string} title                                                                                               // 273\n * @param {Function} fn                                                                                                // 274\n * @return {Suite} for chaining                                                                                        // 275\n */                                                                                                                    // 276\nSuite.prototype.afterEach = function(title, fn) {                                                                      // 277\n  if (this.pending) {                                                                                                  // 278\n    return this;                                                                                                       // 279\n  }                                                                                                                    // 280\n  if (typeof title === 'function') {                                                                                   // 281\n    fn = title;                                                                                                        // 282\n    title = fn.name;                                                                                                   // 283\n  }                                                                                                                    // 284\n  title = '\"after each\" hook' + (title ? ': ' + title : '');                                                           // 285\n                                                                                                                       // 286\n  var hook = new Hook(title, fn);                                                                                      // 287\n  hook.parent = this;                                                                                                  // 288\n  hook.timeout(this.timeout());                                                                                        // 289\n  hook.retries(this.retries());                                                                                        // 290\n  hook.enableTimeouts(this.enableTimeouts());                                                                          // 291\n  hook.slow(this.slow());                                                                                              // 292\n  hook.ctx = this.ctx;                                                                                                 // 293\n  this._afterEach.push(hook);                                                                                          // 294\n  this.emit('afterEach', hook);                                                                                        // 295\n  return this;                                                                                                         // 296\n};                                                                                                                     // 297\n                                                                                                                       // 298\n/**                                                                                                                    // 299\n * Add a test `suite`.                                                                                                 // 300\n *                                                                                                                     // 301\n * @api private                                                                                                        // 302\n * @param {Suite} suite                                                                                                // 303\n * @return {Suite} for chaining                                                                                        // 304\n */                                                                                                                    // 305\nSuite.prototype.addSuite = function(suite) {                                                                           // 306\n  suite.parent = this;                                                                                                 // 307\n  suite.timeout(this.timeout());                                                                                       // 308\n  suite.retries(this.retries());                                                                                       // 309\n  suite.enableTimeouts(this.enableTimeouts());                                                                         // 310\n  suite.slow(this.slow());                                                                                             // 311\n  suite.bail(this.bail());                                                                                             // 312\n  this.suites.push(suite);                                                                                             // 313\n  this.emit('suite', suite);                                                                                           // 314\n  return this;                                                                                                         // 315\n};                                                                                                                     // 316\n                                                                                                                       // 317\n/**                                                                                                                    // 318\n * Add a `test` to this suite.                                                                                         // 319\n *                                                                                                                     // 320\n * @api private                                                                                                        // 321\n * @param {Test} test                                                                                                  // 322\n * @return {Suite} for chaining                                                                                        // 323\n */                                                                                                                    // 324\nSuite.prototype.addTest = function(test) {                                                                             // 325\n  test.parent = this;                                                                                                  // 326\n  test.timeout(this.timeout());                                                                                        // 327\n  test.retries(this.retries());                                                                                        // 328\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 329\n  test.slow(this.slow());                                                                                              // 330\n  test.ctx = this.ctx;                                                                                                 // 331\n  this.tests.push(test);                                                                                               // 332\n  this.emit('test', test);                                                                                             // 333\n  return this;                                                                                                         // 334\n};                                                                                                                     // 335\n                                                                                                                       // 336\n/**                                                                                                                    // 337\n * Return the full title generated by recursively concatenating the parent's                                           // 338\n * full title.                                                                                                         // 339\n *                                                                                                                     // 340\n * @api public                                                                                                         // 341\n * @return {string}                                                                                                    // 342\n */                                                                                                                    // 343\nSuite.prototype.fullTitle = function() {                                                                               // 344\n  if (this.parent) {                                                                                                   // 345\n    var full = this.parent.fullTitle();                                                                                // 346\n    if (full) {                                                                                                        // 347\n      return full + ' ' + this.title;                                                                                  // 348\n    }                                                                                                                  // 349\n  }                                                                                                                    // 350\n  return this.title;                                                                                                   // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * Return the total number of tests.                                                                                   // 355\n *                                                                                                                     // 356\n * @api public                                                                                                         // 357\n * @return {number}                                                                                                    // 358\n */                                                                                                                    // 359\nSuite.prototype.total = function() {                                                                                   // 360\n  return utils.reduce(this.suites, function(sum, suite) {                                                              // 361\n    return sum + suite.total();                                                                                        // 362\n  }, 0) + this.tests.length;                                                                                           // 363\n};                                                                                                                     // 364\n                                                                                                                       // 365\n/**                                                                                                                    // 366\n * Iterates through each suite recursively to find all tests. Applies a                                                // 367\n * function in the format `fn(test)`.                                                                                  // 368\n *                                                                                                                     // 369\n * @api private                                                                                                        // 370\n * @param {Function} fn                                                                                                // 371\n * @return {Suite}                                                                                                     // 372\n */                                                                                                                    // 373\nSuite.prototype.eachTest = function(fn) {                                                                              // 374\n  utils.forEach(this.tests, fn);                                                                                       // 375\n  utils.forEach(this.suites, function(suite) {                                                                         // 376\n    suite.eachTest(fn);                                                                                                // 377\n  });                                                                                                                  // 378\n  return this;                                                                                                         // 379\n};                                                                                                                     // 380\n                                                                                                                       // 381\n/**                                                                                                                    // 382\n * This will run the root suite if we happen to be running in delayed mode.                                            // 383\n */                                                                                                                    // 384\nSuite.prototype.run = function run() {                                                                                 // 385\n  if (this.root) {                                                                                                     // 386\n    this.emit('run');                                                                                                  // 387\n  }                                                                                                                    // 388\n};                                                                                                                     // 389\n                                                                                                                       // 390\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/hook.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Runnable = require('./runnable');                                                                                  // 5\nvar inherits = require('./utils').inherits;                                                                            // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Hook`.                                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nmodule.exports = Hook;                                                                                                 // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Hook` with the given `title` and callback `fn`.                                                   // 15\n *                                                                                                                     // 16\n * @param {String} title                                                                                               // 17\n * @param {Function} fn                                                                                                // 18\n * @api private                                                                                                        // 19\n */                                                                                                                    // 20\nfunction Hook(title, fn) {                                                                                             // 21\n  Runnable.call(this, title, fn);                                                                                      // 22\n  this.type = 'hook';                                                                                                  // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Inherit from `Runnable.prototype`.                                                                                  // 27\n */                                                                                                                    // 28\ninherits(Hook, Runnable);                                                                                              // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Get or set the test `err`.                                                                                          // 32\n *                                                                                                                     // 33\n * @param {Error} err                                                                                                  // 34\n * @return {Error}                                                                                                     // 35\n * @api public                                                                                                         // 36\n */                                                                                                                    // 37\nHook.prototype.error = function(err) {                                                                                 // 38\n  if (!arguments.length) {                                                                                             // 39\n    err = this._error;                                                                                                 // 40\n    this._error = null;                                                                                                // 41\n    return err;                                                                                                        // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  this._error = err;                                                                                                   // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runnable.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/runnable.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5\nvar Pending = require('./pending');                                                                                    // 6\nvar debug = require('debug')('mocha:runnable');                                                                        // 7\nvar milliseconds = require('./ms');                                                                                    // 8\nvar utils = require('./utils');                                                                                        // 9\nvar inherits = utils.inherits;                                                                                         // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Save timer references to avoid Sinon interfering (see GH-237).                                                      // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\n/* eslint-disable no-unused-vars, no-native-reassign */                                                                // 16\nvar Date = global.Date;                                                                                                // 17\nvar setTimeout = global.setTimeout;                                                                                    // 18\nvar setInterval = global.setInterval;                                                                                  // 19\nvar clearTimeout = global.clearTimeout;                                                                                // 20\nvar clearInterval = global.clearInterval;                                                                              // 21\n/* eslint-enable no-unused-vars, no-native-reassign */                                                                 // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Object#toString().                                                                                                  // 25\n */                                                                                                                    // 26\n                                                                                                                       // 27\nvar toString = Object.prototype.toString;                                                                              // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * Expose `Runnable`.                                                                                                  // 31\n */                                                                                                                    // 32\n                                                                                                                       // 33\nmodule.exports = Runnable;                                                                                             // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Initialize a new `Runnable` with the given `title` and callback `fn`.                                               // 37\n *                                                                                                                     // 38\n * @param {String} title                                                                                               // 39\n * @param {Function} fn                                                                                                // 40\n * @api private                                                                                                        // 41\n * @param {string} title                                                                                               // 42\n * @param {Function} fn                                                                                                // 43\n */                                                                                                                    // 44\nfunction Runnable(title, fn) {                                                                                         // 45\n  this.title = title;                                                                                                  // 46\n  this.fn = fn;                                                                                                        // 47\n  this.async = fn && fn.length;                                                                                        // 48\n  this.sync = !this.async;                                                                                             // 49\n  this._timeout = 2000;                                                                                                // 50\n  this._slow = 75;                                                                                                     // 51\n  this._enableTimeouts = true;                                                                                         // 52\n  this.timedOut = false;                                                                                               // 53\n  this._trace = new Error('done() called multiple times');                                                             // 54\n  this._retries = -1;                                                                                                  // 55\n  this._currentRetry = 0;                                                                                              // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Inherit from `EventEmitter.prototype`.                                                                              // 60\n */                                                                                                                    // 61\ninherits(Runnable, EventEmitter);                                                                                      // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Set & get timeout `ms`.                                                                                             // 65\n *                                                                                                                     // 66\n * @api private                                                                                                        // 67\n * @param {number|string} ms                                                                                           // 68\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 69\n */                                                                                                                    // 70\nRunnable.prototype.timeout = function(ms) {                                                                            // 71\n  if (!arguments.length) {                                                                                             // 72\n    return this._timeout;                                                                                              // 73\n  }                                                                                                                    // 74\n  if (ms === 0) {                                                                                                      // 75\n    this._enableTimeouts = false;                                                                                      // 76\n  }                                                                                                                    // 77\n  if (typeof ms === 'string') {                                                                                        // 78\n    ms = milliseconds(ms);                                                                                             // 79\n  }                                                                                                                    // 80\n  debug('timeout %d', ms);                                                                                             // 81\n  this._timeout = ms;                                                                                                  // 82\n  if (this.timer) {                                                                                                    // 83\n    this.resetTimeout();                                                                                               // 84\n  }                                                                                                                    // 85\n  return this;                                                                                                         // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * Set & get slow `ms`.                                                                                                // 90\n *                                                                                                                     // 91\n * @api private                                                                                                        // 92\n * @param {number|string} ms                                                                                           // 93\n * @return {Runnable|number} ms or Runnable instance.                                                                  // 94\n */                                                                                                                    // 95\nRunnable.prototype.slow = function(ms) {                                                                               // 96\n  if (!arguments.length) {                                                                                             // 97\n    return this._slow;                                                                                                 // 98\n  }                                                                                                                    // 99\n  if (typeof ms === 'string') {                                                                                        // 100\n    ms = milliseconds(ms);                                                                                             // 101\n  }                                                                                                                    // 102\n  debug('timeout %d', ms);                                                                                             // 103\n  this._slow = ms;                                                                                                     // 104\n  return this;                                                                                                         // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * Set and get whether timeout is `enabled`.                                                                           // 109\n *                                                                                                                     // 110\n * @api private                                                                                                        // 111\n * @param {boolean} enabled                                                                                            // 112\n * @return {Runnable|boolean} enabled or Runnable instance.                                                            // 113\n */                                                                                                                    // 114\nRunnable.prototype.enableTimeouts = function(enabled) {                                                                // 115\n  if (!arguments.length) {                                                                                             // 116\n    return this._enableTimeouts;                                                                                       // 117\n  }                                                                                                                    // 118\n  debug('enableTimeouts %s', enabled);                                                                                 // 119\n  this._enableTimeouts = enabled;                                                                                      // 120\n  return this;                                                                                                         // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * Halt and mark as pending.                                                                                           // 125\n *                                                                                                                     // 126\n * @api private                                                                                                        // 127\n */                                                                                                                    // 128\nRunnable.prototype.skip = function() {                                                                                 // 129\n  throw new Pending();                                                                                                 // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Set number of retries.                                                                                              // 134\n *                                                                                                                     // 135\n * @api private                                                                                                        // 136\n */                                                                                                                    // 137\nRunnable.prototype.retries = function(n) {                                                                             // 138\n  if (!arguments.length) {                                                                                             // 139\n    return this._retries;                                                                                              // 140\n  }                                                                                                                    // 141\n  this._retries = n;                                                                                                   // 142\n};                                                                                                                     // 143\n                                                                                                                       // 144\n/**                                                                                                                    // 145\n * Get current retry                                                                                                   // 146\n *                                                                                                                     // 147\n * @api private                                                                                                        // 148\n */                                                                                                                    // 149\nRunnable.prototype.currentRetry = function(n) {                                                                        // 150\n  if (!arguments.length) {                                                                                             // 151\n    return this._currentRetry;                                                                                         // 152\n  }                                                                                                                    // 153\n  this._currentRetry = n;                                                                                              // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\n/**                                                                                                                    // 157\n * Return the full title generated by recursively concatenating the parent's                                           // 158\n * full title.                                                                                                         // 159\n *                                                                                                                     // 160\n * @api public                                                                                                         // 161\n * @return {string}                                                                                                    // 162\n */                                                                                                                    // 163\nRunnable.prototype.fullTitle = function() {                                                                            // 164\n  return this.parent.fullTitle() + ' ' + this.title;                                                                   // 165\n};                                                                                                                     // 166\n                                                                                                                       // 167\n/**                                                                                                                    // 168\n * Clear the timeout.                                                                                                  // 169\n *                                                                                                                     // 170\n * @api private                                                                                                        // 171\n */                                                                                                                    // 172\nRunnable.prototype.clearTimeout = function() {                                                                         // 173\n  clearTimeout(this.timer);                                                                                            // 174\n};                                                                                                                     // 175\n                                                                                                                       // 176\n/**                                                                                                                    // 177\n * Inspect the runnable void of private properties.                                                                    // 178\n *                                                                                                                     // 179\n * @api private                                                                                                        // 180\n * @return {string}                                                                                                    // 181\n */                                                                                                                    // 182\nRunnable.prototype.inspect = function() {                                                                              // 183\n  return JSON.stringify(this, function(key, val) {                                                                     // 184\n    if (key[0] === '_') {                                                                                              // 185\n      return;                                                                                                          // 186\n    }                                                                                                                  // 187\n    if (key === 'parent') {                                                                                            // 188\n      return '#<Suite>';                                                                                               // 189\n    }                                                                                                                  // 190\n    if (key === 'ctx') {                                                                                               // 191\n      return '#<Context>';                                                                                             // 192\n    }                                                                                                                  // 193\n    return val;                                                                                                        // 194\n  }, 2);                                                                                                               // 195\n};                                                                                                                     // 196\n                                                                                                                       // 197\n/**                                                                                                                    // 198\n * Reset the timeout.                                                                                                  // 199\n *                                                                                                                     // 200\n * @api private                                                                                                        // 201\n */                                                                                                                    // 202\nRunnable.prototype.resetTimeout = function() {                                                                         // 203\n  var self = this;                                                                                                     // 204\n  var ms = this.timeout() || 1e9;                                                                                      // 205\n                                                                                                                       // 206\n  if (!this._enableTimeouts) {                                                                                         // 207\n    return;                                                                                                            // 208\n  }                                                                                                                    // 209\n  this.clearTimeout();                                                                                                 // 210\n  this.timer = setTimeout(function() {                                                                                 // 211\n    if (!self._enableTimeouts) {                                                                                       // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.'));\n    self.timedOut = true;                                                                                              // 216\n  }, ms);                                                                                                              // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\n/**                                                                                                                    // 220\n * Whitelist a list of globals for this test run.                                                                      // 221\n *                                                                                                                     // 222\n * @api private                                                                                                        // 223\n * @param {string[]} globals                                                                                           // 224\n */                                                                                                                    // 225\nRunnable.prototype.globals = function(globals) {                                                                       // 226\n  if (!arguments.length) {                                                                                             // 227\n    return this._allowedGlobals;                                                                                       // 228\n  }                                                                                                                    // 229\n  this._allowedGlobals = globals;                                                                                      // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\n/**                                                                                                                    // 233\n * Run the test and invoke `fn(err)`.                                                                                  // 234\n *                                                                                                                     // 235\n * @param {Function} fn                                                                                                // 236\n * @api private                                                                                                        // 237\n */                                                                                                                    // 238\nRunnable.prototype.run = function(fn) {                                                                                // 239\n  var self = this;                                                                                                     // 240\n  var start = new Date();                                                                                              // 241\n  var ctx = this.ctx;                                                                                                  // 242\n  var finished;                                                                                                        // 243\n  var emitted;                                                                                                         // 244\n                                                                                                                       // 245\n  // Sometimes the ctx exists, but it is not runnable                                                                  // 246\n  if (ctx && ctx.runnable) {                                                                                           // 247\n    ctx.runnable(this);                                                                                                // 248\n  }                                                                                                                    // 249\n                                                                                                                       // 250\n  // called multiple times                                                                                             // 251\n  function multiple(err) {                                                                                             // 252\n    if (emitted) {                                                                                                     // 253\n      return;                                                                                                          // 254\n    }                                                                                                                  // 255\n    emitted = true;                                                                                                    // 256\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));                // 257\n  }                                                                                                                    // 258\n                                                                                                                       // 259\n  // finished                                                                                                          // 260\n  function done(err) {                                                                                                 // 261\n    var ms = self.timeout();                                                                                           // 262\n    if (self.timedOut) {                                                                                               // 263\n      return;                                                                                                          // 264\n    }                                                                                                                  // 265\n    if (finished) {                                                                                                    // 266\n      return multiple(err || self._trace);                                                                             // 267\n    }                                                                                                                  // 268\n                                                                                                                       // 269\n    self.clearTimeout();                                                                                               // 270\n    self.duration = new Date() - start;                                                                                // 271\n    finished = true;                                                                                                   // 272\n    if (!err && self.duration > ms && self._enableTimeouts) {                                                          // 273\n      err = new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.');   // 274\n    }                                                                                                                  // 275\n    fn(err);                                                                                                           // 276\n  }                                                                                                                    // 277\n                                                                                                                       // 278\n  // for .resetTimeout()                                                                                               // 279\n  this.callback = done;                                                                                                // 280\n                                                                                                                       // 281\n  // explicit async with `done` argument                                                                               // 282\n  if (this.async) {                                                                                                    // 283\n    this.resetTimeout();                                                                                               // 284\n                                                                                                                       // 285\n    if (this.allowUncaught) {                                                                                          // 286\n      return callFnAsync(this.fn);                                                                                     // 287\n    }                                                                                                                  // 288\n    try {                                                                                                              // 289\n      callFnAsync(this.fn);                                                                                            // 290\n    } catch (err) {                                                                                                    // 291\n      done(utils.getError(err));                                                                                       // 292\n    }                                                                                                                  // 293\n    return;                                                                                                            // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  if (this.allowUncaught) {                                                                                            // 297\n    callFn(this.fn);                                                                                                   // 298\n    done();                                                                                                            // 299\n    return;                                                                                                            // 300\n  }                                                                                                                    // 301\n                                                                                                                       // 302\n  // sync or promise-returning                                                                                         // 303\n  try {                                                                                                                // 304\n    if (this.pending) {                                                                                                // 305\n      done();                                                                                                          // 306\n    } else {                                                                                                           // 307\n      callFn(this.fn);                                                                                                 // 308\n    }                                                                                                                  // 309\n  } catch (err) {                                                                                                      // 310\n    done(utils.getError(err));                                                                                         // 311\n  }                                                                                                                    // 312\n                                                                                                                       // 313\n  function callFn(fn) {                                                                                                // 314\n    var result = fn.call(ctx);                                                                                         // 315\n    if (result && typeof result.then === 'function') {                                                                 // 316\n      self.resetTimeout();                                                                                             // 317\n      result                                                                                                           // 318\n        .then(function() {                                                                                             // 319\n          done();                                                                                                      // 320\n          // Return null so libraries like bluebird do not warn about                                                  // 321\n          // subsequently constructed Promises.                                                                        // 322\n          return null;                                                                                                 // 323\n        },                                                                                                             // 324\n        function(reason) {                                                                                             // 325\n          done(reason || new Error('Promise rejected with no or falsy reason'));                                       // 326\n        });                                                                                                            // 327\n    } else {                                                                                                           // 328\n      if (self.asyncOnly) {                                                                                            // 329\n        return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));        // 330\n      }                                                                                                                // 331\n                                                                                                                       // 332\n      done();                                                                                                          // 333\n    }                                                                                                                  // 334\n  }                                                                                                                    // 335\n                                                                                                                       // 336\n  function callFnAsync(fn) {                                                                                           // 337\n    fn.call(ctx, function(err) {                                                                                       // 338\n      if (err instanceof Error || toString.call(err) === '[object Error]') {                                           // 339\n        return done(err);                                                                                              // 340\n      }                                                                                                                // 341\n      if (err) {                                                                                                       // 342\n        if (Object.prototype.toString.call(err) === '[object Object]') {                                               // 343\n          return done(new Error('done() invoked with non-Error: '                                                      // 344\n            + JSON.stringify(err)));                                                                                   // 345\n        }                                                                                                              // 346\n        return done(new Error('done() invoked with non-Error: ' + err));                                               // 347\n      }                                                                                                                // 348\n      done();                                                                                                          // 349\n    });                                                                                                                // 350\n  }                                                                                                                    // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pending.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/pending.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * Expose `Pending`.                                                                                                   // 3\n */                                                                                                                    // 4\n                                                                                                                       // 5\nmodule.exports = Pending;                                                                                              // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Initialize a new `Pending` error with the given message.                                                            // 9\n *                                                                                                                     // 10\n * @param {string} message                                                                                             // 11\n */                                                                                                                    // 12\nfunction Pending(message) {                                                                                            // 13\n  this.message = message;                                                                                              // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"test.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/test.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar Runnable = require('./runnable');                                                                                  // 5\nvar inherits = require('./utils').inherits;                                                                            // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Expose `Test`.                                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nmodule.exports = Test;                                                                                                 // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Test` with the given `title` and callback `fn`.                                                   // 15\n *                                                                                                                     // 16\n * @api private                                                                                                        // 17\n * @param {String} title                                                                                               // 18\n * @param {Function} fn                                                                                                // 19\n */                                                                                                                    // 20\nfunction Test(title, fn) {                                                                                             // 21\n  Runnable.call(this, title, fn);                                                                                      // 22\n  this.pending = !fn;                                                                                                  // 23\n  this.type = 'test';                                                                                                  // 24\n  this.body = (fn || '').toString();                                                                                   // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Inherit from `Runnable.prototype`.                                                                                  // 29\n */                                                                                                                    // 30\ninherits(Test, Runnable);                                                                                              // 31\n                                                                                                                       // 32\nTest.prototype.clone = function() {                                                                                    // 33\n  var test = new Test(this.title, this.fn);                                                                            // 34\n  test.timeout(this.timeout());                                                                                        // 35\n  test.slow(this.slow());                                                                                              // 36\n  test.enableTimeouts(this.enableTimeouts());                                                                          // 37\n  test.retries(this.retries());                                                                                        // 38\n  test.currentRetry(this.currentRetry());                                                                              // 39\n  test.globals(this.globals());                                                                                        // 40\n  test.parent = this.parent;                                                                                           // 41\n  test.file = this.file;                                                                                               // 42\n  test.ctx = this.ctx;                                                                                                 // 43\n  return test;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"context.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/context.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Expose `Context`.                                                                                                   // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nmodule.exports = Context;                                                                                              // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Initialize a new `Context`.                                                                                         // 8\n *                                                                                                                     // 9\n * @api private                                                                                                        // 10\n */                                                                                                                    // 11\nfunction Context() {}                                                                                                  // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Set or get the context `Runnable` to `runnable`.                                                                    // 15\n *                                                                                                                     // 16\n * @api private                                                                                                        // 17\n * @param {Runnable} runnable                                                                                          // 18\n * @return {Context}                                                                                                   // 19\n */                                                                                                                    // 20\nContext.prototype.runnable = function(runnable) {                                                                      // 21\n  if (!arguments.length) {                                                                                             // 22\n    return this._runnable;                                                                                             // 23\n  }                                                                                                                    // 24\n  this.test = this._runnable = runnable;                                                                               // 25\n  return this;                                                                                                         // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Set test timeout `ms`.                                                                                              // 30\n *                                                                                                                     // 31\n * @api private                                                                                                        // 32\n * @param {number} ms                                                                                                  // 33\n * @return {Context} self                                                                                              // 34\n */                                                                                                                    // 35\nContext.prototype.timeout = function(ms) {                                                                             // 36\n  if (!arguments.length) {                                                                                             // 37\n    return this.runnable().timeout();                                                                                  // 38\n  }                                                                                                                    // 39\n  this.runnable().timeout(ms);                                                                                         // 40\n  return this;                                                                                                         // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Set test timeout `enabled`.                                                                                         // 45\n *                                                                                                                     // 46\n * @api private                                                                                                        // 47\n * @param {boolean} enabled                                                                                            // 48\n * @return {Context} self                                                                                              // 49\n */                                                                                                                    // 50\nContext.prototype.enableTimeouts = function(enabled) {                                                                 // 51\n  this.runnable().enableTimeouts(enabled);                                                                             // 52\n  return this;                                                                                                         // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Set test slowness threshold `ms`.                                                                                   // 57\n *                                                                                                                     // 58\n * @api private                                                                                                        // 59\n * @param {number} ms                                                                                                  // 60\n * @return {Context} self                                                                                              // 61\n */                                                                                                                    // 62\nContext.prototype.slow = function(ms) {                                                                                // 63\n  this.runnable().slow(ms);                                                                                            // 64\n  return this;                                                                                                         // 65\n};                                                                                                                     // 66\n                                                                                                                       // 67\n/**                                                                                                                    // 68\n * Mark a test as skipped.                                                                                             // 69\n *                                                                                                                     // 70\n * @api private                                                                                                        // 71\n * @return {Context} self                                                                                              // 72\n */                                                                                                                    // 73\nContext.prototype.skip = function() {                                                                                  // 74\n  this.runnable().skip();                                                                                              // 75\n  return this;                                                                                                         // 76\n};                                                                                                                     // 77\n                                                                                                                       // 78\n/**                                                                                                                    // 79\n * Allow a number of retries on failed tests                                                                           // 80\n *                                                                                                                     // 81\n * @api private                                                                                                        // 82\n * @param {number} n                                                                                                   // 83\n * @return {Context} self                                                                                              // 84\n */                                                                                                                    // 85\nContext.prototype.retries = function(n) {                                                                              // 86\n  if (!arguments.length) {                                                                                             // 87\n    return this.runnable().retries();                                                                                  // 88\n  }                                                                                                                    // 89\n  this.runnable().retries(n);                                                                                          // 90\n  return this;                                                                                                         // 91\n};                                                                                                                     // 92\n                                                                                                                       // 93\n/**                                                                                                                    // 94\n * Inspect the context void of `._runnable`.                                                                           // 95\n *                                                                                                                     // 96\n * @api private                                                                                                        // 97\n * @return {string}                                                                                                    // 98\n */                                                                                                                    // 99\nContext.prototype.inspect = function() {                                                                               // 100\n  return JSON.stringify(this, function(key, val) {                                                                     // 101\n    return key === 'runnable' || key === 'test' ? undefined : val;                                                     // 102\n  }, 2);                                                                                                               // 103\n};                                                                                                                     // 104\n                                                                                                                       // 105\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runner.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/lib/runner.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar EventEmitter = require('events').EventEmitter;                                                                     // 5\nvar Pending = require('./pending');                                                                                    // 6\nvar utils = require('./utils');                                                                                        // 7\nvar inherits = utils.inherits;                                                                                         // 8\nvar debug = require('debug')('mocha:runner');                                                                          // 9\nvar Runnable = require('./runnable');                                                                                  // 10\nvar filter = utils.filter;                                                                                             // 11\nvar indexOf = utils.indexOf;                                                                                           // 12\nvar keys = utils.keys;                                                                                                 // 13\nvar stackFilter = utils.stackTraceFilter();                                                                            // 14\nvar stringify = utils.stringify;                                                                                       // 15\nvar type = utils.type;                                                                                                 // 16\nvar undefinedError = utils.undefinedError;                                                                             // 17\nvar isArray = utils.isArray;                                                                                           // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Non-enumerable globals.                                                                                             // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar globals = [                                                                                                        // 24\n  'setTimeout',                                                                                                        // 25\n  'clearTimeout',                                                                                                      // 26\n  'setInterval',                                                                                                       // 27\n  'clearInterval',                                                                                                     // 28\n  'XMLHttpRequest',                                                                                                    // 29\n  'Date',                                                                                                              // 30\n  'setImmediate',                                                                                                      // 31\n  'clearImmediate'                                                                                                     // 32\n];                                                                                                                     // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Expose `Runner`.                                                                                                    // 36\n */                                                                                                                    // 37\n                                                                                                                       // 38\nmodule.exports = Runner;                                                                                               // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Initialize a `Runner` for the given `suite`.                                                                        // 42\n *                                                                                                                     // 43\n * Events:                                                                                                             // 44\n *                                                                                                                     // 45\n *   - `start`  execution started                                                                                      // 46\n *   - `end`  execution complete                                                                                       // 47\n *   - `suite`  (suite) test suite execution started                                                                   // 48\n *   - `suite end`  (suite) all tests (and sub-suites) have finished                                                   // 49\n *   - `test`  (test) test execution started                                                                           // 50\n *   - `test end`  (test) test completed                                                                               // 51\n *   - `hook`  (hook) hook execution started                                                                           // 52\n *   - `hook end`  (hook) hook complete                                                                                // 53\n *   - `pass`  (test) test passed                                                                                      // 54\n *   - `fail`  (test, err) test failed                                                                                 // 55\n *   - `pending`  (test) test pending                                                                                  // 56\n *                                                                                                                     // 57\n * @api public                                                                                                         // 58\n * @param {Suite} suite Root suite                                                                                     // 59\n * @param {boolean} [delay] Whether or not to delay execution of root suite                                            // 60\n * until ready.                                                                                                        // 61\n */                                                                                                                    // 62\nfunction Runner(suite, delay) {                                                                                        // 63\n  var self = this;                                                                                                     // 64\n  this._globals = [];                                                                                                  // 65\n  this._abort = false;                                                                                                 // 66\n  this._delay = delay;                                                                                                 // 67\n  this.suite = suite;                                                                                                  // 68\n  this.started = false;                                                                                                // 69\n  this.total = suite.total();                                                                                          // 70\n  this.failures = 0;                                                                                                   // 71\n  this.on('test end', function(test) {                                                                                 // 72\n    self.checkGlobals(test);                                                                                           // 73\n  });                                                                                                                  // 74\n  this.on('hook end', function(hook) {                                                                                 // 75\n    self.checkGlobals(hook);                                                                                           // 76\n  });                                                                                                                  // 77\n  this._defaultGrep = /.*/;                                                                                            // 78\n  this.grep(this._defaultGrep);                                                                                        // 79\n  this.globals(this.globalProps().concat(extraGlobals()));                                                             // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/**                                                                                                                    // 83\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.                                                    // 84\n *                                                                                                                     // 85\n * @param {Function} fn                                                                                                // 86\n * @api private                                                                                                        // 87\n */                                                                                                                    // 88\nRunner.immediately = global.setImmediate || process.nextTick;                                                          // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * Inherit from `EventEmitter.prototype`.                                                                              // 92\n */                                                                                                                    // 93\ninherits(Runner, EventEmitter);                                                                                        // 94\n                                                                                                                       // 95\n/**                                                                                                                    // 96\n * Run tests with full titles matching `re`. Updates runner.total                                                      // 97\n * with number of tests matched.                                                                                       // 98\n *                                                                                                                     // 99\n * @param {RegExp} re                                                                                                  // 100\n * @param {Boolean} invert                                                                                             // 101\n * @return {Runner} for chaining                                                                                       // 102\n * @api public                                                                                                         // 103\n * @param {RegExp} re                                                                                                  // 104\n * @param {boolean} invert                                                                                             // 105\n * @return {Runner} Runner instance.                                                                                   // 106\n */                                                                                                                    // 107\nRunner.prototype.grep = function(re, invert) {                                                                         // 108\n  debug('grep %s', re);                                                                                                // 109\n  this._grep = re;                                                                                                     // 110\n  this._invert = invert;                                                                                               // 111\n  this.total = this.grepTotal(this.suite);                                                                             // 112\n  return this;                                                                                                         // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * Returns the number of tests matching the grep search for the                                                        // 117\n * given suite.                                                                                                        // 118\n *                                                                                                                     // 119\n * @param {Suite} suite                                                                                                // 120\n * @return {Number}                                                                                                    // 121\n * @api public                                                                                                         // 122\n * @param {Suite} suite                                                                                                // 123\n * @return {number}                                                                                                    // 124\n */                                                                                                                    // 125\nRunner.prototype.grepTotal = function(suite) {                                                                         // 126\n  var self = this;                                                                                                     // 127\n  var total = 0;                                                                                                       // 128\n                                                                                                                       // 129\n  suite.eachTest(function(test) {                                                                                      // 130\n    var match = self._grep.test(test.fullTitle());                                                                     // 131\n    if (self._invert) {                                                                                                // 132\n      match = !match;                                                                                                  // 133\n    }                                                                                                                  // 134\n    if (match) {                                                                                                       // 135\n      total++;                                                                                                         // 136\n    }                                                                                                                  // 137\n  });                                                                                                                  // 138\n                                                                                                                       // 139\n  return total;                                                                                                        // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * Return a list of global properties.                                                                                 // 144\n *                                                                                                                     // 145\n * @return {Array}                                                                                                     // 146\n * @api private                                                                                                        // 147\n */                                                                                                                    // 148\nRunner.prototype.globalProps = function() {                                                                            // 149\n  var props = keys(global);                                                                                            // 150\n                                                                                                                       // 151\n  // non-enumerables                                                                                                   // 152\n  for (var i = 0; i < globals.length; ++i) {                                                                           // 153\n    if (~indexOf(props, globals[i])) {                                                                                 // 154\n      continue;                                                                                                        // 155\n    }                                                                                                                  // 156\n    props.push(globals[i]);                                                                                            // 157\n  }                                                                                                                    // 158\n                                                                                                                       // 159\n  return props;                                                                                                        // 160\n};                                                                                                                     // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Allow the given `arr` of globals.                                                                                   // 164\n *                                                                                                                     // 165\n * @param {Array} arr                                                                                                  // 166\n * @return {Runner} for chaining                                                                                       // 167\n * @api public                                                                                                         // 168\n * @param {Array} arr                                                                                                  // 169\n * @return {Runner} Runner instance.                                                                                   // 170\n */                                                                                                                    // 171\nRunner.prototype.globals = function(arr) {                                                                             // 172\n  if (!arguments.length) {                                                                                             // 173\n    return this._globals;                                                                                              // 174\n  }                                                                                                                    // 175\n  debug('globals %j', arr);                                                                                            // 176\n  this._globals = this._globals.concat(arr);                                                                           // 177\n  return this;                                                                                                         // 178\n};                                                                                                                     // 179\n                                                                                                                       // 180\n/**                                                                                                                    // 181\n * Check for global variable leaks.                                                                                    // 182\n *                                                                                                                     // 183\n * @api private                                                                                                        // 184\n */                                                                                                                    // 185\nRunner.prototype.checkGlobals = function(test) {                                                                       // 186\n  if (this.ignoreLeaks) {                                                                                              // 187\n    return;                                                                                                            // 188\n  }                                                                                                                    // 189\n  var ok = this._globals;                                                                                              // 190\n                                                                                                                       // 191\n  var globals = this.globalProps();                                                                                    // 192\n  var leaks;                                                                                                           // 193\n                                                                                                                       // 194\n  if (test) {                                                                                                          // 195\n    ok = ok.concat(test._allowedGlobals || []);                                                                        // 196\n  }                                                                                                                    // 197\n                                                                                                                       // 198\n  if (this.prevGlobalsLength === globals.length) {                                                                     // 199\n    return;                                                                                                            // 200\n  }                                                                                                                    // 201\n  this.prevGlobalsLength = globals.length;                                                                             // 202\n                                                                                                                       // 203\n  leaks = filterLeaks(ok, globals);                                                                                    // 204\n  this._globals = this._globals.concat(leaks);                                                                         // 205\n                                                                                                                       // 206\n  if (leaks.length > 1) {                                                                                              // 207\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));                                     // 208\n  } else if (leaks.length) {                                                                                           // 209\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));                                                   // 210\n  }                                                                                                                    // 211\n};                                                                                                                     // 212\n                                                                                                                       // 213\n/**                                                                                                                    // 214\n * Fail the given `test`.                                                                                              // 215\n *                                                                                                                     // 216\n * @api private                                                                                                        // 217\n * @param {Test} test                                                                                                  // 218\n * @param {Error} err                                                                                                  // 219\n */                                                                                                                    // 220\nRunner.prototype.fail = function(test, err) {                                                                          // 221\n  ++this.failures;                                                                                                     // 222\n  test.state = 'failed';                                                                                               // 223\n                                                                                                                       // 224\n  if (!(err instanceof Error || err && typeof err.message === 'string')) {                                             // 225\n    err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)');                     // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  err.stack = (this.fullStackTrace || !err.stack)                                                                      // 229\n    ? err.stack                                                                                                        // 230\n    : stackFilter(err.stack);                                                                                          // 231\n                                                                                                                       // 232\n  this.emit('fail', test, err);                                                                                        // 233\n};                                                                                                                     // 234\n                                                                                                                       // 235\n/**                                                                                                                    // 236\n * Fail the given `hook` with `err`.                                                                                   // 237\n *                                                                                                                     // 238\n * Hook failures work in the following pattern:                                                                        // 239\n * - If bail, then exit                                                                                                // 240\n * - Failed `before` hook skips all tests in a suite and subsuites,                                                    // 241\n *   but jumps to corresponding `after` hook                                                                           // 242\n * - Failed `before each` hook skips remaining tests in a                                                              // 243\n *   suite and jumps to corresponding `after each` hook,                                                               // 244\n *   which is run only once                                                                                            // 245\n * - Failed `after` hook does not alter                                                                                // 246\n *   execution order                                                                                                   // 247\n * - Failed `after each` hook skips remaining tests in a                                                               // 248\n *   suite and subsuites, but executes other `after each`                                                              // 249\n *   hooks                                                                                                             // 250\n *                                                                                                                     // 251\n * @api private                                                                                                        // 252\n * @param {Hook} hook                                                                                                  // 253\n * @param {Error} err                                                                                                  // 254\n */                                                                                                                    // 255\nRunner.prototype.failHook = function(hook, err) {                                                                      // 256\n  if (hook.ctx && hook.ctx.currentTest) {                                                                              // 257\n    hook.originalTitle = hook.originalTitle || hook.title;                                                             // 258\n    hook.title = hook.originalTitle + ' for \"' + hook.ctx.currentTest.title + '\"';                                     // 259\n  }                                                                                                                    // 260\n                                                                                                                       // 261\n  this.fail(hook, err);                                                                                                // 262\n  if (this.suite.bail()) {                                                                                             // 263\n    this.emit('end');                                                                                                  // 264\n  }                                                                                                                    // 265\n};                                                                                                                     // 266\n                                                                                                                       // 267\n/**                                                                                                                    // 268\n * Run hook `name` callbacks and then invoke `fn()`.                                                                   // 269\n *                                                                                                                     // 270\n * @api private                                                                                                        // 271\n * @param {string} name                                                                                                // 272\n * @param {Function} fn                                                                                                // 273\n */                                                                                                                    // 274\n                                                                                                                       // 275\nRunner.prototype.hook = function(name, fn) {                                                                           // 276\n  var suite = this.suite;                                                                                              // 277\n  var hooks = suite['_' + name];                                                                                       // 278\n  var self = this;                                                                                                     // 279\n                                                                                                                       // 280\n  function next(i) {                                                                                                   // 281\n    var hook = hooks[i];                                                                                               // 282\n    if (!hook) {                                                                                                       // 283\n      return fn();                                                                                                     // 284\n    }                                                                                                                  // 285\n    self.currentRunnable = hook;                                                                                       // 286\n                                                                                                                       // 287\n    hook.ctx.currentTest = self.test;                                                                                  // 288\n                                                                                                                       // 289\n    self.emit('hook', hook);                                                                                           // 290\n                                                                                                                       // 291\n    if (!hook.listeners('error').length) {                                                                             // 292\n      hook.on('error', function(err) {                                                                                 // 293\n        self.failHook(hook, err);                                                                                      // 294\n      });                                                                                                              // 295\n    }                                                                                                                  // 296\n                                                                                                                       // 297\n    hook.run(function(err) {                                                                                           // 298\n      var testError = hook.error();                                                                                    // 299\n      if (testError) {                                                                                                 // 300\n        self.fail(self.test, testError);                                                                               // 301\n      }                                                                                                                // 302\n      if (err) {                                                                                                       // 303\n        if (err instanceof Pending) {                                                                                  // 304\n          suite.pending = true;                                                                                        // 305\n        } else {                                                                                                       // 306\n          self.failHook(hook, err);                                                                                    // 307\n                                                                                                                       // 308\n          // stop executing hooks, notify callee of hook err                                                           // 309\n          return fn(err);                                                                                              // 310\n        }                                                                                                              // 311\n      }                                                                                                                // 312\n      self.emit('hook end', hook);                                                                                     // 313\n      delete hook.ctx.currentTest;                                                                                     // 314\n      next(++i);                                                                                                       // 315\n    });                                                                                                                // 316\n  }                                                                                                                    // 317\n                                                                                                                       // 318\n  Runner.immediately(function() {                                                                                      // 319\n    next(0);                                                                                                           // 320\n  });                                                                                                                  // 321\n};                                                                                                                     // 322\n                                                                                                                       // 323\n/**                                                                                                                    // 324\n * Run hook `name` for the given array of `suites`                                                                     // 325\n * in order, and callback `fn(err, errSuite)`.                                                                         // 326\n *                                                                                                                     // 327\n * @api private                                                                                                        // 328\n * @param {string} name                                                                                                // 329\n * @param {Array} suites                                                                                               // 330\n * @param {Function} fn                                                                                                // 331\n */                                                                                                                    // 332\nRunner.prototype.hooks = function(name, suites, fn) {                                                                  // 333\n  var self = this;                                                                                                     // 334\n  var orig = this.suite;                                                                                               // 335\n                                                                                                                       // 336\n  function next(suite) {                                                                                               // 337\n    self.suite = suite;                                                                                                // 338\n                                                                                                                       // 339\n    if (!suite) {                                                                                                      // 340\n      self.suite = orig;                                                                                               // 341\n      return fn();                                                                                                     // 342\n    }                                                                                                                  // 343\n                                                                                                                       // 344\n    self.hook(name, function(err) {                                                                                    // 345\n      if (err) {                                                                                                       // 346\n        var errSuite = self.suite;                                                                                     // 347\n        self.suite = orig;                                                                                             // 348\n        return fn(err, errSuite);                                                                                      // 349\n      }                                                                                                                // 350\n                                                                                                                       // 351\n      next(suites.pop());                                                                                              // 352\n    });                                                                                                                // 353\n  }                                                                                                                    // 354\n                                                                                                                       // 355\n  next(suites.pop());                                                                                                  // 356\n};                                                                                                                     // 357\n                                                                                                                       // 358\n/**                                                                                                                    // 359\n * Run hooks from the top level down.                                                                                  // 360\n *                                                                                                                     // 361\n * @param {String} name                                                                                                // 362\n * @param {Function} fn                                                                                                // 363\n * @api private                                                                                                        // 364\n */                                                                                                                    // 365\nRunner.prototype.hookUp = function(name, fn) {                                                                         // 366\n  var suites = [this.suite].concat(this.parents()).reverse();                                                          // 367\n  this.hooks(name, suites, fn);                                                                                        // 368\n};                                                                                                                     // 369\n                                                                                                                       // 370\n/**                                                                                                                    // 371\n * Run hooks from the bottom up.                                                                                       // 372\n *                                                                                                                     // 373\n * @param {String} name                                                                                                // 374\n * @param {Function} fn                                                                                                // 375\n * @api private                                                                                                        // 376\n */                                                                                                                    // 377\nRunner.prototype.hookDown = function(name, fn) {                                                                       // 378\n  var suites = [this.suite].concat(this.parents());                                                                    // 379\n  this.hooks(name, suites, fn);                                                                                        // 380\n};                                                                                                                     // 381\n                                                                                                                       // 382\n/**                                                                                                                    // 383\n * Return an array of parent Suites from                                                                               // 384\n * closest to furthest.                                                                                                // 385\n *                                                                                                                     // 386\n * @return {Array}                                                                                                     // 387\n * @api private                                                                                                        // 388\n */                                                                                                                    // 389\nRunner.prototype.parents = function() {                                                                                // 390\n  var suite = this.suite;                                                                                              // 391\n  var suites = [];                                                                                                     // 392\n  while (suite.parent) {                                                                                               // 393\n    suite = suite.parent;                                                                                              // 394\n    suites.push(suite);                                                                                                // 395\n  }                                                                                                                    // 396\n  return suites;                                                                                                       // 397\n};                                                                                                                     // 398\n                                                                                                                       // 399\n/**                                                                                                                    // 400\n * Run the current test and callback `fn(err)`.                                                                        // 401\n *                                                                                                                     // 402\n * @param {Function} fn                                                                                                // 403\n * @api private                                                                                                        // 404\n */                                                                                                                    // 405\nRunner.prototype.runTest = function(fn) {                                                                              // 406\n  var self = this;                                                                                                     // 407\n  var test = this.test;                                                                                                // 408\n                                                                                                                       // 409\n  if (this.asyncOnly) {                                                                                                // 410\n    test.asyncOnly = true;                                                                                             // 411\n  }                                                                                                                    // 412\n                                                                                                                       // 413\n  if (this.allowUncaught) {                                                                                            // 414\n    test.allowUncaught = true;                                                                                         // 415\n    return test.run(fn);                                                                                               // 416\n  }                                                                                                                    // 417\n  try {                                                                                                                // 418\n    test.on('error', function(err) {                                                                                   // 419\n      self.fail(test, err);                                                                                            // 420\n    });                                                                                                                // 421\n    test.run(fn);                                                                                                      // 422\n  } catch (err) {                                                                                                      // 423\n    fn(err);                                                                                                           // 424\n  }                                                                                                                    // 425\n};                                                                                                                     // 426\n                                                                                                                       // 427\n/**                                                                                                                    // 428\n * Run tests in the given `suite` and invoke the callback `fn()` when complete.                                        // 429\n *                                                                                                                     // 430\n * @api private                                                                                                        // 431\n * @param {Suite} suite                                                                                                // 432\n * @param {Function} fn                                                                                                // 433\n */                                                                                                                    // 434\nRunner.prototype.runTests = function(suite, fn) {                                                                      // 435\n  var self = this;                                                                                                     // 436\n  var tests = suite.tests.slice();                                                                                     // 437\n  var test;                                                                                                            // 438\n                                                                                                                       // 439\n  function hookErr(_, errSuite, after) {                                                                               // 440\n    // before/after Each hook for errSuite failed:                                                                     // 441\n    var orig = self.suite;                                                                                             // 442\n                                                                                                                       // 443\n    // for failed 'after each' hook start from errSuite parent,                                                        // 444\n    // otherwise start from errSuite itself                                                                            // 445\n    self.suite = after ? errSuite.parent : errSuite;                                                                   // 446\n                                                                                                                       // 447\n    if (self.suite) {                                                                                                  // 448\n      // call hookUp afterEach                                                                                         // 449\n      self.hookUp('afterEach', function(err2, errSuite2) {                                                             // 450\n        self.suite = orig;                                                                                             // 451\n        // some hooks may fail even now                                                                                // 452\n        if (err2) {                                                                                                    // 453\n          return hookErr(err2, errSuite2, true);                                                                       // 454\n        }                                                                                                              // 455\n        // report error suite                                                                                          // 456\n        fn(errSuite);                                                                                                  // 457\n      });                                                                                                              // 458\n    } else {                                                                                                           // 459\n      // there is no need calling other 'after each' hooks                                                             // 460\n      self.suite = orig;                                                                                               // 461\n      fn(errSuite);                                                                                                    // 462\n    }                                                                                                                  // 463\n  }                                                                                                                    // 464\n                                                                                                                       // 465\n  function next(err, errSuite) {                                                                                       // 466\n    // if we bail after first err                                                                                      // 467\n    if (self.failures && suite._bail) {                                                                                // 468\n      return fn();                                                                                                     // 469\n    }                                                                                                                  // 470\n                                                                                                                       // 471\n    if (self._abort) {                                                                                                 // 472\n      return fn();                                                                                                     // 473\n    }                                                                                                                  // 474\n                                                                                                                       // 475\n    if (err) {                                                                                                         // 476\n      return hookErr(err, errSuite, true);                                                                             // 477\n    }                                                                                                                  // 478\n                                                                                                                       // 479\n    // next test                                                                                                       // 480\n    test = tests.shift();                                                                                              // 481\n                                                                                                                       // 482\n    // all done                                                                                                        // 483\n    if (!test) {                                                                                                       // 484\n      return fn();                                                                                                     // 485\n    }                                                                                                                  // 486\n                                                                                                                       // 487\n    // grep                                                                                                            // 488\n    var match = self._grep.test(test.fullTitle());                                                                     // 489\n    if (self._invert) {                                                                                                // 490\n      match = !match;                                                                                                  // 491\n    }                                                                                                                  // 492\n    if (!match) {                                                                                                      // 493\n      // Run immediately only if we have defined a grep. When we                                                       // 494\n      // define a grep — It can cause maximum callstack error if                                                       // 495\n      // the grep is doing a large recursive loop by neglecting                                                        // 496\n      // all tests. The run immediately function also comes with                                                       // 497\n      // a performance cost. So we don't want to run immediately                                                       // 498\n      // if we run the whole test suite, because running the whole                                                     // 499\n      // test suite don't do any immediate recursive loops. Thus,                                                      // 500\n      // allowing a JS runtime to breathe.                                                                             // 501\n      if (self._grep !== self._defaultGrep) {                                                                          // 502\n        Runner.immediately(next);                                                                                      // 503\n      } else {                                                                                                         // 504\n        next();                                                                                                        // 505\n      }                                                                                                                // 506\n      return;                                                                                                          // 507\n    }                                                                                                                  // 508\n                                                                                                                       // 509\n    function parentPending(suite) {                                                                                    // 510\n      return suite.pending || (suite.parent && parentPending(suite.parent));                                           // 511\n    }                                                                                                                  // 512\n                                                                                                                       // 513\n    // pending                                                                                                         // 514\n    if (test.pending || parentPending(test.parent)) {                                                                  // 515\n      self.emit('pending', test);                                                                                      // 516\n      self.emit('test end', test);                                                                                     // 517\n      return next();                                                                                                   // 518\n    }                                                                                                                  // 519\n                                                                                                                       // 520\n    // execute test and hook(s)                                                                                        // 521\n    self.emit('test', self.test = test);                                                                               // 522\n    self.hookDown('beforeEach', function(err, errSuite) {                                                              // 523\n      if (suite.pending) {                                                                                             // 524\n        self.emit('pending', test);                                                                                    // 525\n        self.emit('test end', test);                                                                                   // 526\n        return next();                                                                                                 // 527\n      }                                                                                                                // 528\n      if (err) {                                                                                                       // 529\n        return hookErr(err, errSuite, false);                                                                          // 530\n      }                                                                                                                // 531\n      self.currentRunnable = self.test;                                                                                // 532\n      self.runTest(function(err) {                                                                                     // 533\n        test = self.test;                                                                                              // 534\n        if (err) {                                                                                                     // 535\n          var retry = test.currentRetry();                                                                             // 536\n          if (err instanceof Pending) {                                                                                // 537\n            test.pending = true;                                                                                       // 538\n            self.emit('pending', test);                                                                                // 539\n          } else if (retry < test.retries()) {                                                                         // 540\n            var clonedTest = test.clone();                                                                             // 541\n            clonedTest.currentRetry(retry + 1);                                                                        // 542\n            tests.unshift(clonedTest);                                                                                 // 543\n                                                                                                                       // 544\n            // Early return + hook trigger so that it doesn't                                                          // 545\n            // increment the count wrong                                                                               // 546\n            return self.hookUp('afterEach', next);                                                                     // 547\n          } else {                                                                                                     // 548\n            self.fail(test, err);                                                                                      // 549\n          }                                                                                                            // 550\n          self.emit('test end', test);                                                                                 // 551\n                                                                                                                       // 552\n          if (err instanceof Pending) {                                                                                // 553\n            return next();                                                                                             // 554\n          }                                                                                                            // 555\n                                                                                                                       // 556\n          return self.hookUp('afterEach', next);                                                                       // 557\n        }                                                                                                              // 558\n                                                                                                                       // 559\n        test.state = 'passed';                                                                                         // 560\n        self.emit('pass', test);                                                                                       // 561\n        self.emit('test end', test);                                                                                   // 562\n        self.hookUp('afterEach', next);                                                                                // 563\n      });                                                                                                              // 564\n    });                                                                                                                // 565\n  }                                                                                                                    // 566\n                                                                                                                       // 567\n  this.next = next;                                                                                                    // 568\n  this.hookErr = hookErr;                                                                                              // 569\n  next();                                                                                                              // 570\n};                                                                                                                     // 571\n                                                                                                                       // 572\n/**                                                                                                                    // 573\n * Run the given `suite` and invoke the callback `fn()` when complete.                                                 // 574\n *                                                                                                                     // 575\n * @api private                                                                                                        // 576\n * @param {Suite} suite                                                                                                // 577\n * @param {Function} fn                                                                                                // 578\n */                                                                                                                    // 579\nRunner.prototype.runSuite = function(suite, fn) {                                                                      // 580\n  var i = 0;                                                                                                           // 581\n  var self = this;                                                                                                     // 582\n  var total = this.grepTotal(suite);                                                                                   // 583\n  var afterAllHookCalled = false;                                                                                      // 584\n                                                                                                                       // 585\n  debug('run suite %s', suite.fullTitle());                                                                            // 586\n                                                                                                                       // 587\n  if (!total || (self.failures && suite._bail)) {                                                                      // 588\n    return fn();                                                                                                       // 589\n  }                                                                                                                    // 590\n                                                                                                                       // 591\n  this.emit('suite', this.suite = suite);                                                                              // 592\n                                                                                                                       // 593\n  function next(errSuite) {                                                                                            // 594\n    if (errSuite) {                                                                                                    // 595\n      // current suite failed on a hook from errSuite                                                                  // 596\n      if (errSuite === suite) {                                                                                        // 597\n        // if errSuite is current suite                                                                                // 598\n        // continue to the next sibling suite                                                                          // 599\n        return done();                                                                                                 // 600\n      }                                                                                                                // 601\n      // errSuite is among the parents of current suite                                                                // 602\n      // stop execution of errSuite and all sub-suites                                                                 // 603\n      return done(errSuite);                                                                                           // 604\n    }                                                                                                                  // 605\n                                                                                                                       // 606\n    if (self._abort) {                                                                                                 // 607\n      return done();                                                                                                   // 608\n    }                                                                                                                  // 609\n                                                                                                                       // 610\n    var curr = suite.suites[i++];                                                                                      // 611\n    if (!curr) {                                                                                                       // 612\n      return done();                                                                                                   // 613\n    }                                                                                                                  // 614\n                                                                                                                       // 615\n    // Avoid grep neglecting large number of tests causing a                                                           // 616\n    // huge recursive loop and thus a maximum call stack error.                                                        // 617\n    // See comment in `this.runTests()` for more information.                                                          // 618\n    if (self._grep !== self._defaultGrep) {                                                                            // 619\n      Runner.immediately(function() {                                                                                  // 620\n        self.runSuite(curr, next);                                                                                     // 621\n      });                                                                                                              // 622\n    } else {                                                                                                           // 623\n      self.runSuite(curr, next);                                                                                       // 624\n    }                                                                                                                  // 625\n  }                                                                                                                    // 626\n                                                                                                                       // 627\n  function done(errSuite) {                                                                                            // 628\n    self.suite = suite;                                                                                                // 629\n    self.nextSuite = next;                                                                                             // 630\n                                                                                                                       // 631\n    if (afterAllHookCalled) {                                                                                          // 632\n      fn(errSuite);                                                                                                    // 633\n    } else {                                                                                                           // 634\n      // mark that the afterAll block has been called once                                                             // 635\n      // and so can be skipped if there is an error in it.                                                             // 636\n      afterAllHookCalled = true;                                                                                       // 637\n                                                                                                                       // 638\n      // remove reference to test                                                                                      // 639\n      delete self.test;                                                                                                // 640\n                                                                                                                       // 641\n      self.hook('afterAll', function() {                                                                               // 642\n        self.emit('suite end', suite);                                                                                 // 643\n        fn(errSuite);                                                                                                  // 644\n      });                                                                                                              // 645\n    }                                                                                                                  // 646\n  }                                                                                                                    // 647\n                                                                                                                       // 648\n  this.nextSuite = next;                                                                                               // 649\n                                                                                                                       // 650\n  this.hook('beforeAll', function(err) {                                                                               // 651\n    if (err) {                                                                                                         // 652\n      return done();                                                                                                   // 653\n    }                                                                                                                  // 654\n    self.runTests(suite, next);                                                                                        // 655\n  });                                                                                                                  // 656\n};                                                                                                                     // 657\n                                                                                                                       // 658\n/**                                                                                                                    // 659\n * Handle uncaught exceptions.                                                                                         // 660\n *                                                                                                                     // 661\n * @param {Error} err                                                                                                  // 662\n * @api private                                                                                                        // 663\n */                                                                                                                    // 664\nRunner.prototype.uncaught = function(err) {                                                                            // 665\n  if (err) {                                                                                                           // 666\n    debug('uncaught exception %s', err !== function() {                                                                // 667\n      return this;                                                                                                     // 668\n    }.call(err) ? err : (err.message || err));                                                                         // 669\n  } else {                                                                                                             // 670\n    debug('uncaught undefined exception');                                                                             // 671\n    err = undefinedError();                                                                                            // 672\n  }                                                                                                                    // 673\n  err.uncaught = true;                                                                                                 // 674\n                                                                                                                       // 675\n  var runnable = this.currentRunnable;                                                                                 // 676\n                                                                                                                       // 677\n  if (!runnable) {                                                                                                     // 678\n    runnable = new Runnable('Uncaught error outside test suite');                                                      // 679\n    runnable.parent = this.suite;                                                                                      // 680\n                                                                                                                       // 681\n    if (this.started) {                                                                                                // 682\n      this.fail(runnable, err);                                                                                        // 683\n    } else {                                                                                                           // 684\n      // Can't recover from this failure                                                                               // 685\n      this.emit('start');                                                                                              // 686\n      this.fail(runnable, err);                                                                                        // 687\n      this.emit('end');                                                                                                // 688\n    }                                                                                                                  // 689\n                                                                                                                       // 690\n    return;                                                                                                            // 691\n  }                                                                                                                    // 692\n                                                                                                                       // 693\n  runnable.clearTimeout();                                                                                             // 694\n                                                                                                                       // 695\n  // Ignore errors if complete                                                                                         // 696\n  if (runnable.state) {                                                                                                // 697\n    return;                                                                                                            // 698\n  }                                                                                                                    // 699\n  this.fail(runnable, err);                                                                                            // 700\n                                                                                                                       // 701\n  // recover from test                                                                                                 // 702\n  if (runnable.type === 'test') {                                                                                      // 703\n    this.emit('test end', runnable);                                                                                   // 704\n    this.hookUp('afterEach', this.next);                                                                               // 705\n    return;                                                                                                            // 706\n  }                                                                                                                    // 707\n                                                                                                                       // 708\n // recover from hooks                                                                                                 // 709\n  if (runnable.type === 'hook') {                                                                                      // 710\n    var errSuite = this.suite;                                                                                         // 711\n    // if hook failure is in afterEach block                                                                           // 712\n    if (runnable.fullTitle().indexOf('after each') > -1) {                                                             // 713\n      return this.hookErr(err, errSuite, true);                                                                        // 714\n    }                                                                                                                  // 715\n    // if hook failure is in beforeEach block                                                                          // 716\n    if (runnable.fullTitle().indexOf('before each') > -1) {                                                            // 717\n      return this.hookErr(err, errSuite, false);                                                                       // 718\n    }                                                                                                                  // 719\n    // if hook failure is in after or before blocks                                                                    // 720\n    return this.nextSuite(errSuite);                                                                                   // 721\n  }                                                                                                                    // 722\n                                                                                                                       // 723\n  // bail                                                                                                              // 724\n  this.emit('end');                                                                                                    // 725\n};                                                                                                                     // 726\n                                                                                                                       // 727\n/**                                                                                                                    // 728\n * Cleans up the references to all the deferred functions                                                              // 729\n * (before/after/beforeEach/afterEach) and tests of a Suite.                                                           // 730\n * These must be deleted otherwise a memory leak can happen,                                                           // 731\n * as those functions may reference variables from closures,                                                           // 732\n * thus those variables can never be garbage collected as long                                                         // 733\n * as the deferred functions exist.                                                                                    // 734\n *                                                                                                                     // 735\n * @param {Suite} suite                                                                                                // 736\n */                                                                                                                    // 737\nfunction cleanSuiteReferences(suite) {                                                                                 // 738\n  function cleanArrReferences(arr) {                                                                                   // 739\n    for (var i = 0; i < arr.length; i++) {                                                                             // 740\n      delete arr[i].fn;                                                                                                // 741\n    }                                                                                                                  // 742\n  }                                                                                                                    // 743\n                                                                                                                       // 744\n  if (isArray(suite._beforeAll)) {                                                                                     // 745\n    cleanArrReferences(suite._beforeAll);                                                                              // 746\n  }                                                                                                                    // 747\n                                                                                                                       // 748\n  if (isArray(suite._beforeEach)) {                                                                                    // 749\n    cleanArrReferences(suite._beforeEach);                                                                             // 750\n  }                                                                                                                    // 751\n                                                                                                                       // 752\n  if (isArray(suite._afterAll)) {                                                                                      // 753\n    cleanArrReferences(suite._afterAll);                                                                               // 754\n  }                                                                                                                    // 755\n                                                                                                                       // 756\n  if (isArray(suite._afterEach)) {                                                                                     // 757\n    cleanArrReferences(suite._afterEach);                                                                              // 758\n  }                                                                                                                    // 759\n                                                                                                                       // 760\n  for (var i = 0; i < suite.tests.length; i++) {                                                                       // 761\n    delete suite.tests[i].fn;                                                                                          // 762\n  }                                                                                                                    // 763\n}                                                                                                                      // 764\n                                                                                                                       // 765\n/**                                                                                                                    // 766\n * Run the root suite and invoke `fn(failures)`                                                                        // 767\n * on completion.                                                                                                      // 768\n *                                                                                                                     // 769\n * @param {Function} fn                                                                                                // 770\n * @return {Runner} for chaining                                                                                       // 771\n * @api public                                                                                                         // 772\n * @param {Function} fn                                                                                                // 773\n * @return {Runner} Runner instance.                                                                                   // 774\n */                                                                                                                    // 775\nRunner.prototype.run = function(fn) {                                                                                  // 776\n  var self = this;                                                                                                     // 777\n  var rootSuite = this.suite;                                                                                          // 778\n                                                                                                                       // 779\n  fn = fn || function() {};                                                                                            // 780\n                                                                                                                       // 781\n  function uncaught(err) {                                                                                             // 782\n    self.uncaught(err);                                                                                                // 783\n  }                                                                                                                    // 784\n                                                                                                                       // 785\n  function start() {                                                                                                   // 786\n    self.started = true;                                                                                               // 787\n    self.emit('start');                                                                                                // 788\n    self.runSuite(rootSuite, function() {                                                                              // 789\n      debug('finished running');                                                                                       // 790\n      self.emit('end');                                                                                                // 791\n    });                                                                                                                // 792\n  }                                                                                                                    // 793\n                                                                                                                       // 794\n  debug('start');                                                                                                      // 795\n                                                                                                                       // 796\n  // references cleanup to avoid memory leaks                                                                          // 797\n  this.on('suite end', cleanSuiteReferences);                                                                          // 798\n                                                                                                                       // 799\n  // callback                                                                                                          // 800\n  this.on('end', function() {                                                                                          // 801\n    debug('end');                                                                                                      // 802\n    process.removeListener('uncaughtException', uncaught);                                                             // 803\n    fn(self.failures);                                                                                                 // 804\n  });                                                                                                                  // 805\n                                                                                                                       // 806\n  // uncaught exception                                                                                                // 807\n  process.on('uncaughtException', uncaught);                                                                           // 808\n                                                                                                                       // 809\n  if (this._delay) {                                                                                                   // 810\n    // for reporters, I guess.                                                                                         // 811\n    // might be nice to debounce some dots while we wait.                                                              // 812\n    this.emit('waiting', rootSuite);                                                                                   // 813\n    rootSuite.once('run', start);                                                                                      // 814\n  } else {                                                                                                             // 815\n    start();                                                                                                           // 816\n  }                                                                                                                    // 817\n                                                                                                                       // 818\n  return this;                                                                                                         // 819\n};                                                                                                                     // 820\n                                                                                                                       // 821\n/**                                                                                                                    // 822\n * Cleanly abort execution.                                                                                            // 823\n *                                                                                                                     // 824\n * @api public                                                                                                         // 825\n * @return {Runner} Runner instance.                                                                                   // 826\n */                                                                                                                    // 827\nRunner.prototype.abort = function() {                                                                                  // 828\n  debug('aborting');                                                                                                   // 829\n  this._abort = true;                                                                                                  // 830\n                                                                                                                       // 831\n  return this;                                                                                                         // 832\n};                                                                                                                     // 833\n                                                                                                                       // 834\n/**                                                                                                                    // 835\n * Filter leaks with the given globals flagged as `ok`.                                                                // 836\n *                                                                                                                     // 837\n * @api private                                                                                                        // 838\n * @param {Array} ok                                                                                                   // 839\n * @param {Array} globals                                                                                              // 840\n * @return {Array}                                                                                                     // 841\n */                                                                                                                    // 842\nfunction filterLeaks(ok, globals) {                                                                                    // 843\n  return filter(globals, function(key) {                                                                               // 844\n    // Firefox and Chrome exposes iframes as index inside the window object                                            // 845\n    if (/^d+/.test(key)) {                                                                                             // 846\n      return false;                                                                                                    // 847\n    }                                                                                                                  // 848\n                                                                                                                       // 849\n    // in firefox                                                                                                      // 850\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first                         // 851\n    // it is assigned in some seconds                                                                                  // 852\n    if (global.navigator && (/^getInterface/).test(key)) {                                                             // 853\n      return false;                                                                                                    // 854\n    }                                                                                                                  // 855\n                                                                                                                       // 856\n    // an iframe could be approached by window[iframeIndex]                                                            // 857\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak                                          // 858\n    if (global.navigator && (/^\\d+/).test(key)) {                                                                      // 859\n      return false;                                                                                                    // 860\n    }                                                                                                                  // 861\n                                                                                                                       // 862\n    // Opera and IE expose global variables for HTML element IDs (issue #243)                                          // 863\n    if (/^mocha-/.test(key)) {                                                                                         // 864\n      return false;                                                                                                    // 865\n    }                                                                                                                  // 866\n                                                                                                                       // 867\n    var matched = filter(ok, function(ok) {                                                                            // 868\n      if (~ok.indexOf('*')) {                                                                                          // 869\n        return key.indexOf(ok.split('*')[0]) === 0;                                                                    // 870\n      }                                                                                                                // 871\n      return key === ok;                                                                                               // 872\n    });                                                                                                                // 873\n    return !matched.length && (!global.navigator || key !== 'onerror');                                                // 874\n  });                                                                                                                  // 875\n}                                                                                                                      // 876\n                                                                                                                       // 877\n/**                                                                                                                    // 878\n * Array of globals dependent on the environment.                                                                      // 879\n *                                                                                                                     // 880\n * @return {Array}                                                                                                     // 881\n * @api private                                                                                                        // 882\n */                                                                                                                    // 883\nfunction extraGlobals() {                                                                                              // 884\n  if (typeof process === 'object' && typeof process.version === 'string') {                                            // 885\n    var parts = process.version.split('.');                                                                            // 886\n    var nodeVersion = utils.reduce(parts, function(a, v) {                                                             // 887\n      return a << 8 | v;                                                                                               // 888\n    });                                                                                                                // 889\n                                                                                                                       // 890\n    // 'errno' was renamed to process._errno in v0.9.11.                                                               // 891\n                                                                                                                       // 892\n    if (nodeVersion < 0x00090B) {                                                                                      // 893\n      return ['errno'];                                                                                                // 894\n    }                                                                                                                  // 895\n  }                                                                                                                    // 896\n                                                                                                                       // 897\n  return [];                                                                                                           // 898\n}                                                                                                                      // 899\n                                                                                                                       // 900\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"escape-string-regexp\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/escape-string-regexp/index.js        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;                                                                          // 3\n                                                                                                                       // 4\nmodule.exports = function (str) {                                                                                      // 5\n\tif (typeof str !== 'string') {                                                                                        // 6\n\t\tthrow new TypeError('Expected a string');                                                                            // 7\n\t}                                                                                                                     // 8\n                                                                                                                       // 9\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');                                                                        // 10\n};                                                                                                                     // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"diff\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/diff/package.json               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"diff\";                                                                                                 // 1\nexports.version = \"1.4.0\";                                                                                             // 2\nexports.main = \"./diff\";                                                                                               // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"diff.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/diff/diff.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* See LICENSE file for terms of use */                                                                                // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Text diff implementation.                                                                                           // 4\n *                                                                                                                     // 5\n * This library supports the following APIS:                                                                           // 6\n * JsDiff.diffChars: Character by character diff                                                                       // 7\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace                                       // 8\n * JsDiff.diffLines: Line based diff                                                                                   // 9\n *                                                                                                                     // 10\n * JsDiff.diffCss: Diff targeted at CSS content                                                                        // 11\n *                                                                                                                     // 12\n * These methods are based on the implementation proposed in                                                           // 13\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).                                                   // 14\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927                                                      // 15\n */                                                                                                                    // 16\n(function(global, undefined) {                                                                                         // 17\n  var objectPrototypeToString = Object.prototype.toString;                                                             // 18\n                                                                                                                       // 19\n  /*istanbul ignore next*/                                                                                             // 20\n  function map(arr, mapper, that) {                                                                                    // 21\n    if (Array.prototype.map) {                                                                                         // 22\n      return Array.prototype.map.call(arr, mapper, that);                                                              // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    var other = new Array(arr.length);                                                                                 // 26\n                                                                                                                       // 27\n    for (var i = 0, n = arr.length; i < n; i++) {                                                                      // 28\n      other[i] = mapper.call(that, arr[i], i, arr);                                                                    // 29\n    }                                                                                                                  // 30\n    return other;                                                                                                      // 31\n  }                                                                                                                    // 32\n  function clonePath(path) {                                                                                           // 33\n    return { newPos: path.newPos, components: path.components.slice(0) };                                              // 34\n  }                                                                                                                    // 35\n  function removeEmpty(array) {                                                                                        // 36\n    var ret = [];                                                                                                      // 37\n    for (var i = 0; i < array.length; i++) {                                                                           // 38\n      if (array[i]) {                                                                                                  // 39\n        ret.push(array[i]);                                                                                            // 40\n      }                                                                                                                // 41\n    }                                                                                                                  // 42\n    return ret;                                                                                                        // 43\n  }                                                                                                                    // 44\n  function escapeHTML(s) {                                                                                             // 45\n    var n = s;                                                                                                         // 46\n    n = n.replace(/&/g, '&amp;');                                                                                      // 47\n    n = n.replace(/</g, '&lt;');                                                                                       // 48\n    n = n.replace(/>/g, '&gt;');                                                                                       // 49\n    n = n.replace(/\"/g, '&quot;');                                                                                     // 50\n                                                                                                                       // 51\n    return n;                                                                                                          // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  // This function handles the presence of circular references by bailing out when encountering an                     // 55\n  // object that is already on the \"stack\" of items being processed.                                                   // 56\n  function canonicalize(obj, stack, replacementStack) {                                                                // 57\n    stack = stack || [];                                                                                               // 58\n    replacementStack = replacementStack || [];                                                                         // 59\n                                                                                                                       // 60\n    var i;                                                                                                             // 61\n                                                                                                                       // 62\n    for (i = 0; i < stack.length; i += 1) {                                                                            // 63\n      if (stack[i] === obj) {                                                                                          // 64\n        return replacementStack[i];                                                                                    // 65\n      }                                                                                                                // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    var canonicalizedObj;                                                                                              // 69\n                                                                                                                       // 70\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {                                                      // 71\n      stack.push(obj);                                                                                                 // 72\n      canonicalizedObj = new Array(obj.length);                                                                        // 73\n      replacementStack.push(canonicalizedObj);                                                                         // 74\n      for (i = 0; i < obj.length; i += 1) {                                                                            // 75\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);                                           // 76\n      }                                                                                                                // 77\n      stack.pop();                                                                                                     // 78\n      replacementStack.pop();                                                                                          // 79\n    } else if (typeof obj === 'object' && obj !== null) {                                                              // 80\n      stack.push(obj);                                                                                                 // 81\n      canonicalizedObj = {};                                                                                           // 82\n      replacementStack.push(canonicalizedObj);                                                                         // 83\n      var sortedKeys = [],                                                                                             // 84\n          key;                                                                                                         // 85\n      for (key in obj) {                                                                                               // 86\n        sortedKeys.push(key);                                                                                          // 87\n      }                                                                                                                // 88\n      sortedKeys.sort();                                                                                               // 89\n      for (i = 0; i < sortedKeys.length; i += 1) {                                                                     // 90\n        key = sortedKeys[i];                                                                                           // 91\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);                                       // 92\n      }                                                                                                                // 93\n      stack.pop();                                                                                                     // 94\n      replacementStack.pop();                                                                                          // 95\n    } else {                                                                                                           // 96\n      canonicalizedObj = obj;                                                                                          // 97\n    }                                                                                                                  // 98\n    return canonicalizedObj;                                                                                           // 99\n  }                                                                                                                    // 100\n                                                                                                                       // 101\n  function buildValues(components, newString, oldString, useLongestToken) {                                            // 102\n    var componentPos = 0,                                                                                              // 103\n        componentLen = components.length,                                                                              // 104\n        newPos = 0,                                                                                                    // 105\n        oldPos = 0;                                                                                                    // 106\n                                                                                                                       // 107\n    for (; componentPos < componentLen; componentPos++) {                                                              // 108\n      var component = components[componentPos];                                                                        // 109\n      if (!component.removed) {                                                                                        // 110\n        if (!component.added && useLongestToken) {                                                                     // 111\n          var value = newString.slice(newPos, newPos + component.count);                                               // 112\n          value = map(value, function(value, i) {                                                                      // 113\n            var oldValue = oldString[oldPos + i];                                                                      // 114\n            return oldValue.length > value.length ? oldValue : value;                                                  // 115\n          });                                                                                                          // 116\n                                                                                                                       // 117\n          component.value = value.join('');                                                                            // 118\n        } else {                                                                                                       // 119\n          component.value = newString.slice(newPos, newPos + component.count).join('');                                // 120\n        }                                                                                                              // 121\n        newPos += component.count;                                                                                     // 122\n                                                                                                                       // 123\n        // Common case                                                                                                 // 124\n        if (!component.added) {                                                                                        // 125\n          oldPos += component.count;                                                                                   // 126\n        }                                                                                                              // 127\n      } else {                                                                                                         // 128\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');                                  // 129\n        oldPos += component.count;                                                                                     // 130\n                                                                                                                       // 131\n        // Reverse add and remove so removes are output first to match common convention                               // 132\n        // The diffing algorithm is tied to add then remove output and this is the simplest                            // 133\n        // route to get the desired output with minimal overhead.                                                      // 134\n        if (componentPos && components[componentPos - 1].added) {                                                      // 135\n          var tmp = components[componentPos - 1];                                                                      // 136\n          components[componentPos - 1] = components[componentPos];                                                     // 137\n          components[componentPos] = tmp;                                                                              // 138\n        }                                                                                                              // 139\n      }                                                                                                                // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    return components;                                                                                                 // 143\n  }                                                                                                                    // 144\n                                                                                                                       // 145\n  function Diff(ignoreWhitespace) {                                                                                    // 146\n    this.ignoreWhitespace = ignoreWhitespace;                                                                          // 147\n  }                                                                                                                    // 148\n  Diff.prototype = {                                                                                                   // 149\n    diff: function(oldString, newString, callback) {                                                                   // 150\n      var self = this;                                                                                                 // 151\n                                                                                                                       // 152\n      function done(value) {                                                                                           // 153\n        if (callback) {                                                                                                // 154\n          setTimeout(function() { callback(undefined, value); }, 0);                                                   // 155\n          return true;                                                                                                 // 156\n        } else {                                                                                                       // 157\n          return value;                                                                                                // 158\n        }                                                                                                              // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n      // Handle the identity case (this is due to unrolling editLength == 0                                            // 162\n      if (newString === oldString) {                                                                                   // 163\n        return done([{ value: newString }]);                                                                           // 164\n      }                                                                                                                // 165\n      if (!newString) {                                                                                                // 166\n        return done([{ value: oldString, removed: true }]);                                                            // 167\n      }                                                                                                                // 168\n      if (!oldString) {                                                                                                // 169\n        return done([{ value: newString, added: true }]);                                                              // 170\n      }                                                                                                                // 171\n                                                                                                                       // 172\n      newString = this.tokenize(newString);                                                                            // 173\n      oldString = this.tokenize(oldString);                                                                            // 174\n                                                                                                                       // 175\n      var newLen = newString.length, oldLen = oldString.length;                                                        // 176\n      var editLength = 1;                                                                                              // 177\n      var maxEditLength = newLen + oldLen;                                                                             // 178\n      var bestPath = [{ newPos: -1, components: [] }];                                                                 // 179\n                                                                                                                       // 180\n      // Seed editLength = 0, i.e. the content starts with the same values                                             // 181\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);                                           // 182\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                  // 183\n        // Identity per the equality and tokenizer                                                                     // 184\n        return done([{value: newString.join('')}]);                                                                    // 185\n      }                                                                                                                // 186\n                                                                                                                       // 187\n      // Main worker method. checks all permutations of a given edit length for acceptance.                            // 188\n      function execEditLength() {                                                                                      // 189\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {                      // 190\n          var basePath;                                                                                                // 191\n          var addPath = bestPath[diagonalPath - 1],                                                                    // 192\n              removePath = bestPath[diagonalPath + 1],                                                                 // 193\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;                                            // 194\n          if (addPath) {                                                                                               // 195\n            // No one else is going to attempt to use this value, clear it                                             // 196\n            bestPath[diagonalPath - 1] = undefined;                                                                    // 197\n          }                                                                                                            // 198\n                                                                                                                       // 199\n          var canAdd = addPath && addPath.newPos + 1 < newLen,                                                         // 200\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;                                                // 201\n          if (!canAdd && !canRemove) {                                                                                 // 202\n            // If this path is a terminal then prune                                                                   // 203\n            bestPath[diagonalPath] = undefined;                                                                        // 204\n            continue;                                                                                                  // 205\n          }                                                                                                            // 206\n                                                                                                                       // 207\n          // Select the diagonal that we want to branch from. We select the prior                                      // 208\n          // path whose position in the new string is the farthest from the origin                                     // 209\n          // and does not pass the bounds of the diff graph                                                            // 210\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {                                          // 211\n            basePath = clonePath(removePath);                                                                          // 212\n            self.pushComponent(basePath.components, undefined, true);                                                  // 213\n          } else {                                                                                                     // 214\n            basePath = addPath;   // No need to clone, we've pulled it from the list                                   // 215\n            basePath.newPos++;                                                                                         // 216\n            self.pushComponent(basePath.components, true, undefined);                                                  // 217\n          }                                                                                                            // 218\n                                                                                                                       // 219\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);                                   // 220\n                                                                                                                       // 221\n          // If we have hit the end of both strings, then we are done                                                  // 222\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {                                                 // 223\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));                 // 224\n          } else {                                                                                                     // 225\n            // Otherwise track this path as a potential candidate and continue.                                        // 226\n            bestPath[diagonalPath] = basePath;                                                                         // 227\n          }                                                                                                            // 228\n        }                                                                                                              // 229\n                                                                                                                       // 230\n        editLength++;                                                                                                  // 231\n      }                                                                                                                // 232\n                                                                                                                       // 233\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the                              // 234\n      // sync and async mode which is never fun. Loops over execEditLength until a value                               // 235\n      // is produced.                                                                                                  // 236\n      if (callback) {                                                                                                  // 237\n        (function exec() {                                                                                             // 238\n          setTimeout(function() {                                                                                      // 239\n            // This should not happen, but we want to be safe.                                                         // 240\n            /*istanbul ignore next */                                                                                  // 241\n            if (editLength > maxEditLength) {                                                                          // 242\n              return callback();                                                                                       // 243\n            }                                                                                                          // 244\n                                                                                                                       // 245\n            if (!execEditLength()) {                                                                                   // 246\n              exec();                                                                                                  // 247\n            }                                                                                                          // 248\n          }, 0);                                                                                                       // 249\n        }());                                                                                                          // 250\n      } else {                                                                                                         // 251\n        while (editLength <= maxEditLength) {                                                                          // 252\n          var ret = execEditLength();                                                                                  // 253\n          if (ret) {                                                                                                   // 254\n            return ret;                                                                                                // 255\n          }                                                                                                            // 256\n        }                                                                                                              // 257\n      }                                                                                                                // 258\n    },                                                                                                                 // 259\n                                                                                                                       // 260\n    pushComponent: function(components, added, removed) {                                                              // 261\n      var last = components[components.length - 1];                                                                    // 262\n      if (last && last.added === added && last.removed === removed) {                                                  // 263\n        // We need to clone here as the component clone operation is just                                              // 264\n        // as shallow array clone                                                                                      // 265\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };                  // 266\n      } else {                                                                                                         // 267\n        components.push({count: 1, added: added, removed: removed });                                                  // 268\n      }                                                                                                                // 269\n    },                                                                                                                 // 270\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {                                            // 271\n      var newLen = newString.length,                                                                                   // 272\n          oldLen = oldString.length,                                                                                   // 273\n          newPos = basePath.newPos,                                                                                    // 274\n          oldPos = newPos - diagonalPath,                                                                              // 275\n                                                                                                                       // 276\n          commonCount = 0;                                                                                             // 277\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;                                                                                                      // 279\n        oldPos++;                                                                                                      // 280\n        commonCount++;                                                                                                 // 281\n      }                                                                                                                // 282\n                                                                                                                       // 283\n      if (commonCount) {                                                                                               // 284\n        basePath.components.push({count: commonCount});                                                                // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      basePath.newPos = newPos;                                                                                        // 288\n      return oldPos;                                                                                                   // 289\n    },                                                                                                                 // 290\n                                                                                                                       // 291\n    equals: function(left, right) {                                                                                    // 292\n      var reWhitespace = /\\S/;                                                                                         // 293\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));       // 294\n    },                                                                                                                 // 295\n    tokenize: function(value) {                                                                                        // 296\n      return value.split('');                                                                                          // 297\n    }                                                                                                                  // 298\n  };                                                                                                                   // 299\n                                                                                                                       // 300\n  var CharDiff = new Diff();                                                                                           // 301\n                                                                                                                       // 302\n  var WordDiff = new Diff(true);                                                                                       // 303\n  var WordWithSpaceDiff = new Diff();                                                                                  // 304\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {                                                   // 305\n    return removeEmpty(value.split(/(\\s+|\\b)/));                                                                       // 306\n  };                                                                                                                   // 307\n                                                                                                                       // 308\n  var CssDiff = new Diff(true);                                                                                        // 309\n  CssDiff.tokenize = function(value) {                                                                                 // 310\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));                                                                  // 311\n  };                                                                                                                   // 312\n                                                                                                                       // 313\n  var LineDiff = new Diff();                                                                                           // 314\n                                                                                                                       // 315\n  var TrimmedLineDiff = new Diff();                                                                                    // 316\n  TrimmedLineDiff.ignoreTrim = true;                                                                                   // 317\n                                                                                                                       // 318\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {                                                     // 319\n    var retLines = [],                                                                                                 // 320\n        lines = value.split(/^/m);                                                                                     // 321\n    for (var i = 0; i < lines.length; i++) {                                                                           // 322\n      var line = lines[i],                                                                                             // 323\n          lastLine = lines[i - 1],                                                                                     // 324\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];                                                // 325\n                                                                                                                       // 326\n      // Merge lines that may contain windows new lines                                                                // 327\n      if (line === '\\n' && lastLineLastChar === '\\r') {                                                                // 328\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';                         // 329\n      } else {                                                                                                         // 330\n        if (this.ignoreTrim) {                                                                                         // 331\n          line = line.trim();                                                                                          // 332\n          // add a newline unless this is the last line.                                                               // 333\n          if (i < lines.length - 1) {                                                                                  // 334\n            line += '\\n';                                                                                              // 335\n          }                                                                                                            // 336\n        }                                                                                                              // 337\n        retLines.push(line);                                                                                           // 338\n      }                                                                                                                // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    return retLines;                                                                                                   // 342\n  };                                                                                                                   // 343\n                                                                                                                       // 344\n  var PatchDiff = new Diff();                                                                                          // 345\n  PatchDiff.tokenize = function(value) {                                                                               // 346\n    var ret = [],                                                                                                      // 347\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);                                                                   // 348\n                                                                                                                       // 349\n    // Ignore the final empty token that occurs if the string ends with a new line                                     // 350\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {                                                              // 351\n      linesAndNewlines.pop();                                                                                          // 352\n    }                                                                                                                  // 353\n                                                                                                                       // 354\n    // Merge the content and line separators into single tokens                                                        // 355\n    for (var i = 0; i < linesAndNewlines.length; i++) {                                                                // 356\n      var line = linesAndNewlines[i];                                                                                  // 357\n                                                                                                                       // 358\n      if (i % 2) {                                                                                                     // 359\n        ret[ret.length - 1] += line;                                                                                   // 360\n      } else {                                                                                                         // 361\n        ret.push(line);                                                                                                // 362\n      }                                                                                                                // 363\n    }                                                                                                                  // 364\n    return ret;                                                                                                        // 365\n  };                                                                                                                   // 366\n                                                                                                                       // 367\n  var SentenceDiff = new Diff();                                                                                       // 368\n  SentenceDiff.tokenize = function(value) {                                                                            // 369\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));                                                          // 370\n  };                                                                                                                   // 371\n                                                                                                                       // 372\n  var JsonDiff = new Diff();                                                                                           // 373\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a                         // 374\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:            // 375\n  JsonDiff.useLongestToken = true;                                                                                     // 376\n  JsonDiff.tokenize = LineDiff.tokenize;                                                                               // 377\n  JsonDiff.equals = function(left, right) {                                                                            // 378\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));                       // 379\n  };                                                                                                                   // 380\n                                                                                                                       // 381\n  var JsDiff = {                                                                                                       // 382\n    Diff: Diff,                                                                                                        // 383\n                                                                                                                       // 384\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },                 // 385\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },                 // 386\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },                 // 388\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },   // 389\n                                                                                                                       // 390\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },         // 391\n                                                                                                                       // 392\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },                    // 393\n    diffJson: function(oldObj, newObj, callback) {                                                                     // 394\n      return JsonDiff.diff(                                                                                            // 395\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),                   // 396\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),                   // 397\n        callback                                                                                                       // 398\n      );                                                                                                               // 399\n    },                                                                                                                 // 400\n                                                                                                                       // 401\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {                    // 402\n      var ret = [];                                                                                                    // 403\n                                                                                                                       // 404\n      if (oldFileName == newFileName) {                                                                                // 405\n        ret.push('Index: ' + oldFileName);                                                                             // 406\n      }                                                                                                                // 407\n      ret.push('===================================================================');                                 // 408\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));                     // 409\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));                     // 410\n                                                                                                                       // 411\n      var diff = PatchDiff.diff(oldStr, newStr);                                                                       // 412\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier                             // 413\n                                                                                                                       // 414\n      // Formats a given set of lines for printing as context lines in a patch                                         // 415\n      function contextLines(lines) {                                                                                   // 416\n        return map(lines, function(entry) { return ' ' + entry; });                                                    // 417\n      }                                                                                                                // 418\n                                                                                                                       // 419\n      // Outputs the no newline at end of file warning if needed                                                       // 420\n      function eofNL(curRange, i, current) {                                                                           // 421\n        var last = diff[diff.length - 2],                                                                              // 422\n            isLast = i === diff.length - 2,                                                                            // 423\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;                                      // 424\n                                                                                                                       // 425\n        // Figure out if this is the last line for the given file and missing NL                                       // 426\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {                                                // 427\n          curRange.push('\\\\ No newline at end of file');                                                               // 428\n        }                                                                                                              // 429\n      }                                                                                                                // 430\n                                                                                                                       // 431\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],                                                         // 432\n          oldLine = 1, newLine = 1;                                                                                    // 433\n      for (var i = 0; i < diff.length; i++) {                                                                          // 434\n        var current = diff[i],                                                                                         // 435\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');                                     // 436\n        current.lines = lines;                                                                                         // 437\n                                                                                                                       // 438\n        if (current.added || current.removed) {                                                                        // 439\n          // If we have previous context, start with that                                                              // 440\n          if (!oldRangeStart) {                                                                                        // 441\n            var prev = diff[i - 1];                                                                                    // 442\n            oldRangeStart = oldLine;                                                                                   // 443\n            newRangeStart = newLine;                                                                                   // 444\n                                                                                                                       // 445\n            if (prev) {                                                                                                // 446\n              curRange = contextLines(prev.lines.slice(-4));                                                           // 447\n              oldRangeStart -= curRange.length;                                                                        // 448\n              newRangeStart -= curRange.length;                                                                        // 449\n            }                                                                                                          // 450\n          }                                                                                                            // 451\n                                                                                                                       // 452\n          // Output our changes                                                                                        // 453\n          curRange.push.apply(curRange, map(lines, function(entry) {                                                   // 454\n            return (current.added ? '+' : '-') + entry;                                                                // 455\n          }));                                                                                                         // 456\n          eofNL(curRange, i, current);                                                                                 // 457\n                                                                                                                       // 458\n          // Track the updated file position                                                                           // 459\n          if (current.added) {                                                                                         // 460\n            newLine += lines.length;                                                                                   // 461\n          } else {                                                                                                     // 462\n            oldLine += lines.length;                                                                                   // 463\n          }                                                                                                            // 464\n        } else {                                                                                                       // 465\n          // Identical context lines. Track line changes                                                               // 466\n          if (oldRangeStart) {                                                                                         // 467\n            // Close out any changes that have been output (or join overlapping)                                       // 468\n            if (lines.length <= 8 && i < diff.length - 2) {                                                            // 469\n              // Overlapping                                                                                           // 470\n              curRange.push.apply(curRange, contextLines(lines));                                                      // 471\n            } else {                                                                                                   // 472\n              // end the range and output                                                                              // 473\n              var contextSize = Math.min(lines.length, 4);                                                             // 474\n              ret.push(                                                                                                // 475\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)                               // 476\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)                               // 477\n                  + ' @@');                                                                                            // 478\n              ret.push.apply(ret, curRange);                                                                           // 479\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));                                          // 480\n              if (lines.length <= 4) {                                                                                 // 481\n                eofNL(ret, i, current);                                                                                // 482\n              }                                                                                                        // 483\n                                                                                                                       // 484\n              oldRangeStart = 0;                                                                                       // 485\n              newRangeStart = 0;                                                                                       // 486\n              curRange = [];                                                                                           // 487\n            }                                                                                                          // 488\n          }                                                                                                            // 489\n          oldLine += lines.length;                                                                                     // 490\n          newLine += lines.length;                                                                                     // 491\n        }                                                                                                              // 492\n      }                                                                                                                // 493\n                                                                                                                       // 494\n      return ret.join('\\n') + '\\n';                                                                                    // 495\n    },                                                                                                                 // 496\n                                                                                                                       // 497\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {                                            // 498\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);                     // 499\n    },                                                                                                                 // 500\n                                                                                                                       // 501\n    applyPatch: function(oldStr, uniDiff) {                                                                            // 502\n      var diffstr = uniDiff.split('\\n'),                                                                               // 503\n          hunks = [],                                                                                                  // 504\n          i = 0,                                                                                                       // 505\n          remEOFNL = false,                                                                                            // 506\n          addEOFNL = false;                                                                                            // 507\n                                                                                                                       // 508\n      // Skip to the first change hunk                                                                                 // 509\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {                                                        // 510\n        i++;                                                                                                           // 511\n      }                                                                                                                // 512\n                                                                                                                       // 513\n      // Parse the unified diff                                                                                        // 514\n      for (; i < diffstr.length; i++) {                                                                                // 515\n        if (diffstr[i][0] === '@') {                                                                                   // 516\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);                                      // 517\n          hunks.unshift({                                                                                              // 518\n            start: chnukHeader[3],                                                                                     // 519\n            oldlength: +chnukHeader[2],                                                                                // 520\n            removed: [],                                                                                               // 521\n            newlength: chnukHeader[4],                                                                                 // 522\n            added: []                                                                                                  // 523\n          });                                                                                                          // 524\n        } else if (diffstr[i][0] === '+') {                                                                            // 525\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 526\n        } else if (diffstr[i][0] === '-') {                                                                            // 527\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 528\n        } else if (diffstr[i][0] === ' ') {                                                                            // 529\n          hunks[0].added.push(diffstr[i].substr(1));                                                                   // 530\n          hunks[0].removed.push(diffstr[i].substr(1));                                                                 // 531\n        } else if (diffstr[i][0] === '\\\\') {                                                                           // 532\n          if (diffstr[i - 1][0] === '+') {                                                                             // 533\n            remEOFNL = true;                                                                                           // 534\n          } else if (diffstr[i - 1][0] === '-') {                                                                      // 535\n            addEOFNL = true;                                                                                           // 536\n          }                                                                                                            // 537\n        }                                                                                                              // 538\n      }                                                                                                                // 539\n                                                                                                                       // 540\n      // Apply the diff to the input                                                                                   // 541\n      var lines = oldStr.split('\\n');                                                                                  // 542\n      for (i = hunks.length - 1; i >= 0; i--) {                                                                        // 543\n        var hunk = hunks[i];                                                                                           // 544\n        // Sanity check the input string. Bail if we don't match.                                                      // 545\n        for (var j = 0; j < hunk.oldlength; j++) {                                                                     // 546\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {                                                         // 547\n            return false;                                                                                              // 548\n          }                                                                                                            // 549\n        }                                                                                                              // 550\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));                      // 551\n      }                                                                                                                // 552\n                                                                                                                       // 553\n      // Handle EOFNL insertion/removal                                                                                // 554\n      if (remEOFNL) {                                                                                                  // 555\n        while (!lines[lines.length - 1]) {                                                                             // 556\n          lines.pop();                                                                                                 // 557\n        }                                                                                                              // 558\n      } else if (addEOFNL) {                                                                                           // 559\n        lines.push('');                                                                                                // 560\n      }                                                                                                                // 561\n      return lines.join('\\n');                                                                                         // 562\n    },                                                                                                                 // 563\n                                                                                                                       // 564\n    convertChangesToXML: function(changes) {                                                                           // 565\n      var ret = [];                                                                                                    // 566\n      for (var i = 0; i < changes.length; i++) {                                                                       // 567\n        var change = changes[i];                                                                                       // 568\n        if (change.added) {                                                                                            // 569\n          ret.push('<ins>');                                                                                           // 570\n        } else if (change.removed) {                                                                                   // 571\n          ret.push('<del>');                                                                                           // 572\n        }                                                                                                              // 573\n                                                                                                                       // 574\n        ret.push(escapeHTML(change.value));                                                                            // 575\n                                                                                                                       // 576\n        if (change.added) {                                                                                            // 577\n          ret.push('</ins>');                                                                                          // 578\n        } else if (change.removed) {                                                                                   // 579\n          ret.push('</del>');                                                                                          // 580\n        }                                                                                                              // 581\n      }                                                                                                                // 582\n      return ret.join('');                                                                                             // 583\n    },                                                                                                                 // 584\n                                                                                                                       // 585\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API                                                  // 586\n    convertChangesToDMP: function(changes) {                                                                           // 587\n      var ret = [],                                                                                                    // 588\n          change,                                                                                                      // 589\n          operation;                                                                                                   // 590\n      for (var i = 0; i < changes.length; i++) {                                                                       // 591\n        change = changes[i];                                                                                           // 592\n        if (change.added) {                                                                                            // 593\n          operation = 1;                                                                                               // 594\n        } else if (change.removed) {                                                                                   // 595\n          operation = -1;                                                                                              // 596\n        } else {                                                                                                       // 597\n          operation = 0;                                                                                               // 598\n        }                                                                                                              // 599\n                                                                                                                       // 600\n        ret.push([operation, change.value]);                                                                           // 601\n      }                                                                                                                // 602\n      return ret;                                                                                                      // 603\n    },                                                                                                                 // 604\n                                                                                                                       // 605\n    canonicalize: canonicalize                                                                                         // 606\n  };                                                                                                                   // 607\n                                                                                                                       // 608\n  /*istanbul ignore next */                                                                                            // 609\n  /*global module */                                                                                                   // 610\n  if (typeof module !== 'undefined' && module.exports) {                                                               // 611\n    module.exports = JsDiff;                                                                                           // 612\n  } else if (typeof define === 'function' && define.amd) {                                                             // 613\n    /*global define */                                                                                                 // 614\n    define([], function() { return JsDiff; });                                                                         // 615\n  } else if (typeof global.JsDiff === 'undefined') {                                                                   // 616\n    global.JsDiff = JsDiff;                                                                                            // 617\n  }                                                                                                                    // 618\n}(this));                                                                                                              // 619\n                                                                                                                       // 620\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"debug\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/debug/package.json              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"debug\";                                                                                                // 1\nexports.version = \"2.2.0\";                                                                                             // 2\nexports.browser = \"./browser.js\";                                                                                      // 3\nexports.main = \"./node.js\";                                                                                            // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/debug/browser.js                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the web browser implementation of `debug()`.                                                                // 3\n *                                                                                                                     // 4\n * Expose `debug()` as the module.                                                                                     // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nexports = module.exports = require('./debug');                                                                         // 8\nexports.log = log;                                                                                                     // 9\nexports.formatArgs = formatArgs;                                                                                       // 10\nexports.save = save;                                                                                                   // 11\nexports.load = load;                                                                                                   // 12\nexports.useColors = useColors;                                                                                         // 13\nexports.storage = 'undefined' != typeof chrome                                                                         // 14\n               && 'undefined' != typeof chrome.storage                                                                 // 15\n                  ? chrome.storage.local                                                                               // 16\n                  : localstorage();                                                                                    // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Colors.                                                                                                             // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nexports.colors = [                                                                                                     // 23\n  'lightseagreen',                                                                                                     // 24\n  'forestgreen',                                                                                                       // 25\n  'goldenrod',                                                                                                         // 26\n  'dodgerblue',                                                                                                        // 27\n  'darkorchid',                                                                                                        // 28\n  'crimson'                                                                                                            // 29\n];                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,                                                         // 33\n * and the Firebug extension (any Firefox version) are known                                                           // 34\n * to support \"%c\" CSS customizations.                                                                                 // 35\n *                                                                                                                     // 36\n * TODO: add a `localStorage` variable to explicitly enable/disable colors                                             // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction useColors() {                                                                                                 // 40\n  // is webkit? http://stackoverflow.com/a/16459606/376773                                                             // 41\n  return ('WebkitAppearance' in document.documentElement.style) ||                                                     // 42\n    // is firebug? http://stackoverflow.com/a/398120/376773                                                            // 43\n    (window.console && (console.firebug || (console.exception && console.table))) ||                                   // 44\n    // is firefox >= v31?                                                                                              // 45\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages                                     // 46\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);                      // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.                                           // 51\n */                                                                                                                    // 52\n                                                                                                                       // 53\nexports.formatters.j = function(v) {                                                                                   // 54\n  return JSON.stringify(v);                                                                                            // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Colorize log arguments if enabled.                                                                                  // 60\n *                                                                                                                     // 61\n * @api public                                                                                                         // 62\n */                                                                                                                    // 63\n                                                                                                                       // 64\nfunction formatArgs() {                                                                                                // 65\n  var args = arguments;                                                                                                // 66\n  var useColors = this.useColors;                                                                                      // 67\n                                                                                                                       // 68\n  args[0] = (useColors ? '%c' : '')                                                                                    // 69\n    + this.namespace                                                                                                   // 70\n    + (useColors ? ' %c' : ' ')                                                                                        // 71\n    + args[0]                                                                                                          // 72\n    + (useColors ? '%c ' : ' ')                                                                                        // 73\n    + '+' + exports.humanize(this.diff);                                                                               // 74\n                                                                                                                       // 75\n  if (!useColors) return args;                                                                                         // 76\n                                                                                                                       // 77\n  var c = 'color: ' + this.color;                                                                                      // 78\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));                                   // 79\n                                                                                                                       // 80\n  // the final \"%c\" is somewhat tricky, because there could be other                                                   // 81\n  // arguments passed either before or after the %c, so we need to                                                     // 82\n  // figure out the correct index to insert the CSS into                                                               // 83\n  var index = 0;                                                                                                       // 84\n  var lastC = 0;                                                                                                       // 85\n  args[0].replace(/%[a-z%]/g, function(match) {                                                                        // 86\n    if ('%%' === match) return;                                                                                        // 87\n    index++;                                                                                                           // 88\n    if ('%c' === match) {                                                                                              // 89\n      // we only are interested in the *last* %c                                                                       // 90\n      // (the user may have provided their own)                                                                        // 91\n      lastC = index;                                                                                                   // 92\n    }                                                                                                                  // 93\n  });                                                                                                                  // 94\n                                                                                                                       // 95\n  args.splice(lastC, 0, c);                                                                                            // 96\n  return args;                                                                                                         // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * Invokes `console.log()` when available.                                                                             // 101\n * No-op when `console.log` is not a \"function\".                                                                       // 102\n *                                                                                                                     // 103\n * @api public                                                                                                         // 104\n */                                                                                                                    // 105\n                                                                                                                       // 106\nfunction log() {                                                                                                       // 107\n  // this hackery is required for IE8/9, where                                                                         // 108\n  // the `console.log` function doesn't have 'apply'                                                                   // 109\n  return 'object' === typeof console                                                                                   // 110\n    && console.log                                                                                                     // 111\n    && Function.prototype.apply.call(console.log, console, arguments);                                                 // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * Save `namespaces`.                                                                                                  // 116\n *                                                                                                                     // 117\n * @param {String} namespaces                                                                                          // 118\n * @api private                                                                                                        // 119\n */                                                                                                                    // 120\n                                                                                                                       // 121\nfunction save(namespaces) {                                                                                            // 122\n  try {                                                                                                                // 123\n    if (null == namespaces) {                                                                                          // 124\n      exports.storage.removeItem('debug');                                                                             // 125\n    } else {                                                                                                           // 126\n      exports.storage.debug = namespaces;                                                                              // 127\n    }                                                                                                                  // 128\n  } catch(e) {}                                                                                                        // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\n/**                                                                                                                    // 132\n * Load `namespaces`.                                                                                                  // 133\n *                                                                                                                     // 134\n * @return {String} returns the previously persisted debug modes                                                       // 135\n * @api private                                                                                                        // 136\n */                                                                                                                    // 137\n                                                                                                                       // 138\nfunction load() {                                                                                                      // 139\n  var r;                                                                                                               // 140\n  try {                                                                                                                // 141\n    r = exports.storage.debug;                                                                                         // 142\n  } catch(e) {}                                                                                                        // 143\n  return r;                                                                                                            // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * Enable namespaces listed in `localStorage.debug` initially.                                                         // 148\n */                                                                                                                    // 149\n                                                                                                                       // 150\nexports.enable(load());                                                                                                // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Localstorage attempts to return the localstorage.                                                                   // 154\n *                                                                                                                     // 155\n * This is necessary because safari throws                                                                             // 156\n * when a user disables cookies/localstorage                                                                           // 157\n * and you attempt to access it.                                                                                       // 158\n *                                                                                                                     // 159\n * @return {LocalStorage}                                                                                              // 160\n * @api private                                                                                                        // 161\n */                                                                                                                    // 162\n                                                                                                                       // 163\nfunction localstorage(){                                                                                               // 164\n  try {                                                                                                                // 165\n    return window.localStorage;                                                                                        // 166\n  } catch (e) {}                                                                                                       // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"debug.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/debug/debug.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the common logic for both the Node.js and web browser                                                       // 3\n * implementations of `debug()`.                                                                                       // 4\n *                                                                                                                     // 5\n * Expose `debug()` as the module.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nexports = module.exports = debug;                                                                                      // 9\nexports.coerce = coerce;                                                                                               // 10\nexports.disable = disable;                                                                                             // 11\nexports.enable = enable;                                                                                               // 12\nexports.enabled = enabled;                                                                                             // 13\nexports.humanize = require('ms');                                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * The currently active debug mode names, and names to skip.                                                           // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nexports.names = [];                                                                                                    // 20\nexports.skips = [];                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.                                            // 24\n *                                                                                                                     // 25\n * Valid key names are a single, lowercased letter, i.e. \"n\".                                                          // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports.formatters = {};                                                                                               // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Previously assigned color.                                                                                          // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar prevColor = 0;                                                                                                     // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Previous log timestamp.                                                                                             // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\nvar prevTime;                                                                                                          // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Select a color.                                                                                                     // 44\n *                                                                                                                     // 45\n * @return {Number}                                                                                                    // 46\n * @api private                                                                                                        // 47\n */                                                                                                                    // 48\n                                                                                                                       // 49\nfunction selectColor() {                                                                                               // 50\n  return exports.colors[prevColor++ % exports.colors.length];                                                          // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Create a debugger with the given `namespace`.                                                                       // 55\n *                                                                                                                     // 56\n * @param {String} namespace                                                                                           // 57\n * @return {Function}                                                                                                  // 58\n * @api public                                                                                                         // 59\n */                                                                                                                    // 60\n                                                                                                                       // 61\nfunction debug(namespace) {                                                                                            // 62\n                                                                                                                       // 63\n  // define the `disabled` version                                                                                     // 64\n  function disabled() {                                                                                                // 65\n  }                                                                                                                    // 66\n  disabled.enabled = false;                                                                                            // 67\n                                                                                                                       // 68\n  // define the `enabled` version                                                                                      // 69\n  function enabled() {                                                                                                 // 70\n                                                                                                                       // 71\n    var self = enabled;                                                                                                // 72\n                                                                                                                       // 73\n    // set `diff` timestamp                                                                                            // 74\n    var curr = +new Date();                                                                                            // 75\n    var ms = curr - (prevTime || curr);                                                                                // 76\n    self.diff = ms;                                                                                                    // 77\n    self.prev = prevTime;                                                                                              // 78\n    self.curr = curr;                                                                                                  // 79\n    prevTime = curr;                                                                                                   // 80\n                                                                                                                       // 81\n    // add the `color` if not set                                                                                      // 82\n    if (null == self.useColors) self.useColors = exports.useColors();                                                  // 83\n    if (null == self.color && self.useColors) self.color = selectColor();                                              // 84\n                                                                                                                       // 85\n    var args = Array.prototype.slice.call(arguments);                                                                  // 86\n                                                                                                                       // 87\n    args[0] = exports.coerce(args[0]);                                                                                 // 88\n                                                                                                                       // 89\n    if ('string' !== typeof args[0]) {                                                                                 // 90\n      // anything else let's inspect with %o                                                                           // 91\n      args = ['%o'].concat(args);                                                                                      // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    // apply any `formatters` transformations                                                                          // 95\n    var index = 0;                                                                                                     // 96\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {                                                  // 97\n      // if we encounter an escaped % then don't increase the array index                                              // 98\n      if (match === '%%') return match;                                                                                // 99\n      index++;                                                                                                         // 100\n      var formatter = exports.formatters[format];                                                                      // 101\n      if ('function' === typeof formatter) {                                                                           // 102\n        var val = args[index];                                                                                         // 103\n        match = formatter.call(self, val);                                                                             // 104\n                                                                                                                       // 105\n        // now we need to remove `args[index]` since it's inlined in the `format`                                      // 106\n        args.splice(index, 1);                                                                                         // 107\n        index--;                                                                                                       // 108\n      }                                                                                                                // 109\n      return match;                                                                                                    // 110\n    });                                                                                                                // 111\n                                                                                                                       // 112\n    if ('function' === typeof exports.formatArgs) {                                                                    // 113\n      args = exports.formatArgs.apply(self, args);                                                                     // 114\n    }                                                                                                                  // 115\n    var logFn = enabled.log || exports.log || console.log.bind(console);                                               // 116\n    logFn.apply(self, args);                                                                                           // 117\n  }                                                                                                                    // 118\n  enabled.enabled = true;                                                                                              // 119\n                                                                                                                       // 120\n  var fn = exports.enabled(namespace) ? enabled : disabled;                                                            // 121\n                                                                                                                       // 122\n  fn.namespace = namespace;                                                                                            // 123\n                                                                                                                       // 124\n  return fn;                                                                                                           // 125\n}                                                                                                                      // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\n * Enables a debug mode by namespaces. This can include modes                                                          // 129\n * separated by a colon and wildcards.                                                                                 // 130\n *                                                                                                                     // 131\n * @param {String} namespaces                                                                                          // 132\n * @api public                                                                                                         // 133\n */                                                                                                                    // 134\n                                                                                                                       // 135\nfunction enable(namespaces) {                                                                                          // 136\n  exports.save(namespaces);                                                                                            // 137\n                                                                                                                       // 138\n  var split = (namespaces || '').split(/[\\s,]+/);                                                                      // 139\n  var len = split.length;                                                                                              // 140\n                                                                                                                       // 141\n  for (var i = 0; i < len; i++) {                                                                                      // 142\n    if (!split[i]) continue; // ignore empty strings                                                                   // 143\n    namespaces = split[i].replace(/\\*/g, '.*?');                                                                       // 144\n    if (namespaces[0] === '-') {                                                                                       // 145\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));                                                // 146\n    } else {                                                                                                           // 147\n      exports.names.push(new RegExp('^' + namespaces + '$'));                                                          // 148\n    }                                                                                                                  // 149\n  }                                                                                                                    // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Disable debug output.                                                                                               // 154\n *                                                                                                                     // 155\n * @api public                                                                                                         // 156\n */                                                                                                                    // 157\n                                                                                                                       // 158\nfunction disable() {                                                                                                   // 159\n  exports.enable('');                                                                                                  // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Returns true if the given mode name is enabled, false otherwise.                                                    // 164\n *                                                                                                                     // 165\n * @param {String} name                                                                                                // 166\n * @return {Boolean}                                                                                                   // 167\n * @api public                                                                                                         // 168\n */                                                                                                                    // 169\n                                                                                                                       // 170\nfunction enabled(name) {                                                                                               // 171\n  var i, len;                                                                                                          // 172\n  for (i = 0, len = exports.skips.length; i < len; i++) {                                                              // 173\n    if (exports.skips[i].test(name)) {                                                                                 // 174\n      return false;                                                                                                    // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n  for (i = 0, len = exports.names.length; i < len; i++) {                                                              // 178\n    if (exports.names[i].test(name)) {                                                                                 // 179\n      return true;                                                                                                     // 180\n    }                                                                                                                  // 181\n  }                                                                                                                    // 182\n  return false;                                                                                                        // 183\n}                                                                                                                      // 184\n                                                                                                                       // 185\n/**                                                                                                                    // 186\n * Coerce `val`.                                                                                                       // 187\n *                                                                                                                     // 188\n * @param {Mixed} val                                                                                                  // 189\n * @return {Mixed}                                                                                                     // 190\n * @api private                                                                                                        // 191\n */                                                                                                                    // 192\n                                                                                                                       // 193\nfunction coerce(val) {                                                                                                 // 194\n  if (val instanceof Error) return val.stack || val.message;                                                           // 195\n  return val;                                                                                                          // 196\n}                                                                                                                      // 197\n                                                                                                                       // 198\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"ms\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/debug/node_modules/ms/package.j //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ms\";                                                                                                   // 1\nexports.version = \"0.7.1\";                                                                                             // 2\nexports.main = \"./index\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/debug/node_modules/ms/index.js       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar s = 1000;                                                                                                          // 5\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25;                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Parse or format the given `val`.                                                                                    // 12\n *                                                                                                                     // 13\n * Options:                                                                                                            // 14\n *                                                                                                                     // 15\n *  - `long` verbose formatting [false]                                                                                // 16\n *                                                                                                                     // 17\n * @param {String|Number} val                                                                                          // 18\n * @param {Object} options                                                                                             // 19\n * @return {String|Number}                                                                                             // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nmodule.exports = function(val, options){                                                                               // 24\n  options = options || {};                                                                                             // 25\n  if ('string' == typeof val) return parse(val);                                                                       // 26\n  return options.long                                                                                                  // 27\n    ? long(val)                                                                                                        // 28\n    : short(val);                                                                                                      // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Parse the given `str` and return milliseconds.                                                                      // 33\n *                                                                                                                     // 34\n * @param {String} str                                                                                                 // 35\n * @return {Number}                                                                                                    // 36\n * @api private                                                                                                        // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction parse(str) {                                                                                                  // 40\n  str = '' + str;                                                                                                      // 41\n  if (str.length > 10000) return;                                                                                      // 42\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;                                                                                                  // 44\n  var n = parseFloat(match[1]);                                                                                        // 45\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 46\n  switch (type) {                                                                                                      // 47\n    case 'years':                                                                                                      // 48\n    case 'year':                                                                                                       // 49\n    case 'yrs':                                                                                                        // 50\n    case 'yr':                                                                                                         // 51\n    case 'y':                                                                                                          // 52\n      return n * y;                                                                                                    // 53\n    case 'days':                                                                                                       // 54\n    case 'day':                                                                                                        // 55\n    case 'd':                                                                                                          // 56\n      return n * d;                                                                                                    // 57\n    case 'hours':                                                                                                      // 58\n    case 'hour':                                                                                                       // 59\n    case 'hrs':                                                                                                        // 60\n    case 'hr':                                                                                                         // 61\n    case 'h':                                                                                                          // 62\n      return n * h;                                                                                                    // 63\n    case 'minutes':                                                                                                    // 64\n    case 'minute':                                                                                                     // 65\n    case 'mins':                                                                                                       // 66\n    case 'min':                                                                                                        // 67\n    case 'm':                                                                                                          // 68\n      return n * m;                                                                                                    // 69\n    case 'seconds':                                                                                                    // 70\n    case 'second':                                                                                                     // 71\n    case 'secs':                                                                                                       // 72\n    case 'sec':                                                                                                        // 73\n    case 's':                                                                                                          // 74\n      return n * s;                                                                                                    // 75\n    case 'milliseconds':                                                                                               // 76\n    case 'millisecond':                                                                                                // 77\n    case 'msecs':                                                                                                      // 78\n    case 'msec':                                                                                                       // 79\n    case 'ms':                                                                                                         // 80\n      return n;                                                                                                        // 81\n  }                                                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Short format for `ms`.                                                                                              // 86\n *                                                                                                                     // 87\n * @param {Number} ms                                                                                                  // 88\n * @return {String}                                                                                                    // 89\n * @api private                                                                                                        // 90\n */                                                                                                                    // 91\n                                                                                                                       // 92\nfunction short(ms) {                                                                                                   // 93\n  if (ms >= d) return Math.round(ms / d) + 'd';                                                                        // 94\n  if (ms >= h) return Math.round(ms / h) + 'h';                                                                        // 95\n  if (ms >= m) return Math.round(ms / m) + 'm';                                                                        // 96\n  if (ms >= s) return Math.round(ms / s) + 's';                                                                        // 97\n  return ms + 'ms';                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Long format for `ms`.                                                                                               // 102\n *                                                                                                                     // 103\n * @param {Number} ms                                                                                                  // 104\n * @return {String}                                                                                                    // 105\n * @api private                                                                                                        // 106\n */                                                                                                                    // 107\n                                                                                                                       // 108\nfunction long(ms) {                                                                                                    // 109\n  return plural(ms, d, 'day')                                                                                          // 110\n    || plural(ms, h, 'hour')                                                                                           // 111\n    || plural(ms, m, 'minute')                                                                                         // 112\n    || plural(ms, s, 'second')                                                                                         // 113\n    || ms + ' ms';                                                                                                     // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * Pluralization helper.                                                                                               // 118\n */                                                                                                                    // 119\n                                                                                                                       // 120\nfunction plural(ms, n, name) {                                                                                         // 121\n  if (ms < n) return;                                                                                                  // 122\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;                                                            // 123\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 124\n}                                                                                                                      // 125\n                                                                                                                       // 126\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"glob\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/package.json               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"glob\";                                                                                                 // 1\nexports.version = \"3.2.3\";                                                                                             // 2\nexports.main = \"glob.js\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"glob.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/glob.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Approach:                                                                                                           // 1\n//                                                                                                                     // 2\n// 1. Get the minimatch set                                                                                            // 3\n// 2. For each pattern in the set, PROCESS(pattern)                                                                    // 4\n// 3. Store matches per-set, then uniq them                                                                            // 5\n//                                                                                                                     // 6\n// PROCESS(pattern)                                                                                                    // 7\n// Get the first [n] items from pattern that are all strings                                                           // 8\n// Join these together.  This is PREFIX.                                                                               // 9\n//   If there is no more remaining, then stat(PREFIX) and                                                              // 10\n//   add to matches if it succeeds.  END.                                                                              // 11\n// readdir(PREFIX) as ENTRIES                                                                                          // 12\n//   If fails, END                                                                                                     // 13\n//   If pattern[n] is GLOBSTAR                                                                                         // 14\n//     // handle the case where the globstar match is empty                                                            // 15\n//     // by pruning it out, and testing the resulting pattern                                                         // 16\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $])                                                                      // 17\n//     // handle other cases.                                                                                          // 18\n//     for ENTRY in ENTRIES (not dotfiles)                                                                             // 19\n//       // attach globstar + tail onto the entry                                                                      // 20\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])                                                              // 21\n//                                                                                                                     // 22\n//   else // not globstar                                                                                              // 23\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)                                                   // 24\n//       Test ENTRY against pattern[n]                                                                                 // 25\n//       If fails, continue                                                                                            // 26\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])                                                  // 27\n//                                                                                                                     // 28\n// Caveat:                                                                                                             // 29\n//   Cache all stats and readdirs results to minimize syscall.  Since all                                              // 30\n//   we ever care about is existence and directory-ness, we can just keep                                              // 31\n//   `true` for files, and [children,...] for directories, or `false` for                                              // 32\n//   things that don't exist.                                                                                          // 33\n                                                                                                                       // 34\n                                                                                                                       // 35\n                                                                                                                       // 36\nmodule.exports = glob                                                                                                  // 37\n                                                                                                                       // 38\nvar fs = require(\"graceful-fs\")                                                                                        // 39\n, minimatch = require(\"minimatch\")                                                                                     // 40\n, Minimatch = minimatch.Minimatch                                                                                      // 41\n, inherits = require(\"inherits\")                                                                                       // 42\n, EE = require(\"events\").EventEmitter                                                                                  // 43\n, path = require(\"path\")                                                                                               // 44\n, isDir = {}                                                                                                           // 45\n, assert = require(\"assert\").ok                                                                                        // 46\n                                                                                                                       // 47\nfunction glob (pattern, options, cb) {                                                                                 // 48\n  if (typeof options === \"function\") cb = options, options = {}                                                        // 49\n  if (!options) options = {}                                                                                           // 50\n                                                                                                                       // 51\n  if (typeof options === \"number\") {                                                                                   // 52\n    deprecated()                                                                                                       // 53\n    return                                                                                                             // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  var g = new Glob(pattern, options, cb)                                                                               // 57\n  return g.sync ? g.found : g                                                                                          // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nglob.fnmatch = deprecated                                                                                              // 61\n                                                                                                                       // 62\nfunction deprecated () {                                                                                               // 63\n  throw new Error(\"glob's interface has changed. Please see the docs.\")                                                // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nglob.sync = globSync                                                                                                   // 67\nfunction globSync (pattern, options) {                                                                                 // 68\n  if (typeof options === \"number\") {                                                                                   // 69\n    deprecated()                                                                                                       // 70\n    return                                                                                                             // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  options = options || {}                                                                                              // 74\n  options.sync = true                                                                                                  // 75\n  return glob(pattern, options)                                                                                        // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\n                                                                                                                       // 79\nglob.Glob = Glob                                                                                                       // 80\ninherits(Glob, EE)                                                                                                     // 81\nfunction Glob (pattern, options, cb) {                                                                                 // 82\n  if (!(this instanceof Glob)) {                                                                                       // 83\n    return new Glob(pattern, options, cb)                                                                              // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  if (typeof cb === \"function\") {                                                                                      // 87\n    this.on(\"error\", cb)                                                                                               // 88\n    this.on(\"end\", function (matches) {                                                                                // 89\n      cb(null, matches)                                                                                                // 90\n    })                                                                                                                 // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  options = options || {}                                                                                              // 94\n                                                                                                                       // 95\n  this.EOF = {}                                                                                                        // 96\n  this._emitQueue = []                                                                                                 // 97\n                                                                                                                       // 98\n  this.maxDepth = options.maxDepth || 1000                                                                             // 99\n  this.maxLength = options.maxLength || Infinity                                                                       // 100\n  this.cache = options.cache || {}                                                                                     // 101\n  this.statCache = options.statCache || {}                                                                             // 102\n                                                                                                                       // 103\n  this.changedCwd = false                                                                                              // 104\n  var cwd = process.cwd()                                                                                              // 105\n  if (!options.hasOwnProperty(\"cwd\")) this.cwd = cwd                                                                   // 106\n  else {                                                                                                               // 107\n    this.cwd = options.cwd                                                                                             // 108\n    this.changedCwd = path.resolve(options.cwd) !== cwd                                                                // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  this.root = options.root || path.resolve(this.cwd, \"/\")                                                              // 112\n  this.root = path.resolve(this.root)                                                                                  // 113\n  if (process.platform === \"win32\")                                                                                    // 114\n    this.root = this.root.replace(/\\\\/g, \"/\")                                                                          // 115\n                                                                                                                       // 116\n  this.nomount = !!options.nomount                                                                                     // 117\n                                                                                                                       // 118\n  if (!pattern) {                                                                                                      // 119\n    throw new Error(\"must provide pattern\")                                                                            // 120\n  }                                                                                                                    // 121\n                                                                                                                       // 122\n  // base-matching: just use globstar for that.                                                                        // 123\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {                                                              // 124\n    if (options.noglobstar) {                                                                                          // 125\n      throw new Error(\"base matching requires globstar\")                                                               // 126\n    }                                                                                                                  // 127\n    pattern = \"**/\" + pattern                                                                                          // 128\n  }                                                                                                                    // 129\n                                                                                                                       // 130\n  this.strict = options.strict !== false                                                                               // 131\n  this.dot = !!options.dot                                                                                             // 132\n  this.mark = !!options.mark                                                                                           // 133\n  this.sync = !!options.sync                                                                                           // 134\n  this.nounique = !!options.nounique                                                                                   // 135\n  this.nonull = !!options.nonull                                                                                       // 136\n  this.nosort = !!options.nosort                                                                                       // 137\n  this.nocase = !!options.nocase                                                                                       // 138\n  this.stat = !!options.stat                                                                                           // 139\n                                                                                                                       // 140\n  this.debug = !!options.debug || !!options.globDebug                                                                  // 141\n  if (this.debug)                                                                                                      // 142\n    this.log = console.error                                                                                           // 143\n                                                                                                                       // 144\n  this.silent = !!options.silent                                                                                       // 145\n                                                                                                                       // 146\n  var mm = this.minimatch = new Minimatch(pattern, options)                                                            // 147\n  this.options = mm.options                                                                                            // 148\n  pattern = this.pattern = mm.pattern                                                                                  // 149\n                                                                                                                       // 150\n  this.error = null                                                                                                    // 151\n  this.aborted = false                                                                                                 // 152\n                                                                                                                       // 153\n  // list of all the patterns that ** has resolved do, so                                                              // 154\n  // we can avoid visiting multiple times.                                                                             // 155\n  this._globstars = {}                                                                                                 // 156\n                                                                                                                       // 157\n  EE.call(this)                                                                                                        // 158\n                                                                                                                       // 159\n  // process each pattern in the minimatch set                                                                         // 160\n  var n = this.minimatch.set.length                                                                                    // 161\n                                                                                                                       // 162\n  // The matches are stored as {<filename>: true,...} so that                                                          // 163\n  // duplicates are automagically pruned.                                                                              // 164\n  // Later, we do an Object.keys() on these.                                                                           // 165\n  // Keep them as a list so we can fill in when nonull is set.                                                         // 166\n  this.matches = new Array(n)                                                                                          // 167\n                                                                                                                       // 168\n  this.minimatch.set.forEach(iterator.bind(this))                                                                      // 169\n  function iterator (pattern, i, set) {                                                                                // 170\n    this._process(pattern, 0, i, function (er) {                                                                       // 171\n      if (er) this.emit(\"error\", er)                                                                                   // 172\n      if (-- n <= 0) this._finish()                                                                                    // 173\n    })                                                                                                                 // 174\n  }                                                                                                                    // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nGlob.prototype.log = function () {}                                                                                    // 178\n                                                                                                                       // 179\nGlob.prototype._finish = function () {                                                                                 // 180\n  assert(this instanceof Glob)                                                                                         // 181\n                                                                                                                       // 182\n  var nou = this.nounique                                                                                              // 183\n  , all = nou ? [] : {}                                                                                                // 184\n                                                                                                                       // 185\n  for (var i = 0, l = this.matches.length; i < l; i ++) {                                                              // 186\n    var matches = this.matches[i]                                                                                      // 187\n    this.log(\"matches[%d] =\", i, matches)                                                                              // 188\n    // do like the shell, and spit out the literal glob                                                                // 189\n    if (!matches) {                                                                                                    // 190\n      if (this.nonull) {                                                                                               // 191\n        var literal = this.minimatch.globSet[i]                                                                        // 192\n        if (nou) all.push(literal)                                                                                     // 193\n        else all[literal] = true                                                                                       // 194\n      }                                                                                                                // 195\n    } else {                                                                                                           // 196\n      // had matches                                                                                                   // 197\n      var m = Object.keys(matches)                                                                                     // 198\n      if (nou) all.push.apply(all, m)                                                                                  // 199\n      else m.forEach(function (m) {                                                                                    // 200\n        all[m] = true                                                                                                  // 201\n      })                                                                                                               // 202\n    }                                                                                                                  // 203\n  }                                                                                                                    // 204\n                                                                                                                       // 205\n  if (!nou) all = Object.keys(all)                                                                                     // 206\n                                                                                                                       // 207\n  if (!this.nosort) {                                                                                                  // 208\n    all = all.sort(this.nocase ? alphasorti : alphasort)                                                               // 209\n  }                                                                                                                    // 210\n                                                                                                                       // 211\n  if (this.mark) {                                                                                                     // 212\n    // at *some* point we statted all of these                                                                         // 213\n    all = all.map(function (m) {                                                                                       // 214\n      var sc = this.cache[m]                                                                                           // 215\n      if (!sc)                                                                                                         // 216\n        return m                                                                                                       // 217\n      var isDir = (Array.isArray(sc) || sc === 2)                                                                      // 218\n      if (isDir && m.slice(-1) !== \"/\") {                                                                              // 219\n        return m + \"/\"                                                                                                 // 220\n      }                                                                                                                // 221\n      if (!isDir && m.slice(-1) === \"/\") {                                                                             // 222\n        return m.replace(/\\/+$/, \"\")                                                                                   // 223\n      }                                                                                                                // 224\n      return m                                                                                                         // 225\n    }, this)                                                                                                           // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  this.log(\"emitting end\", all)                                                                                        // 229\n                                                                                                                       // 230\n  this.EOF = this.found = all                                                                                          // 231\n  this.emitMatch(this.EOF)                                                                                             // 232\n}                                                                                                                      // 233\n                                                                                                                       // 234\nfunction alphasorti (a, b) {                                                                                           // 235\n  a = a.toLowerCase()                                                                                                  // 236\n  b = b.toLowerCase()                                                                                                  // 237\n  return alphasort(a, b)                                                                                               // 238\n}                                                                                                                      // 239\n                                                                                                                       // 240\nfunction alphasort (a, b) {                                                                                            // 241\n  return a > b ? 1 : a < b ? -1 : 0                                                                                    // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\nGlob.prototype.abort = function () {                                                                                   // 245\n  this.aborted = true                                                                                                  // 246\n  this.emit(\"abort\")                                                                                                   // 247\n}                                                                                                                      // 248\n                                                                                                                       // 249\nGlob.prototype.pause = function () {                                                                                   // 250\n  if (this.paused) return                                                                                              // 251\n  if (this.sync)                                                                                                       // 252\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))                                                      // 253\n  this.paused = true                                                                                                   // 254\n  this.emit(\"pause\")                                                                                                   // 255\n}                                                                                                                      // 256\n                                                                                                                       // 257\nGlob.prototype.resume = function () {                                                                                  // 258\n  if (!this.paused) return                                                                                             // 259\n  if (this.sync)                                                                                                       // 260\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))                                                      // 261\n  this.paused = false                                                                                                  // 262\n  this.emit(\"resume\")                                                                                                  // 263\n  this._processEmitQueue()                                                                                             // 264\n  //process.nextTick(this.emit.bind(this, \"resume\"))                                                                   // 265\n}                                                                                                                      // 266\n                                                                                                                       // 267\nGlob.prototype.emitMatch = function (m) {                                                                              // 268\n  if (!this.stat || this.statCache[m] || m === this.EOF) {                                                             // 269\n    this._emitQueue.push(m)                                                                                            // 270\n    this._processEmitQueue()                                                                                           // 271\n  } else {                                                                                                             // 272\n    this._stat(m, function(exists, isDir) {                                                                            // 273\n      if (exists) {                                                                                                    // 274\n        this._emitQueue.push(m)                                                                                        // 275\n        this._processEmitQueue()                                                                                       // 276\n      }                                                                                                                // 277\n    })                                                                                                                 // 278\n  }                                                                                                                    // 279\n}                                                                                                                      // 280\n                                                                                                                       // 281\nGlob.prototype._processEmitQueue = function (m) {                                                                      // 282\n  while (!this._processingEmitQueue &&                                                                                 // 283\n         !this.paused) {                                                                                               // 284\n    this._processingEmitQueue = true                                                                                   // 285\n    var m = this._emitQueue.shift()                                                                                    // 286\n    if (!m) {                                                                                                          // 287\n      this._processingEmitQueue = false                                                                                // 288\n      break                                                                                                            // 289\n    }                                                                                                                  // 290\n                                                                                                                       // 291\n    this.log('emit!', m === this.EOF ? \"end\" : \"match\")                                                                // 292\n                                                                                                                       // 293\n    this.emit(m === this.EOF ? \"end\" : \"match\", m)                                                                     // 294\n    this._processingEmitQueue = false                                                                                  // 295\n  }                                                                                                                    // 296\n}                                                                                                                      // 297\n                                                                                                                       // 298\nGlob.prototype._process = function (pattern, depth, index, cb_) {                                                      // 299\n  assert(this instanceof Glob)                                                                                         // 300\n                                                                                                                       // 301\n  var cb = function cb (er, res) {                                                                                     // 302\n    assert(this instanceof Glob)                                                                                       // 303\n    if (this.paused) {                                                                                                 // 304\n      if (!this._processQueue) {                                                                                       // 305\n        this._processQueue = []                                                                                        // 306\n        this.once(\"resume\", function () {                                                                              // 307\n          var q = this._processQueue                                                                                   // 308\n          this._processQueue = null                                                                                    // 309\n          q.forEach(function (cb) { cb() })                                                                            // 310\n        })                                                                                                             // 311\n      }                                                                                                                // 312\n      this._processQueue.push(cb_.bind(this, er, res))                                                                 // 313\n    } else {                                                                                                           // 314\n      cb_.call(this, er, res)                                                                                          // 315\n    }                                                                                                                  // 316\n  }.bind(this)                                                                                                         // 317\n                                                                                                                       // 318\n  if (this.aborted) return cb()                                                                                        // 319\n                                                                                                                       // 320\n  if (depth > this.maxDepth) return cb()                                                                               // 321\n                                                                                                                       // 322\n  // Get the first [n] parts of pattern that are all strings.                                                          // 323\n  var n = 0                                                                                                            // 324\n  while (typeof pattern[n] === \"string\") {                                                                             // 325\n    n ++                                                                                                               // 326\n  }                                                                                                                    // 327\n  // now n is the index of the first one that is *not* a string.                                                       // 328\n                                                                                                                       // 329\n  // see if there's anything else                                                                                      // 330\n  var prefix                                                                                                           // 331\n  switch (n) {                                                                                                         // 332\n    // if not, then this is rather simple                                                                              // 333\n    case pattern.length:                                                                                               // 334\n      prefix = pattern.join(\"/\")                                                                                       // 335\n      this._stat(prefix, function (exists, isDir) {                                                                    // 336\n        // either it's there, or it isn't.                                                                             // 337\n        // nothing more to do, either way.                                                                             // 338\n        if (exists) {                                                                                                  // 339\n          if (prefix && isAbsolute(prefix) && !this.nomount) {                                                         // 340\n            if (prefix.charAt(0) === \"/\") {                                                                            // 341\n              prefix = path.join(this.root, prefix)                                                                    // 342\n            } else {                                                                                                   // 343\n              prefix = path.resolve(this.root, prefix)                                                                 // 344\n            }                                                                                                          // 345\n          }                                                                                                            // 346\n                                                                                                                       // 347\n          if (process.platform === \"win32\")                                                                            // 348\n            prefix = prefix.replace(/\\\\/g, \"/\")                                                                        // 349\n                                                                                                                       // 350\n          this.matches[index] = this.matches[index] || {}                                                              // 351\n          this.matches[index][prefix] = true                                                                           // 352\n          this.emitMatch(prefix)                                                                                       // 353\n        }                                                                                                              // 354\n        return cb()                                                                                                    // 355\n      })                                                                                                               // 356\n      return                                                                                                           // 357\n                                                                                                                       // 358\n    case 0:                                                                                                            // 359\n      // pattern *starts* with some non-trivial item.                                                                  // 360\n      // going to readdir(cwd), but not include the prefix in matches.                                                 // 361\n      prefix = null                                                                                                    // 362\n      break                                                                                                            // 363\n                                                                                                                       // 364\n    default:                                                                                                           // 365\n      // pattern has some string bits in the front.                                                                    // 366\n      // whatever it starts with, whether that's \"absolute\" like /foo/bar,                                             // 367\n      // or \"relative\" like \"../baz\"                                                                                   // 368\n      prefix = pattern.slice(0, n)                                                                                     // 369\n      prefix = prefix.join(\"/\")                                                                                        // 370\n      break                                                                                                            // 371\n  }                                                                                                                    // 372\n                                                                                                                       // 373\n  // get the list of entries.                                                                                          // 374\n  var read                                                                                                             // 375\n  if (prefix === null) read = \".\"                                                                                      // 376\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join(\"/\"))) {                                                      // 377\n    if (!prefix || !isAbsolute(prefix)) {                                                                              // 378\n      prefix = path.join(\"/\", prefix)                                                                                  // 379\n    }                                                                                                                  // 380\n    read = prefix = path.resolve(prefix)                                                                               // 381\n                                                                                                                       // 382\n    // if (process.platform === \"win32\")                                                                               // 383\n    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\\\/g, \"/\")                                                         // 384\n                                                                                                                       // 385\n    this.log('absolute: ', prefix, this.root, pattern, read)                                                           // 386\n  } else {                                                                                                             // 387\n    read = prefix                                                                                                      // 388\n  }                                                                                                                    // 389\n                                                                                                                       // 390\n  this.log('readdir(%j)', read, this.cwd, this.root)                                                                   // 391\n                                                                                                                       // 392\n  return this._readdir(read, function (er, entries) {                                                                  // 393\n    if (er) {                                                                                                          // 394\n      // not a directory!                                                                                              // 395\n      // this means that, whatever else comes after this, it can never match                                           // 396\n      return cb()                                                                                                      // 397\n    }                                                                                                                  // 398\n                                                                                                                       // 399\n    // globstar is special                                                                                             // 400\n    if (pattern[n] === minimatch.GLOBSTAR) {                                                                           // 401\n      // test without the globstar, and with every child both below                                                    // 402\n      // and replacing the globstar.                                                                                   // 403\n      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]                                                     // 404\n      entries.forEach(function (e) {                                                                                   // 405\n        if (e.charAt(0) === \".\" && !this.dot) return                                                                   // 406\n        // instead of the globstar                                                                                     // 407\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))                                             // 408\n        // below the globstar                                                                                          // 409\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))                                                 // 410\n      }, this)                                                                                                         // 411\n                                                                                                                       // 412\n      s = s.filter(function (pattern) {                                                                                // 413\n        var key = gsKey(pattern)                                                                                       // 414\n        var seen = !this._globstars[key]                                                                               // 415\n        this._globstars[key] = true                                                                                    // 416\n        return seen                                                                                                    // 417\n      }, this)                                                                                                         // 418\n                                                                                                                       // 419\n      if (!s.length)                                                                                                   // 420\n        return cb()                                                                                                    // 421\n                                                                                                                       // 422\n      // now asyncForEach over this                                                                                    // 423\n      var l = s.length                                                                                                 // 424\n      , errState = null                                                                                                // 425\n      s.forEach(function (gsPattern) {                                                                                 // 426\n        this._process(gsPattern, depth + 1, index, function (er) {                                                     // 427\n          if (errState) return                                                                                         // 428\n          if (er) return cb(errState = er)                                                                             // 429\n          if (--l <= 0) return cb()                                                                                    // 430\n        })                                                                                                             // 431\n      }, this)                                                                                                         // 432\n                                                                                                                       // 433\n      return                                                                                                           // 434\n    }                                                                                                                  // 435\n                                                                                                                       // 436\n    // not a globstar                                                                                                  // 437\n    // It will only match dot entries if it starts with a dot, or if                                                   // 438\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.                                                             // 439\n    var pn = pattern[n]                                                                                                // 440\n    var rawGlob = pattern[n]._glob                                                                                     // 441\n    , dotOk = this.dot || rawGlob.charAt(0) === \".\"                                                                    // 442\n                                                                                                                       // 443\n    entries = entries.filter(function (e) {                                                                            // 444\n      return (e.charAt(0) !== \".\" || dotOk) &&                                                                         // 445\n             e.match(pattern[n])                                                                                       // 446\n    })                                                                                                                 // 447\n                                                                                                                       // 448\n    // If n === pattern.length - 1, then there's no need for the extra stat                                            // 449\n    // *unless* the user has specified \"mark\" or \"stat\" explicitly.                                                    // 450\n    // We know that they exist, since the readdir returned them.                                                       // 451\n    if (n === pattern.length - 1 &&                                                                                    // 452\n        !this.mark &&                                                                                                  // 453\n        !this.stat) {                                                                                                  // 454\n      entries.forEach(function (e) {                                                                                   // 455\n        if (prefix) {                                                                                                  // 456\n          if (prefix !== \"/\") e = prefix + \"/\" + e                                                                     // 457\n          else e = prefix + e                                                                                          // 458\n        }                                                                                                              // 459\n        if (e.charAt(0) === \"/\" && !this.nomount) {                                                                    // 460\n          e = path.join(this.root, e)                                                                                  // 461\n        }                                                                                                              // 462\n                                                                                                                       // 463\n        if (process.platform === \"win32\")                                                                              // 464\n          e = e.replace(/\\\\/g, \"/\")                                                                                    // 465\n                                                                                                                       // 466\n        this.matches[index] = this.matches[index] || {}                                                                // 467\n        this.matches[index][e] = true                                                                                  // 468\n        this.emitMatch(e)                                                                                              // 469\n      }, this)                                                                                                         // 470\n      return cb.call(this)                                                                                             // 471\n    }                                                                                                                  // 472\n                                                                                                                       // 473\n                                                                                                                       // 474\n    // now test all the remaining entries as stand-ins for that part                                                   // 475\n    // of the pattern.                                                                                                 // 476\n    var l = entries.length                                                                                             // 477\n    , errState = null                                                                                                  // 478\n    if (l === 0) return cb() // no matches possible                                                                    // 479\n    entries.forEach(function (e) {                                                                                     // 480\n      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))                                               // 481\n      this._process(p, depth + 1, index, function (er) {                                                               // 482\n        if (errState) return                                                                                           // 483\n        if (er) return cb(errState = er)                                                                               // 484\n        if (--l === 0) return cb.call(this)                                                                            // 485\n      })                                                                                                               // 486\n    }, this)                                                                                                           // 487\n  })                                                                                                                   // 488\n                                                                                                                       // 489\n}                                                                                                                      // 490\n                                                                                                                       // 491\nfunction gsKey (pattern) {                                                                                             // 492\n  return '**' + pattern.map(function (p) {                                                                             // 493\n    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)                                                                  // 494\n  }).join('/')                                                                                                         // 495\n}                                                                                                                      // 496\n                                                                                                                       // 497\nGlob.prototype._stat = function (f, cb) {                                                                              // 498\n  assert(this instanceof Glob)                                                                                         // 499\n  var abs = f                                                                                                          // 500\n  if (f.charAt(0) === \"/\") {                                                                                           // 501\n    abs = path.join(this.root, f)                                                                                      // 502\n  } else if (this.changedCwd) {                                                                                        // 503\n    abs = path.resolve(this.cwd, f)                                                                                    // 504\n  }                                                                                                                    // 505\n                                                                                                                       // 506\n  if (f.length > this.maxLength) {                                                                                     // 507\n    var er = new Error(\"Path name too long\")                                                                           // 508\n    er.code = \"ENAMETOOLONG\"                                                                                           // 509\n    er.path = f                                                                                                        // 510\n    return this._afterStat(f, abs, cb, er)                                                                             // 511\n  }                                                                                                                    // 512\n                                                                                                                       // 513\n  this.log('stat', [this.cwd, f, '=', abs])                                                                            // 514\n                                                                                                                       // 515\n  if (!this.stat && this.cache.hasOwnProperty(f)) {                                                                    // 516\n    var exists = this.cache[f]                                                                                         // 517\n    , isDir = exists && (Array.isArray(exists) || exists === 2)                                                        // 518\n    if (this.sync) return cb.call(this, !!exists, isDir)                                                               // 519\n    return process.nextTick(cb.bind(this, !!exists, isDir))                                                            // 520\n  }                                                                                                                    // 521\n                                                                                                                       // 522\n  var stat = this.statCache[abs]                                                                                       // 523\n  if (this.sync || stat) {                                                                                             // 524\n    var er                                                                                                             // 525\n    try {                                                                                                              // 526\n      stat = fs.statSync(abs)                                                                                          // 527\n    } catch (e) {                                                                                                      // 528\n      er = e                                                                                                           // 529\n    }                                                                                                                  // 530\n    this._afterStat(f, abs, cb, er, stat)                                                                              // 531\n  } else {                                                                                                             // 532\n    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))                                                               // 533\n  }                                                                                                                    // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\nGlob.prototype._afterStat = function (f, abs, cb, er, stat) {                                                          // 537\n  var exists                                                                                                           // 538\n  assert(this instanceof Glob)                                                                                         // 539\n                                                                                                                       // 540\n  if (abs.slice(-1) === \"/\" && stat && !stat.isDirectory()) {                                                          // 541\n    this.log(\"should be ENOTDIR, fake it\")                                                                             // 542\n                                                                                                                       // 543\n    er = new Error(\"ENOTDIR, not a directory '\" + abs + \"'\")                                                           // 544\n    er.path = abs                                                                                                      // 545\n    er.code = \"ENOTDIR\"                                                                                                // 546\n    stat = null                                                                                                        // 547\n  }                                                                                                                    // 548\n                                                                                                                       // 549\n  var emit = !this.statCache[abs]                                                                                      // 550\n  this.statCache[abs] = stat                                                                                           // 551\n                                                                                                                       // 552\n  if (er || !stat) {                                                                                                   // 553\n    exists = false                                                                                                     // 554\n  } else {                                                                                                             // 555\n    exists = stat.isDirectory() ? 2 : 1                                                                                // 556\n    if (emit)                                                                                                          // 557\n      this.emit('stat', f, stat)                                                                                       // 558\n  }                                                                                                                    // 559\n  this.cache[f] = this.cache[f] || exists                                                                              // 560\n  cb.call(this, !!exists, exists === 2)                                                                                // 561\n}                                                                                                                      // 562\n                                                                                                                       // 563\nGlob.prototype._readdir = function (f, cb) {                                                                           // 564\n  assert(this instanceof Glob)                                                                                         // 565\n  var abs = f                                                                                                          // 566\n  if (f.charAt(0) === \"/\") {                                                                                           // 567\n    abs = path.join(this.root, f)                                                                                      // 568\n  } else if (isAbsolute(f)) {                                                                                          // 569\n    abs = f                                                                                                            // 570\n  } else if (this.changedCwd) {                                                                                        // 571\n    abs = path.resolve(this.cwd, f)                                                                                    // 572\n  }                                                                                                                    // 573\n                                                                                                                       // 574\n  if (f.length > this.maxLength) {                                                                                     // 575\n    var er = new Error(\"Path name too long\")                                                                           // 576\n    er.code = \"ENAMETOOLONG\"                                                                                           // 577\n    er.path = f                                                                                                        // 578\n    return this._afterReaddir(f, abs, cb, er)                                                                          // 579\n  }                                                                                                                    // 580\n                                                                                                                       // 581\n  this.log('readdir', [this.cwd, f, abs])                                                                              // 582\n  if (this.cache.hasOwnProperty(f)) {                                                                                  // 583\n    var c = this.cache[f]                                                                                              // 584\n    if (Array.isArray(c)) {                                                                                            // 585\n      if (this.sync) return cb.call(this, null, c)                                                                     // 586\n      return process.nextTick(cb.bind(this, null, c))                                                                  // 587\n    }                                                                                                                  // 588\n                                                                                                                       // 589\n    if (!c || c === 1) {                                                                                               // 590\n      // either ENOENT or ENOTDIR                                                                                      // 591\n      var code = c ? \"ENOTDIR\" : \"ENOENT\"                                                                              // 592\n      , er = new Error((c ? \"Not a directory\" : \"Not found\") + \": \" + f)                                               // 593\n      er.path = f                                                                                                      // 594\n      er.code = code                                                                                                   // 595\n      this.log(f, er)                                                                                                  // 596\n      if (this.sync) return cb.call(this, er)                                                                          // 597\n      return process.nextTick(cb.bind(this, er))                                                                       // 598\n    }                                                                                                                  // 599\n                                                                                                                       // 600\n    // at this point, c === 2, meaning it's a dir, but we haven't                                                      // 601\n    // had to read it yet, or c === true, meaning it's *something*                                                     // 602\n    // but we don't have any idea what.  Need to read it, either way.                                                  // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  if (this.sync) {                                                                                                     // 606\n    var er, entries                                                                                                    // 607\n    try {                                                                                                              // 608\n      entries = fs.readdirSync(abs)                                                                                    // 609\n    } catch (e) {                                                                                                      // 610\n      er = e                                                                                                           // 611\n    }                                                                                                                  // 612\n    return this._afterReaddir(f, abs, cb, er, entries)                                                                 // 613\n  }                                                                                                                    // 614\n                                                                                                                       // 615\n  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))                                                           // 616\n}                                                                                                                      // 617\n                                                                                                                       // 618\nGlob.prototype._afterReaddir = function (f, abs, cb, er, entries) {                                                    // 619\n  assert(this instanceof Glob)                                                                                         // 620\n  if (entries && !er) {                                                                                                // 621\n    this.cache[f] = entries                                                                                            // 622\n    // if we haven't asked to stat everything for suresies, then just                                                  // 623\n    // assume that everything in there exists, so we can avoid                                                         // 624\n    // having to stat it a second time.  This also gets us one step                                                    // 625\n    // further into ELOOP territory.                                                                                   // 626\n    if (!this.mark && !this.stat) {                                                                                    // 627\n      entries.forEach(function (e) {                                                                                   // 628\n        if (f === \"/\") e = f + e                                                                                       // 629\n        else e = f + \"/\" + e                                                                                           // 630\n        this.cache[e] = true                                                                                           // 631\n      }, this)                                                                                                         // 632\n    }                                                                                                                  // 633\n                                                                                                                       // 634\n    return cb.call(this, er, entries)                                                                                  // 635\n  }                                                                                                                    // 636\n                                                                                                                       // 637\n  // now handle errors, and cache the information                                                                      // 638\n  if (er) switch (er.code) {                                                                                           // 639\n    case \"ENOTDIR\": // totally normal. means it *does* exist.                                                          // 640\n      this.cache[f] = 1                                                                                                // 641\n      return cb.call(this, er)                                                                                         // 642\n    case \"ENOENT\": // not terribly unusual                                                                             // 643\n    case \"ELOOP\":                                                                                                      // 644\n    case \"ENAMETOOLONG\":                                                                                               // 645\n    case \"UNKNOWN\":                                                                                                    // 646\n      this.cache[f] = false                                                                                            // 647\n      return cb.call(this, er)                                                                                         // 648\n    default: // some unusual error.  Treat as failure.                                                                 // 649\n      this.cache[f] = false                                                                                            // 650\n      if (this.strict) this.emit(\"error\", er)                                                                          // 651\n      if (!this.silent) console.error(\"glob error\", er)                                                                // 652\n      return cb.call(this, er)                                                                                         // 653\n  }                                                                                                                    // 654\n}                                                                                                                      // 655\n                                                                                                                       // 656\nvar isAbsolute = process.platform === \"win32\" ? absWin : absUnix                                                       // 657\n                                                                                                                       // 658\nfunction absWin (p) {                                                                                                  // 659\n  if (absUnix(p)) return true                                                                                          // 660\n  // pull off the device/UNC bit from a windows path.                                                                  // 661\n  // from node's lib/path.js                                                                                           // 662\n  var splitDeviceRe =                                                                                                  // 663\n      /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/                                             // 664\n    , result = splitDeviceRe.exec(p)                                                                                   // 665\n    , device = result[1] || ''                                                                                         // 666\n    , isUnc = device && device.charAt(1) !== ':'                                                                       // 667\n    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute                                               // 668\n                                                                                                                       // 669\n  return isAbsolute                                                                                                    // 670\n}                                                                                                                      // 671\n                                                                                                                       // 672\nfunction absUnix (p) {                                                                                                 // 673\n  return p.charAt(0) === \"/\" || p === \"\"                                                                               // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"graceful-fs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/node_modules/graceful-fs/p //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"graceful-fs\";                                                                                          // 1\nexports.version = \"2.0.3\";                                                                                             // 2\nexports.main = \"graceful-fs.js\";                                                                                       // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"graceful-fs.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/graceful-fs/gracef //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Monkey-patching the fs module.                                                                                      // 1\n// It's ugly, but there is simply no other way to do this.                                                             // 2\nvar fs = module.exports = require('fs')                                                                                // 3\n                                                                                                                       // 4\nvar assert = require('assert')                                                                                         // 5\n                                                                                                                       // 6\n// fix up some busted stuff, mostly on windows and old nodes                                                           // 7\nrequire('./polyfills.js')                                                                                              // 8\n                                                                                                                       // 9\n// The EMFILE enqueuing stuff                                                                                          // 10\n                                                                                                                       // 11\nvar util = require('util')                                                                                             // 12\n                                                                                                                       // 13\nfunction noop () {}                                                                                                    // 14\n                                                                                                                       // 15\nvar debug = noop                                                                                                       // 16\nif (util.debuglog)                                                                                                     // 17\n  debug = util.debuglog('gfs')                                                                                         // 18\nelse if (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || ''))                                                                // 19\n  debug = function() {                                                                                                 // 20\n    var m = util.format.apply(util, arguments)                                                                         // 21\n    m = 'GFS: ' + m.split(/\\n/).join('\\nGFS: ')                                                                        // 22\n    console.error(m)                                                                                                   // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\nif (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || '')) {                                                                   // 26\n  process.on('exit', function() {                                                                                      // 27\n    debug('fds', fds)                                                                                                  // 28\n    debug(queue)                                                                                                       // 29\n    assert.equal(queue.length, 0)                                                                                      // 30\n  })                                                                                                                   // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n                                                                                                                       // 34\nvar originalOpen = fs.open                                                                                             // 35\nfs.open = open                                                                                                         // 36\n                                                                                                                       // 37\nfunction open(path, flags, mode, cb) {                                                                                 // 38\n  if (typeof mode === \"function\") cb = mode, mode = null                                                               // 39\n  if (typeof cb !== \"function\") cb = noop                                                                              // 40\n  new OpenReq(path, flags, mode, cb)                                                                                   // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nfunction OpenReq(path, flags, mode, cb) {                                                                              // 44\n  this.path = path                                                                                                     // 45\n  this.flags = flags                                                                                                   // 46\n  this.mode = mode                                                                                                     // 47\n  this.cb = cb                                                                                                         // 48\n  Req.call(this)                                                                                                       // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nutil.inherits(OpenReq, Req)                                                                                            // 52\n                                                                                                                       // 53\nOpenReq.prototype.process = function() {                                                                               // 54\n  originalOpen.call(fs, this.path, this.flags, this.mode, this.done)                                                   // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nvar fds = {}                                                                                                           // 58\nOpenReq.prototype.done = function(er, fd) {                                                                            // 59\n  debug('open done', er, fd)                                                                                           // 60\n  if (fd)                                                                                                              // 61\n    fds['fd' + fd] = this.path                                                                                         // 62\n  Req.prototype.done.call(this, er, fd)                                                                                // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\nvar originalReaddir = fs.readdir                                                                                       // 67\nfs.readdir = readdir                                                                                                   // 68\n                                                                                                                       // 69\nfunction readdir(path, cb) {                                                                                           // 70\n  if (typeof cb !== \"function\") cb = noop                                                                              // 71\n  new ReaddirReq(path, cb)                                                                                             // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\nfunction ReaddirReq(path, cb) {                                                                                        // 75\n  this.path = path                                                                                                     // 76\n  this.cb = cb                                                                                                         // 77\n  Req.call(this)                                                                                                       // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nutil.inherits(ReaddirReq, Req)                                                                                         // 81\n                                                                                                                       // 82\nReaddirReq.prototype.process = function() {                                                                            // 83\n  originalReaddir.call(fs, this.path, this.done)                                                                       // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\nReaddirReq.prototype.done = function(er, files) {                                                                      // 87\n  if (files && files.sort)                                                                                             // 88\n    files = files.sort()                                                                                               // 89\n  Req.prototype.done.call(this, er, files)                                                                             // 90\n  onclose()                                                                                                            // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\n                                                                                                                       // 94\nvar originalClose = fs.close                                                                                           // 95\nfs.close = close                                                                                                       // 96\n                                                                                                                       // 97\nfunction close (fd, cb) {                                                                                              // 98\n  debug('close', fd)                                                                                                   // 99\n  if (typeof cb !== \"function\") cb = noop                                                                              // 100\n  delete fds['fd' + fd]                                                                                                // 101\n  originalClose.call(fs, fd, function(er) {                                                                            // 102\n    onclose()                                                                                                          // 103\n    cb(er)                                                                                                             // 104\n  })                                                                                                                   // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\n                                                                                                                       // 108\nvar originalCloseSync = fs.closeSync                                                                                   // 109\nfs.closeSync = closeSync                                                                                               // 110\n                                                                                                                       // 111\nfunction closeSync (fd) {                                                                                              // 112\n  try {                                                                                                                // 113\n    return originalCloseSync(fd)                                                                                       // 114\n  } finally {                                                                                                          // 115\n    onclose()                                                                                                          // 116\n  }                                                                                                                    // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n                                                                                                                       // 120\n// Req class                                                                                                           // 121\nfunction Req () {                                                                                                      // 122\n  // start processing                                                                                                  // 123\n  this.done = this.done.bind(this)                                                                                     // 124\n  this.failures = 0                                                                                                    // 125\n  this.process()                                                                                                       // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\nReq.prototype.done = function (er, result) {                                                                           // 129\n  var tryAgain = false                                                                                                 // 130\n  if (er) {                                                                                                            // 131\n    var code = er.code                                                                                                 // 132\n    var tryAgain = code === \"EMFILE\"                                                                                   // 133\n    if (process.platform === \"win32\")                                                                                  // 134\n      tryAgain = tryAgain || code === \"OK\"                                                                             // 135\n  }                                                                                                                    // 136\n                                                                                                                       // 137\n  if (tryAgain) {                                                                                                      // 138\n    this.failures ++                                                                                                   // 139\n    enqueue(this)                                                                                                      // 140\n  } else {                                                                                                             // 141\n    var cb = this.cb                                                                                                   // 142\n    cb(er, result)                                                                                                     // 143\n  }                                                                                                                    // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\nvar queue = []                                                                                                         // 147\n                                                                                                                       // 148\nfunction enqueue(req) {                                                                                                // 149\n  queue.push(req)                                                                                                      // 150\n  debug('enqueue %d %s', queue.length, req.constructor.name, req)                                                      // 151\n}                                                                                                                      // 152\n                                                                                                                       // 153\nfunction onclose() {                                                                                                   // 154\n  var req = queue.shift()                                                                                              // 155\n  if (req) {                                                                                                           // 156\n    debug('process', req.constructor.name, req)                                                                        // 157\n    req.process()                                                                                                      // 158\n  }                                                                                                                    // 159\n}                                                                                                                      // 160\n                                                                                                                       // 161\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"polyfills.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/graceful-fs/polyfi //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar fs = require('fs')                                                                                                 // 1\nvar constants = require('constants')                                                                                   // 2\n                                                                                                                       // 3\nvar origCwd = process.cwd                                                                                              // 4\nvar cwd = null                                                                                                         // 5\nprocess.cwd = function() {                                                                                             // 6\n  if (!cwd)                                                                                                            // 7\n    cwd = origCwd.call(process)                                                                                        // 8\n  return cwd                                                                                                           // 9\n}                                                                                                                      // 10\nvar chdir = process.chdir                                                                                              // 11\nprocess.chdir = function(d) {                                                                                          // 12\n  cwd = null                                                                                                           // 13\n  chdir.call(process, d)                                                                                               // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n// (re-)implement some things that are known busted or missing.                                                        // 17\n                                                                                                                       // 18\n// lchmod, broken prior to 0.6.2                                                                                       // 19\n// back-port the fix here.                                                                                             // 20\nif (constants.hasOwnProperty('O_SYMLINK') &&                                                                           // 21\n    process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {                                                                 // 22\n  fs.lchmod = function (path, mode, callback) {                                                                        // 23\n    callback = callback || noop                                                                                        // 24\n    fs.open( path                                                                                                      // 25\n           , constants.O_WRONLY | constants.O_SYMLINK                                                                  // 26\n           , mode                                                                                                      // 27\n           , function (err, fd) {                                                                                      // 28\n      if (err) {                                                                                                       // 29\n        callback(err)                                                                                                  // 30\n        return                                                                                                         // 31\n      }                                                                                                                // 32\n      // prefer to return the chmod error, if one occurs,                                                              // 33\n      // but still try to close, and report closing errors if they occur.                                              // 34\n      fs.fchmod(fd, mode, function (err) {                                                                             // 35\n        fs.close(fd, function(err2) {                                                                                  // 36\n          callback(err || err2)                                                                                        // 37\n        })                                                                                                             // 38\n      })                                                                                                               // 39\n    })                                                                                                                 // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  fs.lchmodSync = function (path, mode) {                                                                              // 43\n    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)                                         // 44\n                                                                                                                       // 45\n    // prefer to return the chmod error, if one occurs,                                                                // 46\n    // but still try to close, and report closing errors if they occur.                                                // 47\n    var err, err2                                                                                                      // 48\n    try {                                                                                                              // 49\n      var ret = fs.fchmodSync(fd, mode)                                                                                // 50\n    } catch (er) {                                                                                                     // 51\n      err = er                                                                                                         // 52\n    }                                                                                                                  // 53\n    try {                                                                                                              // 54\n      fs.closeSync(fd)                                                                                                 // 55\n    } catch (er) {                                                                                                     // 56\n      err2 = er                                                                                                        // 57\n    }                                                                                                                  // 58\n    if (err || err2) throw (err || err2)                                                                               // 59\n    return ret                                                                                                         // 60\n  }                                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n                                                                                                                       // 64\n// lutimes implementation, or no-op                                                                                    // 65\nif (!fs.lutimes) {                                                                                                     // 66\n  if (constants.hasOwnProperty(\"O_SYMLINK\")) {                                                                         // 67\n    fs.lutimes = function (path, at, mt, cb) {                                                                         // 68\n      fs.open(path, constants.O_SYMLINK, function (er, fd) {                                                           // 69\n        cb = cb || noop                                                                                                // 70\n        if (er) return cb(er)                                                                                          // 71\n        fs.futimes(fd, at, mt, function (er) {                                                                         // 72\n          fs.close(fd, function (er2) {                                                                                // 73\n            return cb(er || er2)                                                                                       // 74\n          })                                                                                                           // 75\n        })                                                                                                             // 76\n      })                                                                                                               // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    fs.lutimesSync = function (path, at, mt) {                                                                         // 80\n      var fd = fs.openSync(path, constants.O_SYMLINK)                                                                  // 81\n        , err                                                                                                          // 82\n        , err2                                                                                                         // 83\n        , ret                                                                                                          // 84\n                                                                                                                       // 85\n      try {                                                                                                            // 86\n        var ret = fs.futimesSync(fd, at, mt)                                                                           // 87\n      } catch (er) {                                                                                                   // 88\n        err = er                                                                                                       // 89\n      }                                                                                                                // 90\n      try {                                                                                                            // 91\n        fs.closeSync(fd)                                                                                               // 92\n      } catch (er) {                                                                                                   // 93\n        err2 = er                                                                                                      // 94\n      }                                                                                                                // 95\n      if (err || err2) throw (err || err2)                                                                             // 96\n      return ret                                                                                                       // 97\n    }                                                                                                                  // 98\n                                                                                                                       // 99\n  } else if (fs.utimensat && constants.hasOwnProperty(\"AT_SYMLINK_NOFOLLOW\")) {                                        // 100\n    // maybe utimensat will be bound soonish?                                                                          // 101\n    fs.lutimes = function (path, at, mt, cb) {                                                                         // 102\n      fs.utimensat(path, at, mt, constants.AT_SYMLINK_NOFOLLOW, cb)                                                    // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    fs.lutimesSync = function (path, at, mt) {                                                                         // 106\n      return fs.utimensatSync(path, at, mt, constants.AT_SYMLINK_NOFOLLOW)                                             // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n  } else {                                                                                                             // 110\n    fs.lutimes = function (_a, _b, _c, cb) { process.nextTick(cb) }                                                    // 111\n    fs.lutimesSync = function () {}                                                                                    // 112\n  }                                                                                                                    // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n// https://github.com/isaacs/node-graceful-fs/issues/4                                                                 // 117\n// Chown should not fail on einval or eperm if non-root.                                                               // 118\n                                                                                                                       // 119\nfs.chown = chownFix(fs.chown)                                                                                          // 120\nfs.fchown = chownFix(fs.fchown)                                                                                        // 121\nfs.lchown = chownFix(fs.lchown)                                                                                        // 122\n                                                                                                                       // 123\nfs.chownSync = chownFixSync(fs.chownSync)                                                                              // 124\nfs.fchownSync = chownFixSync(fs.fchownSync)                                                                            // 125\nfs.lchownSync = chownFixSync(fs.lchownSync)                                                                            // 126\n                                                                                                                       // 127\nfunction chownFix (orig) {                                                                                             // 128\n  if (!orig) return orig                                                                                               // 129\n  return function (target, uid, gid, cb) {                                                                             // 130\n    return orig.call(fs, target, uid, gid, function (er, res) {                                                        // 131\n      if (chownErOk(er)) er = null                                                                                     // 132\n      cb(er, res)                                                                                                      // 133\n    })                                                                                                                 // 134\n  }                                                                                                                    // 135\n}                                                                                                                      // 136\n                                                                                                                       // 137\nfunction chownFixSync (orig) {                                                                                         // 138\n  if (!orig) return orig                                                                                               // 139\n  return function (target, uid, gid) {                                                                                 // 140\n    try {                                                                                                              // 141\n      return orig.call(fs, target, uid, gid)                                                                           // 142\n    } catch (er) {                                                                                                     // 143\n      if (!chownErOk(er)) throw er                                                                                     // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\nfunction chownErOk (er) {                                                                                              // 149\n  // if there's no getuid, or if getuid() is something other than 0,                                                   // 150\n  // and the error is EINVAL or EPERM, then just ignore it.                                                            // 151\n  // This specific case is a silent failure in cp, install, tar,                                                       // 152\n  // and most other unix tools that manage permissions.                                                                // 153\n  // When running as root, or if other types of errors are encountered,                                                // 154\n  // then it's strict.                                                                                                 // 155\n  if (!er || (!process.getuid || process.getuid() !== 0)                                                               // 156\n      && (er.code === \"EINVAL\" || er.code === \"EPERM\")) return true                                                    // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\n                                                                                                                       // 160\n// if lchmod/lchown do not exist, then make them no-ops                                                                // 161\nif (!fs.lchmod) {                                                                                                      // 162\n  fs.lchmod = function (path, mode, cb) {                                                                              // 163\n    process.nextTick(cb)                                                                                               // 164\n  }                                                                                                                    // 165\n  fs.lchmodSync = function () {}                                                                                       // 166\n}                                                                                                                      // 167\nif (!fs.lchown) {                                                                                                      // 168\n  fs.lchown = function (path, uid, gid, cb) {                                                                          // 169\n    process.nextTick(cb)                                                                                               // 170\n  }                                                                                                                    // 171\n  fs.lchownSync = function () {}                                                                                       // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n                                                                                                                       // 175\n                                                                                                                       // 176\n// on Windows, A/V software can lock the directory, causing this                                                       // 177\n// to fail with an EACCES or EPERM if the directory contains newly                                                     // 178\n// created files.  Try again on failure, for up to 1 second.                                                           // 179\nif (process.platform === \"win32\") {                                                                                    // 180\n  var rename_ = fs.rename                                                                                              // 181\n  fs.rename = function rename (from, to, cb) {                                                                         // 182\n    var start = Date.now()                                                                                             // 183\n    rename_(from, to, function CB (er) {                                                                               // 184\n      if (er                                                                                                           // 185\n          && (er.code === \"EACCES\" || er.code === \"EPERM\")                                                             // 186\n          && Date.now() - start < 1000) {                                                                              // 187\n        return rename_(from, to, CB)                                                                                   // 188\n      }                                                                                                                // 189\n      cb(er)                                                                                                           // 190\n    })                                                                                                                 // 191\n  }                                                                                                                    // 192\n}                                                                                                                      // 193\n                                                                                                                       // 194\n                                                                                                                       // 195\n// if read() returns EAGAIN, then just try it again.                                                                   // 196\nvar read = fs.read                                                                                                     // 197\nfs.read = function (fd, buffer, offset, length, position, callback_) {                                                 // 198\n  var callback                                                                                                         // 199\n  if (callback_ && typeof callback_ === 'function') {                                                                  // 200\n    var eagCounter = 0                                                                                                 // 201\n    callback = function (er, _, __) {                                                                                  // 202\n      if (er && er.code === 'EAGAIN' && eagCounter < 10) {                                                             // 203\n        eagCounter ++                                                                                                  // 204\n        return read.call(fs, fd, buffer, offset, length, position, callback)                                           // 205\n      }                                                                                                                // 206\n      callback_.apply(this, arguments)                                                                                 // 207\n    }                                                                                                                  // 208\n  }                                                                                                                    // 209\n  return read.call(fs, fd, buffer, offset, length, position, callback)                                                 // 210\n}                                                                                                                      // 211\n                                                                                                                       // 212\nvar readSync = fs.readSync                                                                                             // 213\nfs.readSync = function (fd, buffer, offset, length, position) {                                                        // 214\n  var eagCounter = 0                                                                                                   // 215\n  while (true) {                                                                                                       // 216\n    try {                                                                                                              // 217\n      return readSync.call(fs, fd, buffer, offset, length, position)                                                   // 218\n    } catch (er) {                                                                                                     // 219\n      if (er.code === 'EAGAIN' && eagCounter < 10) {                                                                   // 220\n        eagCounter ++                                                                                                  // 221\n        continue                                                                                                       // 222\n      }                                                                                                                // 223\n      throw er                                                                                                         // 224\n    }                                                                                                                  // 225\n  }                                                                                                                    // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n                                                                                                                       // 229\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"minimatch\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/node_modules/minimatch/pac //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"minimatch\";                                                                                            // 1\nexports.version = \"0.2.14\";                                                                                            // 2\nexports.main = \"minimatch.js\";                                                                                         // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimatch.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/minimatch/minimatc //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (require, exports, module, platform) {                                                                      // 1\n                                                                                                                       // 2\nif (module) module.exports = minimatch                                                                                 // 3\nelse exports.minimatch = minimatch                                                                                     // 4\n                                                                                                                       // 5\nif (!require) {                                                                                                        // 6\n  require = function (id) {                                                                                            // 7\n    switch (id) {                                                                                                      // 8\n      case \"sigmund\": return function sigmund (obj) {                                                                  // 9\n        return JSON.stringify(obj)                                                                                     // 10\n      }                                                                                                                // 11\n      case \"path\": return { basename: function (f) {                                                                   // 12\n        f = f.split(/[\\/\\\\]/)                                                                                          // 13\n        var e = f.pop()                                                                                                // 14\n        if (!e) e = f.pop()                                                                                            // 15\n        return e                                                                                                       // 16\n      }}                                                                                                               // 17\n      case \"lru-cache\": return function LRUCache () {                                                                  // 18\n        // not quite an LRU, but still space-limited.                                                                  // 19\n        var cache = {}                                                                                                 // 20\n        var cnt = 0                                                                                                    // 21\n        this.set = function (k, v) {                                                                                   // 22\n          cnt ++                                                                                                       // 23\n          if (cnt >= 100) cache = {}                                                                                   // 24\n          cache[k] = v                                                                                                 // 25\n        }                                                                                                              // 26\n        this.get = function (k) { return cache[k] }                                                                    // 27\n      }                                                                                                                // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nminimatch.Minimatch = Minimatch                                                                                        // 33\n                                                                                                                       // 34\nvar LRU = require(\"lru-cache\")                                                                                         // 35\n  , cache = minimatch.cache = new LRU({max: 100})                                                                      // 36\n  , GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}                                                            // 37\n  , sigmund = require(\"sigmund\")                                                                                       // 38\n                                                                                                                       // 39\nvar path = require(\"path\")                                                                                             // 40\n  // any single thing other than /                                                                                     // 41\n  // don't need to escape / when using new RegExp()                                                                    // 42\n  , qmark = \"[^/]\"                                                                                                     // 43\n                                                                                                                       // 44\n  // * => any number of characters                                                                                     // 45\n  , star = qmark + \"*?\"                                                                                                // 46\n                                                                                                                       // 47\n  // ** when dots are allowed.  Anything goes, except .. and .                                                         // 48\n  // not (^ or / followed by one or two dots followed by $ or /),                                                      // 49\n  // followed by anything, any number of times.                                                                        // 50\n  , twoStarDot = \"(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?\"                                                           // 51\n                                                                                                                       // 52\n  // not a ^ or / followed by a dot,                                                                                   // 53\n  // followed by anything, any number of times.                                                                        // 54\n  , twoStarNoDot = \"(?:(?!(?:\\\\\\/|^)\\\\.).)*?\"                                                                          // 55\n                                                                                                                       // 56\n  // characters that need to be escaped in RegExp.                                                                     // 57\n  , reSpecials = charSet(\"().*{}+?[]^$\\\\!\")                                                                            // 58\n                                                                                                                       // 59\n// \"abc\" -> { a:true, b:true, c:true }                                                                                 // 60\nfunction charSet (s) {                                                                                                 // 61\n  return s.split(\"\").reduce(function (set, c) {                                                                        // 62\n    set[c] = true                                                                                                      // 63\n    return set                                                                                                         // 64\n  }, {})                                                                                                               // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n// normalizes slashes.                                                                                                 // 68\nvar slashSplit = /\\/+/                                                                                                 // 69\n                                                                                                                       // 70\nminimatch.filter = filter                                                                                              // 71\nfunction filter (pattern, options) {                                                                                   // 72\n  options = options || {}                                                                                              // 73\n  return function (p, i, list) {                                                                                       // 74\n    return minimatch(p, pattern, options)                                                                              // 75\n  }                                                                                                                    // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction ext (a, b) {                                                                                                  // 79\n  a = a || {}                                                                                                          // 80\n  b = b || {}                                                                                                          // 81\n  var t = {}                                                                                                           // 82\n  Object.keys(b).forEach(function (k) {                                                                                // 83\n    t[k] = b[k]                                                                                                        // 84\n  })                                                                                                                   // 85\n  Object.keys(a).forEach(function (k) {                                                                                // 86\n    t[k] = a[k]                                                                                                        // 87\n  })                                                                                                                   // 88\n  return t                                                                                                             // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\nminimatch.defaults = function (def) {                                                                                  // 92\n  if (!def || !Object.keys(def).length) return minimatch                                                               // 93\n                                                                                                                       // 94\n  var orig = minimatch                                                                                                 // 95\n                                                                                                                       // 96\n  var m = function minimatch (p, pattern, options) {                                                                   // 97\n    return orig.minimatch(p, pattern, ext(def, options))                                                               // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  m.Minimatch = function Minimatch (pattern, options) {                                                                // 101\n    return new orig.Minimatch(pattern, ext(def, options))                                                              // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  return m                                                                                                             // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\nMinimatch.defaults = function (def) {                                                                                  // 108\n  if (!def || !Object.keys(def).length) return Minimatch                                                               // 109\n  return minimatch.defaults(def).Minimatch                                                                             // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\n                                                                                                                       // 113\nfunction minimatch (p, pattern, options) {                                                                             // 114\n  if (typeof pattern !== \"string\") {                                                                                   // 115\n    throw new TypeError(\"glob pattern string required\")                                                                // 116\n  }                                                                                                                    // 117\n                                                                                                                       // 118\n  if (!options) options = {}                                                                                           // 119\n                                                                                                                       // 120\n  // shortcut: comments match nothing.                                                                                 // 121\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {                                                               // 122\n    return false                                                                                                       // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  // \"\" only matches \"\"                                                                                                // 126\n  if (pattern.trim() === \"\") return p === \"\"                                                                           // 127\n                                                                                                                       // 128\n  return new Minimatch(pattern, options).match(p)                                                                      // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\nfunction Minimatch (pattern, options) {                                                                                // 132\n  if (!(this instanceof Minimatch)) {                                                                                  // 133\n    return new Minimatch(pattern, options, cache)                                                                      // 134\n  }                                                                                                                    // 135\n                                                                                                                       // 136\n  if (typeof pattern !== \"string\") {                                                                                   // 137\n    throw new TypeError(\"glob pattern string required\")                                                                // 138\n  }                                                                                                                    // 139\n                                                                                                                       // 140\n  if (!options) options = {}                                                                                           // 141\n  pattern = pattern.trim()                                                                                             // 142\n                                                                                                                       // 143\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.                                                      // 145\n  if (platform === \"win32\") {                                                                                          // 146\n    pattern = pattern.split(\"\\\\\").join(\"/\")                                                                            // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  // lru storage.                                                                                                      // 150\n  // these things aren't particularly big, but walking down the string                                                 // 151\n  // and turning it into a regexp can get pretty costly.                                                               // 152\n  var cacheKey = pattern + \"\\n\" + sigmund(options)                                                                     // 153\n  var cached = minimatch.cache.get(cacheKey)                                                                           // 154\n  if (cached) return cached                                                                                            // 155\n  minimatch.cache.set(cacheKey, this)                                                                                  // 156\n                                                                                                                       // 157\n  this.options = options                                                                                               // 158\n  this.set = []                                                                                                        // 159\n  this.pattern = pattern                                                                                               // 160\n  this.regexp = null                                                                                                   // 161\n  this.negate = false                                                                                                  // 162\n  this.comment = false                                                                                                 // 163\n  this.empty = false                                                                                                   // 164\n                                                                                                                       // 165\n  // make the set of regexps etc.                                                                                      // 166\n  this.make()                                                                                                          // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\nMinimatch.prototype.debug = function() {}                                                                              // 170\n                                                                                                                       // 171\nMinimatch.prototype.make = make                                                                                        // 172\nfunction make () {                                                                                                     // 173\n  // don't do it more than once.                                                                                       // 174\n  if (this._made) return                                                                                               // 175\n                                                                                                                       // 176\n  var pattern = this.pattern                                                                                           // 177\n  var options = this.options                                                                                           // 178\n                                                                                                                       // 179\n  // empty patterns and comments match nothing.                                                                        // 180\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {                                                               // 181\n    this.comment = true                                                                                                // 182\n    return                                                                                                             // 183\n  }                                                                                                                    // 184\n  if (!pattern) {                                                                                                      // 185\n    this.empty = true                                                                                                  // 186\n    return                                                                                                             // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  // step 1: figure out negation, etc.                                                                                 // 190\n  this.parseNegate()                                                                                                   // 191\n                                                                                                                       // 192\n  // step 2: expand braces                                                                                             // 193\n  var set = this.globSet = this.braceExpand()                                                                          // 194\n                                                                                                                       // 195\n  if (options.debug) this.debug = console.error                                                                        // 196\n                                                                                                                       // 197\n  this.debug(this.pattern, set)                                                                                        // 198\n                                                                                                                       // 199\n  // step 3: now we have a set, so turn each one into a series of path-portion                                         // 200\n  // matching patterns.                                                                                                // 201\n  // These will be regexps, except in the case of \"**\", which is                                                       // 202\n  // set to the GLOBSTAR object for globstar behavior,                                                                 // 203\n  // and will not contain any / characters                                                                             // 204\n  set = this.globParts = set.map(function (s) {                                                                        // 205\n    return s.split(slashSplit)                                                                                         // 206\n  })                                                                                                                   // 207\n                                                                                                                       // 208\n  this.debug(this.pattern, set)                                                                                        // 209\n                                                                                                                       // 210\n  // glob --> regexps                                                                                                  // 211\n  set = set.map(function (s, si, set) {                                                                                // 212\n    return s.map(this.parse, this)                                                                                     // 213\n  }, this)                                                                                                             // 214\n                                                                                                                       // 215\n  this.debug(this.pattern, set)                                                                                        // 216\n                                                                                                                       // 217\n  // filter out everything that didn't compile properly.                                                               // 218\n  set = set.filter(function (s) {                                                                                      // 219\n    return -1 === s.indexOf(false)                                                                                     // 220\n  })                                                                                                                   // 221\n                                                                                                                       // 222\n  this.debug(this.pattern, set)                                                                                        // 223\n                                                                                                                       // 224\n  this.set = set                                                                                                       // 225\n}                                                                                                                      // 226\n                                                                                                                       // 227\nMinimatch.prototype.parseNegate = parseNegate                                                                          // 228\nfunction parseNegate () {                                                                                              // 229\n  var pattern = this.pattern                                                                                           // 230\n    , negate = false                                                                                                   // 231\n    , options = this.options                                                                                           // 232\n    , negateOffset = 0                                                                                                 // 233\n                                                                                                                       // 234\n  if (options.nonegate) return                                                                                         // 235\n                                                                                                                       // 236\n  for ( var i = 0, l = pattern.length                                                                                  // 237\n      ; i < l && pattern.charAt(i) === \"!\"                                                                             // 238\n      ; i ++) {                                                                                                        // 239\n    negate = !negate                                                                                                   // 240\n    negateOffset ++                                                                                                    // 241\n  }                                                                                                                    // 242\n                                                                                                                       // 243\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)                                                        // 244\n  this.negate = negate                                                                                                 // 245\n}                                                                                                                      // 246\n                                                                                                                       // 247\n// Brace expansion:                                                                                                    // 248\n// a{b,c}d -> abd acd                                                                                                  // 249\n// a{b,}c -> abc ac                                                                                                    // 250\n// a{0..3}d -> a0d a1d a2d a3d                                                                                         // 251\n// a{b,c{d,e}f}g -> abg acdfg acefg                                                                                    // 252\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg                                                                            // 253\n//                                                                                                                     // 254\n// Invalid sets are not expanded.                                                                                      // 255\n// a{2..}b -> a{2..}b                                                                                                  // 256\n// a{b}c -> a{b}c                                                                                                      // 257\nminimatch.braceExpand = function (pattern, options) {                                                                  // 258\n  return new Minimatch(pattern, options).braceExpand()                                                                 // 259\n}                                                                                                                      // 260\n                                                                                                                       // 261\nMinimatch.prototype.braceExpand = braceExpand                                                                          // 262\nfunction braceExpand (pattern, options) {                                                                              // 263\n  options = options || this.options                                                                                    // 264\n  pattern = typeof pattern === \"undefined\"                                                                             // 265\n    ? this.pattern : pattern                                                                                           // 266\n                                                                                                                       // 267\n  if (typeof pattern === \"undefined\") {                                                                                // 268\n    throw new Error(\"undefined pattern\")                                                                               // 269\n  }                                                                                                                    // 270\n                                                                                                                       // 271\n  if (options.nobrace ||                                                                                               // 272\n      !pattern.match(/\\{.*\\}/)) {                                                                                      // 273\n    // shortcut. no need to expand.                                                                                    // 274\n    return [pattern]                                                                                                   // 275\n  }                                                                                                                    // 276\n                                                                                                                       // 277\n  var escaping = false                                                                                                 // 278\n                                                                                                                       // 279\n  // examples and comments refer to this crazy pattern:                                                                // 280\n  // a{b,c{d,e},{f,g}h}x{y,z}                                                                                          // 281\n  // expected:                                                                                                         // 282\n  // abxy                                                                                                              // 283\n  // abxz                                                                                                              // 284\n  // acdxy                                                                                                             // 285\n  // acdxz                                                                                                             // 286\n  // acexy                                                                                                             // 287\n  // acexz                                                                                                             // 288\n  // afhxy                                                                                                             // 289\n  // afhxz                                                                                                             // 290\n  // aghxy                                                                                                             // 291\n  // aghxz                                                                                                             // 292\n                                                                                                                       // 293\n  // everything before the first \\{ is just a prefix.                                                                  // 294\n  // So, we pluck that off, and work with the rest,                                                                    // 295\n  // and then prepend it to everything we find.                                                                        // 296\n  if (pattern.charAt(0) !== \"{\") {                                                                                     // 297\n    this.debug(pattern)                                                                                                // 298\n    var prefix = null                                                                                                  // 299\n    for (var i = 0, l = pattern.length; i < l; i ++) {                                                                 // 300\n      var c = pattern.charAt(i)                                                                                        // 301\n      this.debug(i, c)                                                                                                 // 302\n      if (c === \"\\\\\") {                                                                                                // 303\n        escaping = !escaping                                                                                           // 304\n      } else if (c === \"{\" && !escaping) {                                                                             // 305\n        prefix = pattern.substr(0, i)                                                                                  // 306\n        break                                                                                                          // 307\n      }                                                                                                                // 308\n    }                                                                                                                  // 309\n                                                                                                                       // 310\n    // actually no sets, all { were escaped.                                                                           // 311\n    if (prefix === null) {                                                                                             // 312\n      this.debug(\"no sets\")                                                                                            // 313\n      return [pattern]                                                                                                 // 314\n    }                                                                                                                  // 315\n                                                                                                                       // 316\n   var tail = braceExpand.call(this, pattern.substr(i), options)                                                       // 317\n    return tail.map(function (t) {                                                                                     // 318\n      return prefix + t                                                                                                // 319\n    })                                                                                                                 // 320\n  }                                                                                                                    // 321\n                                                                                                                       // 322\n  // now we have something like:                                                                                       // 323\n  // {b,c{d,e},{f,g}h}x{y,z}                                                                                           // 324\n  // walk through the set, expanding each part, until                                                                  // 325\n  // the set ends.  then, we'll expand the suffix.                                                                     // 326\n  // If the set only has a single member, then'll put the {} back                                                      // 327\n                                                                                                                       // 328\n  // first, handle numeric sets, since they're easier                                                                  // 329\n  var numset = pattern.match(/^\\{(-?[0-9]+)\\.\\.(-?[0-9]+)\\}/)                                                          // 330\n  if (numset) {                                                                                                        // 331\n    this.debug(\"numset\", numset[1], numset[2])                                                                         // 332\n    var suf = braceExpand.call(this, pattern.substr(numset[0].length), options)                                        // 333\n      , start = +numset[1]                                                                                             // 334\n      , end = +numset[2]                                                                                               // 335\n      , inc = start > end ? -1 : 1                                                                                     // 336\n      , set = []                                                                                                       // 337\n    for (var i = start; i != (end + inc); i += inc) {                                                                  // 338\n      // append all the suffixes                                                                                       // 339\n      for (var ii = 0, ll = suf.length; ii < ll; ii ++) {                                                              // 340\n        set.push(i + suf[ii])                                                                                          // 341\n      }                                                                                                                // 342\n    }                                                                                                                  // 343\n    return set                                                                                                         // 344\n  }                                                                                                                    // 345\n                                                                                                                       // 346\n  // ok, walk through the set                                                                                          // 347\n  // We hope, somewhat optimistically, that there                                                                      // 348\n  // will be a } at the end.                                                                                           // 349\n  // If the closing brace isn't found, then the pattern is                                                             // 350\n  // interpreted as braceExpand(\"\\\\\" + pattern) so that                                                                // 351\n  // the leading \\{ will be interpreted literally.                                                                     // 352\n  var i = 1 // skip the \\{                                                                                             // 353\n    , depth = 1                                                                                                        // 354\n    , set = []                                                                                                         // 355\n    , member = \"\"                                                                                                      // 356\n    , sawEnd = false                                                                                                   // 357\n    , escaping = false                                                                                                 // 358\n                                                                                                                       // 359\n  function addMember () {                                                                                              // 360\n    set.push(member)                                                                                                   // 361\n    member = \"\"                                                                                                        // 362\n  }                                                                                                                    // 363\n                                                                                                                       // 364\n  this.debug(\"Entering for\")                                                                                           // 365\n  FOR: for (i = 1, l = pattern.length; i < l; i ++) {                                                                  // 366\n    var c = pattern.charAt(i)                                                                                          // 367\n    this.debug(\"\", i, c)                                                                                               // 368\n                                                                                                                       // 369\n    if (escaping) {                                                                                                    // 370\n      escaping = false                                                                                                 // 371\n      member += \"\\\\\" + c                                                                                               // 372\n    } else {                                                                                                           // 373\n      switch (c) {                                                                                                     // 374\n        case \"\\\\\":                                                                                                     // 375\n          escaping = true                                                                                              // 376\n          continue                                                                                                     // 377\n                                                                                                                       // 378\n        case \"{\":                                                                                                      // 379\n          depth ++                                                                                                     // 380\n          member += \"{\"                                                                                                // 381\n          continue                                                                                                     // 382\n                                                                                                                       // 383\n        case \"}\":                                                                                                      // 384\n          depth --                                                                                                     // 385\n          // if this closes the actual set, then we're done                                                            // 386\n          if (depth === 0) {                                                                                           // 387\n            addMember()                                                                                                // 388\n            // pluck off the close-brace                                                                               // 389\n            i ++                                                                                                       // 390\n            break FOR                                                                                                  // 391\n          } else {                                                                                                     // 392\n            member += c                                                                                                // 393\n            continue                                                                                                   // 394\n          }                                                                                                            // 395\n                                                                                                                       // 396\n        case \",\":                                                                                                      // 397\n          if (depth === 1) {                                                                                           // 398\n            addMember()                                                                                                // 399\n          } else {                                                                                                     // 400\n            member += c                                                                                                // 401\n          }                                                                                                            // 402\n          continue                                                                                                     // 403\n                                                                                                                       // 404\n        default:                                                                                                       // 405\n          member += c                                                                                                  // 406\n          continue                                                                                                     // 407\n      } // switch                                                                                                      // 408\n    } // else                                                                                                          // 409\n  } // for                                                                                                             // 410\n                                                                                                                       // 411\n  // now we've either finished the set, and the suffix is                                                              // 412\n  // pattern.substr(i), or we have *not* closed the set,                                                               // 413\n  // and need to escape the leading brace                                                                              // 414\n  if (depth !== 0) {                                                                                                   // 415\n    this.debug(\"didn't close\", pattern)                                                                                // 416\n    return braceExpand.call(this, \"\\\\\" + pattern, options)                                                             // 417\n  }                                                                                                                    // 418\n                                                                                                                       // 419\n  // x{y,z} -> [\"xy\", \"xz\"]                                                                                            // 420\n  this.debug(\"set\", set)                                                                                               // 421\n  this.debug(\"suffix\", pattern.substr(i))                                                                              // 422\n  var suf = braceExpand.call(this, pattern.substr(i), options)                                                         // 423\n  // [\"b\", \"c{d,e}\",\"{f,g}h\"] ->                                                                                       // 424\n  //   [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]]                                                                             // 425\n  var addBraces = set.length === 1                                                                                     // 426\n  this.debug(\"set pre-expanded\", set)                                                                                  // 427\n  set = set.map(function (p) {                                                                                         // 428\n    return braceExpand.call(this, p, options)                                                                          // 429\n  }, this)                                                                                                             // 430\n  this.debug(\"set expanded\", set)                                                                                      // 431\n                                                                                                                       // 432\n                                                                                                                       // 433\n  // [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]] ->                                                                            // 434\n  //   [\"b\", \"cd\", \"ce\", \"fh\", \"gh\"]                                                                                   // 435\n  set = set.reduce(function (l, r) {                                                                                   // 436\n    return l.concat(r)                                                                                                 // 437\n  })                                                                                                                   // 438\n                                                                                                                       // 439\n  if (addBraces) {                                                                                                     // 440\n    set = set.map(function (s) {                                                                                       // 441\n      return \"{\" + s + \"}\"                                                                                             // 442\n    })                                                                                                                 // 443\n  }                                                                                                                    // 444\n                                                                                                                       // 445\n  // now attach the suffixes.                                                                                          // 446\n  var ret = []                                                                                                         // 447\n  for (var i = 0, l = set.length; i < l; i ++) {                                                                       // 448\n    for (var ii = 0, ll = suf.length; ii < ll; ii ++) {                                                                // 449\n      ret.push(set[i] + suf[ii])                                                                                       // 450\n    }                                                                                                                  // 451\n  }                                                                                                                    // 452\n  return ret                                                                                                           // 453\n}                                                                                                                      // 454\n                                                                                                                       // 455\n// parse a component of the expanded set.                                                                              // 456\n// At this point, no pattern may contain \"/\" in it                                                                     // 457\n// so we're going to return a 2d array, where each entry is the full                                                   // 458\n// pattern, split on '/', and then turned into a regular expression.                                                   // 459\n// A regexp is made at the end which joins each array with an                                                          // 460\n// escaped /, and another full one which joins each regexp with |.                                                     // 461\n//                                                                                                                     // 462\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning                                             // 463\n// when it is the *only* thing in a path portion.  Otherwise, any series                                               // 464\n// of * is equivalent to a single *.  Globstar behavior is enabled by                                                  // 465\n// default, and can be disabled by setting options.noglobstar.                                                         // 466\nMinimatch.prototype.parse = parse                                                                                      // 467\nvar SUBPARSE = {}                                                                                                      // 468\nfunction parse (pattern, isSub) {                                                                                      // 469\n  var options = this.options                                                                                           // 470\n                                                                                                                       // 471\n  // shortcuts                                                                                                         // 472\n  if (!options.noglobstar && pattern === \"**\") return GLOBSTAR                                                         // 473\n  if (pattern === \"\") return \"\"                                                                                        // 474\n                                                                                                                       // 475\n  var re = \"\"                                                                                                          // 476\n    , hasMagic = !!options.nocase                                                                                      // 477\n    , escaping = false                                                                                                 // 478\n    // ? => one single character                                                                                       // 479\n    , patternListStack = []                                                                                            // 480\n    , plType                                                                                                           // 481\n    , stateChar                                                                                                        // 482\n    , inClass = false                                                                                                  // 483\n    , reClassStart = -1                                                                                                // 484\n    , classStart = -1                                                                                                  // 485\n    // . and .. never match anything that doesn't start with .,                                                        // 486\n    // even when options.dot is set.                                                                                   // 487\n    , patternStart = pattern.charAt(0) === \".\" ? \"\" // anything                                                        // 488\n      // not (start or / followed by . or .. followed by / or end)                                                     // 489\n      : options.dot ? \"(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))\"                                                               // 490\n      : \"(?!\\\\.)\"                                                                                                      // 491\n    , self = this                                                                                                      // 492\n                                                                                                                       // 493\n  function clearStateChar () {                                                                                         // 494\n    if (stateChar) {                                                                                                   // 495\n      // we had some state-tracking character                                                                          // 496\n      // that wasn't consumed by this pass.                                                                            // 497\n      switch (stateChar) {                                                                                             // 498\n        case \"*\":                                                                                                      // 499\n          re += star                                                                                                   // 500\n          hasMagic = true                                                                                              // 501\n          break                                                                                                        // 502\n        case \"?\":                                                                                                      // 503\n          re += qmark                                                                                                  // 504\n          hasMagic = true                                                                                              // 505\n          break                                                                                                        // 506\n        default:                                                                                                       // 507\n          re += \"\\\\\"+stateChar                                                                                         // 508\n          break                                                                                                        // 509\n      }                                                                                                                // 510\n      self.debug('clearStateChar %j %j', stateChar, re)                                                                // 511\n      stateChar = false                                                                                                // 512\n    }                                                                                                                  // 513\n  }                                                                                                                    // 514\n                                                                                                                       // 515\n  for ( var i = 0, len = pattern.length, c                                                                             // 516\n      ; (i < len) && (c = pattern.charAt(i))                                                                           // 517\n      ; i ++ ) {                                                                                                       // 518\n                                                                                                                       // 519\n    this.debug(\"%s\\t%s %s %j\", pattern, i, re, c)                                                                      // 520\n                                                                                                                       // 521\n    // skip over any that are escaped.                                                                                 // 522\n    if (escaping && reSpecials[c]) {                                                                                   // 523\n      re += \"\\\\\" + c                                                                                                   // 524\n      escaping = false                                                                                                 // 525\n      continue                                                                                                         // 526\n    }                                                                                                                  // 527\n                                                                                                                       // 528\n    SWITCH: switch (c) {                                                                                               // 529\n      case \"/\":                                                                                                        // 530\n        // completely not allowed, even escaped.                                                                       // 531\n        // Should already be path-split by now.                                                                        // 532\n        return false                                                                                                   // 533\n                                                                                                                       // 534\n      case \"\\\\\":                                                                                                       // 535\n        clearStateChar()                                                                                               // 536\n        escaping = true                                                                                                // 537\n        continue                                                                                                       // 538\n                                                                                                                       // 539\n      // the various stateChar values                                                                                  // 540\n      // for the \"extglob\" stuff.                                                                                      // 541\n      case \"?\":                                                                                                        // 542\n      case \"*\":                                                                                                        // 543\n      case \"+\":                                                                                                        // 544\n      case \"@\":                                                                                                        // 545\n      case \"!\":                                                                                                        // 546\n        this.debug(\"%s\\t%s %s %j <-- stateChar\", pattern, i, re, c)                                                    // 547\n                                                                                                                       // 548\n        // all of those are literals inside a class, except that                                                       // 549\n        // the glob [!a] means [^a] in regexp                                                                          // 550\n        if (inClass) {                                                                                                 // 551\n          this.debug('  in class')                                                                                     // 552\n          if (c === \"!\" && i === classStart + 1) c = \"^\"                                                               // 553\n          re += c                                                                                                      // 554\n          continue                                                                                                     // 555\n        }                                                                                                              // 556\n                                                                                                                       // 557\n        // if we already have a stateChar, then it means                                                               // 558\n        // that there was something like ** or +? in there.                                                            // 559\n        // Handle the stateChar, then proceed with this one.                                                           // 560\n        self.debug('call clearStateChar %j', stateChar)                                                                // 561\n        clearStateChar()                                                                                               // 562\n        stateChar = c                                                                                                  // 563\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.                                                     // 564\n        // just clear the statechar *now*, rather than even diving into                                                // 565\n        // the patternList stuff.                                                                                      // 566\n        if (options.noext) clearStateChar()                                                                            // 567\n        continue                                                                                                       // 568\n                                                                                                                       // 569\n      case \"(\":                                                                                                        // 570\n        if (inClass) {                                                                                                 // 571\n          re += \"(\"                                                                                                    // 572\n          continue                                                                                                     // 573\n        }                                                                                                              // 574\n                                                                                                                       // 575\n        if (!stateChar) {                                                                                              // 576\n          re += \"\\\\(\"                                                                                                  // 577\n          continue                                                                                                     // 578\n        }                                                                                                              // 579\n                                                                                                                       // 580\n        plType = stateChar                                                                                             // 581\n        patternListStack.push({ type: plType                                                                           // 582\n                              , start: i - 1                                                                           // 583\n                              , reStart: re.length })                                                                  // 584\n        // negation is (?:(?!js)[^/]*)                                                                                 // 585\n        re += stateChar === \"!\" ? \"(?:(?!\" : \"(?:\"                                                                     // 586\n        this.debug('plType %j %j', stateChar, re)                                                                      // 587\n        stateChar = false                                                                                              // 588\n        continue                                                                                                       // 589\n                                                                                                                       // 590\n      case \")\":                                                                                                        // 591\n        if (inClass || !patternListStack.length) {                                                                     // 592\n          re += \"\\\\)\"                                                                                                  // 593\n          continue                                                                                                     // 594\n        }                                                                                                              // 595\n                                                                                                                       // 596\n        clearStateChar()                                                                                               // 597\n        hasMagic = true                                                                                                // 598\n        re += \")\"                                                                                                      // 599\n        plType = patternListStack.pop().type                                                                           // 600\n        // negation is (?:(?!js)[^/]*)                                                                                 // 601\n        // The others are (?:<pattern>)<type>                                                                          // 602\n        switch (plType) {                                                                                              // 603\n          case \"!\":                                                                                                    // 604\n            re += \"[^/]*?)\"                                                                                            // 605\n            break                                                                                                      // 606\n          case \"?\":                                                                                                    // 607\n          case \"+\":                                                                                                    // 608\n          case \"*\": re += plType                                                                                       // 609\n          case \"@\": break // the default anyway                                                                        // 610\n        }                                                                                                              // 611\n        continue                                                                                                       // 612\n                                                                                                                       // 613\n      case \"|\":                                                                                                        // 614\n        if (inClass || !patternListStack.length || escaping) {                                                         // 615\n          re += \"\\\\|\"                                                                                                  // 616\n          escaping = false                                                                                             // 617\n          continue                                                                                                     // 618\n        }                                                                                                              // 619\n                                                                                                                       // 620\n        clearStateChar()                                                                                               // 621\n        re += \"|\"                                                                                                      // 622\n        continue                                                                                                       // 623\n                                                                                                                       // 624\n      // these are mostly the same in regexp and glob                                                                  // 625\n      case \"[\":                                                                                                        // 626\n        // swallow any state-tracking char before the [                                                                // 627\n        clearStateChar()                                                                                               // 628\n                                                                                                                       // 629\n        if (inClass) {                                                                                                 // 630\n          re += \"\\\\\" + c                                                                                               // 631\n          continue                                                                                                     // 632\n        }                                                                                                              // 633\n                                                                                                                       // 634\n        inClass = true                                                                                                 // 635\n        classStart = i                                                                                                 // 636\n        reClassStart = re.length                                                                                       // 637\n        re += c                                                                                                        // 638\n        continue                                                                                                       // 639\n                                                                                                                       // 640\n      case \"]\":                                                                                                        // 641\n        //  a right bracket shall lose its special                                                                     // 642\n        //  meaning and represent itself in                                                                            // 643\n        //  a bracket expression if it occurs                                                                          // 644\n        //  first in the list.  -- POSIX.2 2.8.3.2                                                                     // 645\n        if (i === classStart + 1 || !inClass) {                                                                        // 646\n          re += \"\\\\\" + c                                                                                               // 647\n          escaping = false                                                                                             // 648\n          continue                                                                                                     // 649\n        }                                                                                                              // 650\n                                                                                                                       // 651\n        // finish up the class.                                                                                        // 652\n        hasMagic = true                                                                                                // 653\n        inClass = false                                                                                                // 654\n        re += c                                                                                                        // 655\n        continue                                                                                                       // 656\n                                                                                                                       // 657\n      default:                                                                                                         // 658\n        // swallow any state char that wasn't consumed                                                                 // 659\n        clearStateChar()                                                                                               // 660\n                                                                                                                       // 661\n        if (escaping) {                                                                                                // 662\n          // no need                                                                                                   // 663\n          escaping = false                                                                                             // 664\n        } else if (reSpecials[c]                                                                                       // 665\n                   && !(c === \"^\" && inClass)) {                                                                       // 666\n          re += \"\\\\\"                                                                                                   // 667\n        }                                                                                                              // 668\n                                                                                                                       // 669\n        re += c                                                                                                        // 670\n                                                                                                                       // 671\n    } // switch                                                                                                        // 672\n  } // for                                                                                                             // 673\n                                                                                                                       // 674\n                                                                                                                       // 675\n  // handle the case where we left a class open.                                                                       // 676\n  // \"[abc\" is valid, equivalent to \"\\[abc\"                                                                            // 677\n  if (inClass) {                                                                                                       // 678\n    // split where the last [ was, and escape it                                                                       // 679\n    // this is a huge pita.  We now have to re-walk                                                                    // 680\n    // the contents of the would-be class to re-translate                                                              // 681\n    // any characters that were passed through as-is                                                                   // 682\n    var cs = pattern.substr(classStart + 1)                                                                            // 683\n      , sp = this.parse(cs, SUBPARSE)                                                                                  // 684\n    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0]                                                                    // 685\n    hasMagic = hasMagic || sp[1]                                                                                       // 686\n  }                                                                                                                    // 687\n                                                                                                                       // 688\n  // handle the case where we had a +( thing at the *end*                                                              // 689\n  // of the pattern.                                                                                                   // 690\n  // each pattern list stack adds 3 chars, and we need to go through                                                   // 691\n  // and escape any | chars that were passed through as-is for the regexp.                                             // 692\n  // Go through and escape them, taking care not to double-escape any                                                  // 693\n  // | chars that were already escaped.                                                                                // 694\n  var pl                                                                                                               // 695\n  while (pl = patternListStack.pop()) {                                                                                // 696\n    var tail = re.slice(pl.reStart + 3)                                                                                // 697\n    // maybe some even number of \\, then maybe 1 \\, followed by a |                                                    // 698\n    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {                                                 // 699\n      if (!$2) {                                                                                                       // 700\n        // the | isn't already escaped, so escape it.                                                                  // 701\n        $2 = \"\\\\\"                                                                                                      // 702\n      }                                                                                                                // 703\n                                                                                                                       // 704\n      // need to escape all those slashes *again*, without escaping the                                                // 705\n      // one that we need for escaping the | character.  As it works out,                                              // 706\n      // escaping an even number of slashes can be done by simply repeating                                            // 707\n      // it exactly after itself.  That's why this trick works.                                                        // 708\n      //                                                                                                               // 709\n      // I am sorry that you have to see this.                                                                         // 710\n      return $1 + $1 + $2 + \"|\"                                                                                        // 711\n    })                                                                                                                 // 712\n                                                                                                                       // 713\n    this.debug(\"tail=%j\\n   %s\", tail, tail)                                                                           // 714\n    var t = pl.type === \"*\" ? star                                                                                     // 715\n          : pl.type === \"?\" ? qmark                                                                                    // 716\n          : \"\\\\\" + pl.type                                                                                             // 717\n                                                                                                                       // 718\n    hasMagic = true                                                                                                    // 719\n    re = re.slice(0, pl.reStart)                                                                                       // 720\n       + t + \"\\\\(\"                                                                                                     // 721\n       + tail                                                                                                          // 722\n  }                                                                                                                    // 723\n                                                                                                                       // 724\n  // handle trailing things that only matter at the very end.                                                          // 725\n  clearStateChar()                                                                                                     // 726\n  if (escaping) {                                                                                                      // 727\n    // trailing \\\\\n    re += \"\\\\\\\\\"                                                                                                       // 729\n  }                                                                                                                    // 730\n                                                                                                                       // 731\n  // only need to apply the nodot start if the re starts with                                                          // 732\n  // something that could conceivably capture a dot                                                                    // 733\n  var addPatternStart = false                                                                                          // 734\n  switch (re.charAt(0)) {                                                                                              // 735\n    case \".\":                                                                                                          // 736\n    case \"[\":                                                                                                          // 737\n    case \"(\": addPatternStart = true                                                                                   // 738\n  }                                                                                                                    // 739\n                                                                                                                       // 740\n  // if the re is not \"\" at this point, then we need to make sure                                                      // 741\n  // it doesn't match against an empty path part.                                                                      // 742\n  // Otherwise a/* will match a/, which it should not.                                                                 // 743\n  if (re !== \"\" && hasMagic) re = \"(?=.)\" + re                                                                         // 744\n                                                                                                                       // 745\n  if (addPatternStart) re = patternStart + re                                                                          // 746\n                                                                                                                       // 747\n  // parsing just a piece of a larger pattern.                                                                         // 748\n  if (isSub === SUBPARSE) {                                                                                            // 749\n    return [ re, hasMagic ]                                                                                            // 750\n  }                                                                                                                    // 751\n                                                                                                                       // 752\n  // skip the regexp for non-magical patterns                                                                          // 753\n  // unescape anything in it, though, so that it'll be                                                                 // 754\n  // an exact match against a file etc.                                                                                // 755\n  if (!hasMagic) {                                                                                                     // 756\n    return globUnescape(pattern)                                                                                       // 757\n  }                                                                                                                    // 758\n                                                                                                                       // 759\n  var flags = options.nocase ? \"i\" : \"\"                                                                                // 760\n    , regExp = new RegExp(\"^\" + re + \"$\", flags)                                                                       // 761\n                                                                                                                       // 762\n  regExp._glob = pattern                                                                                               // 763\n  regExp._src = re                                                                                                     // 764\n                                                                                                                       // 765\n  return regExp                                                                                                        // 766\n}                                                                                                                      // 767\n                                                                                                                       // 768\nminimatch.makeRe = function (pattern, options) {                                                                       // 769\n  return new Minimatch(pattern, options || {}).makeRe()                                                                // 770\n}                                                                                                                      // 771\n                                                                                                                       // 772\nMinimatch.prototype.makeRe = makeRe                                                                                    // 773\nfunction makeRe () {                                                                                                   // 774\n  if (this.regexp || this.regexp === false) return this.regexp                                                         // 775\n                                                                                                                       // 776\n  // at this point, this.set is a 2d array of partial                                                                  // 777\n  // pattern strings, or \"**\".                                                                                         // 778\n  //                                                                                                                   // 779\n  // It's better to use .match().  This function shouldn't                                                             // 780\n  // be used, really, but it's pretty convenient sometimes,                                                            // 781\n  // when you just want to work with a regex.                                                                          // 782\n  var set = this.set                                                                                                   // 783\n                                                                                                                       // 784\n  if (!set.length) return this.regexp = false                                                                          // 785\n  var options = this.options                                                                                           // 786\n                                                                                                                       // 787\n  var twoStar = options.noglobstar ? star                                                                              // 788\n      : options.dot ? twoStarDot                                                                                       // 789\n      : twoStarNoDot                                                                                                   // 790\n    , flags = options.nocase ? \"i\" : \"\"                                                                                // 791\n                                                                                                                       // 792\n  var re = set.map(function (pattern) {                                                                                // 793\n    return pattern.map(function (p) {                                                                                  // 794\n      return (p === GLOBSTAR) ? twoStar                                                                                // 795\n           : (typeof p === \"string\") ? regExpEscape(p)                                                                 // 796\n           : p._src                                                                                                    // 797\n    }).join(\"\\\\\\/\")                                                                                                    // 798\n  }).join(\"|\")                                                                                                         // 799\n                                                                                                                       // 800\n  // must match entire pattern                                                                                         // 801\n  // ending in a * or ** will make it less strict.                                                                     // 802\n  re = \"^(?:\" + re + \")$\"                                                                                              // 803\n                                                                                                                       // 804\n  // can match anything, as long as it's not this.                                                                     // 805\n  if (this.negate) re = \"^(?!\" + re + \").*$\"                                                                           // 806\n                                                                                                                       // 807\n  try {                                                                                                                // 808\n    return this.regexp = new RegExp(re, flags)                                                                         // 809\n  } catch (ex) {                                                                                                       // 810\n    return this.regexp = false                                                                                         // 811\n  }                                                                                                                    // 812\n}                                                                                                                      // 813\n                                                                                                                       // 814\nminimatch.match = function (list, pattern, options) {                                                                  // 815\n  var mm = new Minimatch(pattern, options)                                                                             // 816\n  list = list.filter(function (f) {                                                                                    // 817\n    return mm.match(f)                                                                                                 // 818\n  })                                                                                                                   // 819\n  if (options.nonull && !list.length) {                                                                                // 820\n    list.push(pattern)                                                                                                 // 821\n  }                                                                                                                    // 822\n  return list                                                                                                          // 823\n}                                                                                                                      // 824\n                                                                                                                       // 825\nMinimatch.prototype.match = match                                                                                      // 826\nfunction match (f, partial) {                                                                                          // 827\n  this.debug(\"match\", f, this.pattern)                                                                                 // 828\n  // short-circuit in the case of busted things.                                                                       // 829\n  // comments, etc.                                                                                                    // 830\n  if (this.comment) return false                                                                                       // 831\n  if (this.empty) return f === \"\"                                                                                      // 832\n                                                                                                                       // 833\n  if (f === \"/\" && partial) return true                                                                                // 834\n                                                                                                                       // 835\n  var options = this.options                                                                                           // 836\n                                                                                                                       // 837\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.                                                      // 839\n  if (platform === \"win32\") {                                                                                          // 840\n    f = f.split(\"\\\\\").join(\"/\")                                                                                        // 841\n  }                                                                                                                    // 842\n                                                                                                                       // 843\n  // treat the test path as a set of pathparts.                                                                        // 844\n  f = f.split(slashSplit)                                                                                              // 845\n  this.debug(this.pattern, \"split\", f)                                                                                 // 846\n                                                                                                                       // 847\n  // just ONE of the pattern sets in this.set needs to match                                                           // 848\n  // in order for it to be valid.  If negating, then just one                                                          // 849\n  // match means that we have failed.                                                                                  // 850\n  // Either way, return on the first hit.                                                                              // 851\n                                                                                                                       // 852\n  var set = this.set                                                                                                   // 853\n  this.debug(this.pattern, \"set\", set)                                                                                 // 854\n                                                                                                                       // 855\n  var splitFile = path.basename(f.join(\"/\")).split(\"/\")                                                                // 856\n                                                                                                                       // 857\n  for (var i = 0, l = set.length; i < l; i ++) {                                                                       // 858\n    var pattern = set[i], file = f                                                                                     // 859\n    if (options.matchBase && pattern.length === 1) {                                                                   // 860\n      file = splitFile                                                                                                 // 861\n    }                                                                                                                  // 862\n    var hit = this.matchOne(file, pattern, partial)                                                                    // 863\n    if (hit) {                                                                                                         // 864\n      if (options.flipNegate) return true                                                                              // 865\n      return !this.negate                                                                                              // 866\n    }                                                                                                                  // 867\n  }                                                                                                                    // 868\n                                                                                                                       // 869\n  // didn't get any hits.  this is success if it's a negative                                                          // 870\n  // pattern, failure otherwise.                                                                                       // 871\n  if (options.flipNegate) return false                                                                                 // 872\n  return this.negate                                                                                                   // 873\n}                                                                                                                      // 874\n                                                                                                                       // 875\n// set partial to true to test if, for example,                                                                        // 876\n// \"/a/b\" matches the start of \"/*/b/*/d\"                                                                              // 877\n// Partial means, if you run out of file before you run                                                                // 878\n// out of pattern, then that's fine, as long as all                                                                    // 879\n// the parts match.                                                                                                    // 880\nMinimatch.prototype.matchOne = function (file, pattern, partial) {                                                     // 881\n  var options = this.options                                                                                           // 882\n                                                                                                                       // 883\n  this.debug(\"matchOne\",                                                                                               // 884\n              { \"this\": this                                                                                           // 885\n              , file: file                                                                                             // 886\n              , pattern: pattern })                                                                                    // 887\n                                                                                                                       // 888\n  this.debug(\"matchOne\", file.length, pattern.length)                                                                  // 889\n                                                                                                                       // 890\n  for ( var fi = 0                                                                                                     // 891\n          , pi = 0                                                                                                     // 892\n          , fl = file.length                                                                                           // 893\n          , pl = pattern.length                                                                                        // 894\n      ; (fi < fl) && (pi < pl)                                                                                         // 895\n      ; fi ++, pi ++ ) {                                                                                               // 896\n                                                                                                                       // 897\n    this.debug(\"matchOne loop\")                                                                                        // 898\n    var p = pattern[pi]                                                                                                // 899\n      , f = file[fi]                                                                                                   // 900\n                                                                                                                       // 901\n    this.debug(pattern, p, f)                                                                                          // 902\n                                                                                                                       // 903\n    // should be impossible.                                                                                           // 904\n    // some invalid regexp stuff in the set.                                                                           // 905\n    if (p === false) return false                                                                                      // 906\n                                                                                                                       // 907\n    if (p === GLOBSTAR) {                                                                                              // 908\n      this.debug('GLOBSTAR', [pattern, p, f])                                                                          // 909\n                                                                                                                       // 910\n      // \"**\"                                                                                                          // 911\n      // a/**/b/**/c would match the following:                                                                        // 912\n      // a/b/x/y/z/c                                                                                                   // 913\n      // a/x/y/z/b/c                                                                                                   // 914\n      // a/b/x/b/x/c                                                                                                   // 915\n      // a/b/c                                                                                                         // 916\n      // To do this, take the rest of the pattern after                                                                // 917\n      // the **, and see if it would match the file remainder.                                                         // 918\n      // If so, return success.                                                                                        // 919\n      // If not, the ** \"swallows\" a segment, and try again.                                                           // 920\n      // This is recursively awful.                                                                                    // 921\n      //                                                                                                               // 922\n      // a/**/b/**/c matching a/b/x/y/z/c                                                                              // 923\n      // - a matches a                                                                                                 // 924\n      // - doublestar                                                                                                  // 925\n      //   - matchOne(b/x/y/z/c, b/**/c)                                                                               // 926\n      //     - b matches b                                                                                             // 927\n      //     - doublestar                                                                                              // 928\n      //       - matchOne(x/y/z/c, c) -> no                                                                            // 929\n      //       - matchOne(y/z/c, c) -> no                                                                              // 930\n      //       - matchOne(z/c, c) -> no                                                                                // 931\n      //       - matchOne(c, c) yes, hit                                                                               // 932\n      var fr = fi                                                                                                      // 933\n        , pr = pi + 1                                                                                                  // 934\n      if (pr === pl) {                                                                                                 // 935\n        this.debug('** at the end')                                                                                    // 936\n        // a ** at the end will just swallow the rest.                                                                 // 937\n        // We have found a match.                                                                                      // 938\n        // however, it will not swallow /.x, unless                                                                    // 939\n        // options.dot is set.                                                                                         // 940\n        // . and .. are *never* matched by **, for explosively                                                         // 941\n        // exponential reasons.                                                                                        // 942\n        for ( ; fi < fl; fi ++) {                                                                                      // 943\n          if (file[fi] === \".\" || file[fi] === \"..\" ||                                                                 // 944\n              (!options.dot && file[fi].charAt(0) === \".\")) return false                                               // 945\n        }                                                                                                              // 946\n        return true                                                                                                    // 947\n      }                                                                                                                // 948\n                                                                                                                       // 949\n      // ok, let's see if we can swallow whatever we can.                                                              // 950\n      WHILE: while (fr < fl) {                                                                                         // 951\n        var swallowee = file[fr]                                                                                       // 952\n                                                                                                                       // 953\n        this.debug('\\nglobstar while',                                                                                 // 954\n                    file, fr, pattern, pr, swallowee)                                                                  // 955\n                                                                                                                       // 956\n        // XXX remove this slice.  Just pass the start index.                                                          // 957\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {                                               // 958\n          this.debug('globstar found match!', fr, fl, swallowee)                                                       // 959\n          // found a match.                                                                                            // 960\n          return true                                                                                                  // 961\n        } else {                                                                                                       // 962\n          // can't swallow \".\" or \"..\" ever.                                                                           // 963\n          // can only swallow \".foo\" when explicitly asked.                                                            // 964\n          if (swallowee === \".\" || swallowee === \"..\" ||                                                               // 965\n              (!options.dot && swallowee.charAt(0) === \".\")) {                                                         // 966\n            this.debug(\"dot detected!\", file, fr, pattern, pr)                                                         // 967\n            break WHILE                                                                                                // 968\n          }                                                                                                            // 969\n                                                                                                                       // 970\n          // ** swallows a segment, and continue.                                                                      // 971\n          this.debug('globstar swallow a segment, and continue')                                                       // 972\n          fr ++                                                                                                        // 973\n        }                                                                                                              // 974\n      }                                                                                                                // 975\n      // no match was found.                                                                                           // 976\n      // However, in partial mode, we can't say this is necessarily over.                                              // 977\n      // If there's more *pattern* left, then                                                                          // 978\n      if (partial) {                                                                                                   // 979\n        // ran out of file                                                                                             // 980\n        this.debug(\"\\n>>> no match, partial?\", file, fr, pattern, pr)                                                  // 981\n        if (fr === fl) return true                                                                                     // 982\n      }                                                                                                                // 983\n      return false                                                                                                     // 984\n    }                                                                                                                  // 985\n                                                                                                                       // 986\n    // something other than **                                                                                         // 987\n    // non-magic patterns just have to match exactly                                                                   // 988\n    // patterns with magic have been turned into regexps.                                                              // 989\n    var hit                                                                                                            // 990\n    if (typeof p === \"string\") {                                                                                       // 991\n      if (options.nocase) {                                                                                            // 992\n        hit = f.toLowerCase() === p.toLowerCase()                                                                      // 993\n      } else {                                                                                                         // 994\n        hit = f === p                                                                                                  // 995\n      }                                                                                                                // 996\n      this.debug(\"string match\", p, f, hit)                                                                            // 997\n    } else {                                                                                                           // 998\n      hit = f.match(p)                                                                                                 // 999\n      this.debug(\"pattern match\", p, f, hit)                                                                           // 1000\n    }                                                                                                                  // 1001\n                                                                                                                       // 1002\n    if (!hit) return false                                                                                             // 1003\n  }                                                                                                                    // 1004\n                                                                                                                       // 1005\n  // Note: ending in / means that we'll get a final \"\"                                                                 // 1006\n  // at the end of the pattern.  This can only match a                                                                 // 1007\n  // corresponding \"\" at the end of the file.                                                                          // 1008\n  // If the file ends in /, then it can only match a                                                                   // 1009\n  // a pattern that ends in /, unless the pattern just                                                                 // 1010\n  // doesn't have any more for it. But, a/b/ should *not*                                                              // 1011\n  // match \"a/b/*\", even though \"\" matches against the                                                                 // 1012\n  // [^/]*? pattern, except in partial mode, where it might                                                            // 1013\n  // simply not be reached yet.                                                                                        // 1014\n  // However, a/b/ should still satisfy a/*                                                                            // 1015\n                                                                                                                       // 1016\n  // now either we fell off the end of the pattern, or we're done.                                                     // 1017\n  if (fi === fl && pi === pl) {                                                                                        // 1018\n    // ran out of pattern and filename at the same time.                                                               // 1019\n    // an exact hit!                                                                                                   // 1020\n    return true                                                                                                        // 1021\n  } else if (fi === fl) {                                                                                              // 1022\n    // ran out of file, but still had pattern left.                                                                    // 1023\n    // this is ok if we're doing the match as part of                                                                  // 1024\n    // a glob fs traversal.                                                                                            // 1025\n    return partial                                                                                                     // 1026\n  } else if (pi === pl) {                                                                                              // 1027\n    // ran out of pattern, still have file left.                                                                       // 1028\n    // this is only acceptable if we're on the very last                                                               // 1029\n    // empty segment of a file with a trailing slash.                                                                  // 1030\n    // a/* should match a/b/                                                                                           // 1031\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === \"\")                                                            // 1032\n    return emptyFileEnd                                                                                                // 1033\n  }                                                                                                                    // 1034\n                                                                                                                       // 1035\n  // should be unreachable.                                                                                            // 1036\n  throw new Error(\"wtf?\")                                                                                              // 1037\n}                                                                                                                      // 1038\n                                                                                                                       // 1039\n                                                                                                                       // 1040\n// replace stuff like \\* with *                                                                                        // 1041\nfunction globUnescape (s) {                                                                                            // 1042\n  return s.replace(/\\\\(.)/g, \"$1\")                                                                                     // 1043\n}                                                                                                                      // 1044\n                                                                                                                       // 1045\n                                                                                                                       // 1046\nfunction regExpEscape (s) {                                                                                            // 1047\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")                                                                 // 1048\n}                                                                                                                      // 1049\n                                                                                                                       // 1050\n})( typeof require === \"function\" ? require : null,                                                                    // 1051\n    this,                                                                                                              // 1052\n    typeof module === \"object\" ? module : null,                                                                        // 1053\n    typeof process === \"object\" ? process.platform : \"win32\"                                                           // 1054\n  )                                                                                                                    // 1055\n                                                                                                                       // 1056\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"lru-cache\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/node_modules/minimatch/nod //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lru-cache\";                                                                                            // 1\nexports.version = \"2.7.3\";                                                                                             // 2\nexports.main = \"lib/lru-cache.js\";                                                                                     // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"lru-cache.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_mod //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function () { // closure for web browsers                                                                            // 1\n                                                                                                                       // 2\nif (typeof module === 'object' && module.exports) {                                                                    // 3\n  module.exports = LRUCache                                                                                            // 4\n} else {                                                                                                               // 5\n  // just set the global for non-node platforms.                                                                       // 6\n  this.LRUCache = LRUCache                                                                                             // 7\n}                                                                                                                      // 8\n                                                                                                                       // 9\nfunction hOP (obj, key) {                                                                                              // 10\n  return Object.prototype.hasOwnProperty.call(obj, key)                                                                // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\nfunction naiveLength () { return 1 }                                                                                   // 14\n                                                                                                                       // 15\nvar didTypeWarning = false                                                                                             // 16\nfunction typeCheckKey(key) {                                                                                           // 17\n  if (!didTypeWarning && typeof key !== 'string' && typeof key !== 'number') {                                         // 18\n    didTypeWarning = true                                                                                              // 19\n    console.error(new TypeError(\"LRU: key must be a string or number. Almost certainly a bug! \" + typeof key).stack)   // 20\n  }                                                                                                                    // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nfunction LRUCache (options) {                                                                                          // 24\n  if (!(this instanceof LRUCache))                                                                                     // 25\n    return new LRUCache(options)                                                                                       // 26\n                                                                                                                       // 27\n  if (typeof options === 'number')                                                                                     // 28\n    options = { max: options }                                                                                         // 29\n                                                                                                                       // 30\n  if (!options)                                                                                                        // 31\n    options = {}                                                                                                       // 32\n                                                                                                                       // 33\n  this._max = options.max                                                                                              // 34\n  // Kind of weird to have a default max of Infinity, but oh well.                                                     // 35\n  if (!this._max || !(typeof this._max === \"number\") || this._max <= 0 )                                               // 36\n    this._max = Infinity                                                                                               // 37\n                                                                                                                       // 38\n  this._lengthCalculator = options.length || naiveLength                                                               // 39\n  if (typeof this._lengthCalculator !== \"function\")                                                                    // 40\n    this._lengthCalculator = naiveLength                                                                               // 41\n                                                                                                                       // 42\n  this._allowStale = options.stale || false                                                                            // 43\n  this._maxAge = options.maxAge || null                                                                                // 44\n  this._dispose = options.dispose                                                                                      // 45\n  this.reset()                                                                                                         // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n// resize the cache when the max changes.                                                                              // 49\nObject.defineProperty(LRUCache.prototype, \"max\",                                                                       // 50\n  { set : function (mL) {                                                                                              // 51\n      if (!mL || !(typeof mL === \"number\") || mL <= 0 ) mL = Infinity                                                  // 52\n      this._max = mL                                                                                                   // 53\n      if (this._length > this._max) trim(this)                                                                         // 54\n    }                                                                                                                  // 55\n  , get : function () { return this._max }                                                                             // 56\n  , enumerable : true                                                                                                  // 57\n  })                                                                                                                   // 58\n                                                                                                                       // 59\n// resize the cache when the lengthCalculator changes.                                                                 // 60\nObject.defineProperty(LRUCache.prototype, \"lengthCalculator\",                                                          // 61\n  { set : function (lC) {                                                                                              // 62\n      if (typeof lC !== \"function\") {                                                                                  // 63\n        this._lengthCalculator = naiveLength                                                                           // 64\n        this._length = this._itemCount                                                                                 // 65\n        for (var key in this._cache) {                                                                                 // 66\n          this._cache[key].length = 1                                                                                  // 67\n        }                                                                                                              // 68\n      } else {                                                                                                         // 69\n        this._lengthCalculator = lC                                                                                    // 70\n        this._length = 0                                                                                               // 71\n        for (var key in this._cache) {                                                                                 // 72\n          this._cache[key].length = this._lengthCalculator(this._cache[key].value)                                     // 73\n          this._length += this._cache[key].length                                                                      // 74\n        }                                                                                                              // 75\n      }                                                                                                                // 76\n                                                                                                                       // 77\n      if (this._length > this._max) trim(this)                                                                         // 78\n    }                                                                                                                  // 79\n  , get : function () { return this._lengthCalculator }                                                                // 80\n  , enumerable : true                                                                                                  // 81\n  })                                                                                                                   // 82\n                                                                                                                       // 83\nObject.defineProperty(LRUCache.prototype, \"length\",                                                                    // 84\n  { get : function () { return this._length }                                                                          // 85\n  , enumerable : true                                                                                                  // 86\n  })                                                                                                                   // 87\n                                                                                                                       // 88\n                                                                                                                       // 89\nObject.defineProperty(LRUCache.prototype, \"itemCount\",                                                                 // 90\n  { get : function () { return this._itemCount }                                                                       // 91\n  , enumerable : true                                                                                                  // 92\n  })                                                                                                                   // 93\n                                                                                                                       // 94\nLRUCache.prototype.forEach = function (fn, thisp) {                                                                    // 95\n  thisp = thisp || this                                                                                                // 96\n  var i = 0                                                                                                            // 97\n  var itemCount = this._itemCount                                                                                      // 98\n                                                                                                                       // 99\n  for (var k = this._mru - 1; k >= 0 && i < itemCount; k--) if (this._lruList[k]) {                                    // 100\n    i++                                                                                                                // 101\n    var hit = this._lruList[k]                                                                                         // 102\n    if (isStale(this, hit)) {                                                                                          // 103\n      del(this, hit)                                                                                                   // 104\n      if (!this._allowStale) hit = undefined                                                                           // 105\n    }                                                                                                                  // 106\n    if (hit) {                                                                                                         // 107\n      fn.call(thisp, hit.value, hit.key, this)                                                                         // 108\n    }                                                                                                                  // 109\n  }                                                                                                                    // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nLRUCache.prototype.keys = function () {                                                                                // 113\n  var keys = new Array(this._itemCount)                                                                                // 114\n  var i = 0                                                                                                            // 115\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 116\n    var hit = this._lruList[k]                                                                                         // 117\n    keys[i++] = hit.key                                                                                                // 118\n  }                                                                                                                    // 119\n  return keys                                                                                                          // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\nLRUCache.prototype.values = function () {                                                                              // 123\n  var values = new Array(this._itemCount)                                                                              // 124\n  var i = 0                                                                                                            // 125\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 126\n    var hit = this._lruList[k]                                                                                         // 127\n    values[i++] = hit.value                                                                                            // 128\n  }                                                                                                                    // 129\n  return values                                                                                                        // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\nLRUCache.prototype.reset = function () {                                                                               // 133\n  if (this._dispose && this._cache) {                                                                                  // 134\n    for (var k in this._cache) {                                                                                       // 135\n      this._dispose(k, this._cache[k].value)                                                                           // 136\n    }                                                                                                                  // 137\n  }                                                                                                                    // 138\n                                                                                                                       // 139\n  this._cache = Object.create(null) // hash of items by key                                                            // 140\n  this._lruList = Object.create(null) // list of items in order of use recency                                         // 141\n  this._mru = 0 // most recently used                                                                                  // 142\n  this._lru = 0 // least recently used                                                                                 // 143\n  this._length = 0 // number of items in the list                                                                      // 144\n  this._itemCount = 0                                                                                                  // 145\n}                                                                                                                      // 146\n                                                                                                                       // 147\nLRUCache.prototype.dump = function () {                                                                                // 148\n  var arr = []                                                                                                         // 149\n  var i = 0                                                                                                            // 150\n                                                                                                                       // 151\n  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {                              // 152\n    var hit = this._lruList[k]                                                                                         // 153\n    if (!isStale(this, hit)) {                                                                                         // 154\n      //Do not store staled hits                                                                                       // 155\n      ++i                                                                                                              // 156\n      arr.push({                                                                                                       // 157\n        k: hit.key,                                                                                                    // 158\n        v: hit.value,                                                                                                  // 159\n        e: hit.now + (hit.maxAge || 0)                                                                                 // 160\n      });                                                                                                              // 161\n    }                                                                                                                  // 162\n  }                                                                                                                    // 163\n  //arr has the most read first                                                                                        // 164\n  return arr                                                                                                           // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\nLRUCache.prototype.dumpLru = function () {                                                                             // 168\n  return this._lruList                                                                                                 // 169\n}                                                                                                                      // 170\n                                                                                                                       // 171\nLRUCache.prototype.set = function (key, value, maxAge) {                                                               // 172\n  maxAge = maxAge || this._maxAge                                                                                      // 173\n  typeCheckKey(key)                                                                                                    // 174\n                                                                                                                       // 175\n  var now = maxAge ? Date.now() : 0                                                                                    // 176\n  var len = this._lengthCalculator(value)                                                                              // 177\n                                                                                                                       // 178\n  if (hOP(this._cache, key)) {                                                                                         // 179\n    if (len > this._max) {                                                                                             // 180\n      del(this, this._cache[key])                                                                                      // 181\n      return false                                                                                                     // 182\n    }                                                                                                                  // 183\n    // dispose of the old one before overwriting                                                                       // 184\n    if (this._dispose)                                                                                                 // 185\n      this._dispose(key, this._cache[key].value)                                                                       // 186\n                                                                                                                       // 187\n    this._cache[key].now = now                                                                                         // 188\n    this._cache[key].maxAge = maxAge                                                                                   // 189\n    this._cache[key].value = value                                                                                     // 190\n    this._length += (len - this._cache[key].length)                                                                    // 191\n    this._cache[key].length = len                                                                                      // 192\n    this.get(key)                                                                                                      // 193\n                                                                                                                       // 194\n    if (this._length > this._max)                                                                                      // 195\n      trim(this)                                                                                                       // 196\n                                                                                                                       // 197\n    return true                                                                                                        // 198\n  }                                                                                                                    // 199\n                                                                                                                       // 200\n  var hit = new Entry(key, value, this._mru++, len, now, maxAge)                                                       // 201\n                                                                                                                       // 202\n  // oversized objects fall out of cache automatically.                                                                // 203\n  if (hit.length > this._max) {                                                                                        // 204\n    if (this._dispose) this._dispose(key, value)                                                                       // 205\n    return false                                                                                                       // 206\n  }                                                                                                                    // 207\n                                                                                                                       // 208\n  this._length += hit.length                                                                                           // 209\n  this._lruList[hit.lu] = this._cache[key] = hit                                                                       // 210\n  this._itemCount ++                                                                                                   // 211\n                                                                                                                       // 212\n  if (this._length > this._max)                                                                                        // 213\n    trim(this)                                                                                                         // 214\n                                                                                                                       // 215\n  return true                                                                                                          // 216\n}                                                                                                                      // 217\n                                                                                                                       // 218\nLRUCache.prototype.has = function (key) {                                                                              // 219\n  typeCheckKey(key)                                                                                                    // 220\n  if (!hOP(this._cache, key)) return false                                                                             // 221\n  var hit = this._cache[key]                                                                                           // 222\n  if (isStale(this, hit)) {                                                                                            // 223\n    return false                                                                                                       // 224\n  }                                                                                                                    // 225\n  return true                                                                                                          // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\nLRUCache.prototype.get = function (key) {                                                                              // 229\n  typeCheckKey(key)                                                                                                    // 230\n  return get(this, key, true)                                                                                          // 231\n}                                                                                                                      // 232\n                                                                                                                       // 233\nLRUCache.prototype.peek = function (key) {                                                                             // 234\n  typeCheckKey(key)                                                                                                    // 235\n  return get(this, key, false)                                                                                         // 236\n}                                                                                                                      // 237\n                                                                                                                       // 238\nLRUCache.prototype.pop = function () {                                                                                 // 239\n  var hit = this._lruList[this._lru]                                                                                   // 240\n  del(this, hit)                                                                                                       // 241\n  return hit || null                                                                                                   // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\nLRUCache.prototype.del = function (key) {                                                                              // 245\n  typeCheckKey(key)                                                                                                    // 246\n  del(this, this._cache[key])                                                                                          // 247\n}                                                                                                                      // 248\n                                                                                                                       // 249\nLRUCache.prototype.load = function (arr) {                                                                             // 250\n  //reset the cache                                                                                                    // 251\n  this.reset();                                                                                                        // 252\n                                                                                                                       // 253\n  var now = Date.now()                                                                                                 // 254\n  //A previous serialized cache has the most recent items first                                                        // 255\n  for (var l = arr.length - 1; l >= 0; l-- ) {                                                                         // 256\n    var hit = arr[l]                                                                                                   // 257\n    typeCheckKey(hit.k)                                                                                                // 258\n    var expiresAt = hit.e || 0                                                                                         // 259\n    if (expiresAt === 0) {                                                                                             // 260\n      //the item was created without expiration in a non aged cache                                                    // 261\n      this.set(hit.k, hit.v)                                                                                           // 262\n    } else {                                                                                                           // 263\n      var maxAge = expiresAt - now                                                                                     // 264\n      //dont add already expired items                                                                                 // 265\n      if (maxAge > 0) this.set(hit.k, hit.v, maxAge)                                                                   // 266\n    }                                                                                                                  // 267\n  }                                                                                                                    // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\nfunction get (self, key, doUse) {                                                                                      // 271\n  typeCheckKey(key)                                                                                                    // 272\n  var hit = self._cache[key]                                                                                           // 273\n  if (hit) {                                                                                                           // 274\n    if (isStale(self, hit)) {                                                                                          // 275\n      del(self, hit)                                                                                                   // 276\n      if (!self._allowStale) hit = undefined                                                                           // 277\n    } else {                                                                                                           // 278\n      if (doUse) use(self, hit)                                                                                        // 279\n    }                                                                                                                  // 280\n    if (hit) hit = hit.value                                                                                           // 281\n  }                                                                                                                    // 282\n  return hit                                                                                                           // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\nfunction isStale(self, hit) {                                                                                          // 286\n  if (!hit || (!hit.maxAge && !self._maxAge)) return false                                                             // 287\n  var stale = false;                                                                                                   // 288\n  var diff = Date.now() - hit.now                                                                                      // 289\n  if (hit.maxAge) {                                                                                                    // 290\n    stale = diff > hit.maxAge                                                                                          // 291\n  } else {                                                                                                             // 292\n    stale = self._maxAge && (diff > self._maxAge)                                                                      // 293\n  }                                                                                                                    // 294\n  return stale;                                                                                                        // 295\n}                                                                                                                      // 296\n                                                                                                                       // 297\nfunction use (self, hit) {                                                                                             // 298\n  shiftLU(self, hit)                                                                                                   // 299\n  hit.lu = self._mru ++                                                                                                // 300\n  self._lruList[hit.lu] = hit                                                                                          // 301\n}                                                                                                                      // 302\n                                                                                                                       // 303\nfunction trim (self) {                                                                                                 // 304\n  while (self._lru < self._mru && self._length > self._max)                                                            // 305\n    del(self, self._lruList[self._lru])                                                                                // 306\n}                                                                                                                      // 307\n                                                                                                                       // 308\nfunction shiftLU (self, hit) {                                                                                         // 309\n  delete self._lruList[ hit.lu ]                                                                                       // 310\n  while (self._lru < self._mru && !self._lruList[self._lru]) self._lru ++                                              // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\nfunction del (self, hit) {                                                                                             // 314\n  if (hit) {                                                                                                           // 315\n    if (self._dispose) self._dispose(hit.key, hit.value)                                                               // 316\n    self._length -= hit.length                                                                                         // 317\n    self._itemCount --                                                                                                 // 318\n    delete self._cache[ hit.key ]                                                                                      // 319\n    shiftLU(self, hit)                                                                                                 // 320\n  }                                                                                                                    // 321\n}                                                                                                                      // 322\n                                                                                                                       // 323\n// classy, since V8 prefers predictable objects.                                                                       // 324\nfunction Entry (key, value, lu, length, now, maxAge) {                                                                 // 325\n  this.key = key                                                                                                       // 326\n  this.value = value                                                                                                   // 327\n  this.lu = lu                                                                                                         // 328\n  this.length = length                                                                                                 // 329\n  this.now = now                                                                                                       // 330\n  if (maxAge) this.maxAge = maxAge                                                                                     // 331\n}                                                                                                                      // 332\n                                                                                                                       // 333\n})()                                                                                                                   // 334\n                                                                                                                       // 335\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"sigmund\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/node_modules/minimatch/nod //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"sigmund\";                                                                                              // 1\nexports.version = \"1.0.1\";                                                                                             // 2\nexports.main = \"sigmund.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sigmund.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_mod //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = sigmund                                                                                               // 1\nfunction sigmund (subject, maxSessions) {                                                                              // 2\n    maxSessions = maxSessions || 10;                                                                                   // 3\n    var notes = [];                                                                                                    // 4\n    var analysis = '';                                                                                                 // 5\n    var RE = RegExp;                                                                                                   // 6\n                                                                                                                       // 7\n    function psychoAnalyze (subject, session) {                                                                        // 8\n        if (session > maxSessions) return;                                                                             // 9\n                                                                                                                       // 10\n        if (typeof subject === 'function' ||                                                                           // 11\n            typeof subject === 'undefined') {                                                                          // 12\n            return;                                                                                                    // 13\n        }                                                                                                              // 14\n                                                                                                                       // 15\n        if (typeof subject !== 'object' || !subject ||                                                                 // 16\n            (subject instanceof RE)) {                                                                                 // 17\n            analysis += subject;                                                                                       // 18\n            return;                                                                                                    // 19\n        }                                                                                                              // 20\n                                                                                                                       // 21\n        if (notes.indexOf(subject) !== -1 || session === maxSessions) return;                                          // 22\n                                                                                                                       // 23\n        notes.push(subject);                                                                                           // 24\n        analysis += '{';                                                                                               // 25\n        Object.keys(subject).forEach(function (issue, _, __) {                                                         // 26\n            // pseudo-private values.  skip those.                                                                     // 27\n            if (issue.charAt(0) === '_') return;                                                                       // 28\n            var to = typeof subject[issue];                                                                            // 29\n            if (to === 'function' || to === 'undefined') return;                                                       // 30\n            analysis += issue;                                                                                         // 31\n            psychoAnalyze(subject[issue], session + 1);                                                                // 32\n        });                                                                                                            // 33\n    }                                                                                                                  // 34\n    psychoAnalyze(subject, 0);                                                                                         // 35\n    return analysis;                                                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\n// vim: set softtabstop=4 shiftwidth=4:                                                                                // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"inherits\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/glob/node_modules/inherits/pack //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"inherits\";                                                                                             // 1\nexports.version = \"2.0.1\";                                                                                             // 2\nexports.browser = \"./inherits_browser.js\";                                                                             // 3\nexports.main = \"./inherits.js\";                                                                                        // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"inherits_browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/glob/node_modules/inherits/inherits_ //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (typeof Object.create === 'function') {                                                                             // 1\n  // implementation from standard node.js 'util' module                                                                // 2\n  module.exports = function inherits(ctor, superCtor) {                                                                // 3\n    ctor.super_ = superCtor                                                                                            // 4\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 5\n      constructor: {                                                                                                   // 6\n        value: ctor,                                                                                                   // 7\n        enumerable: false,                                                                                             // 8\n        writable: true,                                                                                                // 9\n        configurable: true                                                                                             // 10\n      }                                                                                                                // 11\n    });                                                                                                                // 12\n  };                                                                                                                   // 13\n} else {                                                                                                               // 14\n  // old school shim for old browsers                                                                                  // 15\n  module.exports = function inherits(ctor, superCtor) {                                                                // 16\n    ctor.super_ = superCtor                                                                                            // 17\n    var TempCtor = function () {}                                                                                      // 18\n    TempCtor.prototype = superCtor.prototype                                                                           // 19\n    ctor.prototype = new TempCtor()                                                                                    // 20\n    ctor.prototype.constructor = ctor                                                                                  // 21\n  }                                                                                                                    // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"supports-color\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/supports-color/index.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar argv = process.argv;                                                                                               // 2\n                                                                                                                       // 3\nmodule.exports = (function () {                                                                                        // 4\n\tif (argv.indexOf('--no-color') !== -1 ||                                                                              // 5\n\t\targv.indexOf('--no-colors') !== -1 ||                                                                                // 6\n\t\targv.indexOf('--color=false') !== -1) {                                                                              // 7\n\t\treturn false;                                                                                                        // 8\n\t}                                                                                                                     // 9\n                                                                                                                       // 10\n\tif (argv.indexOf('--color') !== -1 ||                                                                                 // 11\n\t\targv.indexOf('--colors') !== -1 ||                                                                                   // 12\n\t\targv.indexOf('--color=true') !== -1 ||                                                                               // 13\n\t\targv.indexOf('--color=always') !== -1) {                                                                             // 14\n\t\treturn true;                                                                                                         // 15\n\t}                                                                                                                     // 16\n                                                                                                                       // 17\n\tif (process.stdout && !process.stdout.isTTY) {                                                                        // 18\n\t\treturn false;                                                                                                        // 19\n\t}                                                                                                                     // 20\n                                                                                                                       // 21\n\tif (process.platform === 'win32') {                                                                                   // 22\n\t\treturn true;                                                                                                         // 23\n\t}                                                                                                                     // 24\n                                                                                                                       // 25\n\tif ('COLORTERM' in process.env) {                                                                                     // 26\n\t\treturn true;                                                                                                         // 27\n\t}                                                                                                                     // 28\n                                                                                                                       // 29\n\tif (process.env.TERM === 'dumb') {                                                                                    // 30\n\t\treturn false;                                                                                                        // 31\n\t}                                                                                                                     // 32\n                                                                                                                       // 33\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {                                        // 34\n\t\treturn true;                                                                                                         // 35\n\t}                                                                                                                     // 36\n                                                                                                                       // 37\n\treturn false;                                                                                                         // 38\n})();                                                                                                                  // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"mkdirp\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/mkdirp/package.json             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"mkdirp\";                                                                                               // 1\nexports.version = \"0.5.1\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/mkdirp/index.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar path = require('path');                                                                                            // 1\nvar fs = require('fs');                                                                                                // 2\nvar _0777 = parseInt('0777', 8);                                                                                       // 3\n                                                                                                                       // 4\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;                                                               // 5\n                                                                                                                       // 6\nfunction mkdirP (p, opts, f, made) {                                                                                   // 7\n    if (typeof opts === 'function') {                                                                                  // 8\n        f = opts;                                                                                                      // 9\n        opts = {};                                                                                                     // 10\n    }                                                                                                                  // 11\n    else if (!opts || typeof opts !== 'object') {                                                                      // 12\n        opts = { mode: opts };                                                                                         // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    var mode = opts.mode;                                                                                              // 16\n    var xfs = opts.fs || fs;                                                                                           // 17\n                                                                                                                       // 18\n    if (mode === undefined) {                                                                                          // 19\n        mode = _0777 & (~process.umask());                                                                             // 20\n    }                                                                                                                  // 21\n    if (!made) made = null;                                                                                            // 22\n                                                                                                                       // 23\n    var cb = f || function () {};                                                                                      // 24\n    p = path.resolve(p);                                                                                               // 25\n                                                                                                                       // 26\n    xfs.mkdir(p, mode, function (er) {                                                                                 // 27\n        if (!er) {                                                                                                     // 28\n            made = made || p;                                                                                          // 29\n            return cb(null, made);                                                                                     // 30\n        }                                                                                                              // 31\n        switch (er.code) {                                                                                             // 32\n            case 'ENOENT':                                                                                             // 33\n                mkdirP(path.dirname(p), opts, function (er, made) {                                                    // 34\n                    if (er) cb(er, made);                                                                              // 35\n                    else mkdirP(p, opts, cb, made);                                                                    // 36\n                });                                                                                                    // 37\n                break;                                                                                                 // 38\n                                                                                                                       // 39\n            // In the case of any other error, just see if there's a dir                                               // 40\n            // there already.  If so, then hooray!  If not, then something                                             // 41\n            // is borked.                                                                                              // 42\n            default:                                                                                                   // 43\n                xfs.stat(p, function (er2, stat) {                                                                     // 44\n                    // if the stat fails, then that's super weird.                                                     // 45\n                    // let the original error be the failure reason.                                                   // 46\n                    if (er2 || !stat.isDirectory()) cb(er, made)                                                       // 47\n                    else cb(null, made);                                                                               // 48\n                });                                                                                                    // 49\n                break;                                                                                                 // 50\n        }                                                                                                              // 51\n    });                                                                                                                // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nmkdirP.sync = function sync (p, opts, made) {                                                                          // 55\n    if (!opts || typeof opts !== 'object') {                                                                           // 56\n        opts = { mode: opts };                                                                                         // 57\n    }                                                                                                                  // 58\n                                                                                                                       // 59\n    var mode = opts.mode;                                                                                              // 60\n    var xfs = opts.fs || fs;                                                                                           // 61\n                                                                                                                       // 62\n    if (mode === undefined) {                                                                                          // 63\n        mode = _0777 & (~process.umask());                                                                             // 64\n    }                                                                                                                  // 65\n    if (!made) made = null;                                                                                            // 66\n                                                                                                                       // 67\n    p = path.resolve(p);                                                                                               // 68\n                                                                                                                       // 69\n    try {                                                                                                              // 70\n        xfs.mkdirSync(p, mode);                                                                                        // 71\n        made = made || p;                                                                                              // 72\n    }                                                                                                                  // 73\n    catch (err0) {                                                                                                     // 74\n        switch (err0.code) {                                                                                           // 75\n            case 'ENOENT' :                                                                                            // 76\n                made = sync(path.dirname(p), opts, made);                                                              // 77\n                sync(p, opts, made);                                                                                   // 78\n                break;                                                                                                 // 79\n                                                                                                                       // 80\n            // In the case of any other error, just see if there's a dir                                               // 81\n            // there already.  If so, then hooray!  If not, then something                                             // 82\n            // is borked.                                                                                              // 83\n            default:                                                                                                   // 84\n                var stat;                                                                                              // 85\n                try {                                                                                                  // 86\n                    stat = xfs.statSync(p);                                                                            // 87\n                }                                                                                                      // 88\n                catch (err1) {                                                                                         // 89\n                    throw err0;                                                                                        // 90\n                }                                                                                                      // 91\n                if (!stat.isDirectory()) throw err0;                                                                   // 92\n                break;                                                                                                 // 93\n        }                                                                                                              // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n    return made;                                                                                                       // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"jade\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/jade/package.json               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"jade\";                                                                                                 // 1\nexports.version = \"0.26.3\";                                                                                            // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/index.js                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nmodule.exports = process.env.JADE_COV                                                                                  // 2\n  ? require('./lib-cov/jade')                                                                                          // 3\n  : require('./lib/jade');                                                                                             // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"jade.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/jade.js                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * Jade                                                                                                                // 2\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 3\n * MIT Licensed                                                                                                        // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Module dependencies.                                                                                                // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\nvar Parser = require('./parser')                                                                                       // 11\n  , Lexer = require('./lexer')                                                                                         // 12\n  , Compiler = require('./compiler')                                                                                   // 13\n  , runtime = require('./runtime')                                                                                     // 14\n// if node                                                                                                             // 15\n  , fs = require('fs');                                                                                                // 16\n// end                                                                                                                 // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Library version.                                                                                                    // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nexports.version = '0.26.3';                                                                                            // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Expose self closing tags.                                                                                           // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports.selfClosing = require('./self-closing');                                                                       // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Default supported doctypes.                                                                                         // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nexports.doctypes = require('./doctypes');                                                                              // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Text filters.                                                                                                       // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\nexports.filters = require('./filters');                                                                                // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Utilities.                                                                                                          // 44\n */                                                                                                                    // 45\n                                                                                                                       // 46\nexports.utils = require('./utils');                                                                                    // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Expose `Compiler`.                                                                                                  // 50\n */                                                                                                                    // 51\n                                                                                                                       // 52\nexports.Compiler = Compiler;                                                                                           // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Expose `Parser`.                                                                                                    // 56\n */                                                                                                                    // 57\n                                                                                                                       // 58\nexports.Parser = Parser;                                                                                               // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Expose `Lexer`.                                                                                                     // 62\n */                                                                                                                    // 63\n                                                                                                                       // 64\nexports.Lexer = Lexer;                                                                                                 // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Nodes.                                                                                                              // 68\n */                                                                                                                    // 69\n                                                                                                                       // 70\nexports.nodes = require('./nodes');                                                                                    // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Jade runtime helpers.                                                                                               // 74\n */                                                                                                                    // 75\n                                                                                                                       // 76\nexports.runtime = runtime;                                                                                             // 77\n                                                                                                                       // 78\n/**                                                                                                                    // 79\n * Template function cache.                                                                                            // 80\n */                                                                                                                    // 81\n                                                                                                                       // 82\nexports.cache = {};                                                                                                    // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Parse the given `str` of jade and return a function body.                                                           // 86\n *                                                                                                                     // 87\n * @param {String} str                                                                                                 // 88\n * @param {Object} options                                                                                             // 89\n * @return {String}                                                                                                    // 90\n * @api private                                                                                                        // 91\n */                                                                                                                    // 92\n                                                                                                                       // 93\nfunction parse(str, options){                                                                                          // 94\n  try {                                                                                                                // 95\n    // Parse                                                                                                           // 96\n    var parser = new Parser(str, options.filename, options);                                                           // 97\n                                                                                                                       // 98\n    // Compile                                                                                                         // 99\n    var compiler = new (options.compiler || Compiler)(parser.parse(), options)                                         // 100\n      , js = compiler.compile();                                                                                       // 101\n                                                                                                                       // 102\n    // Debug compiler                                                                                                  // 103\n    if (options.debug) {                                                                                               // 104\n      console.error('\\nCompiled Function:\\n\\n\\033[90m%s\\033[0m', js.replace(/^/gm, '  '));                             // 105\n    }                                                                                                                  // 106\n                                                                                                                       // 107\n    return ''                                                                                                          // 108\n      + 'var buf = [];\\n'                                                                                              // 109\n      + (options.self                                                                                                  // 110\n        ? 'var self = locals || {};\\n' + js                                                                            // 111\n        : 'with (locals || {}) {\\n' + js + '\\n}\\n')                                                                    // 112\n      + 'return buf.join(\"\");';                                                                                        // 113\n  } catch (err) {                                                                                                      // 114\n    parser = parser.context();                                                                                         // 115\n    runtime.rethrow(err, parser.filename, parser.lexer.lineno);                                                        // 116\n  }                                                                                                                    // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * Compile a `Function` representation of the given jade `str`.                                                        // 121\n *                                                                                                                     // 122\n * Options:                                                                                                            // 123\n *                                                                                                                     // 124\n *   - `compileDebug` when `false` debugging code is stripped from the compiled template                               // 125\n *   - `client` when `true` the helper functions `escape()` etc will reference `jade.escape()`                         // 126\n *      for use with the Jade client-side runtime.js                                                                   // 127\n *                                                                                                                     // 128\n * @param {String} str                                                                                                 // 129\n * @param {Options} options                                                                                            // 130\n * @return {Function}                                                                                                  // 131\n * @api public                                                                                                         // 132\n */                                                                                                                    // 133\n                                                                                                                       // 134\nexports.compile = function(str, options){                                                                              // 135\n  var options = options || {}                                                                                          // 136\n    , client = options.client                                                                                          // 137\n    , filename = options.filename                                                                                      // 138\n      ? JSON.stringify(options.filename)                                                                               // 139\n      : 'undefined'                                                                                                    // 140\n    , fn;                                                                                                              // 141\n                                                                                                                       // 142\n  if (options.compileDebug !== false) {                                                                                // 143\n    fn = [                                                                                                             // 144\n        'var __jade = [{ lineno: 1, filename: ' + filename + ' }];'                                                    // 145\n      , 'try {'                                                                                                        // 146\n      , parse(String(str), options)                                                                                    // 147\n      , '} catch (err) {'                                                                                              // 148\n      , '  rethrow(err, __jade[0].filename, __jade[0].lineno);'                                                        // 149\n      , '}'                                                                                                            // 150\n    ].join('\\n');                                                                                                      // 151\n  } else {                                                                                                             // 152\n    fn = parse(String(str), options);                                                                                  // 153\n  }                                                                                                                    // 154\n                                                                                                                       // 155\n  if (client) {                                                                                                        // 156\n    fn = 'attrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\\n' + fn;\n  }                                                                                                                    // 158\n                                                                                                                       // 159\n  fn = new Function('locals, attrs, escape, rethrow, merge', fn);                                                      // 160\n                                                                                                                       // 161\n  if (client) return fn;                                                                                               // 162\n                                                                                                                       // 163\n  return function(locals){                                                                                             // 164\n    return fn(locals, runtime.attrs, runtime.escape, runtime.rethrow, runtime.merge);                                  // 165\n  };                                                                                                                   // 166\n};                                                                                                                     // 167\n                                                                                                                       // 168\n/**                                                                                                                    // 169\n * Render the given `str` of jade and invoke                                                                           // 170\n * the callback `fn(err, str)`.                                                                                        // 171\n *                                                                                                                     // 172\n * Options:                                                                                                            // 173\n *                                                                                                                     // 174\n *   - `cache` enable template caching                                                                                 // 175\n *   - `filename` filename required for `include` / `extends` and caching                                              // 176\n *                                                                                                                     // 177\n * @param {String} str                                                                                                 // 178\n * @param {Object|Function} options or fn                                                                              // 179\n * @param {Function} fn                                                                                                // 180\n * @api public                                                                                                         // 181\n */                                                                                                                    // 182\n                                                                                                                       // 183\nexports.render = function(str, options, fn){                                                                           // 184\n  // swap args                                                                                                         // 185\n  if ('function' == typeof options) {                                                                                  // 186\n    fn = options, options = {};                                                                                        // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  // cache requires .filename                                                                                          // 190\n  if (options.cache && !options.filename) {                                                                            // 191\n    return fn(new Error('the \"filename\" option is required for caching'));                                             // 192\n  }                                                                                                                    // 193\n                                                                                                                       // 194\n  try {                                                                                                                // 195\n    var path = options.filename;                                                                                       // 196\n    var tmpl = options.cache                                                                                           // 197\n      ? exports.cache[path] || (exports.cache[path] = exports.compile(str, options))                                   // 198\n      : exports.compile(str, options);                                                                                 // 199\n    fn(null, tmpl(options));                                                                                           // 200\n  } catch (err) {                                                                                                      // 201\n    fn(err);                                                                                                           // 202\n  }                                                                                                                    // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\n/**                                                                                                                    // 206\n * Render a Jade file at the given `path` and callback `fn(err, str)`.                                                 // 207\n *                                                                                                                     // 208\n * @param {String} path                                                                                                // 209\n * @param {Object|Function} options or callback                                                                        // 210\n * @param {Function} fn                                                                                                // 211\n * @api public                                                                                                         // 212\n */                                                                                                                    // 213\n                                                                                                                       // 214\nexports.renderFile = function(path, options, fn){                                                                      // 215\n  var key = path + ':string';                                                                                          // 216\n                                                                                                                       // 217\n  if ('function' == typeof options) {                                                                                  // 218\n    fn = options, options = {};                                                                                        // 219\n  }                                                                                                                    // 220\n                                                                                                                       // 221\n  try {                                                                                                                // 222\n    options.filename = path;                                                                                           // 223\n    var str = options.cache                                                                                            // 224\n      ? exports.cache[key] || (exports.cache[key] = fs.readFileSync(path, 'utf8'))                                     // 225\n      : fs.readFileSync(path, 'utf8');                                                                                 // 226\n    exports.render(str, options, fn);                                                                                  // 227\n  } catch (err) {                                                                                                      // 228\n    fn(err);                                                                                                           // 229\n  }                                                                                                                    // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\n/**                                                                                                                    // 233\n * Express support.                                                                                                    // 234\n */                                                                                                                    // 235\n                                                                                                                       // 236\nexports.__express = exports.renderFile;                                                                                // 237\n                                                                                                                       // 238\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"parser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/parser.js                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - Parser                                                                                                       // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Lexer = require('./lexer')                                                                                         // 12\n  , nodes = require('./nodes');                                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Initialize `Parser` with the given input `str` and `filename`.                                                      // 16\n *                                                                                                                     // 17\n * @param {String} str                                                                                                 // 18\n * @param {String} filename                                                                                            // 19\n * @param {Object} options                                                                                             // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar Parser = exports = module.exports = function Parser(str, filename, options){                                       // 24\n  this.input = str;                                                                                                    // 25\n  this.lexer = new Lexer(str, options);                                                                                // 26\n  this.filename = filename;                                                                                            // 27\n  this.blocks = {};                                                                                                    // 28\n  this.mixins = {};                                                                                                    // 29\n  this.options = options;                                                                                              // 30\n  this.contexts = [this];                                                                                              // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Tags that may not contain tags.                                                                                     // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\nvar textOnly = exports.textOnly = ['script', 'style'];                                                                 // 38\n                                                                                                                       // 39\n/**                                                                                                                    // 40\n * Parser prototype.                                                                                                   // 41\n */                                                                                                                    // 42\n                                                                                                                       // 43\nParser.prototype = {                                                                                                   // 44\n                                                                                                                       // 45\n  /**                                                                                                                  // 46\n   * Push `parser` onto the context stack,                                                                             // 47\n   * or pop and return a `Parser`.                                                                                     // 48\n   */                                                                                                                  // 49\n                                                                                                                       // 50\n  context: function(parser){                                                                                           // 51\n    if (parser) {                                                                                                      // 52\n      this.contexts.push(parser);                                                                                      // 53\n    } else {                                                                                                           // 54\n      return this.contexts.pop();                                                                                      // 55\n    }                                                                                                                  // 56\n  },                                                                                                                   // 57\n                                                                                                                       // 58\n  /**                                                                                                                  // 59\n   * Return the next token object.                                                                                     // 60\n   *                                                                                                                   // 61\n   * @return {Object}                                                                                                  // 62\n   * @api private                                                                                                      // 63\n   */                                                                                                                  // 64\n                                                                                                                       // 65\n  advance: function(){                                                                                                 // 66\n    return this.lexer.advance();                                                                                       // 67\n  },                                                                                                                   // 68\n                                                                                                                       // 69\n  /**                                                                                                                  // 70\n   * Skip `n` tokens.                                                                                                  // 71\n   *                                                                                                                   // 72\n   * @param {Number} n                                                                                                 // 73\n   * @api private                                                                                                      // 74\n   */                                                                                                                  // 75\n                                                                                                                       // 76\n  skip: function(n){                                                                                                   // 77\n    while (n--) this.advance();                                                                                        // 78\n  },                                                                                                                   // 79\n                                                                                                                       // 80\n  /**                                                                                                                  // 81\n   * Single token lookahead.                                                                                           // 82\n   *                                                                                                                   // 83\n   * @return {Object}                                                                                                  // 84\n   * @api private                                                                                                      // 85\n   */                                                                                                                  // 86\n                                                                                                                       // 87\n  peek: function() {                                                                                                   // 88\n    return this.lookahead(1);                                                                                          // 89\n  },                                                                                                                   // 90\n                                                                                                                       // 91\n  /**                                                                                                                  // 92\n   * Return lexer lineno.                                                                                              // 93\n   *                                                                                                                   // 94\n   * @return {Number}                                                                                                  // 95\n   * @api private                                                                                                      // 96\n   */                                                                                                                  // 97\n                                                                                                                       // 98\n  line: function() {                                                                                                   // 99\n    return this.lexer.lineno;                                                                                          // 100\n  },                                                                                                                   // 101\n                                                                                                                       // 102\n  /**                                                                                                                  // 103\n   * `n` token lookahead.                                                                                              // 104\n   *                                                                                                                   // 105\n   * @param {Number} n                                                                                                 // 106\n   * @return {Object}                                                                                                  // 107\n   * @api private                                                                                                      // 108\n   */                                                                                                                  // 109\n                                                                                                                       // 110\n  lookahead: function(n){                                                                                              // 111\n    return this.lexer.lookahead(n);                                                                                    // 112\n  },                                                                                                                   // 113\n                                                                                                                       // 114\n  /**                                                                                                                  // 115\n   * Parse input returning a string of js for evaluation.                                                              // 116\n   *                                                                                                                   // 117\n   * @return {String}                                                                                                  // 118\n   * @api public                                                                                                       // 119\n   */                                                                                                                  // 120\n                                                                                                                       // 121\n  parse: function(){                                                                                                   // 122\n    var block = new nodes.Block, parser;                                                                               // 123\n    block.line = this.line();                                                                                          // 124\n                                                                                                                       // 125\n    while ('eos' != this.peek().type) {                                                                                // 126\n      if ('newline' == this.peek().type) {                                                                             // 127\n        this.advance();                                                                                                // 128\n      } else {                                                                                                         // 129\n        block.push(this.parseExpr());                                                                                  // 130\n      }                                                                                                                // 131\n    }                                                                                                                  // 132\n                                                                                                                       // 133\n    if (parser = this.extending) {                                                                                     // 134\n      this.context(parser);                                                                                            // 135\n      var ast = parser.parse();                                                                                        // 136\n      this.context();                                                                                                  // 137\n      // hoist mixins                                                                                                  // 138\n      for (var name in this.mixins)                                                                                    // 139\n        ast.unshift(this.mixins[name]);                                                                                // 140\n      return ast;                                                                                                      // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    return block;                                                                                                      // 144\n  },                                                                                                                   // 145\n                                                                                                                       // 146\n  /**                                                                                                                  // 147\n   * Expect the given type, or throw an exception.                                                                     // 148\n   *                                                                                                                   // 149\n   * @param {String} type                                                                                              // 150\n   * @api private                                                                                                      // 151\n   */                                                                                                                  // 152\n                                                                                                                       // 153\n  expect: function(type){                                                                                              // 154\n    if (this.peek().type === type) {                                                                                   // 155\n      return this.advance();                                                                                           // 156\n    } else {                                                                                                           // 157\n      throw new Error('expected \"' + type + '\", but got \"' + this.peek().type + '\"');                                  // 158\n    }                                                                                                                  // 159\n  },                                                                                                                   // 160\n                                                                                                                       // 161\n  /**                                                                                                                  // 162\n   * Accept the given `type`.                                                                                          // 163\n   *                                                                                                                   // 164\n   * @param {String} type                                                                                              // 165\n   * @api private                                                                                                      // 166\n   */                                                                                                                  // 167\n                                                                                                                       // 168\n  accept: function(type){                                                                                              // 169\n    if (this.peek().type === type) {                                                                                   // 170\n      return this.advance();                                                                                           // 171\n    }                                                                                                                  // 172\n  },                                                                                                                   // 173\n                                                                                                                       // 174\n  /**                                                                                                                  // 175\n   *   tag                                                                                                             // 176\n   * | doctype                                                                                                         // 177\n   * | mixin                                                                                                           // 178\n   * | include                                                                                                         // 179\n   * | filter                                                                                                          // 180\n   * | comment                                                                                                         // 181\n   * | text                                                                                                            // 182\n   * | each                                                                                                            // 183\n   * | code                                                                                                            // 184\n   * | yield                                                                                                           // 185\n   * | id                                                                                                              // 186\n   * | class                                                                                                           // 187\n   * | interpolation                                                                                                   // 188\n   */                                                                                                                  // 189\n                                                                                                                       // 190\n  parseExpr: function(){                                                                                               // 191\n    switch (this.peek().type) {                                                                                        // 192\n      case 'tag':                                                                                                      // 193\n        return this.parseTag();                                                                                        // 194\n      case 'mixin':                                                                                                    // 195\n        return this.parseMixin();                                                                                      // 196\n      case 'block':                                                                                                    // 197\n        return this.parseBlock();                                                                                      // 198\n      case 'case':                                                                                                     // 199\n        return this.parseCase();                                                                                       // 200\n      case 'when':                                                                                                     // 201\n        return this.parseWhen();                                                                                       // 202\n      case 'default':                                                                                                  // 203\n        return this.parseDefault();                                                                                    // 204\n      case 'extends':                                                                                                  // 205\n        return this.parseExtends();                                                                                    // 206\n      case 'include':                                                                                                  // 207\n        return this.parseInclude();                                                                                    // 208\n      case 'doctype':                                                                                                  // 209\n        return this.parseDoctype();                                                                                    // 210\n      case 'filter':                                                                                                   // 211\n        return this.parseFilter();                                                                                     // 212\n      case 'comment':                                                                                                  // 213\n        return this.parseComment();                                                                                    // 214\n      case 'text':                                                                                                     // 215\n        return this.parseText();                                                                                       // 216\n      case 'each':                                                                                                     // 217\n        return this.parseEach();                                                                                       // 218\n      case 'code':                                                                                                     // 219\n        return this.parseCode();                                                                                       // 220\n      case 'call':                                                                                                     // 221\n        return this.parseCall();                                                                                       // 222\n      case 'interpolation':                                                                                            // 223\n        return this.parseInterpolation();                                                                              // 224\n      case 'yield':                                                                                                    // 225\n        this.advance();                                                                                                // 226\n        var block = new nodes.Block;                                                                                   // 227\n        block.yield = true;                                                                                            // 228\n        return block;                                                                                                  // 229\n      case 'id':                                                                                                       // 230\n      case 'class':                                                                                                    // 231\n        var tok = this.advance();                                                                                      // 232\n        this.lexer.defer(this.lexer.tok('tag', 'div'));                                                                // 233\n        this.lexer.defer(tok);                                                                                         // 234\n        return this.parseExpr();                                                                                       // 235\n      default:                                                                                                         // 236\n        throw new Error('unexpected token \"' + this.peek().type + '\"');                                                // 237\n    }                                                                                                                  // 238\n  },                                                                                                                   // 239\n                                                                                                                       // 240\n  /**                                                                                                                  // 241\n   * Text                                                                                                              // 242\n   */                                                                                                                  // 243\n                                                                                                                       // 244\n  parseText: function(){                                                                                               // 245\n    var tok = this.expect('text')                                                                                      // 246\n      , node = new nodes.Text(tok.val);                                                                                // 247\n    node.line = this.line();                                                                                           // 248\n    return node;                                                                                                       // 249\n  },                                                                                                                   // 250\n                                                                                                                       // 251\n  /**                                                                                                                  // 252\n   *   ':' expr                                                                                                        // 253\n   * | block                                                                                                           // 254\n   */                                                                                                                  // 255\n                                                                                                                       // 256\n  parseBlockExpansion: function(){                                                                                     // 257\n    if (':' == this.peek().type) {                                                                                     // 258\n      this.advance();                                                                                                  // 259\n      return new nodes.Block(this.parseExpr());                                                                        // 260\n    } else {                                                                                                           // 261\n      return this.block();                                                                                             // 262\n    }                                                                                                                  // 263\n  },                                                                                                                   // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * case                                                                                                              // 267\n   */                                                                                                                  // 268\n                                                                                                                       // 269\n  parseCase: function(){                                                                                               // 270\n    var val = this.expect('case').val                                                                                  // 271\n      , node = new nodes.Case(val);                                                                                    // 272\n    node.line = this.line();                                                                                           // 273\n    node.block = this.block();                                                                                         // 274\n    return node;                                                                                                       // 275\n  },                                                                                                                   // 276\n                                                                                                                       // 277\n  /**                                                                                                                  // 278\n   * when                                                                                                              // 279\n   */                                                                                                                  // 280\n                                                                                                                       // 281\n  parseWhen: function(){                                                                                               // 282\n    var val = this.expect('when').val                                                                                  // 283\n    return new nodes.Case.When(val, this.parseBlockExpansion());                                                       // 284\n  },                                                                                                                   // 285\n                                                                                                                       // 286\n  /**                                                                                                                  // 287\n   * default                                                                                                           // 288\n   */                                                                                                                  // 289\n                                                                                                                       // 290\n  parseDefault: function(){                                                                                            // 291\n    this.expect('default');                                                                                            // 292\n    return new nodes.Case.When('default', this.parseBlockExpansion());                                                 // 293\n  },                                                                                                                   // 294\n                                                                                                                       // 295\n  /**                                                                                                                  // 296\n   * code                                                                                                              // 297\n   */                                                                                                                  // 298\n                                                                                                                       // 299\n  parseCode: function(){                                                                                               // 300\n    var tok = this.expect('code')                                                                                      // 301\n      , node = new nodes.Code(tok.val, tok.buffer, tok.escape)                                                         // 302\n      , block                                                                                                          // 303\n      , i = 1;                                                                                                         // 304\n    node.line = this.line();                                                                                           // 305\n    while (this.lookahead(i) && 'newline' == this.lookahead(i).type) ++i;                                              // 306\n    block = 'indent' == this.lookahead(i).type;                                                                        // 307\n    if (block) {                                                                                                       // 308\n      this.skip(i-1);                                                                                                  // 309\n      node.block = this.block();                                                                                       // 310\n    }                                                                                                                  // 311\n    return node;                                                                                                       // 312\n  },                                                                                                                   // 313\n                                                                                                                       // 314\n  /**                                                                                                                  // 315\n   * comment                                                                                                           // 316\n   */                                                                                                                  // 317\n                                                                                                                       // 318\n  parseComment: function(){                                                                                            // 319\n    var tok = this.expect('comment')                                                                                   // 320\n      , node;                                                                                                          // 321\n                                                                                                                       // 322\n    if ('indent' == this.peek().type) {                                                                                // 323\n      node = new nodes.BlockComment(tok.val, this.block(), tok.buffer);                                                // 324\n    } else {                                                                                                           // 325\n      node = new nodes.Comment(tok.val, tok.buffer);                                                                   // 326\n    }                                                                                                                  // 327\n                                                                                                                       // 328\n    node.line = this.line();                                                                                           // 329\n    return node;                                                                                                       // 330\n  },                                                                                                                   // 331\n                                                                                                                       // 332\n  /**                                                                                                                  // 333\n   * doctype                                                                                                           // 334\n   */                                                                                                                  // 335\n                                                                                                                       // 336\n  parseDoctype: function(){                                                                                            // 337\n    var tok = this.expect('doctype')                                                                                   // 338\n      , node = new nodes.Doctype(tok.val);                                                                             // 339\n    node.line = this.line();                                                                                           // 340\n    return node;                                                                                                       // 341\n  },                                                                                                                   // 342\n                                                                                                                       // 343\n  /**                                                                                                                  // 344\n   * filter attrs? text-block                                                                                          // 345\n   */                                                                                                                  // 346\n                                                                                                                       // 347\n  parseFilter: function(){                                                                                             // 348\n    var block                                                                                                          // 349\n      , tok = this.expect('filter')                                                                                    // 350\n      , attrs = this.accept('attrs');                                                                                  // 351\n                                                                                                                       // 352\n    this.lexer.pipeless = true;                                                                                        // 353\n    block = this.parseTextBlock();                                                                                     // 354\n    this.lexer.pipeless = false;                                                                                       // 355\n                                                                                                                       // 356\n    var node = new nodes.Filter(tok.val, block, attrs && attrs.attrs);                                                 // 357\n    node.line = this.line();                                                                                           // 358\n    return node;                                                                                                       // 359\n  },                                                                                                                   // 360\n                                                                                                                       // 361\n  /**                                                                                                                  // 362\n   * tag ':' attrs? block                                                                                              // 363\n   */                                                                                                                  // 364\n                                                                                                                       // 365\n  parseASTFilter: function(){                                                                                          // 366\n    var block                                                                                                          // 367\n      , tok = this.expect('tag')                                                                                       // 368\n      , attrs = this.accept('attrs');                                                                                  // 369\n                                                                                                                       // 370\n    this.expect(':');                                                                                                  // 371\n    block = this.block();                                                                                              // 372\n                                                                                                                       // 373\n    var node = new nodes.Filter(tok.val, block, attrs && attrs.attrs);                                                 // 374\n    node.line = this.line();                                                                                           // 375\n    return node;                                                                                                       // 376\n  },                                                                                                                   // 377\n                                                                                                                       // 378\n  /**                                                                                                                  // 379\n   * each block                                                                                                        // 380\n   */                                                                                                                  // 381\n                                                                                                                       // 382\n  parseEach: function(){                                                                                               // 383\n    var tok = this.expect('each')                                                                                      // 384\n      , node = new nodes.Each(tok.code, tok.val, tok.key);                                                             // 385\n    node.line = this.line();                                                                                           // 386\n    node.block = this.block();                                                                                         // 387\n    return node;                                                                                                       // 388\n  },                                                                                                                   // 389\n                                                                                                                       // 390\n  /**                                                                                                                  // 391\n   * 'extends' name                                                                                                    // 392\n   */                                                                                                                  // 393\n                                                                                                                       // 394\n  parseExtends: function(){                                                                                            // 395\n    var path = require('path')                                                                                         // 396\n      , fs = require('fs')                                                                                             // 397\n      , dirname = path.dirname                                                                                         // 398\n      , basename = path.basename                                                                                       // 399\n      , join = path.join;                                                                                              // 400\n                                                                                                                       // 401\n    if (!this.filename)                                                                                                // 402\n      throw new Error('the \"filename\" option is required to extend templates');                                        // 403\n                                                                                                                       // 404\n    var path = this.expect('extends').val.trim()                                                                       // 405\n      , dir = dirname(this.filename);                                                                                  // 406\n                                                                                                                       // 407\n    var path = join(dir, path + '.jade')                                                                               // 408\n      , str = fs.readFileSync(path, 'utf8')                                                                            // 409\n      , parser = new Parser(str, path, this.options);                                                                  // 410\n                                                                                                                       // 411\n    parser.blocks = this.blocks;                                                                                       // 412\n    parser.contexts = this.contexts;                                                                                   // 413\n    this.extending = parser;                                                                                           // 414\n                                                                                                                       // 415\n    // TODO: null node                                                                                                 // 416\n    return new nodes.Literal('');                                                                                      // 417\n  },                                                                                                                   // 418\n                                                                                                                       // 419\n  /**                                                                                                                  // 420\n   * 'block' name block                                                                                                // 421\n   */                                                                                                                  // 422\n                                                                                                                       // 423\n  parseBlock: function(){                                                                                              // 424\n    var block = this.expect('block')                                                                                   // 425\n      , mode = block.mode                                                                                              // 426\n      , name = block.val.trim();                                                                                       // 427\n                                                                                                                       // 428\n    block = 'indent' == this.peek().type                                                                               // 429\n      ? this.block()                                                                                                   // 430\n      : new nodes.Block(new nodes.Literal(''));                                                                        // 431\n                                                                                                                       // 432\n    var prev = this.blocks[name];                                                                                      // 433\n                                                                                                                       // 434\n    if (prev) {                                                                                                        // 435\n      switch (prev.mode) {                                                                                             // 436\n        case 'append':                                                                                                 // 437\n          block.nodes = block.nodes.concat(prev.nodes);                                                                // 438\n          prev = block;                                                                                                // 439\n          break;                                                                                                       // 440\n        case 'prepend':                                                                                                // 441\n          block.nodes = prev.nodes.concat(block.nodes);                                                                // 442\n          prev = block;                                                                                                // 443\n          break;                                                                                                       // 444\n      }                                                                                                                // 445\n    }                                                                                                                  // 446\n                                                                                                                       // 447\n    block.mode = mode;                                                                                                 // 448\n    return this.blocks[name] = prev || block;                                                                          // 449\n  },                                                                                                                   // 450\n                                                                                                                       // 451\n  /**                                                                                                                  // 452\n   * include block?                                                                                                    // 453\n   */                                                                                                                  // 454\n                                                                                                                       // 455\n  parseInclude: function(){                                                                                            // 456\n    var path = require('path')                                                                                         // 457\n      , fs = require('fs')                                                                                             // 458\n      , dirname = path.dirname                                                                                         // 459\n      , basename = path.basename                                                                                       // 460\n      , join = path.join;                                                                                              // 461\n                                                                                                                       // 462\n    var path = this.expect('include').val.trim()                                                                       // 463\n      , dir = dirname(this.filename);                                                                                  // 464\n                                                                                                                       // 465\n    if (!this.filename)                                                                                                // 466\n      throw new Error('the \"filename\" option is required to use includes');                                            // 467\n                                                                                                                       // 468\n    // no extension                                                                                                    // 469\n    if (!~basename(path).indexOf('.')) {                                                                               // 470\n      path += '.jade';                                                                                                 // 471\n    }                                                                                                                  // 472\n                                                                                                                       // 473\n    // non-jade                                                                                                        // 474\n    if ('.jade' != path.substr(-5)) {                                                                                  // 475\n      var path = join(dir, path)                                                                                       // 476\n        , str = fs.readFileSync(path, 'utf8');                                                                         // 477\n      return new nodes.Literal(str);                                                                                   // 478\n    }                                                                                                                  // 479\n                                                                                                                       // 480\n    var path = join(dir, path)                                                                                         // 481\n      , str = fs.readFileSync(path, 'utf8')                                                                            // 482\n     , parser = new Parser(str, path, this.options);                                                                   // 483\n    parser.blocks = this.blocks;                                                                                       // 484\n    parser.mixins = this.mixins;                                                                                       // 485\n                                                                                                                       // 486\n    this.context(parser);                                                                                              // 487\n    var ast = parser.parse();                                                                                          // 488\n    this.context();                                                                                                    // 489\n    ast.filename = path;                                                                                               // 490\n                                                                                                                       // 491\n    if ('indent' == this.peek().type) {                                                                                // 492\n      ast.includeBlock().push(this.block());                                                                           // 493\n    }                                                                                                                  // 494\n                                                                                                                       // 495\n    return ast;                                                                                                        // 496\n  },                                                                                                                   // 497\n                                                                                                                       // 498\n  /**                                                                                                                  // 499\n   * call ident block                                                                                                  // 500\n   */                                                                                                                  // 501\n                                                                                                                       // 502\n  parseCall: function(){                                                                                               // 503\n    var tok = this.expect('call')                                                                                      // 504\n      , name = tok.val                                                                                                 // 505\n      , args = tok.args                                                                                                // 506\n      , mixin = new nodes.Mixin(name, args, new nodes.Block, true);                                                    // 507\n                                                                                                                       // 508\n    this.tag(mixin);                                                                                                   // 509\n    if (mixin.block.isEmpty()) mixin.block = null;                                                                     // 510\n    return mixin;                                                                                                      // 511\n  },                                                                                                                   // 512\n                                                                                                                       // 513\n  /**                                                                                                                  // 514\n   * mixin block                                                                                                       // 515\n   */                                                                                                                  // 516\n                                                                                                                       // 517\n  parseMixin: function(){                                                                                              // 518\n    var tok = this.expect('mixin')                                                                                     // 519\n      , name = tok.val                                                                                                 // 520\n      , args = tok.args                                                                                                // 521\n      , mixin;                                                                                                         // 522\n                                                                                                                       // 523\n    // definition                                                                                                      // 524\n    if ('indent' == this.peek().type) {                                                                                // 525\n      mixin = new nodes.Mixin(name, args, this.block(), false);                                                        // 526\n      this.mixins[name] = mixin;                                                                                       // 527\n      return mixin;                                                                                                    // 528\n    // call                                                                                                            // 529\n    } else {                                                                                                           // 530\n      return new nodes.Mixin(name, args, null, true);                                                                  // 531\n    }                                                                                                                  // 532\n  },                                                                                                                   // 533\n                                                                                                                       // 534\n  /**                                                                                                                  // 535\n   * indent (text | newline)* outdent                                                                                  // 536\n   */                                                                                                                  // 537\n                                                                                                                       // 538\n  parseTextBlock: function(){                                                                                          // 539\n    var block = new nodes.Block;                                                                                       // 540\n    block.line = this.line();                                                                                          // 541\n    var spaces = this.expect('indent').val;                                                                            // 542\n    if (null == this._spaces) this._spaces = spaces;                                                                   // 543\n    var indent = Array(spaces - this._spaces + 1).join(' ');                                                           // 544\n    while ('outdent' != this.peek().type) {                                                                            // 545\n      switch (this.peek().type) {                                                                                      // 546\n        case 'newline':                                                                                                // 547\n          this.advance();                                                                                              // 548\n          break;                                                                                                       // 549\n        case 'indent':                                                                                                 // 550\n          this.parseTextBlock().nodes.forEach(function(node){                                                          // 551\n            block.push(node);                                                                                          // 552\n          });                                                                                                          // 553\n          break;                                                                                                       // 554\n        default:                                                                                                       // 555\n          var text = new nodes.Text(indent + this.advance().val);                                                      // 556\n          text.line = this.line();                                                                                     // 557\n          block.push(text);                                                                                            // 558\n      }                                                                                                                // 559\n    }                                                                                                                  // 560\n                                                                                                                       // 561\n    if (spaces == this._spaces) this._spaces = null;                                                                   // 562\n    this.expect('outdent');                                                                                            // 563\n    return block;                                                                                                      // 564\n  },                                                                                                                   // 565\n                                                                                                                       // 566\n  /**                                                                                                                  // 567\n   * indent expr* outdent                                                                                              // 568\n   */                                                                                                                  // 569\n                                                                                                                       // 570\n  block: function(){                                                                                                   // 571\n    var block = new nodes.Block;                                                                                       // 572\n    block.line = this.line();                                                                                          // 573\n    this.expect('indent');                                                                                             // 574\n    while ('outdent' != this.peek().type) {                                                                            // 575\n      if ('newline' == this.peek().type) {                                                                             // 576\n        this.advance();                                                                                                // 577\n      } else {                                                                                                         // 578\n        block.push(this.parseExpr());                                                                                  // 579\n      }                                                                                                                // 580\n    }                                                                                                                  // 581\n    this.expect('outdent');                                                                                            // 582\n    return block;                                                                                                      // 583\n  },                                                                                                                   // 584\n                                                                                                                       // 585\n  /**                                                                                                                  // 586\n   * interpolation (attrs | class | id)* (text | code | ':')? newline* block?                                          // 587\n   */                                                                                                                  // 588\n                                                                                                                       // 589\n  parseInterpolation: function(){                                                                                      // 590\n    var tok = this.advance();                                                                                          // 591\n    var tag = new nodes.Tag(tok.val);                                                                                  // 592\n    tag.buffer = true;                                                                                                 // 593\n    return this.tag(tag);                                                                                              // 594\n  },                                                                                                                   // 595\n                                                                                                                       // 596\n  /**                                                                                                                  // 597\n   * tag (attrs | class | id)* (text | code | ':')? newline* block?                                                    // 598\n   */                                                                                                                  // 599\n                                                                                                                       // 600\n  parseTag: function(){                                                                                                // 601\n    // ast-filter look-ahead                                                                                           // 602\n    var i = 2;                                                                                                         // 603\n    if ('attrs' == this.lookahead(i).type) ++i;                                                                        // 604\n    if (':' == this.lookahead(i).type) {                                                                               // 605\n      if ('indent' == this.lookahead(++i).type) {                                                                      // 606\n        return this.parseASTFilter();                                                                                  // 607\n      }                                                                                                                // 608\n    }                                                                                                                  // 609\n                                                                                                                       // 610\n    var tok = this.advance()                                                                                           // 611\n      , tag = new nodes.Tag(tok.val);                                                                                  // 612\n                                                                                                                       // 613\n    tag.selfClosing = tok.selfClosing;                                                                                 // 614\n                                                                                                                       // 615\n    return this.tag(tag);                                                                                              // 616\n  },                                                                                                                   // 617\n                                                                                                                       // 618\n  /**                                                                                                                  // 619\n   * Parse tag.                                                                                                        // 620\n   */                                                                                                                  // 621\n                                                                                                                       // 622\n  tag: function(tag){                                                                                                  // 623\n    var dot;                                                                                                           // 624\n                                                                                                                       // 625\n    tag.line = this.line();                                                                                            // 626\n                                                                                                                       // 627\n    // (attrs | class | id)*                                                                                           // 628\n    out:                                                                                                               // 629\n      while (true) {                                                                                                   // 630\n        switch (this.peek().type) {                                                                                    // 631\n          case 'id':                                                                                                   // 632\n          case 'class':                                                                                                // 633\n            var tok = this.advance();                                                                                  // 634\n            tag.setAttribute(tok.type, \"'\" + tok.val + \"'\");                                                           // 635\n            continue;                                                                                                  // 636\n          case 'attrs':                                                                                                // 637\n            var tok = this.advance()                                                                                   // 638\n              , obj = tok.attrs                                                                                        // 639\n              , escaped = tok.escaped                                                                                  // 640\n              , names = Object.keys(obj);                                                                              // 641\n                                                                                                                       // 642\n            if (tok.selfClosing) tag.selfClosing = true;                                                               // 643\n                                                                                                                       // 644\n            for (var i = 0, len = names.length; i < len; ++i) {                                                        // 645\n              var name = names[i]                                                                                      // 646\n                , val = obj[name];                                                                                     // 647\n              tag.setAttribute(name, val, escaped[name]);                                                              // 648\n            }                                                                                                          // 649\n            continue;                                                                                                  // 650\n          default:                                                                                                     // 651\n            break out;                                                                                                 // 652\n        }                                                                                                              // 653\n      }                                                                                                                // 654\n                                                                                                                       // 655\n    // check immediate '.'                                                                                             // 656\n    if ('.' == this.peek().val) {                                                                                      // 657\n      dot = tag.textOnly = true;                                                                                       // 658\n      this.advance();                                                                                                  // 659\n    }                                                                                                                  // 660\n                                                                                                                       // 661\n    // (text | code | ':')?                                                                                            // 662\n    switch (this.peek().type) {                                                                                        // 663\n      case 'text':                                                                                                     // 664\n        tag.block.push(this.parseText());                                                                              // 665\n        break;                                                                                                         // 666\n      case 'code':                                                                                                     // 667\n        tag.code = this.parseCode();                                                                                   // 668\n        break;                                                                                                         // 669\n      case ':':                                                                                                        // 670\n        this.advance();                                                                                                // 671\n        tag.block = new nodes.Block;                                                                                   // 672\n        tag.block.push(this.parseExpr());                                                                              // 673\n        break;                                                                                                         // 674\n    }                                                                                                                  // 675\n                                                                                                                       // 676\n    // newline*                                                                                                        // 677\n    while ('newline' == this.peek().type) this.advance();                                                              // 678\n                                                                                                                       // 679\n    tag.textOnly = tag.textOnly || ~textOnly.indexOf(tag.name);                                                        // 680\n                                                                                                                       // 681\n    // script special-case                                                                                             // 682\n    if ('script' == tag.name) {                                                                                        // 683\n      var type = tag.getAttribute('type');                                                                             // 684\n      if (!dot && type && 'text/javascript' != type.replace(/^['\"]|['\"]$/g, '')) {                                     // 685\n        tag.textOnly = false;                                                                                          // 686\n      }                                                                                                                // 687\n    }                                                                                                                  // 688\n                                                                                                                       // 689\n    // block?                                                                                                          // 690\n    if ('indent' == this.peek().type) {                                                                                // 691\n      if (tag.textOnly) {                                                                                              // 692\n        this.lexer.pipeless = true;                                                                                    // 693\n        tag.block = this.parseTextBlock();                                                                             // 694\n        this.lexer.pipeless = false;                                                                                   // 695\n      } else {                                                                                                         // 696\n        var block = this.block();                                                                                      // 697\n        if (tag.block) {                                                                                               // 698\n          for (var i = 0, len = block.nodes.length; i < len; ++i) {                                                    // 699\n            tag.block.push(block.nodes[i]);                                                                            // 700\n          }                                                                                                            // 701\n        } else {                                                                                                       // 702\n          tag.block = block;                                                                                           // 703\n        }                                                                                                              // 704\n      }                                                                                                                // 705\n    }                                                                                                                  // 706\n                                                                                                                       // 707\n    return tag;                                                                                                        // 708\n  }                                                                                                                    // 709\n};                                                                                                                     // 710\n                                                                                                                       // 711\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lexer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/lexer.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - Lexer                                                                                                        // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Initialize `Lexer` with the given `str`.                                                                            // 9\n *                                                                                                                     // 10\n * Options:                                                                                                            // 11\n *                                                                                                                     // 12\n *   - `colons` allow colons for attr delimiters                                                                       // 13\n *                                                                                                                     // 14\n * @param {String} str                                                                                                 // 15\n * @param {Object} options                                                                                             // 16\n * @api private                                                                                                        // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nvar Lexer = module.exports = function Lexer(str, options) {                                                            // 20\n  options = options || {};                                                                                             // 21\n  this.input = str.replace(/\\r\\n|\\r/g, '\\n');                                                                          // 22\n  this.colons = options.colons;                                                                                        // 23\n  this.deferredTokens = [];                                                                                            // 24\n  this.lastIndents = 0;                                                                                                // 25\n  this.lineno = 1;                                                                                                     // 26\n  this.stash = [];                                                                                                     // 27\n  this.indentStack = [];                                                                                               // 28\n  this.indentRe = null;                                                                                                // 29\n  this.pipeless = false;                                                                                               // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Lexer prototype.                                                                                                    // 34\n */                                                                                                                    // 35\n                                                                                                                       // 36\nLexer.prototype = {                                                                                                    // 37\n                                                                                                                       // 38\n  /**                                                                                                                  // 39\n   * Construct a token with the given `type` and `val`.                                                                // 40\n   *                                                                                                                   // 41\n   * @param {String} type                                                                                              // 42\n   * @param {String} val                                                                                               // 43\n   * @return {Object}                                                                                                  // 44\n   * @api private                                                                                                      // 45\n   */                                                                                                                  // 46\n                                                                                                                       // 47\n  tok: function(type, val){                                                                                            // 48\n    return {                                                                                                           // 49\n        type: type                                                                                                     // 50\n      , line: this.lineno                                                                                              // 51\n      , val: val                                                                                                       // 52\n    }                                                                                                                  // 53\n  },                                                                                                                   // 54\n                                                                                                                       // 55\n  /**                                                                                                                  // 56\n   * Consume the given `len` of input.                                                                                 // 57\n   *                                                                                                                   // 58\n   * @param {Number} len                                                                                               // 59\n   * @api private                                                                                                      // 60\n   */                                                                                                                  // 61\n                                                                                                                       // 62\n  consume: function(len){                                                                                              // 63\n    this.input = this.input.substr(len);                                                                               // 64\n  },                                                                                                                   // 65\n                                                                                                                       // 66\n  /**                                                                                                                  // 67\n   * Scan for `type` with the given `regexp`.                                                                          // 68\n   *                                                                                                                   // 69\n   * @param {String} type                                                                                              // 70\n   * @param {RegExp} regexp                                                                                            // 71\n   * @return {Object}                                                                                                  // 72\n   * @api private                                                                                                      // 73\n   */                                                                                                                  // 74\n                                                                                                                       // 75\n  scan: function(regexp, type){                                                                                        // 76\n    var captures;                                                                                                      // 77\n    if (captures = regexp.exec(this.input)) {                                                                          // 78\n      this.consume(captures[0].length);                                                                                // 79\n      return this.tok(type, captures[1]);                                                                              // 80\n    }                                                                                                                  // 81\n  },                                                                                                                   // 82\n                                                                                                                       // 83\n  /**                                                                                                                  // 84\n   * Defer the given `tok`.                                                                                            // 85\n   *                                                                                                                   // 86\n   * @param {Object} tok                                                                                               // 87\n   * @api private                                                                                                      // 88\n   */                                                                                                                  // 89\n                                                                                                                       // 90\n  defer: function(tok){                                                                                                // 91\n    this.deferredTokens.push(tok);                                                                                     // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  /**                                                                                                                  // 95\n   * Lookahead `n` tokens.                                                                                             // 96\n   *                                                                                                                   // 97\n   * @param {Number} n                                                                                                 // 98\n   * @return {Object}                                                                                                  // 99\n   * @api private                                                                                                      // 100\n   */                                                                                                                  // 101\n                                                                                                                       // 102\n  lookahead: function(n){                                                                                              // 103\n    var fetch = n - this.stash.length;                                                                                 // 104\n    while (fetch-- > 0) this.stash.push(this.next());                                                                  // 105\n    return this.stash[--n];                                                                                            // 106\n  },                                                                                                                   // 107\n                                                                                                                       // 108\n  /**                                                                                                                  // 109\n   * Return the indexOf `start` / `end` delimiters.                                                                    // 110\n   *                                                                                                                   // 111\n   * @param {String} start                                                                                             // 112\n   * @param {String} end                                                                                               // 113\n   * @return {Number}                                                                                                  // 114\n   * @api private                                                                                                      // 115\n   */                                                                                                                  // 116\n                                                                                                                       // 117\n  indexOfDelimiters: function(start, end){                                                                             // 118\n    var str = this.input                                                                                               // 119\n      , nstart = 0                                                                                                     // 120\n      , nend = 0                                                                                                       // 121\n      , pos = 0;                                                                                                       // 122\n    for (var i = 0, len = str.length; i < len; ++i) {                                                                  // 123\n      if (start == str.charAt(i)) {                                                                                    // 124\n        ++nstart;                                                                                                      // 125\n      } else if (end == str.charAt(i)) {                                                                               // 126\n        if (++nend == nstart) {                                                                                        // 127\n          pos = i;                                                                                                     // 128\n          break;                                                                                                       // 129\n        }                                                                                                              // 130\n      }                                                                                                                // 131\n    }                                                                                                                  // 132\n    return pos;                                                                                                        // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  /**                                                                                                                  // 136\n   * Stashed token.                                                                                                    // 137\n   */                                                                                                                  // 138\n                                                                                                                       // 139\n  stashed: function() {                                                                                                // 140\n    return this.stash.length                                                                                           // 141\n      && this.stash.shift();                                                                                           // 142\n  },                                                                                                                   // 143\n                                                                                                                       // 144\n  /**                                                                                                                  // 145\n   * Deferred token.                                                                                                   // 146\n   */                                                                                                                  // 147\n                                                                                                                       // 148\n  deferred: function() {                                                                                               // 149\n    return this.deferredTokens.length                                                                                  // 150\n      && this.deferredTokens.shift();                                                                                  // 151\n  },                                                                                                                   // 152\n                                                                                                                       // 153\n  /**                                                                                                                  // 154\n   * end-of-source.                                                                                                    // 155\n   */                                                                                                                  // 156\n                                                                                                                       // 157\n  eos: function() {                                                                                                    // 158\n    if (this.input.length) return;                                                                                     // 159\n    if (this.indentStack.length) {                                                                                     // 160\n      this.indentStack.shift();                                                                                        // 161\n      return this.tok('outdent');                                                                                      // 162\n    } else {                                                                                                           // 163\n      return this.tok('eos');                                                                                          // 164\n    }                                                                                                                  // 165\n  },                                                                                                                   // 166\n                                                                                                                       // 167\n  /**                                                                                                                  // 168\n   * Blank line.                                                                                                       // 169\n   */                                                                                                                  // 170\n                                                                                                                       // 171\n  blank: function() {                                                                                                  // 172\n    var captures;                                                                                                      // 173\n    if (captures = /^\\n *\\n/.exec(this.input)) {                                                                       // 174\n      this.consume(captures[0].length - 1);                                                                            // 175\n      if (this.pipeless) return this.tok('text', '');                                                                  // 176\n      return this.next();                                                                                              // 177\n    }                                                                                                                  // 178\n  },                                                                                                                   // 179\n                                                                                                                       // 180\n  /**                                                                                                                  // 181\n   * Comment.                                                                                                          // 182\n   */                                                                                                                  // 183\n                                                                                                                       // 184\n  comment: function() {                                                                                                // 185\n    var captures;                                                                                                      // 186\n    if (captures = /^ *\\/\\/(-)?([^\\n]*)/.exec(this.input)) {                                                           // 187\n      this.consume(captures[0].length);                                                                                // 188\n      var tok = this.tok('comment', captures[2]);                                                                      // 189\n      tok.buffer = '-' != captures[1];                                                                                 // 190\n      return tok;                                                                                                      // 191\n    }                                                                                                                  // 192\n  },                                                                                                                   // 193\n                                                                                                                       // 194\n  /**                                                                                                                  // 195\n   * Interpolated tag.                                                                                                 // 196\n   */                                                                                                                  // 197\n                                                                                                                       // 198\n  interpolation: function() {                                                                                          // 199\n    var captures;                                                                                                      // 200\n    if (captures = /^#\\{(.*?)\\}/.exec(this.input)) {                                                                   // 201\n      this.consume(captures[0].length);                                                                                // 202\n      return this.tok('interpolation', captures[1]);                                                                   // 203\n    }                                                                                                                  // 204\n  },                                                                                                                   // 205\n                                                                                                                       // 206\n  /**                                                                                                                  // 207\n   * Tag.                                                                                                              // 208\n   */                                                                                                                  // 209\n                                                                                                                       // 210\n  tag: function() {                                                                                                    // 211\n    var captures;                                                                                                      // 212\n    if (captures = /^(\\w[-:\\w]*)(\\/?)/.exec(this.input)) {                                                             // 213\n      this.consume(captures[0].length);                                                                                // 214\n      var tok, name = captures[1];                                                                                     // 215\n      if (':' == name[name.length - 1]) {                                                                              // 216\n        name = name.slice(0, -1);                                                                                      // 217\n        tok = this.tok('tag', name);                                                                                   // 218\n        this.defer(this.tok(':'));                                                                                     // 219\n        while (' ' == this.input[0]) this.input = this.input.substr(1);                                                // 220\n      } else {                                                                                                         // 221\n        tok = this.tok('tag', name);                                                                                   // 222\n      }                                                                                                                // 223\n      tok.selfClosing = !! captures[2];                                                                                // 224\n      return tok;                                                                                                      // 225\n    }                                                                                                                  // 226\n  },                                                                                                                   // 227\n                                                                                                                       // 228\n  /**                                                                                                                  // 229\n   * Filter.                                                                                                           // 230\n   */                                                                                                                  // 231\n                                                                                                                       // 232\n  filter: function() {                                                                                                 // 233\n    return this.scan(/^:(\\w+)/, 'filter');                                                                             // 234\n  },                                                                                                                   // 235\n                                                                                                                       // 236\n  /**                                                                                                                  // 237\n   * Doctype.                                                                                                          // 238\n   */                                                                                                                  // 239\n                                                                                                                       // 240\n  doctype: function() {                                                                                                // 241\n    return this.scan(/^(?:!!!|doctype) *([^\\n]+)?/, 'doctype');                                                        // 242\n  },                                                                                                                   // 243\n                                                                                                                       // 244\n  /**                                                                                                                  // 245\n   * Id.                                                                                                               // 246\n   */                                                                                                                  // 247\n                                                                                                                       // 248\n  id: function() {                                                                                                     // 249\n    return this.scan(/^#([\\w-]+)/, 'id');                                                                              // 250\n  },                                                                                                                   // 251\n                                                                                                                       // 252\n  /**                                                                                                                  // 253\n   * Class.                                                                                                            // 254\n   */                                                                                                                  // 255\n                                                                                                                       // 256\n  className: function() {                                                                                              // 257\n    return this.scan(/^\\.([\\w-]+)/, 'class');                                                                          // 258\n  },                                                                                                                   // 259\n                                                                                                                       // 260\n  /**                                                                                                                  // 261\n   * Text.                                                                                                             // 262\n   */                                                                                                                  // 263\n                                                                                                                       // 264\n  text: function() {                                                                                                   // 265\n    return this.scan(/^(?:\\| ?| ?)?([^\\n]+)/, 'text');                                                                 // 266\n  },                                                                                                                   // 267\n                                                                                                                       // 268\n  /**                                                                                                                  // 269\n   * Extends.                                                                                                          // 270\n   */                                                                                                                  // 271\n                                                                                                                       // 272\n  \"extends\": function() {                                                                                              // 273\n    return this.scan(/^extends? +([^\\n]+)/, 'extends');                                                                // 274\n  },                                                                                                                   // 275\n                                                                                                                       // 276\n  /**                                                                                                                  // 277\n   * Block prepend.                                                                                                    // 278\n   */                                                                                                                  // 279\n                                                                                                                       // 280\n  prepend: function() {                                                                                                // 281\n    var captures;                                                                                                      // 282\n    if (captures = /^prepend +([^\\n]+)/.exec(this.input)) {                                                            // 283\n      this.consume(captures[0].length);                                                                                // 284\n      var mode = 'prepend'                                                                                             // 285\n        , name = captures[1]                                                                                           // 286\n        , tok = this.tok('block', name);                                                                               // 287\n      tok.mode = mode;                                                                                                 // 288\n      return tok;                                                                                                      // 289\n    }                                                                                                                  // 290\n  },                                                                                                                   // 291\n                                                                                                                       // 292\n  /**                                                                                                                  // 293\n   * Block append.                                                                                                     // 294\n   */                                                                                                                  // 295\n                                                                                                                       // 296\n  append: function() {                                                                                                 // 297\n    var captures;                                                                                                      // 298\n    if (captures = /^append +([^\\n]+)/.exec(this.input)) {                                                             // 299\n      this.consume(captures[0].length);                                                                                // 300\n      var mode = 'append'                                                                                              // 301\n        , name = captures[1]                                                                                           // 302\n        , tok = this.tok('block', name);                                                                               // 303\n      tok.mode = mode;                                                                                                 // 304\n      return tok;                                                                                                      // 305\n    }                                                                                                                  // 306\n  },                                                                                                                   // 307\n                                                                                                                       // 308\n  /**                                                                                                                  // 309\n   * Block.                                                                                                            // 310\n   */                                                                                                                  // 311\n                                                                                                                       // 312\n  block: function() {                                                                                                  // 313\n    var captures;                                                                                                      // 314\n    if (captures = /^block\\b *(?:(prepend|append) +)?([^\\n]*)/.exec(this.input)) {                                     // 315\n      this.consume(captures[0].length);                                                                                // 316\n      var mode = captures[1] || 'replace'                                                                              // 317\n        , name = captures[2]                                                                                           // 318\n        , tok = this.tok('block', name);                                                                               // 319\n                                                                                                                       // 320\n      tok.mode = mode;                                                                                                 // 321\n      return tok;                                                                                                      // 322\n    }                                                                                                                  // 323\n  },                                                                                                                   // 324\n                                                                                                                       // 325\n  /**                                                                                                                  // 326\n   * Yield.                                                                                                            // 327\n   */                                                                                                                  // 328\n                                                                                                                       // 329\n  yield: function() {                                                                                                  // 330\n    return this.scan(/^yield */, 'yield');                                                                             // 331\n  },                                                                                                                   // 332\n                                                                                                                       // 333\n  /**                                                                                                                  // 334\n   * Include.                                                                                                          // 335\n   */                                                                                                                  // 336\n                                                                                                                       // 337\n  include: function() {                                                                                                // 338\n    return this.scan(/^include +([^\\n]+)/, 'include');                                                                 // 339\n  },                                                                                                                   // 340\n                                                                                                                       // 341\n  /**                                                                                                                  // 342\n   * Case.                                                                                                             // 343\n   */                                                                                                                  // 344\n                                                                                                                       // 345\n  \"case\": function() {                                                                                                 // 346\n    return this.scan(/^case +([^\\n]+)/, 'case');                                                                       // 347\n  },                                                                                                                   // 348\n                                                                                                                       // 349\n  /**                                                                                                                  // 350\n   * When.                                                                                                             // 351\n   */                                                                                                                  // 352\n                                                                                                                       // 353\n  when: function() {                                                                                                   // 354\n    return this.scan(/^when +([^:\\n]+)/, 'when');                                                                      // 355\n  },                                                                                                                   // 356\n                                                                                                                       // 357\n  /**                                                                                                                  // 358\n   * Default.                                                                                                          // 359\n   */                                                                                                                  // 360\n                                                                                                                       // 361\n  \"default\": function() {                                                                                              // 362\n    return this.scan(/^default */, 'default');                                                                         // 363\n  },                                                                                                                   // 364\n                                                                                                                       // 365\n  /**                                                                                                                  // 366\n   * Assignment.                                                                                                       // 367\n   */                                                                                                                  // 368\n                                                                                                                       // 369\n  assignment: function() {                                                                                             // 370\n    var captures;                                                                                                      // 371\n    if (captures = /^(\\w+) += *([^;\\n]+)( *;? *)/.exec(this.input)) {                                                  // 372\n      this.consume(captures[0].length);                                                                                // 373\n      var name = captures[1]                                                                                           // 374\n        , val = captures[2];                                                                                           // 375\n      return this.tok('code', 'var ' + name + ' = (' + val + ');');                                                    // 376\n    }                                                                                                                  // 377\n  },                                                                                                                   // 378\n                                                                                                                       // 379\n  /**                                                                                                                  // 380\n   * Call mixin.                                                                                                       // 381\n   */                                                                                                                  // 382\n                                                                                                                       // 383\n  call: function(){                                                                                                    // 384\n    var captures;                                                                                                      // 385\n    if (captures = /^\\+([-\\w]+)/.exec(this.input)) {                                                                   // 386\n      this.consume(captures[0].length);                                                                                // 387\n      var tok = this.tok('call', captures[1]);                                                                         // 388\n                                                                                                                       // 389\n      // Check for args (not attributes)                                                                               // 390\n      if (captures = /^ *\\((.*?)\\)/.exec(this.input)) {                                                                // 391\n        if (!/^ *[-\\w]+ *=/.test(captures[1])) {                                                                       // 392\n          this.consume(captures[0].length);                                                                            // 393\n          tok.args = captures[1];                                                                                      // 394\n        }                                                                                                              // 395\n      }                                                                                                                // 396\n                                                                                                                       // 397\n      return tok;                                                                                                      // 398\n    }                                                                                                                  // 399\n  },                                                                                                                   // 400\n                                                                                                                       // 401\n  /**                                                                                                                  // 402\n   * Mixin.                                                                                                            // 403\n   */                                                                                                                  // 404\n                                                                                                                       // 405\n  mixin: function(){                                                                                                   // 406\n    var captures;                                                                                                      // 407\n    if (captures = /^mixin +([-\\w]+)(?: *\\((.*)\\))?/.exec(this.input)) {                                               // 408\n      this.consume(captures[0].length);                                                                                // 409\n      var tok = this.tok('mixin', captures[1]);                                                                        // 410\n      tok.args = captures[2];                                                                                          // 411\n      return tok;                                                                                                      // 412\n    }                                                                                                                  // 413\n  },                                                                                                                   // 414\n                                                                                                                       // 415\n  /**                                                                                                                  // 416\n   * Conditional.                                                                                                      // 417\n   */                                                                                                                  // 418\n                                                                                                                       // 419\n  conditional: function() {                                                                                            // 420\n    var captures;                                                                                                      // 421\n    if (captures = /^(if|unless|else if|else)\\b([^\\n]*)/.exec(this.input)) {                                           // 422\n      this.consume(captures[0].length);                                                                                // 423\n      var type = captures[1]                                                                                           // 424\n        , js = captures[2];                                                                                            // 425\n                                                                                                                       // 426\n      switch (type) {                                                                                                  // 427\n        case 'if': js = 'if (' + js + ')'; break;                                                                      // 428\n        case 'unless': js = 'if (!(' + js + '))'; break;                                                               // 429\n        case 'else if': js = 'else if (' + js + ')'; break;                                                            // 430\n        case 'else': js = 'else'; break;                                                                               // 431\n      }                                                                                                                // 432\n                                                                                                                       // 433\n      return this.tok('code', js);                                                                                     // 434\n    }                                                                                                                  // 435\n  },                                                                                                                   // 436\n                                                                                                                       // 437\n  /**                                                                                                                  // 438\n   * While.                                                                                                            // 439\n   */                                                                                                                  // 440\n                                                                                                                       // 441\n  \"while\": function() {                                                                                                // 442\n    var captures;                                                                                                      // 443\n    if (captures = /^while +([^\\n]+)/.exec(this.input)) {                                                              // 444\n      this.consume(captures[0].length);                                                                                // 445\n      return this.tok('code', 'while (' + captures[1] + ')');                                                          // 446\n    }                                                                                                                  // 447\n  },                                                                                                                   // 448\n                                                                                                                       // 449\n  /**                                                                                                                  // 450\n   * Each.                                                                                                             // 451\n   */                                                                                                                  // 452\n                                                                                                                       // 453\n  each: function() {                                                                                                   // 454\n    var captures;                                                                                                      // 455\n    if (captures = /^(?:- *)?(?:each|for) +(\\w+)(?: *, *(\\w+))? * in *([^\\n]+)/.exec(this.input)) {                    // 456\n      this.consume(captures[0].length);                                                                                // 457\n      var tok = this.tok('each', captures[1]);                                                                         // 458\n      tok.key = captures[2] || '$index';                                                                               // 459\n      tok.code = captures[3];                                                                                          // 460\n      return tok;                                                                                                      // 461\n    }                                                                                                                  // 462\n  },                                                                                                                   // 463\n                                                                                                                       // 464\n  /**                                                                                                                  // 465\n   * Code.                                                                                                             // 466\n   */                                                                                                                  // 467\n                                                                                                                       // 468\n  code: function() {                                                                                                   // 469\n    var captures;                                                                                                      // 470\n    if (captures = /^(!?=|-)([^\\n]+)/.exec(this.input)) {                                                              // 471\n      this.consume(captures[0].length);                                                                                // 472\n      var flags = captures[1];                                                                                         // 473\n      captures[1] = captures[2];                                                                                       // 474\n      var tok = this.tok('code', captures[1]);                                                                         // 475\n      tok.escape = flags[0] === '=';                                                                                   // 476\n      tok.buffer = flags[0] === '=' || flags[1] === '=';                                                               // 477\n      return tok;                                                                                                      // 478\n    }                                                                                                                  // 479\n  },                                                                                                                   // 480\n                                                                                                                       // 481\n  /**                                                                                                                  // 482\n   * Attributes.                                                                                                       // 483\n   */                                                                                                                  // 484\n                                                                                                                       // 485\n  attrs: function() {                                                                                                  // 486\n    if ('(' == this.input.charAt(0)) {                                                                                 // 487\n      var index = this.indexOfDelimiters('(', ')')                                                                     // 488\n        , str = this.input.substr(1, index-1)                                                                          // 489\n        , tok = this.tok('attrs')                                                                                      // 490\n        , len = str.length                                                                                             // 491\n        , colons = this.colons                                                                                         // 492\n        , states = ['key']                                                                                             // 493\n        , escapedAttr                                                                                                  // 494\n        , key = ''                                                                                                     // 495\n        , val = ''                                                                                                     // 496\n        , quote                                                                                                        // 497\n        , c                                                                                                            // 498\n        , p;                                                                                                           // 499\n                                                                                                                       // 500\n      function state(){                                                                                                // 501\n        return states[states.length - 1];                                                                              // 502\n      }                                                                                                                // 503\n                                                                                                                       // 504\n      function interpolate(attr) {                                                                                     // 505\n        return attr.replace(/#\\{([^}]+)\\}/g, function(_, expr){                                                        // 506\n          return quote + \" + (\" + expr + \") + \" + quote;                                                               // 507\n        });                                                                                                            // 508\n      }                                                                                                                // 509\n                                                                                                                       // 510\n      this.consume(index + 1);                                                                                         // 511\n      tok.attrs = {};                                                                                                  // 512\n      tok.escaped = {};                                                                                                // 513\n                                                                                                                       // 514\n      function parse(c) {                                                                                              // 515\n        var real = c;                                                                                                  // 516\n        // TODO: remove when people fix \":\"                                                                            // 517\n        if (colons && ':' == c) c = '=';                                                                               // 518\n        switch (c) {                                                                                                   // 519\n          case ',':                                                                                                    // 520\n          case '\\n':                                                                                                   // 521\n            switch (state()) {                                                                                         // 522\n              case 'expr':                                                                                             // 523\n              case 'array':                                                                                            // 524\n              case 'string':                                                                                           // 525\n              case 'object':                                                                                           // 526\n                val += c;                                                                                              // 527\n                break;                                                                                                 // 528\n              default:                                                                                                 // 529\n                states.push('key');                                                                                    // 530\n                val = val.trim();                                                                                      // 531\n                key = key.trim();                                                                                      // 532\n                if ('' == key) return;                                                                                 // 533\n                key = key.replace(/^['\"]|['\"]$/g, '').replace('!', '');                                                // 534\n                tok.escaped[key] = escapedAttr;                                                                        // 535\n                tok.attrs[key] = '' == val                                                                             // 536\n                  ? true                                                                                               // 537\n                  : interpolate(val);                                                                                  // 538\n                key = val = '';                                                                                        // 539\n            }                                                                                                          // 540\n            break;                                                                                                     // 541\n          case '=':                                                                                                    // 542\n            switch (state()) {                                                                                         // 543\n              case 'key char':                                                                                         // 544\n                key += real;                                                                                           // 545\n                break;                                                                                                 // 546\n              case 'val':                                                                                              // 547\n              case 'expr':                                                                                             // 548\n              case 'array':                                                                                            // 549\n              case 'string':                                                                                           // 550\n              case 'object':                                                                                           // 551\n                val += real;                                                                                           // 552\n                break;                                                                                                 // 553\n              default:                                                                                                 // 554\n                escapedAttr = '!' != p;                                                                                // 555\n                states.push('val');                                                                                    // 556\n            }                                                                                                          // 557\n            break;                                                                                                     // 558\n          case '(':                                                                                                    // 559\n            if ('val' == state()                                                                                       // 560\n              || 'expr' == state()) states.push('expr');                                                               // 561\n            val += c;                                                                                                  // 562\n            break;                                                                                                     // 563\n          case ')':                                                                                                    // 564\n            if ('expr' == state()                                                                                      // 565\n              || 'val' == state()) states.pop();                                                                       // 566\n            val += c;                                                                                                  // 567\n            break;                                                                                                     // 568\n          case '{':                                                                                                    // 569\n            if ('val' == state()) states.push('object');                                                               // 570\n            val += c;                                                                                                  // 571\n            break;                                                                                                     // 572\n          case '}':                                                                                                    // 573\n            if ('object' == state()) states.pop();                                                                     // 574\n            val += c;                                                                                                  // 575\n            break;                                                                                                     // 576\n          case '[':                                                                                                    // 577\n            if ('val' == state()) states.push('array');                                                                // 578\n            val += c;                                                                                                  // 579\n            break;                                                                                                     // 580\n          case ']':                                                                                                    // 581\n            if ('array' == state()) states.pop();                                                                      // 582\n            val += c;                                                                                                  // 583\n            break;                                                                                                     // 584\n          case '\"':                                                                                                    // 585\n          case \"'\":                                                                                                    // 586\n            switch (state()) {                                                                                         // 587\n              case 'key':                                                                                              // 588\n                states.push('key char');                                                                               // 589\n                break;                                                                                                 // 590\n              case 'key char':                                                                                         // 591\n                states.pop();                                                                                          // 592\n                break;                                                                                                 // 593\n              case 'string':                                                                                           // 594\n                if (c == quote) states.pop();                                                                          // 595\n                val += c;                                                                                              // 596\n                break;                                                                                                 // 597\n              default:                                                                                                 // 598\n                states.push('string');                                                                                 // 599\n                val += c;                                                                                              // 600\n                quote = c;                                                                                             // 601\n            }                                                                                                          // 602\n            break;                                                                                                     // 603\n          case '':                                                                                                     // 604\n            break;                                                                                                     // 605\n          default:                                                                                                     // 606\n            switch (state()) {                                                                                         // 607\n              case 'key':                                                                                              // 608\n              case 'key char':                                                                                         // 609\n                key += c;                                                                                              // 610\n                break;                                                                                                 // 611\n              default:                                                                                                 // 612\n                val += c;                                                                                              // 613\n            }                                                                                                          // 614\n        }                                                                                                              // 615\n        p = c;                                                                                                         // 616\n      }                                                                                                                // 617\n                                                                                                                       // 618\n      for (var i = 0; i < len; ++i) {                                                                                  // 619\n        parse(str.charAt(i));                                                                                          // 620\n      }                                                                                                                // 621\n                                                                                                                       // 622\n      parse(',');                                                                                                      // 623\n                                                                                                                       // 624\n      if ('/' == this.input.charAt(0)) {                                                                               // 625\n        this.consume(1);                                                                                               // 626\n        tok.selfClosing = true;                                                                                        // 627\n      }                                                                                                                // 628\n                                                                                                                       // 629\n      return tok;                                                                                                      // 630\n    }                                                                                                                  // 631\n  },                                                                                                                   // 632\n                                                                                                                       // 633\n  /**                                                                                                                  // 634\n   * Indent | Outdent | Newline.                                                                                       // 635\n   */                                                                                                                  // 636\n                                                                                                                       // 637\n  indent: function() {                                                                                                 // 638\n    var captures, re;                                                                                                  // 639\n                                                                                                                       // 640\n    // established regexp                                                                                              // 641\n    if (this.indentRe) {                                                                                               // 642\n      captures = this.indentRe.exec(this.input);                                                                       // 643\n    // determine regexp                                                                                                // 644\n    } else {                                                                                                           // 645\n      // tabs                                                                                                          // 646\n      re = /^\\n(\\t*) */;                                                                                               // 647\n      captures = re.exec(this.input);                                                                                  // 648\n                                                                                                                       // 649\n      // spaces                                                                                                        // 650\n      if (captures && !captures[1].length) {                                                                           // 651\n        re = /^\\n( *)/;                                                                                                // 652\n        captures = re.exec(this.input);                                                                                // 653\n      }                                                                                                                // 654\n                                                                                                                       // 655\n      // established                                                                                                   // 656\n      if (captures && captures[1].length) this.indentRe = re;                                                          // 657\n    }                                                                                                                  // 658\n                                                                                                                       // 659\n    if (captures) {                                                                                                    // 660\n      var tok                                                                                                          // 661\n        , indents = captures[1].length;                                                                                // 662\n                                                                                                                       // 663\n      ++this.lineno;                                                                                                   // 664\n      this.consume(indents + 1);                                                                                       // 665\n                                                                                                                       // 666\n      if (' ' == this.input[0] || '\\t' == this.input[0]) {                                                             // 667\n        throw new Error('Invalid indentation, you can use tabs or spaces but not both');                               // 668\n      }                                                                                                                // 669\n                                                                                                                       // 670\n      // blank line                                                                                                    // 671\n      if ('\\n' == this.input[0]) return this.tok('newline');                                                           // 672\n                                                                                                                       // 673\n      // outdent                                                                                                       // 674\n      if (this.indentStack.length && indents < this.indentStack[0]) {                                                  // 675\n        while (this.indentStack.length && this.indentStack[0] > indents) {                                             // 676\n          this.stash.push(this.tok('outdent'));                                                                        // 677\n          this.indentStack.shift();                                                                                    // 678\n        }                                                                                                              // 679\n        tok = this.stash.pop();                                                                                        // 680\n      // indent                                                                                                        // 681\n      } else if (indents && indents != this.indentStack[0]) {                                                          // 682\n        this.indentStack.unshift(indents);                                                                             // 683\n        tok = this.tok('indent', indents);                                                                             // 684\n      // newline                                                                                                       // 685\n      } else {                                                                                                         // 686\n        tok = this.tok('newline');                                                                                     // 687\n      }                                                                                                                // 688\n                                                                                                                       // 689\n      return tok;                                                                                                      // 690\n    }                                                                                                                  // 691\n  },                                                                                                                   // 692\n                                                                                                                       // 693\n  /**                                                                                                                  // 694\n   * Pipe-less text consumed only when                                                                                 // 695\n   * pipeless is true;                                                                                                 // 696\n   */                                                                                                                  // 697\n                                                                                                                       // 698\n  pipelessText: function() {                                                                                           // 699\n    if (this.pipeless) {                                                                                               // 700\n      if ('\\n' == this.input[0]) return;                                                                               // 701\n      var i = this.input.indexOf('\\n');                                                                                // 702\n      if (-1 == i) i = this.input.length;                                                                              // 703\n      var str = this.input.substr(0, i);                                                                               // 704\n      this.consume(str.length);                                                                                        // 705\n      return this.tok('text', str);                                                                                    // 706\n    }                                                                                                                  // 707\n  },                                                                                                                   // 708\n                                                                                                                       // 709\n  /**                                                                                                                  // 710\n   * ':'                                                                                                               // 711\n   */                                                                                                                  // 712\n                                                                                                                       // 713\n  colon: function() {                                                                                                  // 714\n    return this.scan(/^: */, ':');                                                                                     // 715\n  },                                                                                                                   // 716\n                                                                                                                       // 717\n  /**                                                                                                                  // 718\n   * Return the next token object, or those                                                                            // 719\n   * previously stashed by lookahead.                                                                                  // 720\n   *                                                                                                                   // 721\n   * @return {Object}                                                                                                  // 722\n   * @api private                                                                                                      // 723\n   */                                                                                                                  // 724\n                                                                                                                       // 725\n  advance: function(){                                                                                                 // 726\n    return this.stashed()                                                                                              // 727\n      || this.next();                                                                                                  // 728\n  },                                                                                                                   // 729\n                                                                                                                       // 730\n  /**                                                                                                                  // 731\n   * Return the next token object.                                                                                     // 732\n   *                                                                                                                   // 733\n   * @return {Object}                                                                                                  // 734\n   * @api private                                                                                                      // 735\n   */                                                                                                                  // 736\n                                                                                                                       // 737\n  next: function() {                                                                                                   // 738\n    return this.deferred()                                                                                             // 739\n      || this.blank()                                                                                                  // 740\n      || this.eos()                                                                                                    // 741\n      || this.pipelessText()                                                                                           // 742\n      || this.yield()                                                                                                  // 743\n      || this.doctype()                                                                                                // 744\n      || this.interpolation()                                                                                          // 745\n      || this[\"case\"]()                                                                                                // 746\n      || this.when()                                                                                                   // 747\n      || this[\"default\"]()                                                                                             // 748\n      || this[\"extends\"]()                                                                                             // 749\n      || this.append()                                                                                                 // 750\n      || this.prepend()                                                                                                // 751\n      || this.block()                                                                                                  // 752\n      || this.include()                                                                                                // 753\n      || this.mixin()                                                                                                  // 754\n      || this.call()                                                                                                   // 755\n      || this.conditional()                                                                                            // 756\n      || this.each()                                                                                                   // 757\n      || this[\"while\"]()                                                                                               // 758\n      || this.assignment()                                                                                             // 759\n      || this.tag()                                                                                                    // 760\n      || this.filter()                                                                                                 // 761\n      || this.code()                                                                                                   // 762\n      || this.id()                                                                                                     // 763\n      || this.className()                                                                                              // 764\n      || this.attrs()                                                                                                  // 765\n      || this.indent()                                                                                                 // 766\n      || this.comment()                                                                                                // 767\n      || this.colon()                                                                                                  // 768\n      || this.text();                                                                                                  // 769\n  }                                                                                                                    // 770\n};                                                                                                                     // 771\n                                                                                                                       // 772\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"nodes\":{\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/index.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes                                                                                                        // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nexports.Node = require('./node');                                                                                      // 8\nexports.Tag = require('./tag');                                                                                        // 9\nexports.Code = require('./code');                                                                                      // 10\nexports.Each = require('./each');                                                                                      // 11\nexports.Case = require('./case');                                                                                      // 12\nexports.Text = require('./text');                                                                                      // 13\nexports.Block = require('./block');                                                                                    // 14\nexports.Mixin = require('./mixin');                                                                                    // 15\nexports.Filter = require('./filter');                                                                                  // 16\nexports.Comment = require('./comment');                                                                                // 17\nexports.Literal = require('./literal');                                                                                // 18\nexports.BlockComment = require('./block-comment');                                                                     // 19\nexports.Doctype = require('./doctype');                                                                                // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/node.js               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Node                                                                                                 // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Initialize a `Node`.                                                                                                // 9\n *                                                                                                                     // 10\n * @api public                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar Node = module.exports = function Node(){};                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Clone this node (return itself)                                                                                     // 17\n *                                                                                                                     // 18\n * @return {Node}                                                                                                      // 19\n * @api private                                                                                                        // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nNode.prototype.clone = function(){                                                                                     // 23\n  return this;                                                                                                         // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tag.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/tag.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Tag                                                                                                  // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Attrs = require('./attrs'),                                                                                        // 12\n    Block = require('./block'),                                                                                        // 13\n    inlineTags = require('../inline-tags');                                                                            // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Initialize a `Tag` node with the given tag `name` and optional `block`.                                             // 17\n *                                                                                                                     // 18\n * @param {String} name                                                                                                // 19\n * @param {Block} block                                                                                                // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar Tag = module.exports = function Tag(name, block) {                                                                 // 24\n  this.name = name;                                                                                                    // 25\n  this.attrs = [];                                                                                                     // 26\n  this.block = block || new Block;                                                                                     // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * Inherit from `Attrs`.                                                                                               // 31\n */                                                                                                                    // 32\n                                                                                                                       // 33\nTag.prototype.__proto__ = Attrs.prototype;                                                                             // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Clone this tag.                                                                                                     // 37\n *                                                                                                                     // 38\n * @return {Tag}                                                                                                       // 39\n * @api private                                                                                                        // 40\n */                                                                                                                    // 41\n                                                                                                                       // 42\nTag.prototype.clone = function(){                                                                                      // 43\n  var clone = new Tag(this.name, this.block.clone());                                                                  // 44\n  clone.line = this.line;                                                                                              // 45\n  clone.attrs = this.attrs;                                                                                            // 46\n  clone.textOnly = this.textOnly;                                                                                      // 47\n  return clone;                                                                                                        // 48\n};                                                                                                                     // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * Check if this tag is an inline tag.                                                                                 // 52\n *                                                                                                                     // 53\n * @return {Boolean}                                                                                                   // 54\n * @api private                                                                                                        // 55\n */                                                                                                                    // 56\n                                                                                                                       // 57\nTag.prototype.isInline = function(){                                                                                   // 58\n  return ~inlineTags.indexOf(this.name);                                                                               // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Check if this tag's contents can be inlined.  Used for pretty printing.                                             // 63\n *                                                                                                                     // 64\n * @return {Boolean}                                                                                                   // 65\n * @api private                                                                                                        // 66\n */                                                                                                                    // 67\n                                                                                                                       // 68\nTag.prototype.canInline = function(){                                                                                  // 69\n  var nodes = this.block.nodes;                                                                                        // 70\n                                                                                                                       // 71\n  function isInline(node){                                                                                             // 72\n    // Recurse if the node is a block                                                                                  // 73\n    if (node.isBlock) return node.nodes.every(isInline);                                                               // 74\n    return node.isText || (node.isInline && node.isInline());                                                          // 75\n  }                                                                                                                    // 76\n                                                                                                                       // 77\n  // Empty tag                                                                                                         // 78\n  if (!nodes.length) return true;                                                                                      // 79\n                                                                                                                       // 80\n  // Text-only or inline-only tag                                                                                      // 81\n  if (1 == nodes.length) return isInline(nodes[0]);                                                                    // 82\n                                                                                                                       // 83\n  // Multi-line inline-only tag                                                                                        // 84\n  if (this.block.nodes.every(isInline)) {                                                                              // 85\n    for (var i = 1, len = nodes.length; i < len; ++i) {                                                                // 86\n      if (nodes[i-1].isText && nodes[i].isText)                                                                        // 87\n        return false;                                                                                                  // 88\n    }                                                                                                                  // 89\n    return true;                                                                                                       // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  // Mixed tag                                                                                                         // 93\n  return false;                                                                                                        // 94\n};                                                                                                                     // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"attrs.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/attrs.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Attrs                                                                                                // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node'),                                                                                          // 12\n    Block = require('./block');                                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Initialize a `Attrs` node.                                                                                          // 16\n *                                                                                                                     // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Attrs = module.exports = function Attrs() {                                                                        // 21\n  this.attrs = [];                                                                                                     // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Inherit from `Node`.                                                                                                // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nAttrs.prototype.__proto__ = Node.prototype;                                                                            // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Set attribute `name` to `val`, keep in mind these become                                                            // 32\n * part of a raw js object literal, so to quote a value you must                                                       // 33\n * '\"quote me\"', otherwise or example 'user.name' is literal JavaScript.                                               // 34\n *                                                                                                                     // 35\n * @param {String} name                                                                                                // 36\n * @param {String} val                                                                                                 // 37\n * @param {Boolean} escaped                                                                                            // 38\n * @return {Tag} for chaining                                                                                          // 39\n * @api public                                                                                                         // 40\n */                                                                                                                    // 41\n                                                                                                                       // 42\nAttrs.prototype.setAttribute = function(name, val, escaped){                                                           // 43\n  this.attrs.push({ name: name, val: val, escaped: escaped });                                                         // 44\n  return this;                                                                                                         // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Remove attribute `name` when present.                                                                               // 49\n *                                                                                                                     // 50\n * @param {String} name                                                                                                // 51\n * @api public                                                                                                         // 52\n */                                                                                                                    // 53\n                                                                                                                       // 54\nAttrs.prototype.removeAttribute = function(name){                                                                      // 55\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {                                                             // 56\n    if (this.attrs[i] && this.attrs[i].name == name) {                                                                 // 57\n      delete this.attrs[i];                                                                                            // 58\n    }                                                                                                                  // 59\n  }                                                                                                                    // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Get attribute value by `name`.                                                                                      // 64\n *                                                                                                                     // 65\n * @param {String} name                                                                                                // 66\n * @return {String}                                                                                                    // 67\n * @api public                                                                                                         // 68\n */                                                                                                                    // 69\n                                                                                                                       // 70\nAttrs.prototype.getAttribute = function(name){                                                                         // 71\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {                                                             // 72\n    if (this.attrs[i] && this.attrs[i].name == name) {                                                                 // 73\n      return this.attrs[i].val;                                                                                        // 74\n    }                                                                                                                  // 75\n  }                                                                                                                    // 76\n};                                                                                                                     // 77\n                                                                                                                       // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"block.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/block.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Block                                                                                                // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Block` with an optional `node`.                                                                   // 15\n *                                                                                                                     // 16\n * @param {Node} node                                                                                                  // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Block = module.exports = function Block(node){                                                                     // 21\n  this.nodes = [];                                                                                                     // 22\n  if (node) this.push(node);                                                                                           // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Inherit from `Node`.                                                                                                // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nBlock.prototype.__proto__ = Node.prototype;                                                                            // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Block flag.                                                                                                         // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\nBlock.prototype.isBlock = true;                                                                                        // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Replace the nodes in `other` with the nodes                                                                         // 39\n * in `this` block.                                                                                                    // 40\n *                                                                                                                     // 41\n * @param {Block} other                                                                                                // 42\n * @api private                                                                                                        // 43\n */                                                                                                                    // 44\n                                                                                                                       // 45\nBlock.prototype.replace = function(other){                                                                             // 46\n  other.nodes = this.nodes;                                                                                            // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Pust the given `node`.                                                                                              // 51\n *                                                                                                                     // 52\n * @param {Node} node                                                                                                  // 53\n * @return {Number}                                                                                                    // 54\n * @api public                                                                                                         // 55\n */                                                                                                                    // 56\n                                                                                                                       // 57\nBlock.prototype.push = function(node){                                                                                 // 58\n  return this.nodes.push(node);                                                                                        // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Check if this block is empty.                                                                                       // 63\n *                                                                                                                     // 64\n * @return {Boolean}                                                                                                   // 65\n * @api public                                                                                                         // 66\n */                                                                                                                    // 67\n                                                                                                                       // 68\nBlock.prototype.isEmpty = function(){                                                                                  // 69\n  return 0 == this.nodes.length;                                                                                       // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Unshift the given `node`.                                                                                           // 74\n *                                                                                                                     // 75\n * @param {Node} node                                                                                                  // 76\n * @return {Number}                                                                                                    // 77\n * @api public                                                                                                         // 78\n */                                                                                                                    // 79\n                                                                                                                       // 80\nBlock.prototype.unshift = function(node){                                                                              // 81\n  return this.nodes.unshift(node);                                                                                     // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Return the \"last\" block, or the first `yield` node.                                                                 // 86\n *                                                                                                                     // 87\n * @return {Block}                                                                                                     // 88\n * @api private                                                                                                        // 89\n */                                                                                                                    // 90\n                                                                                                                       // 91\nBlock.prototype.includeBlock = function(){                                                                             // 92\n  var ret = this                                                                                                       // 93\n    , node;                                                                                                            // 94\n                                                                                                                       // 95\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {                                                             // 96\n    node = this.nodes[i];                                                                                              // 97\n    if (node.yield) return node;                                                                                       // 98\n    else if (node.textOnly) continue;                                                                                  // 99\n    else if (node.includeBlock) ret = node.includeBlock();                                                             // 100\n    else if (node.block && !node.block.isEmpty()) ret = node.block.includeBlock();                                     // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  return ret;                                                                                                          // 104\n};                                                                                                                     // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * Return a clone of this block.                                                                                       // 108\n *                                                                                                                     // 109\n * @return {Block}                                                                                                     // 110\n * @api private                                                                                                        // 111\n */                                                                                                                    // 112\n                                                                                                                       // 113\nBlock.prototype.clone = function(){                                                                                    // 114\n  var clone = new Block;                                                                                               // 115\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {                                                             // 116\n    clone.push(this.nodes[i].clone());                                                                                 // 117\n  }                                                                                                                    // 118\n  return clone;                                                                                                        // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\n                                                                                                                       // 122\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"code.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/code.js               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Code                                                                                                 // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `Code` node with the given code `val`.                                                                 // 15\n * Code may also be optionally buffered and escaped.                                                                   // 16\n *                                                                                                                     // 17\n * @param {String} val                                                                                                 // 18\n * @param {Boolean} buffer                                                                                             // 19\n * @param {Boolean} escape                                                                                             // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar Code = module.exports = function Code(val, buffer, escape) {                                                       // 24\n  this.val = val;                                                                                                      // 25\n  this.buffer = buffer;                                                                                                // 26\n  this.escape = escape;                                                                                                // 27\n  if (val.match(/^ *else/)) this.debug = false;                                                                        // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Inherit from `Node`.                                                                                                // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nCode.prototype.__proto__ = Node.prototype;                                                                             // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"each.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/each.js               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Each                                                                                                 // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize an `Each` node, representing iteration                                                                   // 15\n *                                                                                                                     // 16\n * @param {String} obj                                                                                                 // 17\n * @param {String} val                                                                                                 // 18\n * @param {String} key                                                                                                 // 19\n * @param {Block} block                                                                                                // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar Each = module.exports = function Each(obj, val, key, block) {                                                      // 24\n  this.obj = obj;                                                                                                      // 25\n  this.val = val;                                                                                                      // 26\n  this.key = key;                                                                                                      // 27\n  this.block = block;                                                                                                  // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Inherit from `Node`.                                                                                                // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nEach.prototype.__proto__ = Node.prototype;                                                                             // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"case.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/case.js               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Case                                                                                                 // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Case` with `expr`.                                                                                // 15\n *                                                                                                                     // 16\n * @param {String} expr                                                                                                // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Case = exports = module.exports = function Case(expr, block){                                                      // 21\n  this.expr = expr;                                                                                                    // 22\n  this.block = block;                                                                                                  // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Inherit from `Node`.                                                                                                // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nCase.prototype.__proto__ = Node.prototype;                                                                             // 30\n                                                                                                                       // 31\nvar When = exports.When = function When(expr, block){                                                                  // 32\n  this.expr = expr;                                                                                                    // 33\n  this.block = block;                                                                                                  // 34\n  this.debug = false;                                                                                                  // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Inherit from `Node`.                                                                                                // 39\n */                                                                                                                    // 40\n                                                                                                                       // 41\nWhen.prototype.__proto__ = Node.prototype;                                                                             // 42\n                                                                                                                       // 43\n                                                                                                                       // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"text.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/text.js               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Text                                                                                                 // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `Text` node with optional `line`.                                                                      // 15\n *                                                                                                                     // 16\n * @param {String} line                                                                                                // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Text = module.exports = function Text(line) {                                                                      // 21\n  this.val = '';                                                                                                       // 22\n  if ('string' == typeof line) this.val = line;                                                                        // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Inherit from `Node`.                                                                                                // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nText.prototype.__proto__ = Node.prototype;                                                                             // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Flag as text.                                                                                                       // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\nText.prototype.isText = true;                                                                                          // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mixin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/mixin.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Mixin                                                                                                // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Attrs = require('./attrs');                                                                                        // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a new `Mixin` with `name` and `block`.                                                                   // 15\n *                                                                                                                     // 16\n * @param {String} name                                                                                                // 17\n * @param {String} args                                                                                                // 18\n * @param {Block} block                                                                                                // 19\n * @api public                                                                                                         // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Mixin = module.exports = function Mixin(name, args, block, call){                                                  // 23\n  this.name = name;                                                                                                    // 24\n  this.args = args;                                                                                                    // 25\n  this.block = block;                                                                                                  // 26\n  this.attrs = [];                                                                                                     // 27\n  this.call = call;                                                                                                    // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Inherit from `Attrs`.                                                                                               // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nMixin.prototype.__proto__ = Attrs.prototype;                                                                           // 35\n                                                                                                                       // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"filter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/filter.js             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Filter                                                                                               // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node')                                                                                           // 12\n  , Block = require('./block');                                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Initialize a `Filter` node with the given                                                                           // 16\n * filter `name` and `block`.                                                                                          // 17\n *                                                                                                                     // 18\n * @param {String} name                                                                                                // 19\n * @param {Block|Node} block                                                                                           // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar Filter = module.exports = function Filter(name, block, attrs) {                                                    // 24\n  this.name = name;                                                                                                    // 25\n  this.block = block;                                                                                                  // 26\n  this.attrs = attrs;                                                                                                  // 27\n  this.isASTFilter = !block.nodes.every(function(node){ return node.isText });                                         // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Inherit from `Node`.                                                                                                // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nFilter.prototype.__proto__ = Node.prototype;                                                                           // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"comment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/comment.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Comment                                                                                              // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `Comment` with the given `val`, optionally `buffer`,                                                   // 15\n * otherwise the comment may render in the output.                                                                     // 16\n *                                                                                                                     // 17\n * @param {String} val                                                                                                 // 18\n * @param {Boolean} buffer                                                                                             // 19\n * @api public                                                                                                         // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Comment = module.exports = function Comment(val, buffer) {                                                         // 23\n  this.val = val;                                                                                                      // 24\n  this.buffer = buffer;                                                                                                // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Inherit from `Node`.                                                                                                // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nComment.prototype.__proto__ = Node.prototype;                                                                          // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"literal.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/literal.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Literal                                                                                              // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `Literal` node with the given `str.                                                                    // 15\n *                                                                                                                     // 16\n * @param {String} str                                                                                                 // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Literal = module.exports = function Literal(str) {                                                                 // 21\n  this.str = str                                                                                                       // 22\n    .replace(/\\\\/g, \"\\\\\\\\\")                                                                                            // 23\n    .replace(/\\n|\\r\\n/g, \"\\\\n\")                                                                                        // 24\n    .replace(/'/g, \"\\\\'\");                                                                                             // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Inherit from `Node`.                                                                                                // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nLiteral.prototype.__proto__ = Node.prototype;                                                                          // 32\n                                                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"block-comment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/block-comment.js      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - BlockComment                                                                                         // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `BlockComment` with the given `block`.                                                                 // 15\n *                                                                                                                     // 16\n * @param {String} val                                                                                                 // 17\n * @param {Block} block                                                                                                // 18\n * @param {Boolean} buffer                                                                                             // 19\n * @api public                                                                                                         // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar BlockComment = module.exports = function BlockComment(val, block, buffer) {                                        // 23\n  this.block = block;                                                                                                  // 24\n  this.val = val;                                                                                                      // 25\n  this.buffer = buffer;                                                                                                // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Inherit from `Node`.                                                                                                // 30\n */                                                                                                                    // 31\n                                                                                                                       // 32\nBlockComment.prototype.__proto__ = Node.prototype;                                                                     // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doctype.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/nodes/doctype.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - nodes - Doctype                                                                                              // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar Node = require('./node');                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initialize a `Doctype` with the given `val`.                                                                        // 15\n *                                                                                                                     // 16\n * @param {String} val                                                                                                 // 17\n * @api public                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar Doctype = module.exports = function Doctype(val) {                                                                 // 21\n  this.val = val;                                                                                                      // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Inherit from `Node`.                                                                                                // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nDoctype.prototype.__proto__ = Node.prototype;                                                                          // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"inline-tags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/inline-tags.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - inline tags                                                                                                  // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nmodule.exports = [                                                                                                     // 8\n    'a'                                                                                                                // 9\n  , 'abbr'                                                                                                             // 10\n  , 'acronym'                                                                                                          // 11\n  , 'b'                                                                                                                // 12\n  , 'br'                                                                                                               // 13\n  , 'code'                                                                                                             // 14\n  , 'em'                                                                                                               // 15\n  , 'font'                                                                                                             // 16\n  , 'i'                                                                                                                // 17\n  , 'img'                                                                                                              // 18\n  , 'ins'                                                                                                              // 19\n  , 'kbd'                                                                                                              // 20\n  , 'map'                                                                                                              // 21\n  , 'samp'                                                                                                             // 22\n  , 'small'                                                                                                            // 23\n  , 'span'                                                                                                             // 24\n  , 'strong'                                                                                                           // 25\n  , 'sub'                                                                                                              // 26\n  , 'sup'                                                                                                              // 27\n];                                                                                                                     // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"compiler.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/compiler.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - Compiler                                                                                                     // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Module dependencies.                                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nvar nodes = require('./nodes')                                                                                         // 12\n  , filters = require('./filters')                                                                                     // 13\n  , doctypes = require('./doctypes')                                                                                   // 14\n  , selfClosing = require('./self-closing')                                                                            // 15\n  , runtime = require('./runtime')                                                                                     // 16\n  , utils = require('./utils');                                                                                        // 17\n                                                                                                                       // 18\n// if browser                                                                                                          // 19\n//                                                                                                                     // 20\n// if (!Object.keys) {                                                                                                 // 21\n//   Object.keys = function(obj){                                                                                      // 22\n//     var arr = [];                                                                                                   // 23\n//     for (var key in obj) {                                                                                          // 24\n//       if (obj.hasOwnProperty(key)) {                                                                                // 25\n//         arr.push(key);                                                                                              // 26\n//       }                                                                                                             // 27\n//     }                                                                                                               // 28\n//     return arr;                                                                                                     // 29\n//   }                                                                                                                 // 30\n// }                                                                                                                   // 31\n//                                                                                                                     // 32\n// if (!String.prototype.trimLeft) {                                                                                   // 33\n//   String.prototype.trimLeft = function(){                                                                           // 34\n//     return this.replace(/^\\s+/, '');                                                                                // 35\n//   }                                                                                                                 // 36\n// }                                                                                                                   // 37\n//                                                                                                                     // 38\n// end                                                                                                                 // 39\n                                                                                                                       // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Initialize `Compiler` with the given `node`.                                                                        // 43\n *                                                                                                                     // 44\n * @param {Node} node                                                                                                  // 45\n * @param {Object} options                                                                                             // 46\n * @api public                                                                                                         // 47\n */                                                                                                                    // 48\n                                                                                                                       // 49\nvar Compiler = module.exports = function Compiler(node, options) {                                                     // 50\n  this.options = options = options || {};                                                                              // 51\n  this.node = node;                                                                                                    // 52\n  this.hasCompiledDoctype = false;                                                                                     // 53\n  this.hasCompiledTag = false;                                                                                         // 54\n  this.pp = options.pretty || false;                                                                                   // 55\n  this.debug = false !== options.compileDebug;                                                                         // 56\n  this.indents = 0;                                                                                                    // 57\n  this.parentIndents = 0;                                                                                              // 58\n  if (options.doctype) this.setDoctype(options.doctype);                                                               // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Compiler prototype.                                                                                                 // 63\n */                                                                                                                    // 64\n                                                                                                                       // 65\nCompiler.prototype = {                                                                                                 // 66\n                                                                                                                       // 67\n  /**                                                                                                                  // 68\n   * Compile parse tree to JavaScript.                                                                                 // 69\n   *                                                                                                                   // 70\n   * @api public                                                                                                       // 71\n   */                                                                                                                  // 72\n                                                                                                                       // 73\n  compile: function(){                                                                                                 // 74\n    this.buf = ['var interp;'];                                                                                        // 75\n    if (this.pp) this.buf.push(\"var __indent = [];\");                                                                  // 76\n    this.lastBufferedIdx = -1;                                                                                         // 77\n    this.visit(this.node);                                                                                             // 78\n    return this.buf.join('\\n');                                                                                        // 79\n  },                                                                                                                   // 80\n                                                                                                                       // 81\n  /**                                                                                                                  // 82\n   * Sets the default doctype `name`. Sets terse mode to `true` when                                                   // 83\n   * html 5 is used, causing self-closing tags to end with \">\" vs \"/>\",                                                // 84\n   * and boolean attributes are not mirrored.                                                                          // 85\n   *                                                                                                                   // 86\n   * @param {string} name                                                                                              // 87\n   * @api public                                                                                                       // 88\n   */                                                                                                                  // 89\n                                                                                                                       // 90\n  setDoctype: function(name){                                                                                          // 91\n    var doctype = doctypes[(name || 'default').toLowerCase()];                                                         // 92\n    doctype = doctype || '<!DOCTYPE ' + name + '>';                                                                    // 93\n    this.doctype = doctype;                                                                                            // 94\n    this.terse = '5' == name || 'html' == name;                                                                        // 95\n    this.xml = 0 == this.doctype.indexOf('<?xml');                                                                     // 96\n  },                                                                                                                   // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Buffer the given `str` optionally escaped.                                                                        // 100\n   *                                                                                                                   // 101\n   * @param {String} str                                                                                               // 102\n   * @param {Boolean} esc                                                                                              // 103\n   * @api public                                                                                                       // 104\n   */                                                                                                                  // 105\n                                                                                                                       // 106\n  buffer: function(str, esc){                                                                                          // 107\n    if (esc) str = utils.escape(str);                                                                                  // 108\n                                                                                                                       // 109\n    if (this.lastBufferedIdx == this.buf.length) {                                                                     // 110\n      this.lastBuffered += str;                                                                                        // 111\n      this.buf[this.lastBufferedIdx - 1] = \"buf.push('\" + this.lastBuffered + \"');\"                                    // 112\n    } else {                                                                                                           // 113\n      this.buf.push(\"buf.push('\" + str + \"');\");                                                                       // 114\n      this.lastBuffered = str;                                                                                         // 115\n      this.lastBufferedIdx = this.buf.length;                                                                          // 116\n    }                                                                                                                  // 117\n  },                                                                                                                   // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * Buffer an indent based on the current `indent`                                                                    // 121\n   * property and an additional `offset`.                                                                              // 122\n   *                                                                                                                   // 123\n   * @param {Number} offset                                                                                            // 124\n   * @param {Boolean} newline                                                                                          // 125\n   * @api public                                                                                                       // 126\n   */                                                                                                                  // 127\n                                                                                                                       // 128\n  prettyIndent: function(offset, newline){                                                                             // 129\n    offset = offset || 0;                                                                                              // 130\n    newline = newline ? '\\\\n' : '';                                                                                    // 131\n    this.buffer(newline + Array(this.indents + offset).join('  '));                                                    // 132\n    if (this.parentIndents)                                                                                            // 133\n      this.buf.push(\"buf.push.apply(buf, __indent);\");                                                                 // 134\n  },                                                                                                                   // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * Visit `node`.                                                                                                     // 138\n   *                                                                                                                   // 139\n   * @param {Node} node                                                                                                // 140\n   * @api public                                                                                                       // 141\n   */                                                                                                                  // 142\n                                                                                                                       // 143\n  visit: function(node){                                                                                               // 144\n    var debug = this.debug;                                                                                            // 145\n                                                                                                                       // 146\n    if (debug) {                                                                                                       // 147\n      this.buf.push('__jade.unshift({ lineno: ' + node.line                                                            // 148\n        + ', filename: ' + (node.filename                                                                              // 149\n          ? JSON.stringify(node.filename)                                                                              // 150\n          : '__jade[0].filename')                                                                                      // 151\n        + ' });');                                                                                                     // 152\n    }                                                                                                                  // 153\n                                                                                                                       // 154\n    // Massive hack to fix our context                                                                                 // 155\n    // stack for - else[ if] etc                                                                                       // 156\n    if (false === node.debug && this.debug) {                                                                          // 157\n      this.buf.pop();                                                                                                  // 158\n      this.buf.pop();                                                                                                  // 159\n    }                                                                                                                  // 160\n                                                                                                                       // 161\n    this.visitNode(node);                                                                                              // 162\n                                                                                                                       // 163\n    if (debug) this.buf.push('__jade.shift();');                                                                       // 164\n  },                                                                                                                   // 165\n                                                                                                                       // 166\n  /**                                                                                                                  // 167\n   * Visit `node`.                                                                                                     // 168\n   *                                                                                                                   // 169\n   * @param {Node} node                                                                                                // 170\n   * @api public                                                                                                       // 171\n   */                                                                                                                  // 172\n                                                                                                                       // 173\n  visitNode: function(node){                                                                                           // 174\n    var name = node.constructor.name                                                                                   // 175\n      || node.constructor.toString().match(/function ([^(\\s]+)()/)[1];                                                 // 176\n    return this['visit' + name](node);                                                                                 // 177\n  },                                                                                                                   // 178\n                                                                                                                       // 179\n  /**                                                                                                                  // 180\n   * Visit case `node`.                                                                                                // 181\n   *                                                                                                                   // 182\n   * @param {Literal} node                                                                                             // 183\n   * @api public                                                                                                       // 184\n   */                                                                                                                  // 185\n                                                                                                                       // 186\n  visitCase: function(node){                                                                                           // 187\n    var _ = this.withinCase;                                                                                           // 188\n    this.withinCase = true;                                                                                            // 189\n    this.buf.push('switch (' + node.expr + '){');                                                                      // 190\n    this.visit(node.block);                                                                                            // 191\n    this.buf.push('}');                                                                                                // 192\n    this.withinCase = _;                                                                                               // 193\n  },                                                                                                                   // 194\n                                                                                                                       // 195\n  /**                                                                                                                  // 196\n   * Visit when `node`.                                                                                                // 197\n   *                                                                                                                   // 198\n   * @param {Literal} node                                                                                             // 199\n   * @api public                                                                                                       // 200\n   */                                                                                                                  // 201\n                                                                                                                       // 202\n  visitWhen: function(node){                                                                                           // 203\n    if ('default' == node.expr) {                                                                                      // 204\n      this.buf.push('default:');                                                                                       // 205\n    } else {                                                                                                           // 206\n      this.buf.push('case ' + node.expr + ':');                                                                        // 207\n    }                                                                                                                  // 208\n    this.visit(node.block);                                                                                            // 209\n    this.buf.push('  break;');                                                                                         // 210\n  },                                                                                                                   // 211\n                                                                                                                       // 212\n  /**                                                                                                                  // 213\n   * Visit literal `node`.                                                                                             // 214\n   *                                                                                                                   // 215\n   * @param {Literal} node                                                                                             // 216\n   * @api public                                                                                                       // 217\n   */                                                                                                                  // 218\n                                                                                                                       // 219\n  visitLiteral: function(node){                                                                                        // 220\n    var str = node.str.replace(/\\n/g, '\\\\\\\\n');                                                                        // 221\n    this.buffer(str);                                                                                                  // 222\n  },                                                                                                                   // 223\n                                                                                                                       // 224\n  /**                                                                                                                  // 225\n   * Visit all nodes in `block`.                                                                                       // 226\n   *                                                                                                                   // 227\n   * @param {Block} block                                                                                              // 228\n   * @api public                                                                                                       // 229\n   */                                                                                                                  // 230\n                                                                                                                       // 231\n  visitBlock: function(block){                                                                                         // 232\n    var len = block.nodes.length                                                                                       // 233\n      , escape = this.escape                                                                                           // 234\n      , pp = this.pp                                                                                                   // 235\n                                                                                                                       // 236\n    // Block keyword has a special meaning in mixins                                                                   // 237\n    if (this.parentIndents && block.mode) {                                                                            // 238\n      if (pp) this.buf.push(\"__indent.push('\" + Array(this.indents + 1).join('  ') + \"');\")                            // 239\n      this.buf.push('block && block();');                                                                              // 240\n      if (pp) this.buf.push(\"__indent.pop();\")                                                                         // 241\n      return;                                                                                                          // 242\n    }                                                                                                                  // 243\n                                                                                                                       // 244\n    // Pretty print multi-line text                                                                                    // 245\n    if (pp && len > 1 && !escape && block.nodes[0].isText && block.nodes[1].isText)                                    // 246\n      this.prettyIndent(1, true);                                                                                      // 247\n                                                                                                                       // 248\n    for (var i = 0; i < len; ++i) {                                                                                    // 249\n      // Pretty print text                                                                                             // 250\n      if (pp && i > 0 && !escape && block.nodes[i].isText && block.nodes[i-1].isText)                                  // 251\n        this.prettyIndent(1, false);                                                                                   // 252\n                                                                                                                       // 253\n      this.visit(block.nodes[i]);                                                                                      // 254\n      // Multiple text nodes are separated by newlines                                                                 // 255\n      if (block.nodes[i+1] && block.nodes[i].isText && block.nodes[i+1].isText)                                        // 256\n        this.buffer('\\\\n');                                                                                            // 257\n    }                                                                                                                  // 258\n  },                                                                                                                   // 259\n                                                                                                                       // 260\n  /**                                                                                                                  // 261\n   * Visit `doctype`. Sets terse mode to `true` when html 5                                                            // 262\n   * is used, causing self-closing tags to end with \">\" vs \"/>\",                                                       // 263\n   * and boolean attributes are not mirrored.                                                                          // 264\n   *                                                                                                                   // 265\n   * @param {Doctype} doctype                                                                                          // 266\n   * @api public                                                                                                       // 267\n   */                                                                                                                  // 268\n                                                                                                                       // 269\n  visitDoctype: function(doctype){                                                                                     // 270\n    if (doctype && (doctype.val || !this.doctype)) {                                                                   // 271\n      this.setDoctype(doctype.val || 'default');                                                                       // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    if (this.doctype) this.buffer(this.doctype);                                                                       // 275\n    this.hasCompiledDoctype = true;                                                                                    // 276\n  },                                                                                                                   // 277\n                                                                                                                       // 278\n  /**                                                                                                                  // 279\n   * Visit `mixin`, generating a function that                                                                         // 280\n   * may be called within the template.                                                                                // 281\n   *                                                                                                                   // 282\n   * @param {Mixin} mixin                                                                                              // 283\n   * @api public                                                                                                       // 284\n   */                                                                                                                  // 285\n                                                                                                                       // 286\n  visitMixin: function(mixin){                                                                                         // 287\n    var name = mixin.name.replace(/-/g, '_') + '_mixin'                                                                // 288\n      , args = mixin.args || ''                                                                                        // 289\n      , block = mixin.block                                                                                            // 290\n      , attrs = mixin.attrs                                                                                            // 291\n      , pp = this.pp;                                                                                                  // 292\n                                                                                                                       // 293\n    if (mixin.call) {                                                                                                  // 294\n      if (pp) this.buf.push(\"__indent.push('\" + Array(this.indents + 1).join('  ') + \"');\")                            // 295\n      if (block || attrs.length) {                                                                                     // 296\n                                                                                                                       // 297\n        this.buf.push(name + '.call({');                                                                               // 298\n                                                                                                                       // 299\n        if (block) {                                                                                                   // 300\n          this.buf.push('block: function(){');                                                                         // 301\n                                                                                                                       // 302\n          // Render block with no indents, dynamically added when rendered                                             // 303\n          this.parentIndents++;                                                                                        // 304\n          var _indents = this.indents;                                                                                 // 305\n          this.indents = 0;                                                                                            // 306\n          this.visit(mixin.block);                                                                                     // 307\n          this.indents = _indents;                                                                                     // 308\n          this.parentIndents--;                                                                                        // 309\n                                                                                                                       // 310\n          if (attrs.length) {                                                                                          // 311\n            this.buf.push('},');                                                                                       // 312\n          } else {                                                                                                     // 313\n            this.buf.push('}');                                                                                        // 314\n          }                                                                                                            // 315\n        }                                                                                                              // 316\n                                                                                                                       // 317\n        if (attrs.length) {                                                                                            // 318\n          var val = this.attrs(attrs);                                                                                 // 319\n          if (val.inherits) {                                                                                          // 320\n            this.buf.push('attributes: merge({' + val.buf                                                              // 321\n                + '}, attributes), escaped: merge(' + val.escaped + ', escaped, true)');                               // 322\n          } else {                                                                                                     // 323\n            this.buf.push('attributes: {' + val.buf + '}, escaped: ' + val.escaped);                                   // 324\n          }                                                                                                            // 325\n        }                                                                                                              // 326\n                                                                                                                       // 327\n        if (args) {                                                                                                    // 328\n          this.buf.push('}, ' + args + ');');                                                                          // 329\n        } else {                                                                                                       // 330\n          this.buf.push('});');                                                                                        // 331\n        }                                                                                                              // 332\n                                                                                                                       // 333\n      } else {                                                                                                         // 334\n        this.buf.push(name + '(' + args + ');');                                                                       // 335\n      }                                                                                                                // 336\n      if (pp) this.buf.push(\"__indent.pop();\")                                                                         // 337\n    } else {                                                                                                           // 338\n      this.buf.push('var ' + name + ' = function(' + args + '){');                                                     // 339\n      this.buf.push('var block = this.block, attributes = this.attributes || {}, escaped = this.escaped || {};');      // 340\n      this.parentIndents++;                                                                                            // 341\n      this.visit(block);                                                                                               // 342\n      this.parentIndents--;                                                                                            // 343\n      this.buf.push('};');                                                                                             // 344\n    }                                                                                                                  // 345\n  },                                                                                                                   // 346\n                                                                                                                       // 347\n  /**                                                                                                                  // 348\n   * Visit `tag` buffering tag markup, generating                                                                      // 349\n   * attributes, visiting the `tag`'s code and block.                                                                  // 350\n   *                                                                                                                   // 351\n   * @param {Tag} tag                                                                                                  // 352\n   * @api public                                                                                                       // 353\n   */                                                                                                                  // 354\n                                                                                                                       // 355\n  visitTag: function(tag){                                                                                             // 356\n    this.indents++;                                                                                                    // 357\n    var name = tag.name                                                                                                // 358\n      , pp = this.pp;                                                                                                  // 359\n                                                                                                                       // 360\n    if (tag.buffer) name = \"' + (\" + name + \") + '\";                                                                   // 361\n                                                                                                                       // 362\n    if (!this.hasCompiledTag) {                                                                                        // 363\n      if (!this.hasCompiledDoctype && 'html' == name) {                                                                // 364\n        this.visitDoctype();                                                                                           // 365\n      }                                                                                                                // 366\n      this.hasCompiledTag = true;                                                                                      // 367\n    }                                                                                                                  // 368\n                                                                                                                       // 369\n    // pretty print                                                                                                    // 370\n    if (pp && !tag.isInline())                                                                                         // 371\n      this.prettyIndent(0, true);                                                                                      // 372\n                                                                                                                       // 373\n    if ((~selfClosing.indexOf(name) || tag.selfClosing) && !this.xml) {                                                // 374\n      this.buffer('<' + name);                                                                                         // 375\n      this.visitAttributes(tag.attrs);                                                                                 // 376\n      this.terse                                                                                                       // 377\n        ? this.buffer('>')                                                                                             // 378\n        : this.buffer('/>');                                                                                           // 379\n    } else {                                                                                                           // 380\n      // Optimize attributes buffering                                                                                 // 381\n      if (tag.attrs.length) {                                                                                          // 382\n        this.buffer('<' + name);                                                                                       // 383\n        if (tag.attrs.length) this.visitAttributes(tag.attrs);                                                         // 384\n        this.buffer('>');                                                                                              // 385\n      } else {                                                                                                         // 386\n        this.buffer('<' + name + '>');                                                                                 // 387\n      }                                                                                                                // 388\n      if (tag.code) this.visitCode(tag.code);                                                                          // 389\n      this.escape = 'pre' == tag.name;                                                                                 // 390\n      this.visit(tag.block);                                                                                           // 391\n                                                                                                                       // 392\n      // pretty print                                                                                                  // 393\n      if (pp && !tag.isInline() && 'pre' != tag.name && !tag.canInline())                                              // 394\n        this.prettyIndent(0, true);                                                                                    // 395\n                                                                                                                       // 396\n      this.buffer('</' + name + '>');                                                                                  // 397\n    }                                                                                                                  // 398\n    this.indents--;                                                                                                    // 399\n  },                                                                                                                   // 400\n                                                                                                                       // 401\n  /**                                                                                                                  // 402\n   * Visit `filter`, throwing when the filter does not exist.                                                          // 403\n   *                                                                                                                   // 404\n   * @param {Filter} filter                                                                                            // 405\n   * @api public                                                                                                       // 406\n   */                                                                                                                  // 407\n                                                                                                                       // 408\n  visitFilter: function(filter){                                                                                       // 409\n    var fn = filters[filter.name];                                                                                     // 410\n                                                                                                                       // 411\n    // unknown filter                                                                                                  // 412\n    if (!fn) {                                                                                                         // 413\n      if (filter.isASTFilter) {                                                                                        // 414\n        throw new Error('unknown ast filter \"' + filter.name + ':\"');                                                  // 415\n      } else {                                                                                                         // 416\n        throw new Error('unknown filter \":' + filter.name + '\"');                                                      // 417\n      }                                                                                                                // 418\n    }                                                                                                                  // 419\n                                                                                                                       // 420\n    if (filter.isASTFilter) {                                                                                          // 421\n      this.buf.push(fn(filter.block, this, filter.attrs));                                                             // 422\n    } else {                                                                                                           // 423\n      var text = filter.block.nodes.map(function(node){ return node.val }).join('\\n');                                 // 424\n      filter.attrs = filter.attrs || {};                                                                               // 425\n      filter.attrs.filename = this.options.filename;                                                                   // 426\n      this.buffer(utils.text(fn(text, filter.attrs)));                                                                 // 427\n    }                                                                                                                  // 428\n  },                                                                                                                   // 429\n                                                                                                                       // 430\n  /**                                                                                                                  // 431\n   * Visit `text` node.                                                                                                // 432\n   *                                                                                                                   // 433\n   * @param {Text} text                                                                                                // 434\n   * @api public                                                                                                       // 435\n   */                                                                                                                  // 436\n                                                                                                                       // 437\n  visitText: function(text){                                                                                           // 438\n    text = utils.text(text.val.replace(/\\\\/g, '\\\\\\\\'));                                                                // 439\n    if (this.escape) text = escape(text);                                                                              // 440\n    this.buffer(text);                                                                                                 // 441\n  },                                                                                                                   // 442\n                                                                                                                       // 443\n  /**                                                                                                                  // 444\n   * Visit a `comment`, only buffering when the buffer flag is set.                                                    // 445\n   *                                                                                                                   // 446\n   * @param {Comment} comment                                                                                          // 447\n   * @api public                                                                                                       // 448\n   */                                                                                                                  // 449\n                                                                                                                       // 450\n  visitComment: function(comment){                                                                                     // 451\n    if (!comment.buffer) return;                                                                                       // 452\n    if (this.pp) this.prettyIndent(1, true);                                                                           // 453\n    this.buffer('<!--' + utils.escape(comment.val) + '-->');                                                           // 454\n  },                                                                                                                   // 455\n                                                                                                                       // 456\n  /**                                                                                                                  // 457\n   * Visit a `BlockComment`.                                                                                           // 458\n   *                                                                                                                   // 459\n   * @param {Comment} comment                                                                                          // 460\n   * @api public                                                                                                       // 461\n   */                                                                                                                  // 462\n                                                                                                                       // 463\n  visitBlockComment: function(comment){                                                                                // 464\n    if (!comment.buffer) return;                                                                                       // 465\n    if (0 == comment.val.trim().indexOf('if')) {                                                                       // 466\n      this.buffer('<!--[' + comment.val.trim() + ']>');                                                                // 467\n      this.visit(comment.block);                                                                                       // 468\n      this.buffer('<![endif]-->');                                                                                     // 469\n    } else {                                                                                                           // 470\n      this.buffer('<!--' + comment.val);                                                                               // 471\n      this.visit(comment.block);                                                                                       // 472\n      this.buffer('-->');                                                                                              // 473\n    }                                                                                                                  // 474\n  },                                                                                                                   // 475\n                                                                                                                       // 476\n  /**                                                                                                                  // 477\n   * Visit `code`, respecting buffer / escape flags.                                                                   // 478\n   * If the code is followed by a block, wrap it in                                                                    // 479\n   * a self-calling function.                                                                                          // 480\n   *                                                                                                                   // 481\n   * @param {Code} code                                                                                                // 482\n   * @api public                                                                                                       // 483\n   */                                                                                                                  // 484\n                                                                                                                       // 485\n  visitCode: function(code){                                                                                           // 486\n    // Wrap code blocks with {}.                                                                                       // 487\n    // we only wrap unbuffered code blocks ATM                                                                         // 488\n    // since they are usually flow control                                                                             // 489\n                                                                                                                       // 490\n    // Buffer code                                                                                                     // 491\n    if (code.buffer) {                                                                                                 // 492\n      var val = code.val.trimLeft();                                                                                   // 493\n      this.buf.push('var __val__ = ' + val);                                                                           // 494\n      val = 'null == __val__ ? \"\" : __val__';                                                                          // 495\n      if (code.escape) val = 'escape(' + val + ')';                                                                    // 496\n      this.buf.push(\"buf.push(\" + val + \");\");                                                                         // 497\n    } else {                                                                                                           // 498\n      this.buf.push(code.val);                                                                                         // 499\n    }                                                                                                                  // 500\n                                                                                                                       // 501\n    // Block support                                                                                                   // 502\n    if (code.block) {                                                                                                  // 503\n      if (!code.buffer) this.buf.push('{');                                                                            // 504\n      this.visit(code.block);                                                                                          // 505\n      if (!code.buffer) this.buf.push('}');                                                                            // 506\n    }                                                                                                                  // 507\n  },                                                                                                                   // 508\n                                                                                                                       // 509\n  /**                                                                                                                  // 510\n   * Visit `each` block.                                                                                               // 511\n   *                                                                                                                   // 512\n   * @param {Each} each                                                                                                // 513\n   * @api public                                                                                                       // 514\n   */                                                                                                                  // 515\n                                                                                                                       // 516\n  visitEach: function(each){                                                                                           // 517\n    this.buf.push(''                                                                                                   // 518\n      + '// iterate ' + each.obj + '\\n'                                                                                // 519\n      + ';(function(){\\n'                                                                                              // 520\n      + '  if (\\'number\\' == typeof ' + each.obj + '.length) {\\n'                                                      // 521\n      + '    for (var ' + each.key + ' = 0, $$l = ' + each.obj + '.length; ' + each.key + ' < $$l; ' + each.key + '++) {\\n'\n      + '      var ' + each.val + ' = ' + each.obj + '[' + each.key + '];\\n');                                         // 523\n                                                                                                                       // 524\n    this.visit(each.block);                                                                                            // 525\n                                                                                                                       // 526\n    this.buf.push(''                                                                                                   // 527\n      + '    }\\n'                                                                                                      // 528\n      + '  } else {\\n'                                                                                                 // 529\n      + '    for (var ' + each.key + ' in ' + each.obj + ') {\\n'                                                       // 530\n      // if browser                                                                                                    // 531\n      // + '      if (' + each.obj + '.hasOwnProperty(' + each.key + ')){'                                             // 532\n      // end                                                                                                           // 533\n      + '      var ' + each.val + ' = ' + each.obj + '[' + each.key + '];\\n');                                         // 534\n                                                                                                                       // 535\n    this.visit(each.block);                                                                                            // 536\n                                                                                                                       // 537\n    // if browser                                                                                                      // 538\n    // this.buf.push('      }\\n');                                                                                     // 539\n    // end                                                                                                             // 540\n                                                                                                                       // 541\n    this.buf.push('   }\\n  }\\n}).call(this);\\n');                                                                      // 542\n  },                                                                                                                   // 543\n                                                                                                                       // 544\n  /**                                                                                                                  // 545\n   * Visit `attrs`.                                                                                                    // 546\n   *                                                                                                                   // 547\n   * @param {Array} attrs                                                                                              // 548\n   * @api public                                                                                                       // 549\n   */                                                                                                                  // 550\n                                                                                                                       // 551\n  visitAttributes: function(attrs){                                                                                    // 552\n    var val = this.attrs(attrs);                                                                                       // 553\n    if (val.inherits) {                                                                                                // 554\n      this.buf.push(\"buf.push(attrs(merge({ \" + val.buf +                                                              // 555\n          \" }, attributes), merge(\" + val.escaped + \", escaped, true)));\");                                            // 556\n    } else if (val.constant) {                                                                                         // 557\n      eval('var buf={' + val.buf + '};');                                                                              // 558\n      this.buffer(runtime.attrs(buf, JSON.parse(val.escaped)), true);                                                  // 559\n    } else {                                                                                                           // 560\n      this.buf.push(\"buf.push(attrs({ \" + val.buf + \" }, \" + val.escaped + \"));\");                                     // 561\n    }                                                                                                                  // 562\n  },                                                                                                                   // 563\n                                                                                                                       // 564\n  /**                                                                                                                  // 565\n   * Compile attributes.                                                                                               // 566\n   */                                                                                                                  // 567\n                                                                                                                       // 568\n  attrs: function(attrs){                                                                                              // 569\n    var buf = []                                                                                                       // 570\n      , classes = []                                                                                                   // 571\n      , escaped = {}                                                                                                   // 572\n      , constant = attrs.every(function(attr){ return isConstant(attr.val) })                                          // 573\n      , inherits = false;                                                                                              // 574\n                                                                                                                       // 575\n    if (this.terse) buf.push('terse: true');                                                                           // 576\n                                                                                                                       // 577\n    attrs.forEach(function(attr){                                                                                      // 578\n      if (attr.name == 'attributes') return inherits = true;                                                           // 579\n      escaped[attr.name] = attr.escaped;                                                                               // 580\n      if (attr.name == 'class') {                                                                                      // 581\n        classes.push('(' + attr.val + ')');                                                                            // 582\n      } else {                                                                                                         // 583\n        var pair = \"'\" + attr.name + \"':(\" + attr.val + ')';                                                           // 584\n        buf.push(pair);                                                                                                // 585\n      }                                                                                                                // 586\n    });                                                                                                                // 587\n                                                                                                                       // 588\n    if (classes.length) {                                                                                              // 589\n      classes = classes.join(\" + ' ' + \");                                                                             // 590\n      buf.push(\"class: \" + classes);                                                                                   // 591\n    }                                                                                                                  // 592\n                                                                                                                       // 593\n    return {                                                                                                           // 594\n      buf: buf.join(', ').replace('class:', '\"class\":'),                                                               // 595\n      escaped: JSON.stringify(escaped),                                                                                // 596\n      inherits: inherits,                                                                                              // 597\n      constant: constant                                                                                               // 598\n    };                                                                                                                 // 599\n  }                                                                                                                    // 600\n};                                                                                                                     // 601\n                                                                                                                       // 602\n/**                                                                                                                    // 603\n * Check if expression can be evaluated to a constant                                                                  // 604\n *                                                                                                                     // 605\n * @param {String} expression                                                                                          // 606\n * @return {Boolean}                                                                                                   // 607\n * @api private                                                                                                        // 608\n */                                                                                                                    // 609\n                                                                                                                       // 610\nfunction isConstant(val){                                                                                              // 611\n  // Check strings/literals                                                                                            // 612\n  if (/^ *(\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"|'([^'\\\\]*(\\\\.[^'\\\\]*)*)'|true|false|null|undefined) *$/i.test(val))                // 613\n    return true;                                                                                                       // 614\n                                                                                                                       // 615\n  // Check numbers                                                                                                     // 616\n  if (!isNaN(Number(val)))                                                                                             // 617\n    return true;                                                                                                       // 618\n                                                                                                                       // 619\n  // Check arrays                                                                                                      // 620\n  var matches;                                                                                                         // 621\n  if (matches = /^ *\\[(.*)\\] *$/.exec(val))                                                                            // 622\n    return matches[1].split(',').every(isConstant);                                                                    // 623\n                                                                                                                       // 624\n  return false;                                                                                                        // 625\n}                                                                                                                      // 626\n                                                                                                                       // 627\n/**                                                                                                                    // 628\n * Escape the given string of `html`.                                                                                  // 629\n *                                                                                                                     // 630\n * @param {String} html                                                                                                // 631\n * @return {String}                                                                                                    // 632\n * @api private                                                                                                        // 633\n */                                                                                                                    // 634\n                                                                                                                       // 635\nfunction escape(html){                                                                                                 // 636\n  return String(html)                                                                                                  // 637\n    .replace(/&(?!\\w+;)/g, '&amp;')                                                                                    // 638\n    .replace(/</g, '&lt;')                                                                                             // 639\n    .replace(/>/g, '&gt;')                                                                                             // 640\n    .replace(/\"/g, '&quot;');                                                                                          // 641\n}                                                                                                                      // 642\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"filters.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/filters.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - filters                                                                                                      // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nmodule.exports = {                                                                                                     // 8\n                                                                                                                       // 9\n  /**                                                                                                                  // 10\n   * Wrap text with CDATA block.                                                                                       // 11\n   */                                                                                                                  // 12\n                                                                                                                       // 13\n  cdata: function(str){                                                                                                // 14\n    return '<![CDATA[\\\\n' + str + '\\\\n]]>';                                                                            // 15\n  },                                                                                                                   // 16\n                                                                                                                       // 17\n  /**                                                                                                                  // 18\n   * Transform sass to css, wrapped in style tags.                                                                     // 19\n   */                                                                                                                  // 20\n                                                                                                                       // 21\n  sass: function(str){                                                                                                 // 22\n    str = str.replace(/\\\\n/g, '\\n');                                                                                   // 23\n    var sass = require('sass').render(str).replace(/\\n/g, '\\\\n');                                                      // 24\n    return '<style type=\"text/css\">' + sass + '</style>';                                                              // 25\n  },                                                                                                                   // 26\n                                                                                                                       // 27\n  /**                                                                                                                  // 28\n   * Transform stylus to css, wrapped in style tags.                                                                   // 29\n   */                                                                                                                  // 30\n                                                                                                                       // 31\n  stylus: function(str, options){                                                                                      // 32\n    var ret;                                                                                                           // 33\n    str = str.replace(/\\\\n/g, '\\n');                                                                                   // 34\n    var stylus = require('stylus');                                                                                    // 35\n    stylus(str, options).render(function(err, css){                                                                    // 36\n      if (err) throw err;                                                                                              // 37\n      ret = css.replace(/\\n/g, '\\\\n');                                                                                 // 38\n    });                                                                                                                // 39\n    return '<style type=\"text/css\">' + ret + '</style>';                                                               // 40\n  },                                                                                                                   // 41\n                                                                                                                       // 42\n  /**                                                                                                                  // 43\n   * Transform less to css, wrapped in style tags.                                                                     // 44\n   */                                                                                                                  // 45\n                                                                                                                       // 46\n  less: function(str){                                                                                                 // 47\n    var ret;                                                                                                           // 48\n    str = str.replace(/\\\\n/g, '\\n');                                                                                   // 49\n    require('less').render(str, function(err, css){                                                                    // 50\n      if (err) throw err;                                                                                              // 51\n      ret = '<style type=\"text/css\">' + css.replace(/\\n/g, '\\\\n') + '</style>';                                        // 52\n    });                                                                                                                // 53\n    return ret;                                                                                                        // 54\n  },                                                                                                                   // 55\n                                                                                                                       // 56\n  /**                                                                                                                  // 57\n   * Transform markdown to html.                                                                                       // 58\n   */                                                                                                                  // 59\n                                                                                                                       // 60\n  markdown: function(str){                                                                                             // 61\n    var md;                                                                                                            // 62\n                                                                                                                       // 63\n    // support markdown / discount                                                                                     // 64\n    try {                                                                                                              // 65\n      md = require('markdown');                                                                                        // 66\n    } catch (err){                                                                                                     // 67\n      try {                                                                                                            // 68\n        md = require('discount');                                                                                      // 69\n      } catch (err) {                                                                                                  // 70\n        try {                                                                                                          // 71\n          md = require('markdown-js');                                                                                 // 72\n        } catch (err) {                                                                                                // 73\n          try {                                                                                                        // 74\n            md = require('marked');                                                                                    // 75\n          } catch (err) {                                                                                              // 76\n            throw new                                                                                                  // 77\n              Error('Cannot find markdown library, install markdown, discount, or marked.');                           // 78\n          }                                                                                                            // 79\n        }                                                                                                              // 80\n      }                                                                                                                // 81\n    }                                                                                                                  // 82\n                                                                                                                       // 83\n    str = str.replace(/\\\\n/g, '\\n');                                                                                   // 84\n    return md.parse(str).replace(/\\n/g, '\\\\n').replace(/'/g,'&#39;');                                                  // 85\n  },                                                                                                                   // 86\n                                                                                                                       // 87\n  /**                                                                                                                  // 88\n   * Transform coffeescript to javascript.                                                                             // 89\n   */                                                                                                                  // 90\n                                                                                                                       // 91\n  coffeescript: function(str){                                                                                         // 92\n    str = str.replace(/\\\\n/g, '\\n');                                                                                   // 93\n    var js = require('coffee-script').compile(str).replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n');                       // 94\n    return '<script type=\"text/javascript\">\\\\n' + js + '</script>';                                                    // 95\n  }                                                                                                                    // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doctypes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/doctypes.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - doctypes                                                                                                     // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nmodule.exports = {                                                                                                     // 8\n    '5': '<!DOCTYPE html>'                                                                                             // 9\n  , 'default': '<!DOCTYPE html>'                                                                                       // 10\n  , 'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'                                                                   // 11\n  , 'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">'\n  , 'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">'\n  , 'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">'\n  , '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">'         // 15\n  , 'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">'\n  , 'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};                                                                                                                     // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"self-closing.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/self-closing.js             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - self closing tags                                                                                            // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nmodule.exports = [                                                                                                     // 8\n    'meta'                                                                                                             // 9\n  , 'img'                                                                                                              // 10\n  , 'link'                                                                                                             // 11\n  , 'input'                                                                                                            // 12\n  , 'source'                                                                                                           // 13\n  , 'area'                                                                                                             // 14\n  , 'base'                                                                                                             // 15\n  , 'col'                                                                                                              // 16\n  , 'br'                                                                                                               // 17\n  , 'hr'                                                                                                               // 18\n];                                                                                                                     // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runtime.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/runtime.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - runtime                                                                                                      // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Lame Array.isArray() polyfill for now.                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\nif (!Array.isArray) {                                                                                                  // 12\n  Array.isArray = function(arr){                                                                                       // 13\n    return '[object Array]' == Object.prototype.toString.call(arr);                                                    // 14\n  };                                                                                                                   // 15\n}                                                                                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Lame Object.keys() polyfill for now.                                                                                // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nif (!Object.keys) {                                                                                                    // 22\n  Object.keys = function(obj){                                                                                         // 23\n    var arr = [];                                                                                                      // 24\n    for (var key in obj) {                                                                                             // 25\n      if (obj.hasOwnProperty(key)) {                                                                                   // 26\n        arr.push(key);                                                                                                 // 27\n      }                                                                                                                // 28\n    }                                                                                                                  // 29\n    return arr;                                                                                                        // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Merge two attribute objects giving precedence                                                                       // 35\n * to values in object `b`. Classes are special-cased                                                                  // 36\n * allowing for arrays and merging/joining appropriately                                                               // 37\n * resulting in a string.                                                                                              // 38\n *                                                                                                                     // 39\n * @param {Object} a                                                                                                   // 40\n * @param {Object} b                                                                                                   // 41\n * @return {Object} a                                                                                                  // 42\n * @api private                                                                                                        // 43\n */                                                                                                                    // 44\n                                                                                                                       // 45\nexports.merge = function merge(a, b) {                                                                                 // 46\n  var ac = a['class'];                                                                                                 // 47\n  var bc = b['class'];                                                                                                 // 48\n                                                                                                                       // 49\n  if (ac || bc) {                                                                                                      // 50\n    ac = ac || [];                                                                                                     // 51\n    bc = bc || [];                                                                                                     // 52\n    if (!Array.isArray(ac)) ac = [ac];                                                                                 // 53\n    if (!Array.isArray(bc)) bc = [bc];                                                                                 // 54\n    ac = ac.filter(nulls);                                                                                             // 55\n    bc = bc.filter(nulls);                                                                                             // 56\n    a['class'] = ac.concat(bc).join(' ');                                                                              // 57\n  }                                                                                                                    // 58\n                                                                                                                       // 59\n  for (var key in b) {                                                                                                 // 60\n    if (key != 'class') {                                                                                              // 61\n      a[key] = b[key];                                                                                                 // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  return a;                                                                                                            // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\n/**                                                                                                                    // 69\n * Filter null `val`s.                                                                                                 // 70\n *                                                                                                                     // 71\n * @param {Mixed} val                                                                                                  // 72\n * @return {Mixed}                                                                                                     // 73\n * @api private                                                                                                        // 74\n */                                                                                                                    // 75\n                                                                                                                       // 76\nfunction nulls(val) {                                                                                                  // 77\n  return val != null;                                                                                                  // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Render the given attributes object.                                                                                 // 82\n *                                                                                                                     // 83\n * @param {Object} obj                                                                                                 // 84\n * @param {Object} escaped                                                                                             // 85\n * @return {String}                                                                                                    // 86\n * @api private                                                                                                        // 87\n */                                                                                                                    // 88\n                                                                                                                       // 89\nexports.attrs = function attrs(obj, escaped){                                                                          // 90\n  var buf = []                                                                                                         // 91\n    , terse = obj.terse;                                                                                               // 92\n                                                                                                                       // 93\n  delete obj.terse;                                                                                                    // 94\n  var keys = Object.keys(obj)                                                                                          // 95\n    , len = keys.length;                                                                                               // 96\n                                                                                                                       // 97\n  if (len) {                                                                                                           // 98\n    buf.push('');                                                                                                      // 99\n    for (var i = 0; i < len; ++i) {                                                                                    // 100\n      var key = keys[i]                                                                                                // 101\n        , val = obj[key];                                                                                              // 102\n                                                                                                                       // 103\n      if ('boolean' == typeof val || null == val) {                                                                    // 104\n        if (val) {                                                                                                     // 105\n          terse                                                                                                        // 106\n            ? buf.push(key)                                                                                            // 107\n            : buf.push(key + '=\"' + key + '\"');                                                                        // 108\n        }                                                                                                              // 109\n      } else if (0 == key.indexOf('data') && 'string' != typeof val) {                                                 // 110\n        buf.push(key + \"='\" + JSON.stringify(val) + \"'\");                                                              // 111\n      } else if ('class' == key && Array.isArray(val)) {                                                               // 112\n        buf.push(key + '=\"' + exports.escape(val.join(' ')) + '\"');                                                    // 113\n      } else if (escaped && escaped[key]) {                                                                            // 114\n        buf.push(key + '=\"' + exports.escape(val) + '\"');                                                              // 115\n      } else {                                                                                                         // 116\n        buf.push(key + '=\"' + val + '\"');                                                                              // 117\n      }                                                                                                                // 118\n    }                                                                                                                  // 119\n  }                                                                                                                    // 120\n                                                                                                                       // 121\n  return buf.join(' ');                                                                                                // 122\n};                                                                                                                     // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Escape the given string of `html`.                                                                                  // 126\n *                                                                                                                     // 127\n * @param {String} html                                                                                                // 128\n * @return {String}                                                                                                    // 129\n * @api private                                                                                                        // 130\n */                                                                                                                    // 131\n                                                                                                                       // 132\nexports.escape = function escape(html){                                                                                // 133\n  return String(html)                                                                                                  // 134\n    .replace(/&(?!(\\w+|\\#\\d+);)/g, '&amp;')                                                                            // 135\n    .replace(/</g, '&lt;')                                                                                             // 136\n    .replace(/>/g, '&gt;')                                                                                             // 137\n    .replace(/\"/g, '&quot;');                                                                                          // 138\n};                                                                                                                     // 139\n                                                                                                                       // 140\n/**                                                                                                                    // 141\n * Re-throw the given `err` in context to the                                                                          // 142\n * the jade in `filename` at the given `lineno`.                                                                       // 143\n *                                                                                                                     // 144\n * @param {Error} err                                                                                                  // 145\n * @param {String} filename                                                                                            // 146\n * @param {String} lineno                                                                                              // 147\n * @api private                                                                                                        // 148\n */                                                                                                                    // 149\n                                                                                                                       // 150\nexports.rethrow = function rethrow(err, filename, lineno){                                                             // 151\n  if (!filename) throw err;                                                                                            // 152\n                                                                                                                       // 153\n  var context = 3                                                                                                      // 154\n    , str = require('fs').readFileSync(filename, 'utf8')                                                               // 155\n    , lines = str.split('\\n')                                                                                          // 156\n    , start = Math.max(lineno - context, 0)                                                                            // 157\n    , end = Math.min(lines.length, lineno + context);                                                                  // 158\n                                                                                                                       // 159\n  // Error context                                                                                                     // 160\n  var context = lines.slice(start, end).map(function(line, i){                                                         // 161\n    var curr = i + start + 1;                                                                                          // 162\n    return (curr == lineno ? '  > ' : '    ')                                                                          // 163\n      + curr                                                                                                           // 164\n      + '| '                                                                                                           // 165\n      + line;                                                                                                          // 166\n  }).join('\\n');                                                                                                       // 167\n                                                                                                                       // 168\n  // Alter exception message                                                                                           // 169\n  err.path = filename;                                                                                                 // 170\n  err.message = (filename || 'Jade') + ':' + lineno                                                                    // 171\n    + '\\n' + context + '\\n\\n' + err.message;                                                                           // 172\n  throw err;                                                                                                           // 173\n};                                                                                                                     // 174\n                                                                                                                       // 175\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/jade/lib/utils.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/*!                                                                                                                    // 2\n * Jade - utils                                                                                                        // 3\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>                                                               // 4\n * MIT Licensed                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * Convert interpolation in the given string to JavaScript.                                                            // 9\n *                                                                                                                     // 10\n * @param {String} str                                                                                                 // 11\n * @return {String}                                                                                                    // 12\n * @api private                                                                                                        // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\nvar interpolate = exports.interpolate = function(str){                                                                 // 16\n  return str.replace(/(\\\\)?([#!]){(.*?)}/g, function(str, escape, flag, code){                                         // 17\n    return escape                                                                                                      // 18\n      ? str                                                                                                            // 19\n      : \"' + \"                                                                                                         // 20\n        + ('!' == flag ? '' : 'escape')                                                                                // 21\n        + \"((interp = \" + code.replace(/\\\\'/g, \"'\")                                                                    // 22\n        + \") == null ? '' : interp) + '\";                                                                              // 23\n  });                                                                                                                  // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Escape single quotes in `str`.                                                                                      // 28\n *                                                                                                                     // 29\n * @param {String} str                                                                                                 // 30\n * @return {String}                                                                                                    // 31\n * @api private                                                                                                        // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar escape = exports.escape = function(str) {                                                                          // 35\n  return str.replace(/'/g, \"\\\\'\");                                                                                     // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Interpolate, and escape the given `str`.                                                                            // 40\n *                                                                                                                     // 41\n * @param {String} str                                                                                                 // 42\n * @return {String}                                                                                                    // 43\n * @api private                                                                                                        // 44\n */                                                                                                                    // 45\n                                                                                                                       // 46\nexports.text = function(str){                                                                                          // 47\n  return interpolate(escape(str));                                                                                     // 48\n};                                                                                                                     // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"growl\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.0.1.kv3y1x++os+web.browser+web.cordova/npm/node_modules/mocha/node_modules/growl/package.json              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"growl\";                                                                                                // 1\nexports.version = \"1.8.1\";                                                                                             // 2\nexports.main = \"./lib/growl.js\";                                                                                       // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"growl.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha-core/node_modules/mocha/node_modules/growl/lib/growl.js                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Growl - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)                                                // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Module dependencies.                                                                                                // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nvar exec = require('child_process').exec                                                                               // 7\n  , fs = require('fs')                                                                                                 // 8\n  , path = require('path')                                                                                             // 9\n  , exists = fs.existsSync || path.existsSync                                                                          // 10\n  , os = require('os')                                                                                                 // 11\n  , quote = JSON.stringify                                                                                             // 12\n  , cmd;                                                                                                               // 13\n                                                                                                                       // 14\nfunction which(name) {                                                                                                 // 15\n  var paths = process.env.PATH.split(':');                                                                             // 16\n  var loc;                                                                                                             // 17\n                                                                                                                       // 18\n  for (var i = 0, len = paths.length; i < len; ++i) {                                                                  // 19\n    loc = path.join(paths[i], name);                                                                                   // 20\n    if (exists(loc)) return loc;                                                                                       // 21\n  }                                                                                                                    // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nswitch(os.type()) {                                                                                                    // 25\n  case 'Darwin':                                                                                                       // 26\n    if (which('terminal-notifier')) {                                                                                  // 27\n      cmd = {                                                                                                          // 28\n          type: \"Darwin-NotificationCenter\"                                                                            // 29\n        , pkg: \"terminal-notifier\"                                                                                     // 30\n        , msg: '-message'                                                                                              // 31\n        , title: '-title'                                                                                              // 32\n        , subtitle: '-subtitle'                                                                                        // 33\n        , priority: {                                                                                                  // 34\n              cmd: '-execute'                                                                                          // 35\n            , range: []                                                                                                // 36\n          }                                                                                                            // 37\n      };                                                                                                               // 38\n    } else {                                                                                                           // 39\n      cmd = {                                                                                                          // 40\n          type: \"Darwin-Growl\"                                                                                         // 41\n        , pkg: \"growlnotify\"                                                                                           // 42\n        , msg: '-m'                                                                                                    // 43\n        , sticky: '--sticky'                                                                                           // 44\n        , priority: {                                                                                                  // 45\n              cmd: '--priority'                                                                                        // 46\n            , range: [                                                                                                 // 47\n                -2                                                                                                     // 48\n              , -1                                                                                                     // 49\n              , 0                                                                                                      // 50\n              , 1                                                                                                      // 51\n              , 2                                                                                                      // 52\n              , \"Very Low\"                                                                                             // 53\n              , \"Moderate\"                                                                                             // 54\n              , \"Normal\"                                                                                               // 55\n              , \"High\"                                                                                                 // 56\n              , \"Emergency\"                                                                                            // 57\n            ]                                                                                                          // 58\n          }                                                                                                            // 59\n      };                                                                                                               // 60\n    }                                                                                                                  // 61\n    break;                                                                                                             // 62\n  case 'Linux':                                                                                                        // 63\n    cmd = {                                                                                                            // 64\n        type: \"Linux\"                                                                                                  // 65\n      , pkg: \"notify-send\"                                                                                             // 66\n      , msg: ''                                                                                                        // 67\n      , sticky: '-t 0'                                                                                                 // 68\n      , icon: '-i'                                                                                                     // 69\n      , priority: {                                                                                                    // 70\n          cmd: '-u'                                                                                                    // 71\n        , range: [                                                                                                     // 72\n            \"low\"                                                                                                      // 73\n          , \"normal\"                                                                                                   // 74\n          , \"critical\"                                                                                                 // 75\n        ]                                                                                                              // 76\n      }                                                                                                                // 77\n    };                                                                                                                 // 78\n    break;                                                                                                             // 79\n  case 'Windows_NT':                                                                                                   // 80\n    cmd = {                                                                                                            // 81\n        type: \"Windows\"                                                                                                // 82\n      , pkg: \"growlnotify\"                                                                                             // 83\n      , msg: ''                                                                                                        // 84\n      , sticky: '/s:true'                                                                                              // 85\n      , title: '/t:'                                                                                                   // 86\n      , icon: '/i:'                                                                                                    // 87\n      , priority: {                                                                                                    // 88\n            cmd: '/p:'                                                                                                 // 89\n          , range: [                                                                                                   // 90\n              -2                                                                                                       // 91\n            , -1                                                                                                       // 92\n            , 0                                                                                                        // 93\n            , 1                                                                                                        // 94\n            , 2                                                                                                        // 95\n          ]                                                                                                            // 96\n        }                                                                                                              // 97\n    };                                                                                                                 // 98\n    break;                                                                                                             // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\n/**                                                                                                                    // 102\n * Expose `growl`.                                                                                                     // 103\n */                                                                                                                    // 104\n                                                                                                                       // 105\nexports = module.exports = growl;                                                                                      // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * Node-growl version.                                                                                                 // 109\n */                                                                                                                    // 110\n                                                                                                                       // 111\nexports.version = '1.4.1'                                                                                              // 112\n                                                                                                                       // 113\n/**                                                                                                                    // 114\n * Send growl notification _msg_ with _options_.                                                                       // 115\n *                                                                                                                     // 116\n * Options:                                                                                                            // 117\n *                                                                                                                     // 118\n *  - title   Notification title                                                                                       // 119\n *  - sticky  Make the notification stick (defaults to false)                                                          // 120\n *  - priority  Specify an int or named key (default is 0)                                                             // 121\n *  - name    Application name (defaults to growlnotify)                                                               // 122\n *  - image                                                                                                            // 123\n *    - path to an icon sets --iconpath                                                                                // 124\n *    - path to an image sets --image                                                                                  // 125\n *    - capitalized word sets --appIcon                                                                                // 126\n *    - filename uses extname as --icon                                                                                // 127\n *    - otherwise treated as --icon                                                                                    // 128\n *                                                                                                                     // 129\n * Examples:                                                                                                           // 130\n *                                                                                                                     // 131\n *   growl('New email')                                                                                                // 132\n *   growl('5 new emails', { title: 'Thunderbird' })                                                                   // 133\n *   growl('Email sent', function(){                                                                                   // 134\n *     // ... notification sent                                                                                        // 135\n *   })                                                                                                                // 136\n *                                                                                                                     // 137\n * @param {string} msg                                                                                                 // 138\n * @param {object} options                                                                                             // 139\n * @param {function} fn                                                                                                // 140\n * @api public                                                                                                         // 141\n */                                                                                                                    // 142\n                                                                                                                       // 143\nfunction growl(msg, options, fn) {                                                                                     // 144\n  var image                                                                                                            // 145\n    , args                                                                                                             // 146\n    , options = options || {}                                                                                          // 147\n    , fn = fn || function(){};                                                                                         // 148\n                                                                                                                       // 149\n  // noop                                                                                                              // 150\n  if (!cmd) return fn(new Error('growl not supported on this platform'));                                              // 151\n  args = [cmd.pkg];                                                                                                    // 152\n                                                                                                                       // 153\n  // image                                                                                                             // 154\n  if (image = options.image) {                                                                                         // 155\n    switch(cmd.type) {                                                                                                 // 156\n      case 'Darwin-Growl':                                                                                             // 157\n        var flag, ext = path.extname(image).substr(1)                                                                  // 158\n        flag = flag || ext == 'icns' && 'iconpath'                                                                     // 159\n        flag = flag || /^[A-Z]/.test(image) && 'appIcon'                                                               // 160\n        flag = flag || /^png|gif|jpe?g$/.test(ext) && 'image'                                                          // 161\n        flag = flag || ext && (image = ext) && 'icon'                                                                  // 162\n        flag = flag || 'icon'                                                                                          // 163\n        args.push('--' + flag, quote(image))                                                                           // 164\n        break;                                                                                                         // 165\n      case 'Linux':                                                                                                    // 166\n        args.push(cmd.icon, quote(image));                                                                             // 167\n        // libnotify defaults to sticky, set a hint for transient notifications                                        // 168\n        if (!options.sticky) args.push('--hint=int:transient:1');                                                      // 169\n        break;                                                                                                         // 170\n      case 'Windows':                                                                                                  // 171\n        args.push(cmd.icon + quote(image));                                                                            // 172\n        break;                                                                                                         // 173\n    }                                                                                                                  // 174\n  }                                                                                                                    // 175\n                                                                                                                       // 176\n  // sticky                                                                                                            // 177\n  if (options.sticky) args.push(cmd.sticky);                                                                           // 178\n                                                                                                                       // 179\n  // priority                                                                                                          // 180\n  if (options.priority) {                                                                                              // 181\n    var priority = options.priority + '';                                                                              // 182\n    var checkindexOf = cmd.priority.range.indexOf(priority);                                                           // 183\n    if (~cmd.priority.range.indexOf(priority)) {                                                                       // 184\n      args.push(cmd.priority, options.priority);                                                                       // 185\n    }                                                                                                                  // 186\n  }                                                                                                                    // 187\n                                                                                                                       // 188\n  // name                                                                                                              // 189\n  if (options.name && cmd.type === \"Darwin-Growl\") {                                                                   // 190\n    args.push('--name', options.name);                                                                                 // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  switch(cmd.type) {                                                                                                   // 194\n    case 'Darwin-Growl':                                                                                               // 195\n      args.push(cmd.msg);                                                                                              // 196\n      args.push(quote(msg));                                                                                           // 197\n      if (options.title) args.push(quote(options.title));                                                              // 198\n      break;                                                                                                           // 199\n    case 'Darwin-NotificationCenter':                                                                                  // 200\n      args.push(cmd.msg);                                                                                              // 201\n      args.push(quote(msg));                                                                                           // 202\n      if (options.title) {                                                                                             // 203\n        args.push(cmd.title);                                                                                          // 204\n        args.push(quote(options.title));                                                                               // 205\n      }                                                                                                                // 206\n      if (options.subtitle) {                                                                                          // 207\n        args.push(cmd.subtitle);                                                                                       // 208\n        args.push(quote(options.subtitle));                                                                            // 209\n      }                                                                                                                // 210\n      break;                                                                                                           // 211\n    case 'Darwin-Growl':                                                                                               // 212\n      args.push(cmd.msg);                                                                                              // 213\n      args.push(quote(msg));                                                                                           // 214\n      if (options.title) args.push(quote(options.title));                                                              // 215\n      break;                                                                                                           // 216\n    case 'Linux':                                                                                                      // 217\n      if (options.title) {                                                                                             // 218\n        args.push(quote(options.title));                                                                               // 219\n        args.push(cmd.msg);                                                                                            // 220\n        args.push(quote(msg));                                                                                         // 221\n      } else {                                                                                                         // 222\n        args.push(quote(msg));                                                                                         // 223\n      }                                                                                                                // 224\n      break;                                                                                                           // 225\n    case 'Windows':                                                                                                    // 226\n      args.push(quote(msg));                                                                                           // 227\n      if (options.title) args.push(cmd.title + quote(options.title));                                                  // 228\n      break;                                                                                                           // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  // execute                                                                                                           // 232\n  exec(args.join(' '), fn);                                                                                            // 233\n};                                                                                                                     // 234\n                                                                                                                       // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/practicalmeteor:mocha-core/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['practicalmeteor:mocha-core'] = exports;\n\n})();\n","servePath":"/packages/practicalmeteor_mocha-core.js","sourceMap":{"version":3,"sources":["packages/practicalmeteor:mocha-core/client.js"],"names":["module","export","mocha","watch","require","setup","ui"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAiCF,OAAOG,KAAP,CAAaC,QAAQ,gBAAR,CAAb;AAGjC;AACAF,MAAMG,KAAN,CAAY;AACVC,MAAI;AADM,CAAZ,0H","file":"/packages/practicalmeteor_mocha-core.js","sourcesContent":["// We need to import the \"mocha.js\" file specifically because that is the browser entry point.\nimport 'mocha/mocha.js';\n\n// This defines \"describe\", \"it\", etc.\nmocha.setup({\n  ui: 'bdd',\n});\n\nexport { mocha };\n"]}}]