[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Random = Package.random.Random;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar Autoupdate = Package.autoupdate.Autoupdate;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar exports, __coffeescriptShare, runTests;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"practicalmeteor:mocha\":{\"meteor\":{\"src\":{\"server\":{\"autoupdate.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/server/autoupdate.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Autoupdate = void 0;                                                                                               // 1\nmodule.watch(require(\"meteor/autoupdate\"), {                                                                           // 1\n  Autoupdate: function (v) {                                                                                           // 1\n    Autoupdate = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/random\"), {                                                                               // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n// autoupdate normally won't reload on server-only changes, but when                                                   // 3\n// running tests in the browser it's nice to have server changes cause                                                 // 4\n// the tests to reload.  Setting the auto update version to a                                                          // 5\n// different value when the server restarts accomplishes this.                                                         // 6\nAutoupdate.autoupdateVersion = Random.id();                                                                            // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/index.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  runTests: function () {                                                                                              // 1\n    return runTests;                                                                                                   // 1\n  },                                                                                                                   // 1\n  MochaRunner: function () {                                                                                           // 1\n    return MochaRunner;                                                                                                // 1\n  },                                                                                                                   // 1\n  BaseReporter: function () {                                                                                          // 1\n    return BaseReporter;                                                                                               // 1\n  },                                                                                                                   // 1\n  ClientServerBaseReporter: function () {                                                                              // 1\n    return ClientServerBaseReporter;                                                                                   // 1\n  },                                                                                                                   // 1\n  HtmlReporter: function () {                                                                                          // 1\n    return HtmlReporter;                                                                                               // 1\n  },                                                                                                                   // 1\n  before: function () {                                                                                                // 1\n    return before;                                                                                                     // 1\n  },                                                                                                                   // 1\n  after: function () {                                                                                                 // 1\n    return after;                                                                                                      // 1\n  },                                                                                                                   // 1\n  beforeEach: function () {                                                                                            // 1\n    return beforeEach;                                                                                                 // 1\n  },                                                                                                                   // 1\n  afterEach: function () {                                                                                             // 1\n    return afterEach;                                                                                                  // 1\n  },                                                                                                                   // 1\n  describe: function () {                                                                                              // 1\n    return describe;                                                                                                   // 1\n  },                                                                                                                   // 1\n  xdescribe: function () {                                                                                             // 1\n    return xdescribe;                                                                                                  // 1\n  },                                                                                                                   // 1\n  it: function () {                                                                                                    // 1\n    return it;                                                                                                         // 1\n  },                                                                                                                   // 1\n  xit: function () {                                                                                                   // 1\n    return xit;                                                                                                        // 1\n  },                                                                                                                   // 1\n  specify: function () {                                                                                               // 1\n    return specify;                                                                                                    // 1\n  },                                                                                                                   // 1\n  xspecify: function () {                                                                                              // 1\n    return xspecify;                                                                                                   // 1\n  },                                                                                                                   // 1\n  xcontext: function () {                                                                                              // 1\n    return xcontext;                                                                                                   // 1\n  },                                                                                                                   // 1\n  context: function () {                                                                                               // 1\n    return context;                                                                                                    // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nmodule.watch(require(\"./setup\"));                                                                                      // 1\nvar MochaRunner = void 0;                                                                                              // 1\nmodule.watch(require(\"./lib/MochaRunner\"), {                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    MochaRunner = v;                                                                                                   // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar BaseReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./reporters/BaseReporter\"), {                                                                    // 1\n  \"default\": function (v) {                                                                                            // 1\n    BaseReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ClientServerBaseReporter = void 0;                                                                                 // 1\nmodule.watch(require(\"./reporters/ClientServerBaseReporter\"), {                                                        // 1\n  \"default\": function (v) {                                                                                            // 1\n    ClientServerBaseReporter = v;                                                                                      // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar HtmlReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./reporters/HtmlReporter\"), {                                                                    // 1\n  \"default\": function (v) {                                                                                            // 1\n    HtmlReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar hideOtherCSS = void 0,                                                                                             // 1\n    hideApp = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/tmeasday:test-reporter-helpers\"), {                                                       // 1\n  hideOtherCSS: function (v) {                                                                                         // 1\n    hideOtherCSS = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  hideApp: function (v) {                                                                                              // 1\n    hideApp = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n                                                                                                                       //\nvar runTests = function () {                                                                                           // 8\n  hideApp('.mocha-wrapper');                                                                                           // 9\n  hideOtherCSS();                                                                                                      // 10\n  MochaRunner.runEverywhere();                                                                                         // 11\n};                                                                                                                     // 12\n                                                                                                                       //\nvar _global = global,                                                                                                  //\n    before = _global.before,                                                                                           //\n    after = _global.after,                                                                                             //\n    beforeEach = _global.beforeEach,                                                                                   //\n    afterEach = _global.afterEach,                                                                                     //\n    describe = _global.describe,                                                                                       //\n    xdescribe = _global.xdescribe,                                                                                     //\n    it = _global.it,                                                                                                   //\n    xit = _global.xit,                                                                                                 //\n    specify = _global.specify,                                                                                         //\n    xspecify = _global.xspecify,                                                                                       //\n    xcontext = _global.xcontext,                                                                                       //\n    context = _global.context;                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"MochaRunner.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MochaRunner.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MochaRunner.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar EventEmitter, MeteorPublishReporter, Mocha, MochaRunner, Mongo, ObjectLogger, Suite, Test, _, log, utils,          // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nTest = require(\"mocha/lib/test\");                                                                                      // 1\n                                                                                                                       //\nSuite = require(\"mocha/lib/suite\");                                                                                    // 1\n                                                                                                                       //\nutils = require(\"mocha/lib/utils\");                                                                                    // 1\n                                                                                                                       //\nMongo = require(\"meteor/mongo\").Mongo;                                                                                 // 1\n                                                                                                                       //\nMocha = require(\"meteor/practicalmeteor:mocha-core\").Mocha;                                                            // 1\n                                                                                                                       //\nEventEmitter = require(\"events\").EventEmitter;                                                                         // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\");                                               // 1\n                                                                                                                       //\nlog = new ObjectLogger('MochaRunner', 'info');                                                                         // 1\n                                                                                                                       //\nMochaRunner = (function(superClass) {                                                                                  // 1\n  extend(MochaRunner, superClass);                                                                                     // 14\n                                                                                                                       //\n  MochaRunner.instance = null;                                                                                         // 14\n                                                                                                                       //\n  MochaRunner.get = function() {                                                                                       // 14\n    return MochaRunner.instance != null ? MochaRunner.instance : MochaRunner.instance = new MochaRunner();             //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.VERSION = \"2.4.5_6\";                                                                           // 14\n                                                                                                                       //\n  MochaRunner.prototype.serverRunEvents = null;                                                                        // 14\n                                                                                                                       //\n  MochaRunner.prototype.publishers = {};                                                                               // 14\n                                                                                                                       //\n  function MochaRunner() {                                                                                             // 24\n    this.onServerRunSubscriptionReady = bind(this.onServerRunSubscriptionReady, this);                                 // 25\n    this.runServerTests = bind(this.runServerTests, this);                                                             // 25\n    try {                                                                                                              // 25\n      log.enter('constructor');                                                                                        // 26\n      this.utils = utils;                                                                                              // 26\n      this.serverRunEvents = new Mongo.Collection('mochaServerRunEvents');                                             // 26\n      if (Meteor.isServer) {                                                                                           // 29\n        Meteor.methods({                                                                                               // 30\n          \"mocha/runServerTests\": this.runServerTests.bind(this)                                                       // 30\n        });                                                                                                            //\n        this.publish();                                                                                                // 30\n      }                                                                                                                //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 36\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  MochaRunner.prototype.publish = function() {                                                                         // 14\n    var self;                                                                                                          // 40\n    try {                                                                                                              // 40\n      log.enter(\"publish\");                                                                                            // 41\n      self = this;                                                                                                     // 41\n      return Meteor.publish('mochaServerRunEvents', function(runId) {                                                  //\n        var base, ex;                                                                                                  // 44\n        try {                                                                                                          // 44\n          log.enter('publish.mochaServerRunEvents');                                                                   // 45\n          check(runId, String);                                                                                        // 45\n          expect(this.ready).to.be.a('function');                                                                      // 45\n          if ((base = self.publishers)[runId] == null) {                                                               //\n            base[runId] = this;                                                                                        //\n          }                                                                                                            //\n          this.ready();                                                                                                // 45\n          return void 0;                                                                                               // 51\n        } catch (_error) {                                                                                             //\n          ex = _error;                                                                                                 // 53\n          if (ex.stack != null) {                                                                                      // 53\n            log.error(ex.stack);                                                                                       // 53\n          }                                                                                                            //\n          throw new Meteor.Error('unknown-error', (ex.message != null ? ex.message : void 0), (ex.stack != null ? ex.stack : void 0));\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 56\n        }                                                                                                              //\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 58\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.runServerTests = function(runId, grep) {                                                       // 14\n    var mochaRunner;                                                                                                   // 62\n    try {                                                                                                              // 62\n      log.enter(\"runServerTests\", runId);                                                                              // 63\n      check(runId, String);                                                                                            // 63\n      check(grep, Match.Optional(Match.OneOf(null, String)));                                                          // 63\n      expect(runId).to.be.a(\"string\");                                                                                 // 63\n      expect(this.publishers[runId], \"publisher\").to.be.an(\"object\");                                                  // 63\n      expect(Meteor.isServer).to.be[\"true\"];                                                                           // 63\n      mochaRunner = new Mocha();                                                                                       // 63\n      this._addTestsToMochaRunner(mocha.suite, mochaRunner.suite);                                                     // 63\n      mochaRunner.reporter(MeteorPublishReporter, {                                                                    // 63\n        grep: this.escapeGrep(grep),                                                                                   // 72\n        publisher: this.publishers[runId]                                                                              // 72\n      });                                                                                                              //\n      log.info(\"Starting server side tests with run id \" + runId);                                                     // 63\n      return mochaRunner.run(function(failures) {                                                                      //\n        return log.warn('failures:', failures);                                                                        //\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 82\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype._addTestsToMochaRunner = function(fromSuite, toSuite) {                                        // 14\n    var addHooks, i, j, len, len1, newSuite, ref, ref1, results, suite, test;                                          // 87\n    try {                                                                                                              // 87\n      log.enter(\"_addTestToMochaRunner\");                                                                              // 88\n      addHooks = function(hookName) {                                                                                  // 88\n        var hook, i, len, ref;                                                                                         // 91\n        ref = fromSuite[\"_\" + hookName];                                                                               // 91\n        for (i = 0, len = ref.length; i < len; i++) {                                                                  // 91\n          hook = ref[i];                                                                                               //\n          toSuite[hookName](hook.title, hook.fn);                                                                      // 92\n        }                                                                                                              // 91\n        return log.debug(\"Hook \" + hookName + \" for '\" + (fromSuite.fullTitle()) + \"' added.\");                        //\n      };                                                                                                               //\n      addHooks(\"beforeAll\");                                                                                           // 88\n      addHooks(\"afterAll\");                                                                                            // 88\n      addHooks(\"beforeEach\");                                                                                          // 88\n      addHooks(\"afterEach\");                                                                                           // 88\n      ref = fromSuite.tests;                                                                                           // 100\n      for (i = 0, len = ref.length; i < len; i++) {                                                                    // 100\n        test = ref[i];                                                                                                 //\n        test = new Test(test.title, test.fn);                                                                          // 101\n        toSuite.addTest(test);                                                                                         // 101\n        log.debug(\"Tests for '\" + (fromSuite.fullTitle()) + \"' added.\");                                               // 101\n      }                                                                                                                // 100\n      ref1 = fromSuite.suites;                                                                                         // 105\n      results = [];                                                                                                    // 105\n      for (j = 0, len1 = ref1.length; j < len1; j++) {                                                                 //\n        suite = ref1[j];                                                                                               //\n        newSuite = Suite.create(toSuite, suite.title);                                                                 // 106\n        newSuite.timeout(suite.timeout());                                                                             // 106\n        log.debug(\"Suite \" + (newSuite.fullTitle()) + \"  added to '\" + (fromSuite.fullTitle()) + \"'.\");                // 106\n        results.push(this._addTestsToMochaRunner(suite, newSuite));                                                    // 106\n      }                                                                                                                // 105\n      return results;                                                                                                  //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 112\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.runEverywhere = function() {                                                                   // 14\n    try {                                                                                                              // 116\n      log.enter('runEverywhere');                                                                                      // 117\n      expect(Meteor.isClient).to.be[\"true\"];                                                                           // 117\n      this.runId = Random.id();                                                                                        // 117\n      return this.serverRunSubscriptionHandle = Meteor.subscribe('mochaServerRunEvents', this.runId, {                 //\n        onReady: _.bind(this.onServerRunSubscriptionReady, this),                                                      // 121\n        onError: _.bind(this.onServerRunSubscriptionError, this)                                                       // 121\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 127\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.setReporter = function(reporter1) {                                                            // 14\n    this.reporter = reporter1;                                                                                         // 130\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.escapeGrep = function(grep) {                                                                  // 14\n    var matchOperatorsRe;                                                                                              // 133\n    if (grep == null) {                                                                                                //\n      grep = '';                                                                                                       //\n    }                                                                                                                  //\n    try {                                                                                                              // 133\n      log.enter(\"escapeGrep\", grep);                                                                                   // 134\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;                                                                        // 134\n      grep.replace(matchOperatorsRe, '\\\\$&');                                                                          // 134\n      return new RegExp(grep);                                                                                         // 137\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 139\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.onServerRunSubscriptionReady = function() {                                                    // 14\n    var ClientServerReporter, REPORTERS, query, ref, reporters;                                                        // 143\n    try {                                                                                                              // 143\n      log.enter('onServerRunSubscriptionReady');                                                                       // 144\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\");                                           // 144\n      ref = require(\"../reporters\"), REPORTERS = ref.REPORTERS, reporters = ref.reporters;                             // 144\n      query = utils.parseQuery(location.search || '');                                                                 // 144\n      Meteor.call(\"mocha/runServerTests\", this.runId, query.grep, function(err) {                                      // 144\n        log.debug(\"tests started\");                                                                                    // 150\n        if (err) {                                                                                                     // 151\n          return log.error(err);                                                                                       //\n        }                                                                                                              //\n      });                                                                                                              //\n      return Tracker.autorun((function(_this) {                                                                        //\n        return function() {                                                                                            //\n          var event, reporter;                                                                                         // 154\n          event = _this.serverRunEvents.findOne({                                                                      // 154\n            event: \"run mocha\"                                                                                         // 154\n          });                                                                                                          //\n          if (((event != null ? event.data.reporter : void 0) != null) && _.contains(REPORTERS, event.data.reporter)) {\n            reporter = reporters[event.data.reporter];                                                                 // 156\n            _this.setReporter(reporter);                                                                               // 156\n          }                                                                                                            //\n          if ((event != null ? event.data.runOrder : void 0) === \"serial\") {                                           // 159\n            return reporter = new ClientServerReporter(null, {                                                         //\n              runOrder: \"serial\"                                                                                       // 160\n            });                                                                                                        //\n          } else if ((event != null ? event.data.runOrder : void 0) === \"parallel\") {                                  //\n            mocha.reporter(ClientServerReporter);                                                                      // 162\n            return mocha.run(function() {});                                                                           //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 168\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MochaRunner.prototype.onServerRunSubscriptionError = function(meteorError) {                                         // 14\n    try {                                                                                                              // 172\n      log.enter('onServerRunSubscriptionError');                                                                       // 173\n      return log.error(meteorError);                                                                                   //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 176\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return MochaRunner;                                                                                                  //\n                                                                                                                       //\n})(EventEmitter);                                                                                                      //\n                                                                                                                       //\nmodule.exports = MochaRunner.get();                                                                                    // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reporters\":{\"BaseReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./BaseReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"BaseReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar BaseReporter;                                                                                                      // 13\n                                                                                                                       //\nBaseReporter = (function() {                                                                                           // 13\n  function BaseReporter(runner, options) {                                                                             // 15\n    this.runner = runner;                                                                                              // 16\n    this.options = options;                                                                                            // 16\n    expect(this.runner).to.be.an('object');                                                                            // 16\n    expect(this.options).to.be.an('object');                                                                           // 16\n    this.stats = {                                                                                                     // 16\n      total: this.runner.total,                                                                                        // 18\n      suites: 0,                                                                                                       // 18\n      tests: 0,                                                                                                        // 18\n      passes: 0,                                                                                                       // 18\n      pending: 0,                                                                                                      // 18\n      failures: 0                                                                                                      // 18\n    };                                                                                                                 //\n    this.failures = [];                                                                                                // 16\n    this.runner.stats = this.stats;                                                                                    // 16\n    this.runner.on('start', (function(_this) {                                                                         // 16\n      return function() {                                                                                              //\n        return _this.stats.start = new Date;                                                                           //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('suite', (function(_this) {                                                                         // 16\n      return function(suite) {                                                                                         //\n        if (!suite.root) {                                                                                             // 27\n          return _this.stats.suites++;                                                                                 //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('test end', (function(_this) {                                                                      // 16\n      return function(test) {                                                                                          //\n        return _this.stats.tests++;                                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('pass', (function(_this) {                                                                          // 16\n      return function(test) {                                                                                          //\n        var medium;                                                                                                    // 33\n        medium = test.slow() / 2;                                                                                      // 33\n        if (test.duration > test.slow()) {                                                                             // 34\n          test.speed = 'slow';                                                                                         // 35\n        } else if (test.duration > medium) {                                                                           //\n          test.speed = 'medium';                                                                                       // 37\n        } else {                                                                                                       //\n          test.speed = 'fast';                                                                                         // 39\n        }                                                                                                              //\n        return _this.stats.passes++;                                                                                   //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('fail', (function(_this) {                                                                          // 16\n      return function(test, err) {                                                                                     //\n        _this.stats.failures++;                                                                                        // 43\n        test.err = err;                                                                                                // 43\n        return _this.failures.push(test);                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('end', (function(_this) {                                                                           // 16\n      return function() {                                                                                              //\n        _this.stats.end = new Date;                                                                                    // 48\n        return _this.stats.duration = _this.stats.end - _this.stats.start;                                             //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.runner.on('pending', (function(_this) {                                                                       // 16\n      return function() {                                                                                              //\n        return _this.stats.pending++;                                                                                  //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  return BaseReporter;                                                                                                 //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = BaseReporter;                                                                                         // 13\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerBaseReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ClientServerBaseReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerBaseReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, MochaRunner;                                                                             // 1\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nClientServerBaseReporter = (function() {                                                                               // 1\n  function ClientServerBaseReporter(clientRunner, serverRunner, options) {                                             // 16\n    this.clientRunner = clientRunner;                                                                                  // 17\n    this.serverRunner = serverRunner;                                                                                  // 17\n    this.options = options;                                                                                            // 17\n    expect(this.clientRunner).to.be.an('object');                                                                      // 17\n    expect(this.serverRunner).to.be.an('object');                                                                      // 17\n    expect(this.options).to.be.an('object');                                                                           // 17\n    this.clientStats = {                                                                                               // 17\n      total: this.clientRunner.total,                                                                                  // 21\n      suites: 0,                                                                                                       // 21\n      tests: 0,                                                                                                        // 21\n      passes: 0,                                                                                                       // 21\n      pending: 0,                                                                                                      // 21\n      failures: 0                                                                                                      // 21\n    };                                                                                                                 //\n    this.serverStats = {                                                                                               // 17\n      total: this.serverRunner.total,                                                                                  // 22\n      suites: 0,                                                                                                       // 22\n      tests: 0,                                                                                                        // 22\n      passes: 0,                                                                                                       // 22\n      pending: 0,                                                                                                      // 22\n      failures: 0                                                                                                      // 22\n    };                                                                                                                 //\n    this.stats = {                                                                                                     // 17\n      total: this.serverRunner.total + this.clientRunner.total,                                                        // 23\n      suites: 0,                                                                                                       // 23\n      tests: 0,                                                                                                        // 23\n      passes: 0,                                                                                                       // 23\n      pending: 0,                                                                                                      // 23\n      failures: 0                                                                                                      // 23\n    };                                                                                                                 //\n    this.failures = [];                                                                                                // 17\n    this.clientRunner.stats = this.clientStats;                                                                        // 17\n    this.serverRunner.stats = this.serverStats;                                                                        // 17\n    this.registerRunnerEvents(\"server\");                                                                               // 17\n    this.registerRunnerEvents(\"client\");                                                                               // 17\n    MochaRunner.on(\"end all\", (function(_this) {                                                                       // 17\n      return function() {                                                                                              //\n        window.TEST_STATUS = {                                                                                         // 34\n          FAILURES: _this.stats.failures,                                                                              // 34\n          DONE: true                                                                                                   // 34\n        };                                                                                                             //\n        window.DONE = true;                                                                                            // 34\n        return window.FAILURES = _this.stats.failures;                                                                 //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  ClientServerBaseReporter.prototype.registerRunnerEvents = function(where) {                                          // 16\n    this[where + \"Runner\"].on('start', (function(_this) {                                                              // 40\n      return function() {                                                                                              //\n        var base, start;                                                                                               // 41\n        start = new Date();                                                                                            // 41\n        _this[where + \"Stats\"].start = start;                                                                          // 41\n        if ((base = _this.stats).start == null) {                                                                      //\n          base.start = start;                                                                                          //\n        }                                                                                                              //\n                                                                                                                       // 45\n        /*                                                                                                             // 45\n          The total and other stats of the server runner are sent with the 'start' event,                              //\n          so we need to update the total of the stats.                                                                 //\n          Also when running in 'serial' mode (server test first and then client tests),                                //\n          clientRunner.total is undefined because client starts running after server tests end.                        //\n         */                                                                                                            //\n        _this.clientStats.total = _this.clientRunner.total;                                                            // 41\n        _this.serverStats.total = _this.serverRunner.total;                                                            // 41\n        return _this.stats.total = _this.clientStats.total + _this.serverStats.total;                                  //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('suite', (function(_this) {                                                              // 40\n      return function(suite) {                                                                                         //\n        if (!suite.root) {                                                                                             // 57\n          _this.stats.suites++;                                                                                        // 58\n          return _this[where + \"Stats\"].suites++;                                                                      //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('test end', (function(_this) {                                                           // 40\n      return function(test) {                                                                                          //\n        return _this.stats.tests++;                                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('pass', (function(_this) {                                                               // 40\n      return function(test) {                                                                                          //\n        var medium;                                                                                                    // 65\n        medium = test.slow() / 2;                                                                                      // 65\n        if (test.duration > test.slow()) {                                                                             // 67\n          test.speed = 'slow';                                                                                         // 68\n        } else if (test.duration > medium) {                                                                           //\n          test.speed = 'medium';                                                                                       // 70\n        } else {                                                                                                       //\n          test.speed = 'fast';                                                                                         // 72\n        }                                                                                                              //\n        _this[where + \"Stats\"].passes++;                                                                               // 65\n        return _this.stats.passes++;                                                                                   //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('fail', (function(_this) {                                                               // 40\n      return function(test, err) {                                                                                     //\n        if (test.err == null) {                                                                                        //\n          test.err = err;                                                                                              //\n        }                                                                                                              //\n        _this.failures.push(test);                                                                                     // 78\n        _this.stats.failures++;                                                                                        // 78\n        return _this[where + \"Stats\"].failures++;                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('end', (function(_this) {                                                                // 40\n      return function() {                                                                                              //\n        var end;                                                                                                       // 86\n        end = new Date();                                                                                              // 86\n        _this.stats.end = end;                                                                                         // 86\n        _this[where + \"Stats\"].end = end;                                                                              // 86\n        _this.stats.duration = _this.stats.end - _this.stats.start;                                                    // 86\n        return _this[where + \"Stats\"].duration = _this[where + \"Stats\"].end - _this[where + \"Stats\"].start;            //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this[where + \"Runner\"].on('pending', (function(_this) {                                                     //\n      return function() {                                                                                              //\n        _this.stats.pending++;                                                                                         // 95\n        return _this[where + \"Stats\"].pending++;                                                                       //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ClientServerBaseReporter;                                                                                     //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = ClientServerBaseReporter;                                                                             // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ClientServerReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientServerReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerReporter, EventEmitter, MirrorReporter, MochaRunner, ObjectLogger, _, log,                             // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };                                    //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nMochaRunner = require(\"./../lib/MochaRunner\");                                                                         // 1\n                                                                                                                       //\nMirrorReporter = require('./MirrorReporter');                                                                          // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nEventEmitter = require(\"events\").EventEmitter;                                                                         // 1\n                                                                                                                       //\nlog = new ObjectLogger('ClientServerReporter', 'info');                                                                // 1\n                                                                                                                       //\nClientServerReporter = (function() {                                                                                   // 1\n  function ClientServerReporter(clientRunner1, options) {                                                              // 12\n    this.clientRunner = clientRunner1;                                                                                 // 13\n    this.options = options != null ? options : {};                                                                     // 13\n    this.runTestsSerially = bind(this.runTestsSerially, this);                                                         // 13\n    try {                                                                                                              // 13\n      log.enter('constructor');                                                                                        // 14\n      this.serverRunnerProxy = new EventEmitter();                                                                     // 14\n      if (this.options.runOrder === \"serial\") {                                                                        // 17\n        this.clientRunner = new EventEmitter();                                                                        // 18\n        this.runTestsSerially(this.clientRunner, this.serverRunnerProxy);                                              // 18\n      }                                                                                                                //\n      if (!MochaRunner.reporter) {                                                                                     // 21\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\");                  // 22\n        return;                                                                                                        // 23\n      }                                                                                                                //\n      this.reporter = new MochaRunner.reporter(this.clientRunner, this.serverRunnerProxy, this.options);               // 14\n      this.clientRunner.on(\"start\", function() {                                                                       // 14\n        return window.mochaIsRunning = true;                                                                           //\n      });                                                                                                              //\n      this.clientRunner.on(\"end\", (function(_this) {                                                                   // 14\n        return function() {                                                                                            //\n          window.mochaIsRunning = false;                                                                               // 32\n          window.mochaIsDone = true;                                                                                   // 32\n          MochaRunner.emit(\"end client\");                                                                              // 32\n          _this.clientTestsEnded = true;                                                                               // 32\n          if (_this.serverTestsEnded) {                                                                                // 37\n            return MochaRunner.emit(\"end all\");                                                                        //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.serverRunnerProxy.on('end', (function(_this) {                                                              // 14\n        return function() {                                                                                            //\n          _this.serverTestsEnded = true;                                                                               // 41\n          MochaRunner.emit(\"end server\");                                                                              // 41\n          if (_this.clientTestsEnded) {                                                                                // 43\n            return MochaRunner.emit(\"end all\");                                                                        //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      MochaRunner.serverRunEvents.find().observe({                                                                     // 14\n        added: _.bind(this.onServerRunnerEvent, this)                                                                  // 46\n      });                                                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 51\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  ClientServerReporter.prototype.runTestsSerially = function(clientRunner, serverRunnerProxy) {                        // 12\n    try {                                                                                                              // 55\n      log.enter(\"runTestsSerially\");                                                                                   // 56\n      return serverRunnerProxy.on(\"end\", (function(_this) {                                                            //\n        return function() {                                                                                            //\n          mocha.reporter(MirrorReporter, {                                                                             // 58\n            clientRunner: clientRunner                                                                                 // 58\n          });                                                                                                          //\n          return mocha.run(function() {});                                                                             //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 64\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ClientServerReporter.prototype.onServerRunnerEvent = function(doc) {                                                 // 12\n    var ex, ref;                                                                                                       // 68\n    try {                                                                                                              // 68\n      log.enter('onServerRunnerEvent');                                                                                // 69\n      expect(doc).to.be.an('object');                                                                                  // 69\n      expect(doc.event).to.be.a('string');                                                                             // 69\n      if (doc.event === \"run mocha\") {                                                                                 // 72\n        return;                                                                                                        // 73\n      }                                                                                                                //\n      expect(doc.data).to.be.an('object');                                                                             // 69\n      doc.data.fullTitle = function() {                                                                                // 69\n        return doc.data._fullTitle;                                                                                    // 77\n      };                                                                                                               //\n      doc.data.slow = function() {                                                                                     // 69\n        return doc.data._slow;                                                                                         // 78\n      };                                                                                                               //\n      if ((ref = doc.data.err) != null) {                                                                              //\n        ref.toString = function() {                                                                                    //\n          return \"Error: \" + this.message;                                                                             //\n        };                                                                                                             //\n      }                                                                                                                //\n      if (doc.data.parent) {                                                                                           // 81\n        doc.data.parent.fullTitle = function() {                                                                       // 82\n          return doc.data.parent._fullTitle;                                                                           // 82\n        };                                                                                                             //\n        doc.data.parent.slow = function() {                                                                            // 82\n          return doc.data.parent._slow;                                                                                // 83\n        };                                                                                                             //\n      }                                                                                                                //\n      if (doc.event === 'start') {                                                                                     // 86\n        this.serverRunnerProxy.stats = doc.data;                                                                       // 87\n        this.serverRunnerProxy.total = doc.data.total;                                                                 // 87\n      }                                                                                                                //\n      return this.serverRunnerProxy.emit(doc.event, doc.data, doc.data.err);                                           //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 93\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 95\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ClientServerReporter;                                                                                         //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = ClientServerReporter;                                                                                 // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ConsoleReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./ConsoleReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ConsoleReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, ConsoleReporter, MochaRunner, ObjectLogger, log,                                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");                                                      // 1\n                                                                                                                       //\nlog = new ObjectLogger('ConsoleReporter', 'info');                                                                     // 1\n                                                                                                                       //\nConsoleReporter = (function(superClass) {                                                                              // 1\n  extend(ConsoleReporter, superClass);                                                                                 // 11\n                                                                                                                       //\n  function ConsoleReporter(clientRunner, serverRunner, options) {                                                      // 11\n    this.clientRunner = clientRunner;                                                                                  // 12\n    this.serverRunner = serverRunner;                                                                                  // 12\n    this.options = options;                                                                                            // 12\n    this.finishAndPrintTestsSummary = bind(this.finishAndPrintTestsSummary, this);                                     // 12\n    this.printReporterHeader = bind(this.printReporterHeader, this);                                                   // 12\n    try {                                                                                                              // 12\n      log.enter('constructor');                                                                                        // 13\n      ConsoleReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);            // 13\n      MochaRunner.on(\"end all\", (function(_this) {                                                                     // 13\n        return function() {                                                                                            //\n          return _this.finishAndPrintTestsSummary();                                                                   //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 18\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 20\n  /*                                                                                                                   // 20\n    Overwriting from ClientServerBaseReporter                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n  ConsoleReporter.prototype.registerRunnerEvents = function(where) {                                                   // 11\n    try {                                                                                                              // 24\n      log.enter(\"registerRunnerEvents\");                                                                               // 25\n      ConsoleReporter.__super__.registerRunnerEvents.call(this, where);                                                // 25\n      this[where + \"Runner\"].on(\"start\", (function(_this) {                                                            // 25\n        return function() {                                                                                            //\n          return _this.printReporterHeader(where);                                                                     //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this[where + \"Runner\"].on('test end', (function(_this) {                                                         // 25\n        return function(test) {                                                                                        //\n          return _this.printTest(test, where);                                                                         //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      return this[where + \"Runner\"].on(\"fail\", (function(_this) {                                                      //\n        return function(hook) {                                                                                        //\n          if (hook.type === 'hook') {                                                                                  // 33\n            return _this.printTest(hook, where);                                                                       //\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 36\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.printReporterHeader = function(where) {                                                    // 11\n    try {                                                                                                              // 40\n      log.enter(\"printReporterHeader\", where);                                                                         // 41\n      if (this.options.runOrder !== 'serial') {                                                                        // 42\n        return;                                                                                                        // 42\n      }                                                                                                                //\n      where = where[0].toUpperCase() + where.substr(1);                                                                // 41\n      console.log(\"\\n--------------------------------------------------\");                                             // 41\n      console.log(\"------------------ \" + where + \" tests ------------------\");                                        // 41\n      return console.log(\"--------------------------------------------------\\n\");                                      //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 49\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.printTest = function(test, where) {                                                        // 11\n    var state;                                                                                                         // 53\n    try {                                                                                                              // 53\n      log.enter(\"prinTest\", test);                                                                                     // 54\n      state = test.state || (test.pending ? \"pending\" : void 0);                                                       // 54\n      if (this.options.runOrder === 'serial') {                                                                        // 59\n        where = \"\";                                                                                                    // 60\n      } else {                                                                                                         //\n        where = where[0].toUpperCase() + \": \";                                                                         // 63\n      }                                                                                                                //\n      console.log(\"\" + where + (test.fullTitle()) + \" : \" + state);                                                    // 54\n      if (test.state === \"failed\") {                                                                                   // 67\n        console.log(\"  \" + (test.err.stack || test.err));                                                              // 68\n      }                                                                                                                //\n      return console.log(\"\");                                                                                          //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 72\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  ConsoleReporter.prototype.finishAndPrintTestsSummary = function() {                                                  // 11\n    var ref, ref1;                                                                                                     // 76\n    try {                                                                                                              // 76\n      log.enter(\"finishAndPrintTestsSummary\");                                                                         // 77\n      if ((((ref = this.clientStats) != null ? ref.total : void 0) == null) || (((ref1 = this.serverStats) != null ? ref1.total : void 0) == null)) {\n        return;                                                                                                        // 78\n      }                                                                                                                //\n      console.log(\"\\n--------------------------------------------------\");                                             // 77\n      console.log(\"---------------------RESULTS----------------------\");                                               // 77\n      console.log(\"PASSED:\", this.stats.passes);                                                                       // 77\n      console.log(\"FAILED:\", this.stats.failures);                                                                     // 77\n      console.log(\"SKIPPED:\", this.stats.pending);                                                                     // 77\n      console.log(\"TOTAL:\", this.stats.total);                                                                         // 77\n      console.log(\"--------------------------------------------------\");                                               // 77\n      return console.log(\"--------------------------------------------------\\n\");                                      //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 89\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return ConsoleReporter;                                                                                              //\n                                                                                                                       //\n})(ClientServerBaseReporter);                                                                                          //\n                                                                                                                       //\nmodule.exports = ConsoleReporter;                                                                                      // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HtmlReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./HtmlReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HtmlReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, HtmlReporter, MochaHtmlReporter, MochaRunner, ObjectLogger, log,                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nMochaHtmlReporter = require(\"./html\");                                                                                 // 1\n                                                                                                                       //\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");                                                      // 1\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nlog = new ObjectLogger('HtmlReporter', 'info');                                                                        // 1\n                                                                                                                       //\nHtmlReporter = (function(superClass) {                                                                                 // 1\n  extend(HtmlReporter, superClass);                                                                                    // 10\n                                                                                                                       //\n  function HtmlReporter(clientRunner, serverRunner, options) {                                                         // 10\n    this.clientRunner = clientRunner;                                                                                  // 11\n    this.serverRunner = serverRunner;                                                                                  // 11\n    this.options = options != null ? options : {};                                                                     // 11\n    this.addReporterHtml = bind(this.addReporterHtml, this);                                                           // 11\n    try {                                                                                                              // 11\n      log.enter('constructor');                                                                                        // 12\n      this.addReporterHtml();                                                                                          // 12\n      this.reporter = new MochaHtmlReporter(this.clientRunner);                                                        // 12\n      this.serverReporter = new MochaHtmlReporter(this.serverRunner, {                                                 // 12\n        elementIdPrefix: 'server-'                                                                                     // 16\n      });                                                                                                              //\n      HtmlReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);               // 12\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 21\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 23\n  /*                                                                                                                   // 23\n    Adds the html required by the mocha HTML reporter to the body of the html                                          //\n    document. We modified the mocha HTML reporter to be able to display 2 reporters                                    //\n    at the same time, one for client tests and one for server tests.                                                   //\n    TODO: Create a single meteor reactive reporter.                                                                    //\n   */                                                                                                                  //\n                                                                                                                       //\n  HtmlReporter.prototype.addReporterHtml = function() {                                                                // 10\n    var div;                                                                                                           // 30\n    try {                                                                                                              // 30\n      log.enter(\"addReporterHtml\");                                                                                    // 31\n      div = document.createElement('div');                                                                             // 31\n      div.className = 'mocha-wrapper';                                                                                 // 31\n      div.innerHTML = '<div class=\"content\"> <div class=\"test-wrapper\"> <h1 class=\"title\">Client tests</h1> <div id=\"mocha\" class=\"mocha\"></div> </div> <div class=\"divider\"></div> <div class=\"test-wrapper\"> <h1 class=\"title\">Server tests</h1> <div id=\"server-mocha\" class=\"mocha\"></div> </div> </div>';\n      return document.body.appendChild(div);                                                                           //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 53\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  return HtmlReporter;                                                                                                 //\n                                                                                                                       //\n})(ClientServerBaseReporter);                                                                                          //\n                                                                                                                       //\nmodule.exports = HtmlReporter;                                                                                         // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MeteorPublishReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MeteorPublishReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MeteorPublishReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar BaseReporter, MeteorPublishReporter, ObjectLogger, _, log,                                                         // 1\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\n_ = require(\"underscore\")._;                                                                                           // 1\n                                                                                                                       //\nBaseReporter = require(\"./BaseReporter\");                                                                              // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nlog = new ObjectLogger('MeteorPublishReporter', 'info');                                                               // 1\n                                                                                                                       //\nMeteorPublishReporter = (function(superClass) {                                                                        // 1\n  extend(MeteorPublishReporter, superClass);                                                                           // 9\n                                                                                                                       //\n  MeteorPublishReporter.publisher = null;                                                                              // 9\n                                                                                                                       //\n  function MeteorPublishReporter(runner, options) {                                                                    // 11\n    this.errorJSON = bind(this.errorJSON, this);                                                                       // 12\n    this.added = bind(this.added, this);                                                                               // 12\n    var HTML_REPORTER, REPORTERS, mochaReporter, ref;                                                                  // 12\n    try {                                                                                                              // 12\n      log.enter('constructor', arguments);                                                                             // 13\n      expect(options.reporterOptions, 'options.reporterOptions').to.be.an('object');                                   // 13\n      runner.grep(options.reporterOptions.grep);                                                                       // 13\n      MeteorPublishReporter.__super__.constructor.call(this, runner, options);                                         // 13\n      this.publisher = options.reporterOptions.publisher;                                                              // 13\n      expect(this.publisher, '@publisher').to.be.an('object');                                                         // 13\n      expect(this.publisher.ready, '@publisher.ready').to.be.a('function');                                            // 13\n      expect(this.publisher.added, '@publisher.added').to.be.a('function');                                            // 13\n      expect(this.publisher.onStop, '@publisher.onStop').to.be.a('function');                                          // 13\n      this.publisher.onStop((function(_this) {                                                                         // 13\n        return function() {                                                                                            //\n          return _this.stopped = true;                                                                                 //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.stopped = false;                                                                                            // 13\n      this.sequence = 0;                                                                                               // 13\n      this.added = Meteor.bindEnvironment(this.added, null, this);                                                     // 13\n      ref = require(\"./index\"), REPORTERS = ref.REPORTERS, HTML_REPORTER = ref.HTML_REPORTER;                          // 13\n      mochaReporter = process.env.MOCHA_REPORTER || HTML_REPORTER;                                                     // 13\n      if (mochaReporter && !_.contains(REPORTERS, mochaReporter)) {                                                    // 39\n        log.info(\"Can't find '\" + mochaReporter + \"' reporter. Using '\" + HTML_REPORTER + \"' instead.\");               // 40\n        mochaReporter = HTML_REPORTER;                                                                                 // 40\n      }                                                                                                                //\n      this.added('run mocha', {                                                                                        // 13\n        reporter: mochaReporter,                                                                                       // 45\n        runOrder: process.env.MOCHA_RUN_ORDER || 'parallel'                                                            // 45\n      });                                                                                                              //\n      this.runner.on('start', (function(_this) {                                                                       // 13\n        return function() {                                                                                            //\n          try {                                                                                                        // 48\n            log.enter('onStart', arguments);                                                                           // 49\n            return _this.added('start', _this.stats);                                                                  //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 53\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('suite', (function(_this) {                                                                       // 13\n        return function(suite) {                                                                                       //\n          try {                                                                                                        // 56\n            log.enter('onSuite', arguments);                                                                           // 57\n            return _this.added('suite', _this.cleanSuite(suite));                                                      //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 63\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('suite end', (function(_this) {                                                                   // 13\n        return function(suite) {                                                                                       //\n          try {                                                                                                        // 66\n            log.enter('onSuiteEnd', arguments);                                                                        // 67\n            return _this.added('suite end', _this.cleanSuite(suite));                                                  //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 70\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('test end', (function(_this) {                                                                    // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 73\n            log.enter('onTestEnd', arguments);                                                                         // 74\n            return _this.added('test end', _this.cleanTest(test));                                                     //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 77\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('pass', (function(_this) {                                                                        // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 80\n            log.enter('onPass', arguments);                                                                            // 81\n            return _this.added('pass', _this.cleanTest(test));                                                         //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 84\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('fail', (function(_this) {                                                                        // 13\n        return function(test, error) {                                                                                 //\n          try {                                                                                                        // 87\n            log.enter('onFail', arguments);                                                                            // 88\n            return _this.added('fail', _this.cleanTest(test));                                                         //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 91\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('end', (function(_this) {                                                                         // 13\n        return function() {                                                                                            //\n          try {                                                                                                        // 94\n            log.enter('onEnd', arguments);                                                                             // 95\n            return _this.added('end', _this.stats);                                                                    //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 98\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n      this.runner.on('pending', (function(_this) {                                                                     // 13\n        return function(test) {                                                                                        //\n          try {                                                                                                        // 101\n            log.enter('onPending', arguments);                                                                         // 102\n            log.debug(\"test\", test);                                                                                   // 102\n            return _this.added('pending', _this.cleanTest(test));                                                      //\n          } finally {                                                                                                  //\n            log[\"return\"]();                                                                                           // 106\n          }                                                                                                            //\n        };                                                                                                             //\n      })(this));                                                                                                       //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 108\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.added = function(event, data) {                                                      // 9\n    var doc, ex;                                                                                                       // 112\n    try {                                                                                                              // 112\n      log.enter('added', arguments);                                                                                   // 113\n      if (this.stopped === true) {                                                                                     // 115\n        return;                                                                                                        // 115\n      }                                                                                                                //\n      this.sequence++;                                                                                                 // 113\n      doc = {                                                                                                          // 113\n        _id: \"\" + this.sequence,                                                                                       // 118\n        event: event,                                                                                                  // 118\n        data: data                                                                                                     // 118\n      };                                                                                                               //\n      return this.publisher.added('mochaServerRunEvents', doc._id, doc);                                               //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 123\n      log.error(\"Can't send report data to client.\");                                                                  // 123\n      log.error(\"Error:\", ex.stack || ex.message);                                                                     // 123\n      return log.error(\"Document:\", doc);                                                                              //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 127\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 130\n  /**                                                                                                                  // 130\n   * Return a plain-object representation of `test`                                                                    //\n   * free of cyclic properties etc.                                                                                    //\n  #                                                                                                                    //\n   * @param {Object} test                                                                                              //\n   * @return {Object}                                                                                                  //\n   * @api private                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.cleanTest = function(test) {                                                         // 9\n    var ex, properties, ref;                                                                                           // 139\n    try {                                                                                                              // 139\n      log.enter(\"cleanTest\", arguments);                                                                               // 140\n      properties = [\"title\", \"type\", \"state\", \"speed\", \"pending\", \"duration\", \"async\", \"sync\", \"_timeout\", \"_slow\", \"body\"];\n      return _.extend(_.pick(test, properties), {                                                                      // 144\n        _fullTitle: test.fullTitle(),                                                                                  // 144\n        parent: this.cleanSuite(test.parent),                                                                          // 144\n        fn: (ref = test.fn) != null ? ref.toString() : void 0,                                                         // 144\n        err: this.errorJSON(test.err),                                                                                 // 144\n        isServer: true                                                                                                 // 144\n      });                                                                                                              //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 153\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 156\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.cleanSuite = function(suite) {                                                       // 9\n    var ex;                                                                                                            // 160\n    try {                                                                                                              // 160\n      log.enter(\"cleanSuite\", arguments);                                                                              // 161\n      return _.extend(_.pick(suite, [\"title\", \"root\", \"pending\"]), {                                                   // 162\n        _fullTitle: suite.fullTitle(),                                                                                 // 162\n        isServer: true                                                                                                 // 162\n      });                                                                                                              //\n    } catch (_error) {                                                                                                 //\n      ex = _error;                                                                                                     // 167\n      return log.error(ex);                                                                                            //\n    } finally {                                                                                                        //\n      log[\"return\"]();                                                                                                 // 169\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 171\n  /**                                                                                                                  // 171\n   * Transform `error` into a JSON object.                                                                             //\n   * @param {Error} err                                                                                                //\n   * @return {Object}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  MeteorPublishReporter.prototype.errorJSON = function(err) {                                                          // 9\n    if (!err) {                                                                                                        // 178\n      return;                                                                                                          // 178\n    }                                                                                                                  //\n                                                                                                                       // 179\n    /*                                                                                                                 // 179\n      Only picking the defaults properties define by ECMAScript to avoid problems                                      //\n      with custom error that may have properties that can't be stringify such as functions.                            //\n      See https://goo.gl/bsZh3B and https://goo.gl/AFp6KB                                                              //\n     */                                                                                                                //\n    return _.pick(err, [\"name\", \"message\", \"stack\"]);                                                                  // 184\n  };                                                                                                                   //\n                                                                                                                       //\n  return MeteorPublishReporter;                                                                                        //\n                                                                                                                       //\n})(BaseReporter);                                                                                                      //\n                                                                                                                       //\nmodule.exports = MeteorPublishReporter;                                                                                // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MirrorReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./MirrorReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MirrorReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar MirrorReporter, ObjectLogger, log;                                                                                 // 1\n                                                                                                                       //\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;                                                // 1\n                                                                                                                       //\nlog = new ObjectLogger('MirrorReporter', 'info');                                                                      // 1\n                                                                                                                       //\nMirrorReporter = (function() {                                                                                         // 1\n  function MirrorReporter(mochaReporter, options) {                                                                    // 6\n    var clientRunner, ref;                                                                                             // 8\n    this.mochaReporter = mochaReporter;                                                                                // 8\n    clientRunner = (ref = options.reporterOptions) != null ? ref.clientRunner : void 0;                                // 8\n    expect(clientRunner, \"clientRunner\").to.be.ok;                                                                     // 8\n    clientRunner.total = this.mochaReporter.total;                                                                     // 8\n    this.mochaReporter.on('start', (function(_this) {                                                                  // 8\n      return function() {                                                                                              //\n        try {                                                                                                          // 15\n          log.enter('onStart', arguments);                                                                             // 16\n          return clientRunner.emit.call(clientRunner, 'start');                                                        //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 19\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('suite', (function(_this) {                                                                  // 8\n      return function(suite) {                                                                                         //\n        try {                                                                                                          // 22\n          log.enter('onSuite', arguments);                                                                             // 23\n          return clientRunner.emit.call(clientRunner, 'suite', suite);                                                 //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 26\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('suite end', (function(_this) {                                                              // 8\n      return function(suite) {                                                                                         //\n        try {                                                                                                          // 29\n          log.enter('onSuiteEnd', arguments);                                                                          // 30\n          return clientRunner.emit.call(clientRunner, 'suite end', suite);                                             //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 33\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('test end', (function(_this) {                                                               // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 36\n          log.enter('onTestEnd', arguments);                                                                           // 37\n          return clientRunner.emit.call(clientRunner, 'test end', test);                                               //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 40\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('pass', (function(_this) {                                                                   // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 43\n          log.enter('onPass', arguments);                                                                              // 44\n          return clientRunner.emit.call(clientRunner, 'pass', test);                                                   //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 47\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('fail', (function(_this) {                                                                   // 8\n      return function(test, error) {                                                                                   //\n        try {                                                                                                          // 50\n          log.enter('onFail', arguments);                                                                              // 51\n          return clientRunner.emit.call(clientRunner, 'fail', test, error);                                            //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 54\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('end', (function(_this) {                                                                    // 8\n      return function() {                                                                                              //\n        try {                                                                                                          // 57\n          log.enter('onEnd', arguments);                                                                               // 58\n          return clientRunner.emit.call(clientRunner, 'end');                                                          //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 61\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.mochaReporter.on('pending', (function(_this) {                                                                // 8\n      return function(test) {                                                                                          //\n        try {                                                                                                          // 64\n          log.enter('onPending', arguments);                                                                           // 65\n          return clientRunner.emit.call(clientRunner, 'pending', test);                                                //\n        } finally {                                                                                                    //\n          log[\"return\"]();                                                                                             // 69\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  }                                                                                                                    //\n                                                                                                                       //\n  return MirrorReporter;                                                                                               //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\nmodule.exports = MirrorReporter;                                                                                       // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"XunitReporter.coffee\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./XunitReporter.coffee.js\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"XunitReporter.coffee.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ConsoleReporter, MochaRunner, XUnitReporter,                                                                       // 1\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                         //\n                                                                                                                       //\nMochaRunner = require(\"../lib/MochaRunner\");                                                                           // 1\n                                                                                                                       //\nConsoleReporter = require(\"./ConsoleReporter\");                                                                        // 1\n                                                                                                                       //\nXUnitReporter = (function(superClass) {                                                                                // 1\n  extend(XUnitReporter, superClass);                                                                                   // 6\n                                                                                                                       //\n  XUnitReporter.VERSION = \"0.1.0\";                                                                                     // 6\n                                                                                                                       //\n  XUnitReporter.prototype.xUnitPrefix = \"##_meteor_magic##xunit: \";                                                    // 6\n                                                                                                                       //\n  function XUnitReporter(clientRunner, serverRunner, options) {                                                        // 9\n    this.clientRunner = clientRunner;                                                                                  // 11\n    this.serverRunner = serverRunner;                                                                                  // 11\n    this.options = options;                                                                                            // 11\n    this.clientTests = [];                                                                                             // 11\n    this.serverTests = [];                                                                                             // 11\n    MochaRunner.on(\"end all\", (function(_this) {                                                                       // 11\n      return function() {                                                                                              //\n        return _this.printTestSuite();                                                                                 //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    XUnitReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);                // 11\n  }                                                                                                                    //\n                                                                                                                       //\n                                                                                                                       // 21\n  /*                                                                                                                   // 21\n    Overwrite from ConsoleReporter                                                                                     //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.registerRunnerEvents = function(where) {                                                     // 6\n    XUnitReporter.__super__.registerRunnerEvents.call(this, where);                                                    // 26\n    this[where + \"Runner\"].on('pending', (function(_this) {                                                            // 26\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this[where + \"Runner\"].on('pass', (function(_this) {                                                               // 26\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this[where + \"Runner\"].on('fail', (function(_this) {                                                        //\n      return function(test) {                                                                                          //\n        return _this[where + \"Tests\"].push(test);                                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  XUnitReporter.prototype.printTestSuite = function() {                                                                // 6\n    var testSuite;                                                                                                     // 40\n    testSuite = {                                                                                                      // 40\n      name: 'Mocha Tests',                                                                                             // 40\n      tests: this.stats.total,                                                                                         // 40\n      failures: this.stats.failures,                                                                                   // 40\n      errors: this.stats.failures,                                                                                     // 40\n      timestamp: (new Date).toUTCString(),                                                                             // 40\n      time: this.stats.duration / 1000 || 0,                                                                           // 40\n      skipped: this.stats.pending                                                                                      // 40\n    };                                                                                                                 //\n    this.write(this.createTag('testsuite', testSuite, false));                                                         // 40\n    this.clientTests.forEach((function(_this) {                                                                        // 40\n      return function(test) {                                                                                          //\n        return _this.printTestCase(test, \"Client\");                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    this.serverTests.forEach((function(_this) {                                                                        // 40\n      return function(test) {                                                                                          //\n        return _this.printTestCase(test, \"Server\");                                                                    //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this.write('</testsuite>');                                                                                 //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 61\n  /**                                                                                                                  // 61\n   * HTML tag helper.                                                                                                  //\n  #                                                                                                                    //\n   * @param name                                                                                                       //\n   * @param attrs                                                                                                      //\n   * @param close                                                                                                      //\n   * @param content                                                                                                    //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.createTag = function(name, attrs, close, content) {                                          // 6\n    var end, key, pairs, tag;                                                                                          // 71\n    if (attrs == null) {                                                                                               //\n      attrs = {};                                                                                                      //\n    }                                                                                                                  //\n    end = close ? '/>' : '>';                                                                                          // 71\n    pairs = [];                                                                                                        // 71\n    tag = void 0;                                                                                                      // 71\n    for (key in attrs) {                                                                                               // 75\n      if (Object.prototype.hasOwnProperty.call(attrs, key)) {                                                          // 76\n        pairs.push(key + '=\"' + this.escape(attrs[key]) + '\"');                                                        // 77\n      }                                                                                                                //\n    }                                                                                                                  // 75\n    tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;                                              // 71\n    if (content) {                                                                                                     // 81\n      tag += content + '</' + name + end;                                                                              // 82\n    }                                                                                                                  //\n    return tag;                                                                                                        // 84\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 86\n  /**                                                                                                                  // 86\n   * Return cdata escaped CDATA `str`.                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.cdata = function(str) {                                                                      // 6\n    return '<![CDATA[' + this.escape(str) + ']]>';                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 93\n  /**                                                                                                                  // 93\n   * Override done to close the stream (if it's a file).                                                               //\n  #                                                                                                                    //\n   * @param failures                                                                                                   //\n   * @param {Function} fn                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.done = function(failures, fn) {                                                              // 6\n    return fn(failures);                                                                                               //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 103\n  /**                                                                                                                  // 103\n   * Write out the given line.                                                                                         //\n  #                                                                                                                    //\n   * @param {string} line                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.write = function(line) {                                                                     // 6\n    return console.log(this.xUnitPrefix + line);                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 112\n  /**                                                                                                                  // 112\n   * Output tag for the given `test.`                                                                                  //\n  #                                                                                                                    //\n   * @param {Test} test                                                                                                //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.printTestCase = function(test, where) {                                                      // 6\n    var attrs, err, stack;                                                                                             // 119\n    attrs = {                                                                                                          // 119\n      classname: where + \" \" + (test.parent.fullTitle()),                                                              // 120\n      name: test.title,                                                                                                // 120\n      time: test.duration / 1000 || 0                                                                                  // 120\n    };                                                                                                                 //\n    if (test.state === 'failed') {                                                                                     // 124\n      err = test.err;                                                                                                  // 125\n      stack = this.escapeStack(err.stack);                                                                             // 125\n      this.write(this.createTag('testcase', attrs, false, this.createTag('failure', {}, false, this.cdata(this.escape(err.message) + '\\n' + stack))));\n    } else if (test.pending) {                                                                                         //\n      this.write(this.createTag('testcase', attrs, false, this.createTag('skipped', {}, true)));                       // 129\n    } else {                                                                                                           //\n      this.write(this.createTag('testcase', attrs, true));                                                             // 131\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 135\n  /**                                                                                                                  // 135\n   * Escape special characters in the given string of html.                                                            //\n  #                                                                                                                    //\n   * @api private                                                                                                      //\n   * @param  {string} html                                                                                             //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.escape = function(html) {                                                                    // 6\n    return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');    //\n  };                                                                                                                   //\n                                                                                                                       //\n                                                                                                                       // 151\n  /**                                                                                                                  // 151\n   * For each line add the @xUnitPrefix and escape special characters in the given string of html.                     //\n  #                                                                                                                    //\n   * @api private                                                                                                      //\n   * @param  {string} stack                                                                                            //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n  XUnitReporter.prototype.escapeStack = function(stack) {                                                              // 6\n    if (stack == null) {                                                                                               //\n      stack = \"\";                                                                                                      //\n    }                                                                                                                  //\n    return stack.split(\"\\n\").map((function(_this) {                                                                    // 160\n      return function(s) {                                                                                             //\n        return _this.xUnitPrefix + _this.escape(s);                                                                    //\n      };                                                                                                               //\n    })(this)).join(\"\\n\");                                                                                              //\n  };                                                                                                                   //\n                                                                                                                       //\n  return XUnitReporter;                                                                                                //\n                                                                                                                       //\n})(ConsoleReporter);                                                                                                   //\n                                                                                                                       //\nmodule.exports = XUnitReporter;                                                                                        // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"html.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/html.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */ /**                                                                                           // 1\n                          * Module dependencies.                                                                       //\n                          */var Base = require('../../../lib/reporters/base');                                         //\n                                                                                                                       //\nvar utils = require('../../../lib/utils');                                                                             // 7\n                                                                                                                       //\nvar Progress = require('../../../lib/browser/progress');                                                               // 8\n                                                                                                                       //\nvar escapeRe = require('escape-string-regexp');                                                                        // 9\n                                                                                                                       //\nvar escape = utils.escape; /**                                                                                         // 10\n                            * Save timer references to avoid Sinon interfering (see GH-237).                           //\n                            */ /* eslint-disable no-unused-vars, no-native-reassign */                                 //\nvar Date = global.Date;                                                                                                // 16\nvar setTimeout = global.setTimeout;                                                                                    // 17\nvar setInterval = global.setInterval;                                                                                  // 18\nvar clearTimeout = global.clearTimeout;                                                                                // 19\nvar clearInterval = global.clearInterval; /* eslint-enable no-unused-vars, no-native-reassign */ /**                   // 20\n                                                                                                  * Expose `HTML`.     //\n                                                                                                  */                   //\nexports = module.exports = HTML; /**                                                                                   // 27\n                                  * Initialize a new `HTML` reporter.                                                  //\n                                  *                                                                                    //\n                                  * @param {Runner} runner                                                             //\n                                  * @api public                                                                        //\n                                  */                                                                                   //\n                                                                                                                       //\nfunction HTML(runner, options) {                                                                                       // 36\n  Base.call(this, runner);                                                                                             // 37\n  options = options || {};                                                                                             // 38\n  options.elementIdPrefix = options.elementIdPrefix || \"\"; /**                                                         // 39\n                                                            * Stats template.                                          //\n                                                            */                                                         //\n  var statsTemplate = '<ul id=\"' + options.elementIdPrefix + 'mocha-stats\"' + ' class=\"mocha-stats\">' + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>' + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>' + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>' + '<li class=\"duration\">duration: <em>0</em>s</li>' + '</ul>';\n  var self = this,                                                                                                     // 53\n      stats = this.stats,                                                                                              // 53\n      stat = fragment(statsTemplate),                                                                                  // 53\n      items = stat.getElementsByTagName('li'),                                                                         // 53\n      passes = items[1].getElementsByTagName('em')[0],                                                                 // 53\n      passesLink = items[1].getElementsByTagName('a')[0],                                                              // 53\n      failures = items[2].getElementsByTagName('em')[0],                                                               // 53\n      failuresLink = items[2].getElementsByTagName('a')[0],                                                            // 53\n      duration = items[3].getElementsByTagName('em')[0],                                                               // 53\n      canvas = stat.getElementsByTagName('canvas')[0],                                                                 // 53\n      report = fragment('<ul id=\"' + options.elementIdPrefix + 'mocha-report\"' + ' class=\"mocha-report\"></ul>'),       // 53\n      stack = [report],                                                                                                // 53\n      progress,                                                                                                        // 53\n      ctx,                                                                                                             // 53\n      root = document.getElementById(options.elementIdPrefix + 'mocha');                                               // 53\n                                                                                                                       //\n  if (canvas.getContext) {                                                                                             // 70\n    var ratio = window.devicePixelRatio || 1;                                                                          // 71\n    canvas.style.width = canvas.width;                                                                                 // 72\n    canvas.style.height = canvas.height;                                                                               // 73\n    canvas.width *= ratio;                                                                                             // 74\n    canvas.height *= ratio;                                                                                            // 75\n    ctx = canvas.getContext('2d');                                                                                     // 76\n    ctx.scale(ratio, ratio);                                                                                           // 77\n    progress = new Progress();                                                                                         // 78\n  }                                                                                                                    // 79\n                                                                                                                       //\n  if (!root) {                                                                                                         // 81\n    return error(options.elementIdPrefix + 'mocha div missing, add it to your document');                              // 82\n  } // pass toggle                                                                                                     // 83\n                                                                                                                       //\n                                                                                                                       //\n  on(passesLink, 'click', function () {                                                                                // 86\n    unhide();                                                                                                          // 87\n    var name = /pass/.test(report.className) ? '' : ' pass';                                                           // 88\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 89\n                                                                                                                       //\n    if (report.className.trim()) {                                                                                     // 90\n      hideSuitesWithout('test pass');                                                                                  // 91\n    }                                                                                                                  // 92\n  }); // failure toggle                                                                                                // 93\n                                                                                                                       //\n  on(failuresLink, 'click', function () {                                                                              // 96\n    unhide();                                                                                                          // 97\n    var name = /fail/.test(report.className) ? '' : ' fail';                                                           // 98\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                              // 99\n                                                                                                                       //\n    if (report.className.trim()) {                                                                                     // 100\n      hideSuitesWithout('test fail');                                                                                  // 101\n    }                                                                                                                  // 102\n  });                                                                                                                  // 103\n  root.appendChild(stat);                                                                                              // 105\n  root.appendChild(report);                                                                                            // 106\n                                                                                                                       //\n  if (progress) {                                                                                                      // 108\n    progress.size(40);                                                                                                 // 109\n  }                                                                                                                    // 110\n                                                                                                                       //\n  runner.on('suite', function (suite) {                                                                                // 112\n    if (suite.root) {                                                                                                  // 113\n      return;                                                                                                          // 114\n    } // suite                                                                                                         // 115\n                                                                                                                       //\n                                                                                                                       //\n    var url = self.suiteURL(suite);                                                                                    // 118\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title)); // container   // 119\n                                                                                                                       //\n    stack[0].appendChild(el);                                                                                          // 122\n    stack.unshift(document.createElement('ul'));                                                                       // 123\n    el.appendChild(stack[0]);                                                                                          // 124\n  });                                                                                                                  // 125\n  runner.on('suite end', function (suite) {                                                                            // 127\n    if (suite.root) {                                                                                                  // 128\n      return;                                                                                                          // 129\n    }                                                                                                                  // 130\n                                                                                                                       //\n    stack.shift();                                                                                                     // 131\n  });                                                                                                                  // 132\n  runner.on('fail', function (test) {                                                                                  // 134\n    test.body = test.body || test.fn.toString(); // For type = 'test' its possible that the test failed due to multiple\n    // done() calls. So report the issue here.                                                                         // 137\n                                                                                                                       //\n    if (test.type === 'hook') {                                                                                        // 138\n      runner.emit('test end', test);                                                                                   // 139\n    }                                                                                                                  // 140\n  });                                                                                                                  // 141\n  runner.on('test end', function (test) {                                                                              // 143\n    // TODO: add to stats                                                                                              // 144\n    var percent = stats.tests / this.total * 100 | 0;                                                                  // 145\n                                                                                                                       //\n    if (progress) {                                                                                                    // 146\n      progress.update(percent).draw(ctx);                                                                              // 147\n    } // update stats                                                                                                  // 148\n                                                                                                                       //\n                                                                                                                       //\n    var ms = new Date() - stats.start;                                                                                 // 151\n    text(passes, stats.passes);                                                                                        // 152\n    text(failures, stats.failures);                                                                                    // 153\n    text(duration, (ms / 1000).toFixed(2)); // test                                                                    // 154\n                                                                                                                       //\n    var el;                                                                                                            // 157\n                                                                                                                       //\n    if (test.state === 'passed') {                                                                                     // 158\n      var url = self.testURL(test);                                                                                    // 159\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {                                                                                         // 161\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);                                     // 162\n    } else {                                                                                                           // 163\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline                                                               // 165\n                                                                                                                       //\n      var message = test.err.toString(); // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we        // 166\n      // check for the result of the stringifying.                                                                     // 169\n                                                                                                                       //\n      if (message === '[object Error]') {                                                                              // 170\n        message = test.err.message;                                                                                    // 171\n      }                                                                                                                // 172\n                                                                                                                       //\n      if (test.err.stack) {                                                                                            // 174\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);                                                 // 175\n                                                                                                                       //\n        if (indexOfMessage === -1) {                                                                                   // 176\n          stackString = test.err.stack;                                                                                // 177\n        } else {                                                                                                       // 178\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);                               // 179\n        }                                                                                                              // 180\n      } else if (test.err.sourceURL && test.err.line !== undefined) {                                                  // 181\n        // Safari doesn't give you a stack. Let's at least provide a source line.                                      // 182\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';                                          // 183\n      }                                                                                                                // 184\n                                                                                                                       //\n      stackString = stackString || '';                                                                                 // 186\n                                                                                                                       //\n      if (test.err.htmlMessage && stackString) {                                                                       // 188\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {                                                                               // 190\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));                            // 191\n      } else {                                                                                                         // 192\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));                               // 193\n      }                                                                                                                // 194\n    } // toggle code                                                                                                   // 195\n    // TODO: defer                                                                                                     // 198\n                                                                                                                       //\n                                                                                                                       //\n    if (!test.pending) {                                                                                               // 199\n      var h2 = el.getElementsByTagName('h2')[0];                                                                       // 200\n      on(h2, 'click', function () {                                                                                    // 202\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';                                           // 203\n      });                                                                                                              // 204\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));                                        // 206\n      el.appendChild(pre);                                                                                             // 207\n      pre.style.display = 'none';                                                                                      // 208\n    } // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.                               // 209\n                                                                                                                       //\n                                                                                                                       //\n    if (stack[0]) {                                                                                                    // 212\n      stack[0].appendChild(el);                                                                                        // 213\n    }                                                                                                                  // 214\n  });                                                                                                                  // 215\n} /**                                                                                                                  // 216\n   * Makes a URL, preserving querystring (\"search\") parameters.                                                        //\n   *                                                                                                                   //\n   * @param {string} s                                                                                                 //\n   * @return {string} A new URL.                                                                                       //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction makeUrl(s) {                                                                                                  // 224\n  var search = window.location.search; // Remove previous grep query parameter if present                              // 225\n                                                                                                                       //\n  if (search) {                                                                                                        // 228\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');                                               // 229\n  }                                                                                                                    // 230\n                                                                                                                       //\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));         // 232\n} /**                                                                                                                  // 233\n   * Provide suite URL.                                                                                                //\n   *                                                                                                                   //\n   * @param {Object} [suite]                                                                                           //\n   */                                                                                                                  //\n                                                                                                                       //\nHTML.prototype.suiteURL = function (suite) {                                                                           // 240\n  return makeUrl(suite.fullTitle());                                                                                   // 241\n}; /**                                                                                                                 // 242\n    * Provide test URL.                                                                                                //\n    *                                                                                                                  //\n    * @param {Object} [test]                                                                                           //\n    */                                                                                                                 //\n                                                                                                                       //\nHTML.prototype.testURL = function (test) {                                                                             // 249\n  return makeUrl(test.fullTitle());                                                                                    // 250\n}; /**                                                                                                                 // 251\n    * Display error `msg`.                                                                                             //\n    *                                                                                                                  //\n    * @param {string} msg                                                                                              //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction error(msg) {                                                                                                  // 258\n  document.body.appendChild(fragment('<div class=\"mocha-error\">%s</div>', msg));                                       // 259\n} /**                                                                                                                  // 260\n   * Return a DOM fragment from `html`.                                                                                //\n   *                                                                                                                   //\n   * @param {string} html                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction fragment(html) {                                                                                              // 267\n  var args = arguments;                                                                                                // 268\n  var div = document.createElement('div');                                                                             // 269\n  var i = 1;                                                                                                           // 270\n  div.innerHTML = html.replace(/%([se])/g, function (_, type) {                                                        // 272\n    switch (type) {                                                                                                    // 273\n      case 's':                                                                                                        // 274\n        return String(args[i++]);                                                                                      // 274\n                                                                                                                       //\n      case 'e':                                                                                                        // 275\n        return escape(args[i++]);                                                                                      // 275\n      // no default                                                                                                    // 276\n    }                                                                                                                  // 273\n  });                                                                                                                  // 278\n  return div.firstChild;                                                                                               // 280\n} /**                                                                                                                  // 281\n   * Check for suites that do not have elements                                                                        //\n   * with `classname`, and hide them.                                                                                  //\n   *                                                                                                                   //\n   * @param {text} classname                                                                                           //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction hideSuitesWithout(classname) {                                                                                // 289\n  var suites = document.getElementsByClassName('suite');                                                               // 290\n                                                                                                                       //\n  for (var i = 0; i < suites.length; i++) {                                                                            // 291\n    var els = suites[i].getElementsByClassName(classname);                                                             // 292\n                                                                                                                       //\n    if (!els.length) {                                                                                                 // 293\n      suites[i].className += ' hidden';                                                                                // 294\n    }                                                                                                                  // 295\n  }                                                                                                                    // 296\n} /**                                                                                                                  // 297\n   * Unhide .hidden suites.                                                                                            //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction unhide() {                                                                                                    // 302\n  var els = document.getElementsByClassName('suite hidden');                                                           // 303\n                                                                                                                       //\n  for (var i = 0; i < els.length; ++i) {                                                                               // 304\n    els[i].className = els[i].className.replace('suite hidden', 'suite');                                              // 305\n  }                                                                                                                    // 306\n} /**                                                                                                                  // 307\n   * Set an element's text contents.                                                                                   //\n   *                                                                                                                   //\n   * @param {HTMLElement} el                                                                                           //\n   * @param {string} contents                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction text(el, contents) {                                                                                          // 315\n  if (el.textContent) {                                                                                                // 316\n    el.textContent = contents;                                                                                         // 317\n  } else {                                                                                                             // 318\n    el.innerText = contents;                                                                                           // 319\n  }                                                                                                                    // 320\n} /**                                                                                                                  // 321\n   * Listen on `event` with callback `fn`.                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction on(el, event, fn) {                                                                                           // 326\n  if (el.addEventListener) {                                                                                           // 327\n    el.addEventListener(event, fn, false);                                                                             // 328\n  } else {                                                                                                             // 329\n    el.attachEvent('on' + event, fn);                                                                                  // 330\n  }                                                                                                                    // 331\n}                                                                                                                      // 332\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/reporters/index.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  HTML_REPORTER: function () {                                                                                         // 1\n    return HTML_REPORTER;                                                                                              // 1\n  },                                                                                                                   // 1\n  CONSOLE_REPORTER: function () {                                                                                      // 1\n    return CONSOLE_REPORTER;                                                                                           // 1\n  },                                                                                                                   // 1\n  XUNIT_REPORTER: function () {                                                                                        // 1\n    return XUNIT_REPORTER;                                                                                             // 1\n  },                                                                                                                   // 1\n  REPORTERS: function () {                                                                                             // 1\n    return REPORTERS;                                                                                                  // 1\n  },                                                                                                                   // 1\n  reporters: function () {                                                                                             // 1\n    return reporters;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar ConsoleReporter = void 0;                                                                                          // 1\nmodule.watch(require(\"./ConsoleReporter\"), {                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    ConsoleReporter = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar XunitReporter = void 0;                                                                                            // 1\nmodule.watch(require(\"./XunitReporter\"), {                                                                             // 1\n  \"default\": function (v) {                                                                                            // 1\n    XunitReporter = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar HtmlReporter = void 0;                                                                                             // 1\nmodule.watch(require(\"./HtmlReporter\"), {                                                                              // 1\n  \"default\": function (v) {                                                                                            // 1\n    HtmlReporter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar HTML_REPORTER = 'html';                                                                                            // 6\nvar CONSOLE_REPORTER = 'console';                                                                                      // 7\nvar XUNIT_REPORTER = 'xunit';                                                                                          // 8\nvar REPORTERS = [HTML_REPORTER, CONSOLE_REPORTER, XUNIT_REPORTER];                                                     // 9\nvar reporters = {};                                                                                                    // 10\nreporters[HTML_REPORTER] = HtmlReporter;                                                                               // 11\nreporters[CONSOLE_REPORTER] = ConsoleReporter;                                                                         // 12\nreporters[XUNIT_REPORTER] = XunitReporter;                                                                             // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"setup\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/setup/index.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar mochaInstance = void 0;                                                                                            // 1\nmodule.watch(require(\"meteor/practicalmeteor:mocha-core\"), {                                                           // 1\n  mochaInstance: function (v) {                                                                                        // 1\n    mochaInstance = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar setupMochaClient = void 0;                                                                                         // 1\nmodule.watch(require(\"./setupMochaClient\"), {                                                                          // 1\n  \"default\": function (v) {                                                                                            // 1\n    setupMochaClient = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nif (Meteor.isClient) {                                                                                                 // 4\n  setupMochaClient();                                                                                                  // 5\n}                                                                                                                      // 6\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 7\n  global.mocha = mochaInstance;                                                                                        // 8\n}                                                                                                                      // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupMochaClient.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/meteor/src/setup/setupMochaClient.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar module1 = module;                                                                                                  // 1\nvar meteorInstall = void 0;                                                                                            // 1\nmodule1.watch(require(\"meteor/modules\"), {                                                                             // 1\n  meteorInstall: function (v) {                                                                                        // 1\n    meteorInstall = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nmodule1.exportDefault(function () {                                                                                    // 1\n  process.browser = true;                                                                                              // 9\n                                                                                                                       //\n  require(\"meteor-node-stubs\");                                                                                        // 11\n                                                                                                                       //\n  meteorInstall({                                                                                                      // 13\n    node_modules: {                                                                                                    // 14\n      \"tty.js\": function (r, e, module) {                                                                              // 15\n        module.exports = {                                                                                             // 16\n          isatty: function () {                                                                                        // 16\n            return false;                                                                                              // 16\n          }                                                                                                            // 16\n        };                                                                                                             // 16\n      }                                                                                                                // 17\n    }                                                                                                                  // 14\n  });                                                                                                                  // 13\n  meteorInstall({                                                                                                      // 21\n    node_modules: {                                                                                                    // 22\n      \"constants.js\": function (r, e, module) {                                                                        // 23\n        module.exports = {                                                                                             // 24\n          test: {                                                                                                      // 25\n            'test': 'test'                                                                                             // 25\n          }                                                                                                            // 25\n        };                                                                                                             // 24\n      }                                                                                                                // 27\n    }                                                                                                                  // 22\n  });                                                                                                                  // 21\n});                                                                                                                    // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"lib\":{\"ms.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/ms.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            //\n */var s = 1000;                                                                                                       //\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25; /**                                                                                                // 9\n                     * Parse or format the given `val`.                                                                //\n                     *                                                                                                 //\n                     * Options:                                                                                        //\n                     *                                                                                                 //\n                     *  - `long` verbose formatting [false]                                                            //\n                     *                                                                                                 //\n                     * @api public                                                                                     //\n                     * @param {string|number} val                                                                      //\n                     * @param {Object} options                                                                         //\n                     * @return {string|number}                                                                         //\n                     */                                                                                                //\n                                                                                                                       //\nmodule.exports = function (val, options) {                                                                             // 23\n  options = options || {};                                                                                             // 24\n                                                                                                                       //\n  if (typeof val === 'string') {                                                                                       // 25\n    return parse(val);                                                                                                 // 26\n  } // https://github.com/mochajs/mocha/pull/1035                                                                      // 27\n                                                                                                                       //\n                                                                                                                       //\n  return options['long'] ? longFormat(val) : shortFormat(val);                                                         // 29\n}; /**                                                                                                                 // 30\n    * Parse the given `str` and return milliseconds.                                                                   //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {number}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction parse(str) {                                                                                                  // 39\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);                  // 40\n                                                                                                                       //\n  if (!match) {                                                                                                        // 41\n    return;                                                                                                            // 42\n  }                                                                                                                    // 43\n                                                                                                                       //\n  var n = parseFloat(match[1]);                                                                                        // 44\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 45\n                                                                                                                       //\n  switch (type) {                                                                                                      // 46\n    case 'years':                                                                                                      // 47\n    case 'year':                                                                                                       // 48\n    case 'y':                                                                                                          // 49\n      return n * y;                                                                                                    // 50\n                                                                                                                       //\n    case 'days':                                                                                                       // 51\n    case 'day':                                                                                                        // 52\n    case 'd':                                                                                                          // 53\n      return n * d;                                                                                                    // 54\n                                                                                                                       //\n    case 'hours':                                                                                                      // 55\n    case 'hour':                                                                                                       // 56\n    case 'h':                                                                                                          // 57\n      return n * h;                                                                                                    // 58\n                                                                                                                       //\n    case 'minutes':                                                                                                    // 59\n    case 'minute':                                                                                                     // 60\n    case 'm':                                                                                                          // 61\n      return n * m;                                                                                                    // 62\n                                                                                                                       //\n    case 'seconds':                                                                                                    // 63\n    case 'second':                                                                                                     // 64\n    case 's':                                                                                                          // 65\n      return n * s;                                                                                                    // 66\n                                                                                                                       //\n    case 'ms':                                                                                                         // 67\n      return n;                                                                                                        // 68\n                                                                                                                       //\n    default: // No default case                                                                                        // 69\n  }                                                                                                                    // 46\n} /**                                                                                                                  // 72\n   * Short format for `ms`.                                                                                            //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction shortFormat(ms) {                                                                                             // 81\n  if (ms >= d) {                                                                                                       // 82\n    return Math.round(ms / d) + 'd';                                                                                   // 83\n  }                                                                                                                    // 84\n                                                                                                                       //\n  if (ms >= h) {                                                                                                       // 85\n    return Math.round(ms / h) + 'h';                                                                                   // 86\n  }                                                                                                                    // 87\n                                                                                                                       //\n  if (ms >= m) {                                                                                                       // 88\n    return Math.round(ms / m) + 'm';                                                                                   // 89\n  }                                                                                                                    // 90\n                                                                                                                       //\n  if (ms >= s) {                                                                                                       // 91\n    return Math.round(ms / s) + 's';                                                                                   // 92\n  }                                                                                                                    // 93\n                                                                                                                       //\n  return ms + 'ms';                                                                                                    // 94\n} /**                                                                                                                  // 95\n   * Long format for `ms`.                                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction longFormat(ms) {                                                                                              // 104\n  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\n} /**                                                                                                                  // 110\n   * Pluralization helper.                                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {number} ms                                                                                                //\n   * @param {number} n                                                                                                 //\n   * @param {string} name                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction plural(ms, n, name) {                                                                                         // 120\n  if (ms < n) {                                                                                                        // 121\n    return;                                                                                                            // 122\n  }                                                                                                                    // 123\n                                                                                                                       //\n  if (ms < n * 1.5) {                                                                                                  // 124\n    return Math.floor(ms / n) + ' ' + name;                                                                            // 125\n  }                                                                                                                    // 126\n                                                                                                                       //\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 127\n}                                                                                                                      // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/utils.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */ /**                                                                                           // 1\n                          * Module dependencies.                                                                       //\n                          */var basename = require('path').basename;                                                   //\n                                                                                                                       //\nvar debug = require('debug')('mocha:watch');                                                                           // 8\n                                                                                                                       //\nvar exists = require('fs').existsSync || require('path').existsSync;                                                   // 9\n                                                                                                                       //\nvar glob = require('glob');                                                                                            // 10\n                                                                                                                       //\nvar join = require('path').join;                                                                                       // 11\n                                                                                                                       //\nvar readdirSync = require('fs').readdirSync;                                                                           // 12\n                                                                                                                       //\nvar statSync = require('fs').statSync;                                                                                 // 13\n                                                                                                                       //\nvar watchFile = require('fs').watchFile; /**                                                                           // 14\n                                          * Ignored directories.                                                       //\n                                          */                                                                           //\n                                                                                                                       //\nvar ignore = ['node_modules', '.git'];                                                                                 // 20\nexports.inherits = require('util').inherits; /**                                                                       // 22\n                                              * Escape special characters in the given string of html.                 //\n                                              *                                                                        //\n                                              * @api private                                                           //\n                                              * @param  {string} html                                                  //\n                                              * @return {string}                                                       //\n                                              */                                                                       //\n                                                                                                                       //\nexports.escape = function (html) {                                                                                     // 31\n  return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');      // 32\n}; /**                                                                                                                 // 37\n    * Array#forEach (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} scope                                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.forEach = function (arr, fn, scope) {                                                                          // 47\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 48\n    fn.call(scope, arr[i], i);                                                                                         // 49\n  }                                                                                                                    // 50\n}; /**                                                                                                                 // 51\n    * Test if the given obj is type of string.                                                                         //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {boolean}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.isString = function (obj) {                                                                                    // 60\n  return typeof obj === 'string';                                                                                      // 61\n}; /**                                                                                                                 // 62\n    * Array#map (<=IE8)                                                                                                //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} scope                                                                                            //\n    * @return {Array}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.map = function (arr, fn, scope) {                                                                              // 73\n  var result = [];                                                                                                     // 74\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 75\n    result.push(fn.call(scope, arr[i], i, arr));                                                                       // 76\n  }                                                                                                                    // 77\n                                                                                                                       //\n  return result;                                                                                                       // 78\n}; /**                                                                                                                 // 79\n    * Array#indexOf (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Object} obj to find index of                                                                             //\n    * @param {number} start                                                                                            //\n    * @return {number}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.indexOf = function (arr, obj, start) {                                                                         // 90\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                               // 91\n    if (arr[i] === obj) {                                                                                              // 92\n      return i;                                                                                                        // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n                                                                                                                       //\n  return -1;                                                                                                           // 96\n}; /**                                                                                                                 // 97\n    * Array#reduce (<=IE8)                                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @param {Object} val Initial value.                                                                               //\n    * @return {*}                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.reduce = function (arr, fn, val) {                                                                             // 108\n  var rval = val;                                                                                                      // 109\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 111\n    rval = fn(rval, arr[i], i, arr);                                                                                   // 112\n  }                                                                                                                    // 113\n                                                                                                                       //\n  return rval;                                                                                                         // 115\n}; /**                                                                                                                 // 116\n    * Array#filter (<=IE8)                                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} arr                                                                                               //\n    * @param {Function} fn                                                                                             //\n    * @return {Array}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.filter = function (arr, fn) {                                                                                  // 126\n  var ret = [];                                                                                                        // 127\n                                                                                                                       //\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                        // 129\n    var val = arr[i];                                                                                                  // 130\n                                                                                                                       //\n    if (fn(val, i, arr)) {                                                                                             // 131\n      ret.push(val);                                                                                                   // 132\n    }                                                                                                                  // 133\n  }                                                                                                                    // 134\n                                                                                                                       //\n  return ret;                                                                                                          // 136\n}; /**                                                                                                                 // 137\n    * Object.keys (<=IE8)                                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {Array} keys                                                                                             //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function (obj) {                                      // 146\n  var keys = [];                                                                                                       // 147\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8                                                  // 148\n                                                                                                                       //\n  for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                       // 150\n    if (has.call(obj, key)) {                                                                                          // 151\n      keys.push(key);                                                                                                  // 152\n    }                                                                                                                  // 153\n  }                                                                                                                    // 154\n                                                                                                                       //\n  return keys;                                                                                                         // 156\n}; /**                                                                                                                 // 157\n    * Watch the given `files` for changes                                                                              //\n    * and invoke `fn(file)` on modification.                                                                           //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Array} files                                                                                             //\n    * @param {Function} fn                                                                                             //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.watch = function (files, fn) {                                                                                 // 167\n  var options = {                                                                                                      // 168\n    interval: 100                                                                                                      // 168\n  };                                                                                                                   // 168\n  files.forEach(function (file) {                                                                                      // 169\n    debug('file %s', file);                                                                                            // 170\n    watchFile(file, options, function (curr, prev) {                                                                   // 171\n      if (prev.mtime < curr.mtime) {                                                                                   // 172\n        fn(file);                                                                                                      // 173\n      }                                                                                                                // 174\n    });                                                                                                                // 175\n  });                                                                                                                  // 176\n}; /**                                                                                                                 // 177\n    * Array.isArray (<=IE8)                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object} obj                                                                                              //\n    * @return {Boolean}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function (obj) {                                   // 186\n  return Object.prototype.toString.call(obj) === '[object Array]';                                                     // 187\n};                                                                                                                     // 188\nexports.isArray = isArray; /**                                                                                         // 190\n                            * Buffer.prototype.toJSON polyfill.                                                        //\n                            *                                                                                          //\n                            * @type {Function}                                                                         //\n                            */                                                                                         //\n                                                                                                                       //\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {                                                               // 197\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function () {                                                   // 198\n    return Array.prototype.slice.call(this, 0);                                                                        // 199\n  };                                                                                                                   // 200\n} /**                                                                                                                  // 201\n   * Ignored files.                                                                                                    //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} path                                                                                              //\n   * @return {boolean}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction ignored(path) {                                                                                               // 210\n  return !~ignore.indexOf(path);                                                                                       // 211\n} /**                                                                                                                  // 212\n   * Lookup files in the given `dir`.                                                                                  //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} dir                                                                                               //\n   * @param {string[]} [ext=['.js']]                                                                                   //\n   * @param {Array} [ret=[]]                                                                                           //\n   * @return {Array}                                                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.files = function (dir, ext, ret) {                                                                             // 223\n  ret = ret || [];                                                                                                     // 224\n  ext = ext || ['js'];                                                                                                 // 225\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');                                                                  // 227\n  readdirSync(dir).filter(ignored).forEach(function (path) {                                                           // 229\n    path = join(dir, path);                                                                                            // 232\n                                                                                                                       //\n    if (statSync(path).isDirectory()) {                                                                                // 233\n      exports.files(path, ext, ret);                                                                                   // 234\n    } else if (path.match(re)) {                                                                                       // 235\n      ret.push(path);                                                                                                  // 236\n    }                                                                                                                  // 237\n  });                                                                                                                  // 238\n  return ret;                                                                                                          // 240\n}; /**                                                                                                                 // 241\n    * Compute a slug from the given `str`.                                                                             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.slug = function (str) {                                                                                        // 250\n  return str.toLowerCase().replace(/ +/g, '-').replace(/[^-\\w]/g, '');                                                 // 251\n}; /**                                                                                                                 // 255\n    * Strip the function definition from `str`, and re-indent for pre whitespace.                                      //\n    *                                                                                                                  //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.clean = function (str) {                                                                                       // 263\n  str = str.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '').replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '').replace(/\\s+\\}$/, '');\n  var spaces = str.match(/^\\n?( *)/)[1].length;                                                                        // 269\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;                                                                         // 270\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                        // 271\n  str = str.replace(re, '');                                                                                           // 273\n  return exports.trim(str);                                                                                            // 275\n}; /**                                                                                                                 // 276\n    * Trim the given `str`.                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.trim = function (str) {                                                                                        // 285\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                                // 286\n}; /**                                                                                                                 // 287\n    * Parse the given `qs`.                                                                                            //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} qs                                                                                               //\n    * @return {Object}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.parseQuery = function (qs) {                                                                                   // 296\n  return exports.reduce(qs.replace('?', '').split('&'), function (obj, pair) {                                         // 297\n    var i = pair.indexOf('=');                                                                                         // 298\n    var key = pair.slice(0, i);                                                                                        // 299\n    var val = pair.slice(++i);                                                                                         // 300\n    obj[key] = decodeURIComponent(val);                                                                                // 302\n    return obj;                                                                                                        // 303\n  }, {});                                                                                                              // 304\n}; /**                                                                                                                 // 305\n    * Highlight the given string of `js`.                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} js                                                                                               //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction highlight(js) {                                                                                               // 314\n  return js.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>').replace(/('.*?')/gm, '<span class=\"string\">$1</span>').replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>').replace(/(\\d+)/gm, '<span class=\"number\">$1</span>').replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>').replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n} /**                                                                                                                  // 324\n   * Highlight the contents of tag `name`.                                                                             //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} name                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.highlightTags = function (name) {                                                                              // 332\n  var code = document.getElementById('mocha').getElementsByTagName(name);                                              // 333\n                                                                                                                       //\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 334\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                  // 335\n  }                                                                                                                    // 336\n}; /**                                                                                                                 // 337\n    * If a value could have properties, and has none, this function is called,                                         //\n    * which returns a string representation of the empty value.                                                        //\n    *                                                                                                                  //\n    * Functions w/ no properties return `'[Function]'`                                                                 //\n    * Arrays w/ length === 0 return `'[]'`                                                                             //\n    * Objects w/ no properties return `'{}'`                                                                           //\n    * All else: return result of `value.toString()`                                                                    //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {*} value The value to inspect.                                                                           //\n    * @param {string} [type] The type of the value, if known.                                                          //\n    * @returns {string}                                                                                                //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction emptyRepresentation(value, type) {                                                                            // 353\n  type = type || exports.type(value);                                                                                  // 354\n                                                                                                                       //\n  switch (type) {                                                                                                      // 356\n    case 'function':                                                                                                   // 357\n      return '[Function]';                                                                                             // 358\n                                                                                                                       //\n    case 'object':                                                                                                     // 359\n      return '{}';                                                                                                     // 360\n                                                                                                                       //\n    case 'array':                                                                                                      // 361\n      return '[]';                                                                                                     // 362\n                                                                                                                       //\n    default:                                                                                                           // 363\n      return value.toString();                                                                                         // 364\n  }                                                                                                                    // 356\n} /**                                                                                                                  // 366\n   * Takes some variable and asks `Object.prototype.toString()` what it thinks it                                      //\n   * is.                                                                                                               //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString             //\n   * @param {*} value The value to test.                                                                               //\n   * @returns {string}                                                                                                 //\n   * @example                                                                                                          //\n   * type({}) // 'object'                                                                                              //\n   * type([]) // 'array'                                                                                               //\n   * type(1) // 'number'                                                                                               //\n   * type(false) // 'boolean'                                                                                          //\n   * type(Infinity) // 'number'                                                                                        //\n   * type(null) // 'null'                                                                                              //\n   * type(new Date()) // 'date'                                                                                        //\n   * type(/foo/) // 'regexp'                                                                                           //\n   * type('type') // 'string'                                                                                          //\n   * type(global) // 'global'                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.type = function () {                                                                                           // 388\n  function type(value) {                                                                                               // 388\n    if (value === undefined) {                                                                                         // 389\n      return 'undefined';                                                                                              // 390\n    } else if (value === null) {                                                                                       // 391\n      return 'null';                                                                                                   // 392\n    } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {                                              // 393\n      return 'buffer';                                                                                                 // 394\n    }                                                                                                                  // 395\n                                                                                                                       //\n    return Object.prototype.toString.call(value).replace(/^\\[.+\\s(.+?)\\]$/, '$1').toLowerCase();                       // 396\n  }                                                                                                                    // 399\n                                                                                                                       //\n  return type;                                                                                                         // 388\n}(); /**                                                                                                               // 388\n      * Stringify `value`. Different behavior depending on type of value:                                              //\n      *                                                                                                                //\n      * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.                         //\n      * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n      * - If `value` is an *empty* object, function, or array, return result of function                               //\n      *   {@link emptyRepresentation}.                                                                                 //\n      * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of                    //\n      *   JSON.stringify().                                                                                            //\n      *                                                                                                                //\n      * @api private                                                                                                   //\n      * @see exports.type                                                                                              //\n      * @param {*} value                                                                                               //\n      * @return {string}                                                                                               //\n      */                                                                                                               //\n                                                                                                                       //\nexports.stringify = function (value) {                                                                                 // 416\n  var type = exports.type(value);                                                                                      // 417\n                                                                                                                       //\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {                                                      // 419\n    if (type !== 'buffer') {                                                                                           // 420\n      return jsonStringify(value);                                                                                     // 421\n    }                                                                                                                  // 422\n                                                                                                                       //\n    var json = value.toJSON(); // Based on the toJSON result                                                           // 423\n                                                                                                                       //\n    return jsonStringify(json.data && json.type ? json.data : json, 2).replace(/,(\\n|$)/g, '$1');                      // 425\n  }                                                                                                                    // 427\n                                                                                                                       //\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(value)) {                                                    // 429\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {                                                           // 430\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');                                  // 431\n    }                                                                                                                  // 432\n  }                                                                                                                    // 433\n                                                                                                                       //\n  return emptyRepresentation(value, type);                                                                             // 435\n}; /**                                                                                                                 // 436\n    * like JSON.stringify but more sense.                                                                              //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {Object}  object                                                                                          //\n    * @param {number=} spaces                                                                                          //\n    * @param {number=} depth                                                                                           //\n    * @returns {*}                                                                                                     //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction jsonStringify(object, spaces, depth) {                                                                        // 447\n  if (typeof spaces === 'undefined') {                                                                                 // 448\n    // primitive types                                                                                                 // 449\n    return _stringify(object);                                                                                         // 450\n  }                                                                                                                    // 451\n                                                                                                                       //\n  depth = depth || 1;                                                                                                  // 453\n  var space = spaces * depth;                                                                                          // 454\n  var str = isArray(object) ? '[' : '{';                                                                               // 455\n  var end = isArray(object) ? ']' : '}';                                                                               // 456\n  var length = object.length || exports.keys(object).length; // `.repeat()` polyfill                                   // 457\n                                                                                                                       //\n  function repeat(s, n) {                                                                                              // 459\n    return new Array(n).join(s);                                                                                       // 460\n  }                                                                                                                    // 461\n                                                                                                                       //\n  function _stringify(val) {                                                                                           // 463\n    switch (exports.type(val)) {                                                                                       // 464\n      case 'null':                                                                                                     // 465\n      case 'undefined':                                                                                                // 466\n        val = '[' + val + ']';                                                                                         // 467\n        break;                                                                                                         // 468\n                                                                                                                       //\n      case 'array':                                                                                                    // 469\n      case 'object':                                                                                                   // 470\n        val = jsonStringify(val, spaces, depth + 1);                                                                   // 471\n        break;                                                                                                         // 472\n                                                                                                                       //\n      case 'boolean':                                                                                                  // 473\n      case 'regexp':                                                                                                   // 474\n      case 'number':                                                                                                   // 475\n        val = val === 0 && 1 / val === -Infinity // `-0`                                                               // 476\n        ? '-0' : val.toString();                                                                                       // 476\n        break;                                                                                                         // 479\n                                                                                                                       //\n      case 'date':                                                                                                     // 480\n        var sDate = isNaN(val.getTime()) // Invalid date                                                               // 481\n        ? val.toString() : val.toISOString();                                                                          // 481\n        val = '[Date: ' + sDate + ']';                                                                                 // 484\n        break;                                                                                                         // 485\n                                                                                                                       //\n      case 'buffer':                                                                                                   // 486\n        var json = val.toJSON(); // Based on the toJSON result                                                         // 487\n                                                                                                                       //\n        json = json.data && json.type ? json.data : json;                                                              // 489\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';                                                   // 490\n        break;                                                                                                         // 491\n                                                                                                                       //\n      default:                                                                                                         // 492\n        val = val === '[Function]' || val === '[Circular]' ? val : JSON.stringify(val);                                // 493\n      // string                                                                                                        // 495\n    }                                                                                                                  // 464\n                                                                                                                       //\n    return val;                                                                                                        // 497\n  }                                                                                                                    // 498\n                                                                                                                       //\n  for (var i in meteorBabelHelpers.sanitizeForInObject(object)) {                                                      // 500\n    if (!object.hasOwnProperty(i)) {                                                                                   // 501\n      continue; // not my business                                                                                     // 502\n    }                                                                                                                  // 503\n                                                                                                                       //\n    --length;                                                                                                          // 504\n    str += '\\n ' + repeat(' ', space) + (isArray(object) ? '' : '\"' + i + '\": ') // key                                // 505\n    + _stringify(object[i]) // value                                                                                   // 505\n    + (length ? ',' : ''); // comma                                                                                    // 505\n  }                                                                                                                    // 509\n                                                                                                                       //\n  return str // [], {}                                                                                                 // 511\n  + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);                                                      // 511\n} /**                                                                                                                  // 514\n   * Test if a value is a buffer.                                                                                      //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {*} value The value to test.                                                                               //\n   * @return {boolean} True if `value` is a buffer, otherwise false                                                    //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.isBuffer = function (value) {                                                                                  // 523\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);                                                      // 524\n}; /**                                                                                                                 // 525\n    * Return a new Thing that has the keys in sorted order. Recursive.                                                 //\n    *                                                                                                                  //\n    * If the Thing...                                                                                                  //\n    * - has already been seen, return string `'[Circular]'`                                                            //\n    * - is `undefined`, return string `'[undefined]'`                                                                  //\n    * - is `null`, return value `null`                                                                                 //\n    * - is some other primitive, return the value                                                                      //\n    * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n    * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.             //\n    * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`             //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @see {@link exports.stringify}                                                                                   //\n    * @param {*} value Thing to inspect.  May or may not have properties.                                              //\n    * @param {Array} [stack=[]] Stack of seen values                                                                   //\n    * @return {(Object|Array|Function|string|undefined)}                                                               //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.canonicalize = function (value, stack) {                                                                       // 545\n  var canonicalizedObj; /* eslint-disable no-unused-vars */                                                            // 546\n  var prop; /* eslint-enable no-unused-vars */                                                                         // 548\n  var type = exports.type(value);                                                                                      // 550\n                                                                                                                       //\n  function withStack(value, fn) {                                                                                      // 551\n    stack.push(value);                                                                                                 // 552\n    fn();                                                                                                              // 553\n    stack.pop();                                                                                                       // 554\n  }                                                                                                                    // 555\n                                                                                                                       //\n  stack = stack || [];                                                                                                 // 557\n                                                                                                                       //\n  if (exports.indexOf(stack, value) !== -1) {                                                                          // 559\n    return '[Circular]';                                                                                               // 560\n  }                                                                                                                    // 561\n                                                                                                                       //\n  switch (type) {                                                                                                      // 563\n    case 'undefined':                                                                                                  // 564\n    case 'buffer':                                                                                                     // 565\n    case 'null':                                                                                                       // 566\n      canonicalizedObj = value;                                                                                        // 567\n      break;                                                                                                           // 568\n                                                                                                                       //\n    case 'array':                                                                                                      // 569\n      withStack(value, function () {                                                                                   // 570\n        canonicalizedObj = exports.map(value, function (item) {                                                        // 571\n          return exports.canonicalize(item, stack);                                                                    // 572\n        });                                                                                                            // 573\n      });                                                                                                              // 574\n      break;                                                                                                           // 575\n                                                                                                                       //\n    case 'function':                                                                                                   // 576\n      /* eslint-disable guard-for-in */for (prop in meteorBabelHelpers.sanitizeForInObject(value)) {                   // 577\n        canonicalizedObj = {};                                                                                         // 579\n        break;                                                                                                         // 580\n      } /* eslint-enable guard-for-in */                                                                               // 581\n                                                                                                                       //\n      if (!canonicalizedObj) {                                                                                         // 583\n        canonicalizedObj = emptyRepresentation(value, type);                                                           // 584\n        break;                                                                                                         // 585\n      }                                                                                                                // 586\n                                                                                                                       //\n    /* falls through */                                                                                                // 587\n                                                                                                                       //\n    case 'object':                                                                                                     // 588\n      canonicalizedObj = canonicalizedObj || {};                                                                       // 589\n      withStack(value, function () {                                                                                   // 590\n        exports.forEach(exports.keys(value).sort(), function (key) {                                                   // 591\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);                                             // 592\n        });                                                                                                            // 593\n      });                                                                                                              // 594\n      break;                                                                                                           // 595\n                                                                                                                       //\n    case 'date':                                                                                                       // 596\n    case 'number':                                                                                                     // 597\n    case 'regexp':                                                                                                     // 598\n    case 'boolean':                                                                                                    // 599\n      canonicalizedObj = value;                                                                                        // 600\n      break;                                                                                                           // 601\n                                                                                                                       //\n    default:                                                                                                           // 602\n      canonicalizedObj = value + '';                                                                                   // 603\n  }                                                                                                                    // 563\n                                                                                                                       //\n  return canonicalizedObj;                                                                                             // 606\n}; /**                                                                                                                 // 607\n    * Lookup file names at the given `path`.                                                                           //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {string} path Base path to start searching from.                                                          //\n    * @param {string[]} extensions File extensions to look for.                                                        //\n    * @param {boolean} recursive Whether or not to recurse into subdirectories.                                        //\n    * @return {string[]} An array of paths.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.lookupFiles = function () {                                                                                    // 618\n  function lookupFiles(path, extensions, recursive) {                                                                  // 618\n    var files = [];                                                                                                    // 619\n    var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');                                                         // 620\n                                                                                                                       //\n    if (!exists(path)) {                                                                                               // 622\n      if (exists(path + '.js')) {                                                                                      // 623\n        path += '.js';                                                                                                 // 624\n      } else {                                                                                                         // 625\n        files = glob.sync(path);                                                                                       // 626\n                                                                                                                       //\n        if (!files.length) {                                                                                           // 627\n          throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");                                          // 628\n        }                                                                                                              // 629\n                                                                                                                       //\n        return files;                                                                                                  // 630\n      }                                                                                                                // 631\n    }                                                                                                                  // 632\n                                                                                                                       //\n    try {                                                                                                              // 634\n      var stat = statSync(path);                                                                                       // 635\n                                                                                                                       //\n      if (stat.isFile()) {                                                                                             // 636\n        return path;                                                                                                   // 637\n      }                                                                                                                // 638\n    } catch (err) {                                                                                                    // 639\n      // ignore error                                                                                                  // 640\n      return;                                                                                                          // 641\n    }                                                                                                                  // 642\n                                                                                                                       //\n    readdirSync(path).forEach(function (file) {                                                                        // 644\n      file = join(path, file);                                                                                         // 645\n                                                                                                                       //\n      try {                                                                                                            // 646\n        var stat = statSync(file);                                                                                     // 647\n                                                                                                                       //\n        if (stat.isDirectory()) {                                                                                      // 648\n          if (recursive) {                                                                                             // 649\n            files = files.concat(lookupFiles(file, extensions, recursive));                                            // 650\n          }                                                                                                            // 651\n                                                                                                                       //\n          return;                                                                                                      // 652\n        }                                                                                                              // 653\n      } catch (err) {                                                                                                  // 654\n        // ignore error                                                                                                // 655\n        return;                                                                                                        // 656\n      }                                                                                                                // 657\n                                                                                                                       //\n      if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {                                             // 658\n        return;                                                                                                        // 659\n      }                                                                                                                // 660\n                                                                                                                       //\n      files.push(file);                                                                                                // 661\n    });                                                                                                                // 662\n    return files;                                                                                                      // 664\n  }                                                                                                                    // 665\n                                                                                                                       //\n  return lookupFiles;                                                                                                  // 618\n}(); /**                                                                                                               // 618\n      * Generate an undefined error with a message warning the user.                                                   //\n      *                                                                                                                //\n      * @return {Error}                                                                                                //\n      */                                                                                                               //\n                                                                                                                       //\nexports.undefinedError = function () {                                                                                 // 673\n  return new Error('Caught undefined error, did you throw without specifying what?');                                  // 674\n}; /**                                                                                                                 // 675\n    * Generate an undefined error if `err` is not defined.                                                             //\n    *                                                                                                                  //\n    * @param {Error} err                                                                                               //\n    * @return {Error}                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.getError = function (err) {                                                                                    // 684\n  return err || exports.undefinedError();                                                                              // 685\n}; /**                                                                                                                 // 686\n    * @summary                                                                                                         //\n    * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)                               //\n    * @description                                                                                                     //\n    * When invoking this function you get a filter function that get the Error.stack as an input,                      //\n    * and return a prettify output.                                                                                    //\n    * (i.e: strip Mocha and internal node functions from stack trace).                                                 //\n    * @returns {Function}                                                                                              //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.stackTraceFilter = function () {                                                                               // 697\n  // TODO: Replace with `process.browser`                                                                              // 698\n  var slash = '/';                                                                                                     // 699\n  var is = typeof document === 'undefined' ? {                                                                         // 700\n    node: true                                                                                                         // 700\n  } : {                                                                                                                // 700\n    browser: true                                                                                                      // 700\n  };                                                                                                                   // 700\n  var cwd = is.node ? process.cwd() + slash : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n                                                                                                                       //\n  function isMochaInternal(line) {                                                                                     // 705\n    return ~line.indexOf('node_modules' + slash + 'mocha' + slash) || ~line.indexOf('components' + slash + 'mochajs' + slash) || ~line.indexOf('components' + slash + 'mocha' + slash) || ~line.indexOf(slash + 'mocha.js');\n  }                                                                                                                    // 710\n                                                                                                                       //\n  function isNodeInternal(line) {                                                                                      // 712\n    return ~line.indexOf('(timers.js:') || ~line.indexOf('(events.js:') || ~line.indexOf('(node.js:') || ~line.indexOf('(module.js:') || ~line.indexOf('GeneratorFunctionPrototype.next (native)') || false;\n  }                                                                                                                    // 719\n                                                                                                                       //\n  return function (stack) {                                                                                            // 721\n    stack = stack.split('\\n');                                                                                         // 722\n    stack = exports.reduce(stack, function (list, line) {                                                              // 724\n      if (isMochaInternal(line)) {                                                                                     // 725\n        return list;                                                                                                   // 726\n      }                                                                                                                // 727\n                                                                                                                       //\n      if (is.node && isNodeInternal(line)) {                                                                           // 729\n        return list;                                                                                                   // 730\n      } // Clean up cwd(absolute)                                                                                      // 731\n                                                                                                                       //\n                                                                                                                       //\n      list.push(line.replace(cwd, ''));                                                                                // 734\n      return list;                                                                                                     // 735\n    }, []);                                                                                                            // 736\n    return stack.join('\\n');                                                                                           // 738\n  };                                                                                                                   // 739\n};                                                                                                                     // 740\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser\":{\"progress.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/browser/progress.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Expose `Progress`.                                                                                                  //\n */module.exports = Progress; /**                                                                                      //\n                               * Initialize a new `Progress` indicator.                                                //\n                               */                                                                                      //\n                                                                                                                       //\nfunction Progress() {                                                                                                  // 10\n  this.percent = 0;                                                                                                    // 11\n  this.size(0);                                                                                                        // 12\n  this.fontSize(11);                                                                                                   // 13\n  this.font('helvetica, arial, sans-serif');                                                                           // 14\n} /**                                                                                                                  // 15\n   * Set progress size to `size`.                                                                                      //\n   *                                                                                                                   //\n   * @api public                                                                                                       //\n   * @param {number} size                                                                                              //\n   * @return {Progress} Progress instance.                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nProgress.prototype.size = function (size) {                                                                            // 24\n  this._size = size;                                                                                                   // 25\n  return this;                                                                                                         // 26\n}; /**                                                                                                                 // 27\n    * Set text to `text`.                                                                                              //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {string} text                                                                                             //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.text = function (text) {                                                                            // 36\n  this._text = text;                                                                                                   // 37\n  return this;                                                                                                         // 38\n}; /**                                                                                                                 // 39\n    * Set font size to `size`.                                                                                         //\n    *                                                                                                                  //\n    * @api public                                                                                                      //\n    * @param {number} size                                                                                             //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.fontSize = function (size) {                                                                        // 48\n  this._fontSize = size;                                                                                               // 49\n  return this;                                                                                                         // 50\n}; /**                                                                                                                 // 51\n    * Set font to `family`.                                                                                            //\n    *                                                                                                                  //\n    * @param {string} family                                                                                           //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.font = function (family) {                                                                          // 59\n  this._font = family;                                                                                                 // 60\n  return this;                                                                                                         // 61\n}; /**                                                                                                                 // 62\n    * Update percentage to `n`.                                                                                        //\n    *                                                                                                                  //\n    * @param {number} n                                                                                                //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.update = function (n) {                                                                             // 70\n  this.percent = n;                                                                                                    // 71\n  return this;                                                                                                         // 72\n}; /**                                                                                                                 // 73\n    * Draw on `ctx`.                                                                                                   //\n    *                                                                                                                  //\n    * @param {CanvasRenderingContext2d} ctx                                                                            //\n    * @return {Progress} Progress instance.                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nProgress.prototype.draw = function (ctx) {                                                                             // 81\n  try {                                                                                                                // 82\n    var percent = Math.min(this.percent, 100);                                                                         // 83\n    var size = this._size;                                                                                             // 84\n    var half = size / 2;                                                                                               // 85\n    var x = half;                                                                                                      // 86\n    var y = half;                                                                                                      // 87\n    var rad = half - 1;                                                                                                // 88\n    var fontSize = this._fontSize;                                                                                     // 89\n    ctx.font = fontSize + 'px ' + this._font;                                                                          // 91\n    var angle = Math.PI * 2 * (percent / 100);                                                                         // 93\n    ctx.clearRect(0, 0, size, size); // outer circle                                                                   // 94\n                                                                                                                       //\n    ctx.strokeStyle = '#9f9f9f';                                                                                       // 97\n    ctx.beginPath();                                                                                                   // 98\n    ctx.arc(x, y, rad, 0, angle, false);                                                                               // 99\n    ctx.stroke(); // inner circle                                                                                      // 100\n                                                                                                                       //\n    ctx.strokeStyle = '#eee';                                                                                          // 103\n    ctx.beginPath();                                                                                                   // 104\n    ctx.arc(x, y, rad - 1, 0, angle, true);                                                                            // 105\n    ctx.stroke(); // text                                                                                              // 106\n                                                                                                                       //\n    var text = this._text || (percent | 0) + '%';                                                                      // 109\n    var w = ctx.measureText(text).width;                                                                               // 110\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);                                                           // 112\n  } catch (err) {// don't fail if we can't render progress                                                             // 113\n  }                                                                                                                    // 115\n                                                                                                                       //\n  return this;                                                                                                         // 116\n};                                                                                                                     // 117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reporters\":{\"base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_mocha/lib/reporters/base.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Module dependencies.                                                                                                //\n */var tty = require('tty');                                                                                           //\n                                                                                                                       //\nvar diff = require('diff');                                                                                            // 6\n                                                                                                                       //\nvar ms = require('../ms');                                                                                             // 7\n                                                                                                                       //\nvar utils = require('../utils');                                                                                       // 8\n                                                                                                                       //\nvar supportsColor = process.browser ? null : require('supports-color'); /**                                            // 9\n                                                                         * Expose `Base`.                              //\n                                                                         */                                            //\nexports = module.exports = Base; /**                                                                                   // 15\n                                  * Save timer references to avoid Sinon interfering.                                  //\n                                  * See: https://github.com/mochajs/mocha/issues/237                                   //\n                                  */ /* eslint-disable no-unused-vars, no-native-reassign */                           //\nvar Date = global.Date;                                                                                                // 23\nvar setTimeout = global.setTimeout;                                                                                    // 24\nvar setInterval = global.setInterval;                                                                                  // 25\nvar clearTimeout = global.clearTimeout;                                                                                // 26\nvar clearInterval = global.clearInterval; /* eslint-enable no-unused-vars, no-native-reassign */ /**                   // 27\n                                                                                                  * Check if both stdio streams are associated with a tty.\n                                                                                                  */                   //\nvar isatty = tty.isatty(1) && tty.isatty(2); /**                                                                       // 34\n                                              * Enable coloring by default, except in the browser interface.           //\n                                              */                                                                       //\nexports.useColors = !process.browser && (supportsColor || process.env.MOCHA_COLORS !== undefined); /**                 // 40\n                                                                                                    * Inline diffs instead of +/-\n                                                                                                    */                 //\nexports.inlineDiffs = false; /**                                                                                       // 46\n                              * Default color map.                                                                     //\n                              */                                                                                       //\nexports.colors = {                                                                                                     // 52\n  pass: 90,                                                                                                            // 53\n  fail: 31,                                                                                                            // 54\n  'bright pass': 92,                                                                                                   // 55\n  'bright fail': 91,                                                                                                   // 56\n  'bright yellow': 93,                                                                                                 // 57\n  pending: 36,                                                                                                         // 58\n  suite: 0,                                                                                                            // 59\n  'error title': 0,                                                                                                    // 60\n  'error message': 31,                                                                                                 // 61\n  'error stack': 90,                                                                                                   // 62\n  checkmark: 32,                                                                                                       // 63\n  fast: 90,                                                                                                            // 64\n  medium: 33,                                                                                                          // 65\n  slow: 31,                                                                                                            // 66\n  green: 32,                                                                                                           // 67\n  light: 90,                                                                                                           // 68\n  'diff gutter': 90,                                                                                                   // 69\n  'diff added': 32,                                                                                                    // 70\n  'diff removed': 31                                                                                                   // 71\n}; /**                                                                                                                 // 52\n    * Default symbol map.                                                                                              //\n    */                                                                                                                 //\nexports.symbols = {                                                                                                    // 78\n  ok: '✓',                                                                                                             // 79\n  err: '✖',                                                                                                            // 80\n  dot: '․'                                                                                                             // 81\n}; // With node.js on Windows: use symbols available in terminal default fonts                                         // 78\n                                                                                                                       //\nif (process.platform === 'win32') {                                                                                    // 85\n  exports.symbols.ok = \"\\u221A\";                                                                                       // 86\n  exports.symbols.err = \"\\xD7\";                                                                                        // 87\n  exports.symbols.dot = '.';                                                                                           // 88\n} /**                                                                                                                  // 89\n   * Color `str` with the given `type`,                                                                                //\n   * allowing colors to be disabled,                                                                                   //\n   * as well as user-defined color                                                                                     //\n   * schemes.                                                                                                          //\n   *                                                                                                                   //\n   * @param {string} type                                                                                              //\n   * @param {string} str                                                                                               //\n   * @return {string}                                                                                                  //\n   * @api private                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\nvar color = exports.color = function (type, str) {                                                                     // 102\n  if (!exports.useColors) {                                                                                            // 103\n    return String(str);                                                                                                // 104\n  }                                                                                                                    // 105\n                                                                                                                       //\n  return \"\\x1B[\" + exports.colors[type] + 'm' + str + \"\\x1B[0m\";                                                       // 106\n}; /**                                                                                                                 // 107\n    * Expose term window size, with some defaults for when stderr is not a tty.                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.window = {                                                                                                     // 113\n  width: 75                                                                                                            // 114\n};                                                                                                                     // 113\n                                                                                                                       //\nif (isatty) {                                                                                                          // 117\n  exports.window.width = process.stdout.getWindowSize ? process.stdout.getWindowSize(1)[0] : tty.getWindowSize()[1];   // 118\n} /**                                                                                                                  // 121\n   * Expose some basic cursor interactions that are common among reporters.                                            //\n   */                                                                                                                  //\n                                                                                                                       //\nexports.cursor = {                                                                                                     // 127\n  hide: function () {                                                                                                  // 128\n    isatty && process.stdout.write(\"\\x1B[?25l\");                                                                       // 129\n  },                                                                                                                   // 130\n  show: function () {                                                                                                  // 132\n    isatty && process.stdout.write(\"\\x1B[?25h\");                                                                       // 133\n  },                                                                                                                   // 134\n  deleteLine: function () {                                                                                            // 136\n    isatty && process.stdout.write(\"\\x1B[2K\");                                                                         // 137\n  },                                                                                                                   // 138\n  beginningOfLine: function () {                                                                                       // 140\n    isatty && process.stdout.write(\"\\x1B[0G\");                                                                         // 141\n  },                                                                                                                   // 142\n  CR: function () {                                                                                                    // 144\n    if (isatty) {                                                                                                      // 145\n      exports.cursor.deleteLine();                                                                                     // 146\n      exports.cursor.beginningOfLine();                                                                                // 147\n    } else {                                                                                                           // 148\n      process.stdout.write('\\r');                                                                                      // 149\n    }                                                                                                                  // 150\n  }                                                                                                                    // 151\n}; /**                                                                                                                 // 127\n    * Outut the given `failures` as a list.                                                                            //\n    *                                                                                                                  //\n    * @param {Array} failures                                                                                          //\n    * @api public                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nexports.list = function (failures) {                                                                                   // 161\n  console.log();                                                                                                       // 162\n  failures.forEach(function (test, i) {                                                                                // 163\n    // format                                                                                                          // 164\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n'); // msg\n                                                                                                                       //\n    var msg;                                                                                                           // 170\n    var err = test.err;                                                                                                // 171\n    var message;                                                                                                       // 172\n                                                                                                                       //\n    if (err.message) {                                                                                                 // 173\n      message = err.message;                                                                                           // 174\n    } else if (typeof err.inspect === 'function') {                                                                    // 175\n      message = err.inspect() + '';                                                                                    // 176\n    } else {                                                                                                           // 177\n      message = '';                                                                                                    // 178\n    }                                                                                                                  // 179\n                                                                                                                       //\n    var stack = err.stack || message;                                                                                  // 180\n    var index = stack.indexOf(message);                                                                                // 181\n    var actual = err.actual;                                                                                           // 182\n    var expected = err.expected;                                                                                       // 183\n    var escape = true;                                                                                                 // 184\n                                                                                                                       //\n    if (index === -1) {                                                                                                // 186\n      msg = message;                                                                                                   // 187\n    } else {                                                                                                           // 188\n      index += message.length;                                                                                         // 189\n      msg = stack.slice(0, index); // remove msg from stack                                                            // 190\n                                                                                                                       //\n      stack = stack.slice(index + 1);                                                                                  // 192\n    } // uncaught                                                                                                      // 193\n                                                                                                                       //\n                                                                                                                       //\n    if (err.uncaught) {                                                                                                // 196\n      msg = 'Uncaught ' + msg;                                                                                         // 197\n    } // explicitly show diff                                                                                          // 198\n                                                                                                                       //\n                                                                                                                       //\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {                              // 200\n      escape = false;                                                                                                  // 201\n                                                                                                                       //\n      if (!(utils.isString(actual) && utils.isString(expected))) {                                                     // 202\n        err.actual = actual = utils.stringify(actual);                                                                 // 203\n        err.expected = expected = utils.stringify(expected);                                                           // 204\n      }                                                                                                                // 205\n                                                                                                                       //\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');                                    // 207\n      var match = message.match(/^([^:]+): expected/);                                                                 // 208\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);                                               // 209\n                                                                                                                       //\n      if (exports.inlineDiffs) {                                                                                       // 211\n        msg += inlineDiff(err, escape);                                                                                // 212\n      } else {                                                                                                         // 213\n        msg += unifiedDiff(err, escape);                                                                               // 214\n      }                                                                                                                // 215\n    } // indent stack trace                                                                                            // 216\n                                                                                                                       //\n                                                                                                                       //\n    stack = stack.replace(/^/gm, '  ');                                                                                // 219\n    console.log(fmt, i + 1, test.fullTitle(), msg, stack);                                                             // 221\n  });                                                                                                                  // 222\n}; /**                                                                                                                 // 223\n    * Initialize a new `Base` reporter.                                                                                //\n    *                                                                                                                  //\n    * All other reporters generally                                                                                    //\n    * inherit from this reporter, providing                                                                            //\n    * stats such as test duration, number                                                                              //\n    * of tests passed / failed etc.                                                                                    //\n    *                                                                                                                  //\n    * @param {Runner} runner                                                                                           //\n    * @api public                                                                                                      //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction Base(runner) {                                                                                                // 237\n  var stats = this.stats = {                                                                                           // 238\n    suites: 0,                                                                                                         // 238\n    tests: 0,                                                                                                          // 238\n    passes: 0,                                                                                                         // 238\n    pending: 0,                                                                                                        // 238\n    failures: 0                                                                                                        // 238\n  };                                                                                                                   // 238\n  var failures = this.failures = [];                                                                                   // 239\n                                                                                                                       //\n  if (!runner) {                                                                                                       // 241\n    return;                                                                                                            // 242\n  }                                                                                                                    // 243\n                                                                                                                       //\n  this.runner = runner;                                                                                                // 244\n  runner.stats = stats;                                                                                                // 246\n  runner.on('start', function () {                                                                                     // 248\n    stats.start = new Date();                                                                                          // 249\n  });                                                                                                                  // 250\n  runner.on('suite', function (suite) {                                                                                // 252\n    stats.suites = stats.suites || 0;                                                                                  // 253\n    suite.root || stats.suites++;                                                                                      // 254\n  });                                                                                                                  // 255\n  runner.on('test end', function () {                                                                                  // 257\n    stats.tests = stats.tests || 0;                                                                                    // 258\n    stats.tests++;                                                                                                     // 259\n  });                                                                                                                  // 260\n  runner.on('pass', function (test) {                                                                                  // 262\n    stats.passes = stats.passes || 0;                                                                                  // 263\n                                                                                                                       //\n    if (test.duration > test.slow()) {                                                                                 // 265\n      test.speed = 'slow';                                                                                             // 266\n    } else if (test.duration > test.slow() / 2) {                                                                      // 267\n      test.speed = 'medium';                                                                                           // 268\n    } else {                                                                                                           // 269\n      test.speed = 'fast';                                                                                             // 270\n    }                                                                                                                  // 271\n                                                                                                                       //\n    stats.passes++;                                                                                                    // 273\n  });                                                                                                                  // 274\n  runner.on('fail', function (test, err) {                                                                             // 276\n    stats.failures = stats.failures || 0;                                                                              // 277\n    stats.failures++;                                                                                                  // 278\n    test.err = err;                                                                                                    // 279\n    failures.push(test);                                                                                               // 280\n  });                                                                                                                  // 281\n  runner.on('end', function () {                                                                                       // 283\n    stats.end = new Date();                                                                                            // 284\n    stats.duration = new Date() - stats.start;                                                                         // 285\n  });                                                                                                                  // 286\n  runner.on('pending', function () {                                                                                   // 288\n    stats.pending++;                                                                                                   // 289\n  });                                                                                                                  // 290\n} /**                                                                                                                  // 291\n   * Output common epilogue used by many of                                                                            //\n   * the bundled reporters.                                                                                            //\n   *                                                                                                                   //\n   * @api public                                                                                                       //\n   */                                                                                                                  //\n                                                                                                                       //\nBase.prototype.epilogue = function () {                                                                                // 299\n  var stats = this.stats;                                                                                              // 300\n  var fmt;                                                                                                             // 301\n  console.log(); // passes                                                                                             // 303\n                                                                                                                       //\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');                           // 306\n  console.log(fmt, stats.passes || 0, ms(stats.duration)); // pending                                                  // 310\n                                                                                                                       //\n  if (stats.pending) {                                                                                                 // 315\n    fmt = color('pending', ' ') + color('pending', ' %d pending');                                                     // 316\n    console.log(fmt, stats.pending);                                                                                   // 319\n  } // failures                                                                                                        // 320\n                                                                                                                       //\n                                                                                                                       //\n  if (stats.failures) {                                                                                                // 323\n    fmt = color('fail', '  %d failing');                                                                               // 324\n    console.log(fmt, stats.failures);                                                                                  // 326\n    Base.list(this.failures);                                                                                          // 328\n    console.log();                                                                                                     // 329\n  }                                                                                                                    // 330\n                                                                                                                       //\n  console.log();                                                                                                       // 332\n}; /**                                                                                                                 // 333\n    * Pad the given `str` to `len`.                                                                                    //\n    *                                                                                                                  //\n    * @api private                                                                                                     //\n    * @param {string} str                                                                                              //\n    * @param {string} len                                                                                              //\n    * @return {string}                                                                                                 //\n    */                                                                                                                 //\n                                                                                                                       //\nfunction pad(str, len) {                                                                                               // 343\n  str = String(str);                                                                                                   // 344\n  return Array(len - str.length + 1).join(' ') + str;                                                                  // 345\n} /**                                                                                                                  // 346\n   * Returns an inline diff between 2 strings with coloured ANSI output                                                //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err with actual/expected                                                                           //\n   * @param {boolean} escape                                                                                           //\n   * @return {string} Diff                                                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction inlineDiff(err, escape) {                                                                                     // 356\n  var msg = errorDiff(err, 'WordsWithSpace', escape); // linenos                                                       // 357\n                                                                                                                       //\n  var lines = msg.split('\\n');                                                                                         // 360\n                                                                                                                       //\n  if (lines.length > 4) {                                                                                              // 361\n    var width = String(lines.length).length;                                                                           // 362\n    msg = lines.map(function (str, i) {                                                                                // 363\n      return pad(++i, width) + ' |' + ' ' + str;                                                                       // 364\n    }).join('\\n');                                                                                                     // 365\n  } // legend                                                                                                          // 366\n                                                                                                                       //\n                                                                                                                       //\n  msg = '\\n' + color('diff removed', 'actual') + ' ' + color('diff added', 'expected') + '\\n\\n' + msg + '\\n'; // indent\n                                                                                                                       //\n  msg = msg.replace(/^/gm, '      ');                                                                                  // 378\n  return msg;                                                                                                          // 379\n} /**                                                                                                                  // 380\n   * Returns a unified diff between two strings.                                                                       //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err with actual/expected                                                                           //\n   * @param {boolean} escape                                                                                           //\n   * @return {string} The diff.                                                                                        //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction unifiedDiff(err, escape) {                                                                                    // 390\n  var indent = '      ';                                                                                               // 391\n                                                                                                                       //\n  function cleanUp(line) {                                                                                             // 392\n    if (escape) {                                                                                                      // 393\n      line = escapeInvisibles(line);                                                                                   // 394\n    }                                                                                                                  // 395\n                                                                                                                       //\n    if (line[0] === '+') {                                                                                             // 396\n      return indent + colorLines('diff added', line);                                                                  // 397\n    }                                                                                                                  // 398\n                                                                                                                       //\n    if (line[0] === '-') {                                                                                             // 399\n      return indent + colorLines('diff removed', line);                                                                // 400\n    }                                                                                                                  // 401\n                                                                                                                       //\n    if (line.match(/\\@\\@/)) {                                                                                          // 402\n      return null;                                                                                                     // 403\n    }                                                                                                                  // 404\n                                                                                                                       //\n    if (line.match(/\\\\ No newline/)) {                                                                                 // 405\n      return null;                                                                                                     // 406\n    }                                                                                                                  // 407\n                                                                                                                       //\n    return indent + line;                                                                                              // 408\n  }                                                                                                                    // 409\n                                                                                                                       //\n  function notBlank(line) {                                                                                            // 410\n    return typeof line !== 'undefined' && line !== null;                                                               // 411\n  }                                                                                                                    // 412\n                                                                                                                       //\n  var msg = diff.createPatch('string', err.actual, err.expected);                                                      // 413\n  var lines = msg.split('\\n').splice(4);                                                                               // 414\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n} /**                                                                                                                  // 420\n   * Return a character diff for `err`.                                                                                //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {Error} err                                                                                                //\n   * @param {string} type                                                                                              //\n   * @param {boolean} escape                                                                                           //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction errorDiff(err, type, escape) {                                                                                // 431\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;                                                     // 432\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;                                               // 433\n  return diff['diff' + type](actual, expected).map(function (str) {                                                    // 434\n    if (str.added) {                                                                                                   // 435\n      return colorLines('diff added', str.value);                                                                      // 436\n    }                                                                                                                  // 437\n                                                                                                                       //\n    if (str.removed) {                                                                                                 // 438\n      return colorLines('diff removed', str.value);                                                                    // 439\n    }                                                                                                                  // 440\n                                                                                                                       //\n    return str.value;                                                                                                  // 441\n  }).join('');                                                                                                         // 442\n} /**                                                                                                                  // 443\n   * Returns a string with all invisible characters in plain text                                                      //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} line                                                                                              //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction escapeInvisibles(line) {                                                                                      // 452\n  return line.replace(/\\t/g, '<tab>').replace(/\\r/g, '<CR>').replace(/\\n/g, '<LF>\\n');                                 // 453\n} /**                                                                                                                  // 456\n   * Color lines for `str`, using the color `name`.                                                                    //\n   *                                                                                                                   //\n   * @api private                                                                                                      //\n   * @param {string} name                                                                                              //\n   * @param {string} str                                                                                               //\n   * @return {string}                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction colorLines(name, str) {                                                                                       // 466\n  return str.split('\\n').map(function (str) {                                                                          // 467\n    return color(name, str);                                                                                           // 468\n  }).join('\\n');                                                                                                       // 469\n} /**                                                                                                                  // 470\n   * Object#toString reference.                                                                                        //\n   */                                                                                                                  //\n                                                                                                                       //\nvar objToString = Object.prototype.toString; /**                                                                       // 475\n                                              * Check that a / b have the same type.                                   //\n                                              *                                                                        //\n                                              * @api private                                                           //\n                                              * @param {Object} a                                                      //\n                                              * @param {Object} b                                                      //\n                                              * @return {boolean}                                                      //\n                                              */                                                                       //\n                                                                                                                       //\nfunction sameType(a, b) {                                                                                              // 485\n  return objToString.call(a) === objToString.call(b);                                                                  // 486\n}                                                                                                                      // 487\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/meteor-node-stubs/package.json                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";\nexports.version = \"0.2.1\";\nexports.main = \"index.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/meteor-node-stubs/index.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"underscore\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/underscore/package.json                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"underscore\";\nexports.version = \"1.8.3\";\nexports.main = \"underscore.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"underscore.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/underscore/underscore.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"mocha\":{\"lib\":{\"test.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/test.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar inherits = require('./utils').inherits;\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @api private\n * @param {String} title\n * @param {Function} fn\n */\nfunction Test(title, fn) {\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n  this.body = (fn || '').toString();\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Test, Runnable);\n\nTest.prototype.clone = function() {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"suite.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/suite.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Hook = require('./hook');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:suite');\nvar milliseconds = require('./ms');\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite\n * with the same title is already present, that suite is returned to provide\n * nicer reporter and more flexible meta-testing.\n *\n * @api public\n * @param {Suite} parent\n * @param {string} title\n * @return {Suite}\n */\nexports.create = function(parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  if (parent.pending) {\n    suite.pending = true;\n  }\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Initialize a new `Suite` with the given `title` and `ctx`.\n *\n * @api private\n * @param {string} title\n * @param {Context} parentContext\n */\nfunction Suite(title, parentContext) {\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = !title;\n  this._timeout = 2000;\n  this._enableTimeouts = true;\n  this._slow = 75;\n  this._bail = false;\n  this._retries = -1;\n  this.delayed = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Return a clone of this `Suite`.\n *\n * @api private\n * @return {Suite}\n */\nSuite.prototype.clone = function() {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set timeout `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (ms.toString() === '0') {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set number of times to retry a failed test.\n *\n * @api private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n  * Set timeout to `enabled`.\n  *\n  * @api private\n  * @param {boolean} enabled\n  * @return {Suite|boolean} self or enabled\n  */\nSuite.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Set slow `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Sets whether to bail after first error.\n *\n * @api private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function(bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeAll.push(hook);\n  this.emit('beforeAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterAll.push(hook);\n  this.emit('afterAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeEach.push(hook);\n  this.emit('beforeEach', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterEach.push(hook);\n  this.emit('afterEach', hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @api private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function(suite) {\n  suite.parent = this;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit('suite', suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @api private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function(test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.enableTimeouts(this.enableTimeouts());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit('test', test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @api public\n * @return {string}\n */\nSuite.prototype.fullTitle = function() {\n  if (this.parent) {\n    var full = this.parent.fullTitle();\n    if (full) {\n      return full + ' ' + this.title;\n    }\n  }\n  return this.title;\n};\n\n/**\n * Return the total number of tests.\n *\n * @api public\n * @return {number}\n */\nSuite.prototype.total = function() {\n  return utils.reduce(this.suites, function(sum, suite) {\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @api private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function(fn) {\n  utils.forEach(this.tests, fn);\n  utils.forEach(this.suites, function(suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit('run');\n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/mocha/lib/utils.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar basename = require('path').basename;\nvar debug = require('debug')('mocha:watch');\nvar exists = require('fs').existsSync || require('path').existsSync;\nvar glob = require('glob');\nvar join = require('path').join;\nvar readdirSync = require('fs').readdirSync;\nvar statSync = require('fs').statSync;\nvar watchFile = require('fs').watchFile;\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\nexports.inherits = require('util').inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @api private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n */\nexports.forEach = function(arr, fn, scope) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    fn.call(scope, arr[i], i);\n  }\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @api private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function(obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n * @return {Array}\n */\nexports.map = function(arr, fn, scope) {\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    result.push(fn.call(scope, arr[i], i, arr));\n  }\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Object} obj to find index of\n * @param {number} start\n * @return {number}\n */\nexports.indexOf = function(arr, obj, start) {\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} val Initial value.\n * @return {*}\n */\nexports.reduce = function(arr, fn, val) {\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.filter = function(arr, fn) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) {\n      ret.push(val);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Array} keys\n */\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {\n  var keys = [];\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @api private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function(files, fn) {\n  var options = { interval: 100 };\n  files.forEach(function(file) {\n    debug('file %s', file);\n    watchFile(file, options, function(curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Array.isArray (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Boolean}\n */\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexports.isArray = isArray;\n\n/**\n * Buffer.prototype.toJSON polyfill.\n *\n * @type {Function}\n */\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {\n    return Array.prototype.slice.call(this, 0);\n  };\n}\n\n/**\n * Ignored files.\n *\n * @api private\n * @param {string} path\n * @return {boolean}\n */\nfunction ignored(path) {\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @api private\n * @param {string} dir\n * @param {string[]} [ext=['.js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function(dir, ext, ret) {\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  readdirSync(dir)\n    .filter(ignored)\n    .forEach(function(path) {\n      path = join(dir, path);\n      if (statSync(path).isDirectory()) {\n        exports.files(path, ext, ret);\n      } else if (path.match(re)) {\n        ret.push(path);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function(str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.trim = function(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @api private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function(qs) {\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {\n    var i = pair.indexOf('=');\n    var key = pair.slice(0, i);\n    var val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @api private\n * @param {string} js\n * @return {string}\n */\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @api private\n * @param {string} name\n */\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @api private\n * @param {*} value The value to inspect.\n * @param {string} [type] The type of the value, if known.\n * @returns {string}\n */\nfunction emptyRepresentation(value, type) {\n  type = type || exports.type(value);\n\n  switch (type) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @api private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string}\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n */\nexports.type = function type(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString.call(value)\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\n    .toLowerCase();\n};\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @api private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function(value) {\n  var type = exports.type(value);\n\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {\n    if (type !== 'buffer') {\n      return jsonStringify(value);\n    }\n    var json = value.toJSON();\n    // Based on the toJSON result\n    return jsonStringify(json.data && json.type ? json.data : json, 2)\n      .replace(/,(\\n|$)/g, '$1');\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, type);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @api private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify(object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = isArray(object) ? '[' : '{';\n  var end = isArray(object) ? ']' : '}';\n  var length = object.length || exports.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat(s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify(val) {\n    switch (exports.type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'number':\n        val = val === 0 && (1 / val) === -Infinity // `-0`\n          ? '-0'\n          : val.toString();\n        break;\n      case 'date':\n        var sDate = isNaN(val.getTime())        // Invalid date\n          ? val.toString()\n          : val.toISOString();\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val = (val === '[Function]' || val === '[Circular]')\n          ? val\n          : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!object.hasOwnProperty(i)) {\n      continue; // not my business\n    }\n    --length;\n    str += '\\n ' + repeat(' ', space)\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key\n      + _stringify(object[i])                     // value\n      + (length ? ',' : '');                     // comma\n  }\n\n  return str\n    // [], {}\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);\n}\n\n/**\n * Test if a value is a buffer.\n *\n * @api private\n * @param {*} value The value to test.\n * @return {boolean} True if `value` is a buffer, otherwise false\n */\nexports.isBuffer = function(value) {\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);\n};\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @api private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function(value, stack) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  var type = exports.type(value);\n  function withStack(value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (exports.indexOf(stack, value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (type) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function() {\n        canonicalizedObj = exports.map(value, function(item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, type);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function() {\n        exports.forEach(exports.keys(value).sort(), function(key) {\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n        });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value + '';\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Lookup file names at the given `path`.\n *\n * @api public\n * @param {string} path Base path to start searching from.\n * @param {string[]} extensions File extensions to look for.\n * @param {boolean} recursive Whether or not to recurse into subdirectories.\n * @return {string[]} An array of paths.\n */\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) {\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      }\n      return files;\n    }\n  }\n\n  try {\n    var stat = statSync(path);\n    if (stat.isFile()) {\n      return path;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  readdirSync(path).forEach(function(file) {\n    file = join(path, file);\n    try {\n      var stat = statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {\n      return;\n    }\n    files.push(file);\n  });\n\n  return files;\n};\n\n/**\n * Generate an undefined error with a message warning the user.\n *\n * @return {Error}\n */\n\nexports.undefinedError = function() {\n  return new Error('Caught undefined error, did you throw without specifying what?');\n};\n\n/**\n * Generate an undefined error if `err` is not defined.\n *\n * @param {Error} err\n * @return {Error}\n */\n\nexports.getError = function(err) {\n  return err || exports.undefinedError();\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function() {\n  // TODO: Replace with `process.browser`\n  var slash = '/';\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };\n  var cwd = is.node\n      ? process.cwd() + slash\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n\n  function isMochaInternal(line) {\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))\n      || (~line.indexOf('components' + slash + 'mocha' + slash))\n      || (~line.indexOf(slash + 'mocha.js'));\n  }\n\n  function isNodeInternal(line) {\n    return (~line.indexOf('(timers.js:'))\n      || (~line.indexOf('(events.js:'))\n      || (~line.indexOf('(node.js:'))\n      || (~line.indexOf('(module.js:'))\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))\n      || false;\n  }\n\n  return function(stack) {\n    stack = stack.split('\\n');\n\n    stack = exports.reduce(stack, function(list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      list.push(line.replace(cwd, ''));\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"diff\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/diff/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"diff\";\nexports.version = \"1.4.0\";\nexports.main = \"./diff\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"diff.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/diff/diff.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\n(function(global, undefined) {\n  var objectPrototypeToString = Object.prototype.toString;\n\n  /*istanbul ignore next*/\n  function map(arr, mapper, that) {\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, mapper, that);\n    }\n\n    var other = new Array(arr.length);\n\n    for (var i = 0, n = arr.length; i < n; i++) {\n      other[i] = mapper.call(that, arr[i], i, arr);\n    }\n    return other;\n  }\n  function clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n  }\n  function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  }\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n\n    return n;\n  }\n\n  // This function handles the presence of circular references by bailing out when encountering an\n  // object that is already on the \"stack\" of items being processed.\n  function canonicalize(obj, stack, replacementStack) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n\n    var i;\n\n    for (i = 0; i < stack.length; i += 1) {\n      if (stack[i] === obj) {\n        return replacementStack[i];\n      }\n    }\n\n    var canonicalizedObj;\n\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\n      stack.push(obj);\n      canonicalizedObj = new Array(obj.length);\n      replacementStack.push(canonicalizedObj);\n      for (i = 0; i < obj.length; i += 1) {\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else if (typeof obj === 'object' && obj !== null) {\n      stack.push(obj);\n      canonicalizedObj = {};\n      replacementStack.push(canonicalizedObj);\n      var sortedKeys = [],\n          key;\n      for (key in obj) {\n        sortedKeys.push(key);\n      }\n      sortedKeys.sort();\n      for (i = 0; i < sortedKeys.length; i += 1) {\n        key = sortedKeys[i];\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else {\n      canonicalizedObj = obj;\n    }\n    return canonicalizedObj;\n  }\n\n  function buildValues(components, newString, oldString, useLongestToken) {\n    var componentPos = 0,\n        componentLen = components.length,\n        newPos = 0,\n        oldPos = 0;\n\n    for (; componentPos < componentLen; componentPos++) {\n      var component = components[componentPos];\n      if (!component.removed) {\n        if (!component.added && useLongestToken) {\n          var value = newString.slice(newPos, newPos + component.count);\n          value = map(value, function(value, i) {\n            var oldValue = oldString[oldPos + i];\n            return oldValue.length > value.length ? oldValue : value;\n          });\n\n          component.value = value.join('');\n        } else {\n          component.value = newString.slice(newPos, newPos + component.count).join('');\n        }\n        newPos += component.count;\n\n        // Common case\n        if (!component.added) {\n          oldPos += component.count;\n        }\n      } else {\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');\n        oldPos += component.count;\n\n        // Reverse add and remove so removes are output first to match common convention\n        // The diffing algorithm is tied to add then remove output and this is the simplest\n        // route to get the desired output with minimal overhead.\n        if (componentPos && components[componentPos - 1].added) {\n          var tmp = components[componentPos - 1];\n          components[componentPos - 1] = components[componentPos];\n          components[componentPos] = tmp;\n        }\n      }\n    }\n\n    return components;\n  }\n\n  function Diff(ignoreWhitespace) {\n    this.ignoreWhitespace = ignoreWhitespace;\n  }\n  Diff.prototype = {\n    diff: function(oldString, newString, callback) {\n      var self = this;\n\n      function done(value) {\n        if (callback) {\n          setTimeout(function() { callback(undefined, value); }, 0);\n          return true;\n        } else {\n          return value;\n        }\n      }\n\n      // Handle the identity case (this is due to unrolling editLength == 0\n      if (newString === oldString) {\n        return done([{ value: newString }]);\n      }\n      if (!newString) {\n        return done([{ value: oldString, removed: true }]);\n      }\n      if (!oldString) {\n        return done([{ value: newString, added: true }]);\n      }\n\n      newString = this.tokenize(newString);\n      oldString = this.tokenize(oldString);\n\n      var newLen = newString.length, oldLen = oldString.length;\n      var editLength = 1;\n      var maxEditLength = newLen + oldLen;\n      var bestPath = [{ newPos: -1, components: [] }];\n\n      // Seed editLength = 0, i.e. the content starts with the same values\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        // Identity per the equality and tokenizer\n        return done([{value: newString.join('')}]);\n      }\n\n      // Main worker method. checks all permutations of a given edit length for acceptance.\n      function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n          var basePath;\n          var addPath = bestPath[diagonalPath - 1],\n              removePath = bestPath[diagonalPath + 1],\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n          if (addPath) {\n            // No one else is going to attempt to use this value, clear it\n            bestPath[diagonalPath - 1] = undefined;\n          }\n\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n          if (!canAdd && !canRemove) {\n            // If this path is a terminal then prune\n            bestPath[diagonalPath] = undefined;\n            continue;\n          }\n\n          // Select the diagonal that we want to branch from. We select the prior\n          // path whose position in the new string is the farthest from the origin\n          // and does not pass the bounds of the diff graph\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n            basePath = clonePath(removePath);\n            self.pushComponent(basePath.components, undefined, true);\n          } else {\n            basePath = addPath;   // No need to clone, we've pulled it from the list\n            basePath.newPos++;\n            self.pushComponent(basePath.components, true, undefined);\n          }\n\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n          // If we have hit the end of both strings, then we are done\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));\n          } else {\n            // Otherwise track this path as a potential candidate and continue.\n            bestPath[diagonalPath] = basePath;\n          }\n        }\n\n        editLength++;\n      }\n\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the\n      // sync and async mode which is never fun. Loops over execEditLength until a value\n      // is produced.\n      if (callback) {\n        (function exec() {\n          setTimeout(function() {\n            // This should not happen, but we want to be safe.\n            /*istanbul ignore next */\n            if (editLength > maxEditLength) {\n              return callback();\n            }\n\n            if (!execEditLength()) {\n              exec();\n            }\n          }, 0);\n        }());\n      } else {\n        while (editLength <= maxEditLength) {\n          var ret = execEditLength();\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    pushComponent: function(components, added, removed) {\n      var last = components[components.length - 1];\n      if (last && last.added === added && last.removed === removed) {\n        // We need to clone here as the component clone operation is just\n        // as shallow array clone\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };\n      } else {\n        components.push({count: 1, added: added, removed: removed });\n      }\n    },\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {\n      var newLen = newString.length,\n          oldLen = oldString.length,\n          newPos = basePath.newPos,\n          oldPos = newPos - diagonalPath,\n\n          commonCount = 0;\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n      }\n\n      if (commonCount) {\n        basePath.components.push({count: commonCount});\n      }\n\n      basePath.newPos = newPos;\n      return oldPos;\n    },\n\n    equals: function(left, right) {\n      var reWhitespace = /\\S/;\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n    },\n    tokenize: function(value) {\n      return value.split('');\n    }\n  };\n\n  var CharDiff = new Diff();\n\n  var WordDiff = new Diff(true);\n  var WordWithSpaceDiff = new Diff();\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\s+|\\b)/));\n  };\n\n  var CssDiff = new Diff(true);\n  CssDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\n  };\n\n  var LineDiff = new Diff();\n\n  var TrimmedLineDiff = new Diff();\n  TrimmedLineDiff.ignoreTrim = true;\n\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {\n    var retLines = [],\n        lines = value.split(/^/m);\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i],\n          lastLine = lines[i - 1],\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];\n\n      // Merge lines that may contain windows new lines\n      if (line === '\\n' && lastLineLastChar === '\\r') {\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';\n      } else {\n        if (this.ignoreTrim) {\n          line = line.trim();\n          // add a newline unless this is the last line.\n          if (i < lines.length - 1) {\n            line += '\\n';\n          }\n        }\n        retLines.push(line);\n      }\n    }\n\n    return retLines;\n  };\n\n  var PatchDiff = new Diff();\n  PatchDiff.tokenize = function(value) {\n    var ret = [],\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n    // Ignore the final empty token that occurs if the string ends with a new line\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n      linesAndNewlines.pop();\n    }\n\n    // Merge the content and line separators into single tokens\n    for (var i = 0; i < linesAndNewlines.length; i++) {\n      var line = linesAndNewlines[i];\n\n      if (i % 2) {\n        ret[ret.length - 1] += line;\n      } else {\n        ret.push(line);\n      }\n    }\n    return ret;\n  };\n\n  var SentenceDiff = new Diff();\n  SentenceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));\n  };\n\n  var JsonDiff = new Diff();\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n  JsonDiff.useLongestToken = true;\n  JsonDiff.tokenize = LineDiff.tokenize;\n  JsonDiff.equals = function(left, right) {\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n  };\n\n  var JsDiff = {\n    Diff: Diff,\n\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },\n\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },\n\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },\n    diffJson: function(oldObj, newObj, callback) {\n      return JsonDiff.diff(\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),\n        callback\n      );\n    },\n\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {\n      var ret = [];\n\n      if (oldFileName == newFileName) {\n        ret.push('Index: ' + oldFileName);\n      }\n      ret.push('===================================================================');\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\n\n      var diff = PatchDiff.diff(oldStr, newStr);\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n      // Formats a given set of lines for printing as context lines in a patch\n      function contextLines(lines) {\n        return map(lines, function(entry) { return ' ' + entry; });\n      }\n\n      // Outputs the no newline at end of file warning if needed\n      function eofNL(curRange, i, current) {\n        var last = diff[diff.length - 2],\n            isLast = i === diff.length - 2,\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;\n\n        // Figure out if this is the last line for the given file and missing NL\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {\n          curRange.push('\\\\ No newline at end of file');\n        }\n      }\n\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\n          oldLine = 1, newLine = 1;\n      for (var i = 0; i < diff.length; i++) {\n        var current = diff[i],\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n        current.lines = lines;\n\n        if (current.added || current.removed) {\n          // If we have previous context, start with that\n          if (!oldRangeStart) {\n            var prev = diff[i - 1];\n            oldRangeStart = oldLine;\n            newRangeStart = newLine;\n\n            if (prev) {\n              curRange = contextLines(prev.lines.slice(-4));\n              oldRangeStart -= curRange.length;\n              newRangeStart -= curRange.length;\n            }\n          }\n\n          // Output our changes\n          curRange.push.apply(curRange, map(lines, function(entry) {\n            return (current.added ? '+' : '-') + entry;\n          }));\n          eofNL(curRange, i, current);\n\n          // Track the updated file position\n          if (current.added) {\n            newLine += lines.length;\n          } else {\n            oldLine += lines.length;\n          }\n        } else {\n          // Identical context lines. Track line changes\n          if (oldRangeStart) {\n            // Close out any changes that have been output (or join overlapping)\n            if (lines.length <= 8 && i < diff.length - 2) {\n              // Overlapping\n              curRange.push.apply(curRange, contextLines(lines));\n            } else {\n              // end the range and output\n              var contextSize = Math.min(lines.length, 4);\n              ret.push(\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)\n                  + ' @@');\n              ret.push.apply(ret, curRange);\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\n              if (lines.length <= 4) {\n                eofNL(ret, i, current);\n              }\n\n              oldRangeStart = 0;\n              newRangeStart = 0;\n              curRange = [];\n            }\n          }\n          oldLine += lines.length;\n          newLine += lines.length;\n        }\n      }\n\n      return ret.join('\\n') + '\\n';\n    },\n\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);\n    },\n\n    applyPatch: function(oldStr, uniDiff) {\n      var diffstr = uniDiff.split('\\n'),\n          hunks = [],\n          i = 0,\n          remEOFNL = false,\n          addEOFNL = false;\n\n      // Skip to the first change hunk\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {\n        i++;\n      }\n\n      // Parse the unified diff\n      for (; i < diffstr.length; i++) {\n        if (diffstr[i][0] === '@') {\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\n          hunks.unshift({\n            start: chnukHeader[3],\n            oldlength: +chnukHeader[2],\n            removed: [],\n            newlength: chnukHeader[4],\n            added: []\n          });\n        } else if (diffstr[i][0] === '+') {\n          hunks[0].added.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '-') {\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === ' ') {\n          hunks[0].added.push(diffstr[i].substr(1));\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '\\\\') {\n          if (diffstr[i - 1][0] === '+') {\n            remEOFNL = true;\n          } else if (diffstr[i - 1][0] === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n\n      // Apply the diff to the input\n      var lines = oldStr.split('\\n');\n      for (i = hunks.length - 1; i >= 0; i--) {\n        var hunk = hunks[i];\n        // Sanity check the input string. Bail if we don't match.\n        for (var j = 0; j < hunk.oldlength; j++) {\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {\n            return false;\n          }\n        }\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));\n      }\n\n      // Handle EOFNL insertion/removal\n      if (remEOFNL) {\n        while (!lines[lines.length - 1]) {\n          lines.pop();\n        }\n      } else if (addEOFNL) {\n        lines.push('');\n      }\n      return lines.join('\\n');\n    },\n\n    convertChangesToXML: function(changes) {\n      var ret = [];\n      for (var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n        if (change.added) {\n          ret.push('<ins>');\n        } else if (change.removed) {\n          ret.push('<del>');\n        }\n\n        ret.push(escapeHTML(change.value));\n\n        if (change.added) {\n          ret.push('</ins>');\n        } else if (change.removed) {\n          ret.push('</del>');\n        }\n      }\n      return ret.join('');\n    },\n\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n    convertChangesToDMP: function(changes) {\n      var ret = [],\n          change,\n          operation;\n      for (var i = 0; i < changes.length; i++) {\n        change = changes[i];\n        if (change.added) {\n          operation = 1;\n        } else if (change.removed) {\n          operation = -1;\n        } else {\n          operation = 0;\n        }\n\n        ret.push([operation, change.value]);\n      }\n      return ret;\n    },\n\n    canonicalize: canonicalize\n  };\n\n  /*istanbul ignore next */\n  /*global module */\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = JsDiff;\n  } else if (typeof define === 'function' && define.amd) {\n    /*global define */\n    define([], function() { return JsDiff; });\n  } else if (typeof global.JsDiff === 'undefined') {\n    global.JsDiff = JsDiff;\n  }\n}(this));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"debug\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/debug/package.json                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"debug\";\nexports.version = \"2.2.0\";\nexports.main = \"./node.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/debug/node.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();\n  if (0 === debugColors.length) {\n    return tty.isatty(fd);\n  } else {\n    return '0' !== debugColors\n        && 'no' !== debugColors\n        && 'false' !== debugColors\n        && 'disabled' !== debugColors;\n  }\n}\n\n/**\n * Map %o to `util.inspect()`, since Node doesn't do that out of the box.\n */\n\nvar inspect = (4 === util.inspect.length ?\n  // node <= 0.8.x\n  function (v, colors) {\n    return util.inspect(v, void 0, void 0, colors);\n  } :\n  // node > 0.8.x\n  function (v, colors) {\n    return util.inspect(v, { colors: colors });\n  }\n);\n\nexports.formatters.o = function(v) {\n  return inspect(v, this.useColors)\n    .replace(/\\s*\\n\\s*/g, ' ');\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n  var name = this.namespace;\n\n  if (useColors) {\n    var c = this.color;\n\n    args[0] = '  \\u001b[3' + c + ';1m' + name + ' '\n      + '\\u001b[0m'\n      + args[0] + '\\u001b[3' + c + 'm'\n      + ' +' + exports.humanize(this.diff) + '\\u001b[0m';\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n  return args;\n}\n\n/**\n * Invokes `console.error()` with the specified arguments.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(this, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"glob\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.2.4.5_6.9lhb3b++os+web.browser+web.cordova/npm/node_modules/glob/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"glob\";\nexports.version = \"3.2.3\";\nexports.main = \"glob.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"glob.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/glob/glob.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n// readdir(PREFIX) as ENTRIES\n//   If fails, END\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $])\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\n\n\nmodule.exports = glob\n\nvar fs = require(\"graceful-fs\")\n, minimatch = require(\"minimatch\")\n, Minimatch = minimatch.Minimatch\n, inherits = require(\"inherits\")\n, EE = require(\"events\").EventEmitter\n, path = require(\"path\")\n, isDir = {}\n, assert = require(\"assert\").ok\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === \"function\") cb = options, options = {}\n  if (!options) options = {}\n\n  if (typeof options === \"number\") {\n    deprecated()\n    return\n  }\n\n  var g = new Glob(pattern, options, cb)\n  return g.sync ? g.found : g\n}\n\nglob.fnmatch = deprecated\n\nfunction deprecated () {\n  throw new Error(\"glob's interface has changed. Please see the docs.\")\n}\n\nglob.sync = globSync\nfunction globSync (pattern, options) {\n  if (typeof options === \"number\") {\n    deprecated()\n    return\n  }\n\n  options = options || {}\n  options.sync = true\n  return glob(pattern, options)\n}\n\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options, cb)\n  }\n\n  if (typeof cb === \"function\") {\n    this.on(\"error\", cb)\n    this.on(\"end\", function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  options = options || {}\n\n  this.EOF = {}\n  this._emitQueue = []\n\n  this.maxDepth = options.maxDepth || 1000\n  this.maxLength = options.maxLength || Infinity\n  this.cache = options.cache || {}\n  this.statCache = options.statCache || {}\n\n  this.changedCwd = false\n  var cwd = process.cwd()\n  if (!options.hasOwnProperty(\"cwd\")) this.cwd = cwd\n  else {\n    this.cwd = options.cwd\n    this.changedCwd = path.resolve(options.cwd) !== cwd\n  }\n\n  this.root = options.root || path.resolve(this.cwd, \"/\")\n  this.root = path.resolve(this.root)\n  if (process.platform === \"win32\")\n    this.root = this.root.replace(/\\\\/g, \"/\")\n\n  this.nomount = !!options.nomount\n\n  if (!pattern) {\n    throw new Error(\"must provide pattern\")\n  }\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  this.strict = options.strict !== false\n  this.dot = !!options.dot\n  this.mark = !!options.mark\n  this.sync = !!options.sync\n  this.nounique = !!options.nounique\n  this.nonull = !!options.nonull\n  this.nosort = !!options.nosort\n  this.nocase = !!options.nocase\n  this.stat = !!options.stat\n\n  this.debug = !!options.debug || !!options.globDebug\n  if (this.debug)\n    this.log = console.error\n\n  this.silent = !!options.silent\n\n  var mm = this.minimatch = new Minimatch(pattern, options)\n  this.options = mm.options\n  pattern = this.pattern = mm.pattern\n\n  this.error = null\n  this.aborted = false\n\n  // list of all the patterns that ** has resolved do, so\n  // we can avoid visiting multiple times.\n  this._globstars = {}\n\n  EE.call(this)\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  this.minimatch.set.forEach(iterator.bind(this))\n  function iterator (pattern, i, set) {\n    this._process(pattern, 0, i, function (er) {\n      if (er) this.emit(\"error\", er)\n      if (-- n <= 0) this._finish()\n    })\n  }\n}\n\nGlob.prototype.log = function () {}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n\n  var nou = this.nounique\n  , all = nou ? [] : {}\n\n  for (var i = 0, l = this.matches.length; i < l; i ++) {\n    var matches = this.matches[i]\n    this.log(\"matches[%d] =\", i, matches)\n    // do like the shell, and spit out the literal glob\n    if (!matches) {\n      if (this.nonull) {\n        var literal = this.minimatch.globSet[i]\n        if (nou) all.push(literal)\n        else all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou) all.push.apply(all, m)\n      else m.forEach(function (m) {\n        all[m] = true\n      })\n    }\n  }\n\n  if (!nou) all = Object.keys(all)\n\n  if (!this.nosort) {\n    all = all.sort(this.nocase ? alphasorti : alphasort)\n  }\n\n  if (this.mark) {\n    // at *some* point we statted all of these\n    all = all.map(function (m) {\n      var sc = this.cache[m]\n      if (!sc)\n        return m\n      var isDir = (Array.isArray(sc) || sc === 2)\n      if (isDir && m.slice(-1) !== \"/\") {\n        return m + \"/\"\n      }\n      if (!isDir && m.slice(-1) === \"/\") {\n        return m.replace(/\\/+$/, \"\")\n      }\n      return m\n    }, this)\n  }\n\n  this.log(\"emitting end\", all)\n\n  this.EOF = this.found = all\n  this.emitMatch(this.EOF)\n}\n\nfunction alphasorti (a, b) {\n  a = a.toLowerCase()\n  b = b.toLowerCase()\n  return alphasort(a, b)\n}\n\nfunction alphasort (a, b) {\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit(\"abort\")\n}\n\nGlob.prototype.pause = function () {\n  if (this.paused) return\n  if (this.sync)\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))\n  this.paused = true\n  this.emit(\"pause\")\n}\n\nGlob.prototype.resume = function () {\n  if (!this.paused) return\n  if (this.sync)\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))\n  this.paused = false\n  this.emit(\"resume\")\n  this._processEmitQueue()\n  //process.nextTick(this.emit.bind(this, \"resume\"))\n}\n\nGlob.prototype.emitMatch = function (m) {\n  if (!this.stat || this.statCache[m] || m === this.EOF) {\n    this._emitQueue.push(m)\n    this._processEmitQueue()\n  } else {\n    this._stat(m, function(exists, isDir) {\n      if (exists) {\n        this._emitQueue.push(m)\n        this._processEmitQueue()\n      }\n    })\n  }\n}\n\nGlob.prototype._processEmitQueue = function (m) {\n  while (!this._processingEmitQueue &&\n         !this.paused) {\n    this._processingEmitQueue = true\n    var m = this._emitQueue.shift()\n    if (!m) {\n      this._processingEmitQueue = false\n      break\n    }\n\n    this.log('emit!', m === this.EOF ? \"end\" : \"match\")\n\n    this.emit(m === this.EOF ? \"end\" : \"match\", m)\n    this._processingEmitQueue = false\n  }\n}\n\nGlob.prototype._process = function (pattern, depth, index, cb_) {\n  assert(this instanceof Glob)\n\n  var cb = function cb (er, res) {\n    assert(this instanceof Glob)\n    if (this.paused) {\n      if (!this._processQueue) {\n        this._processQueue = []\n        this.once(\"resume\", function () {\n          var q = this._processQueue\n          this._processQueue = null\n          q.forEach(function (cb) { cb() })\n        })\n      }\n      this._processQueue.push(cb_.bind(this, er, res))\n    } else {\n      cb_.call(this, er, res)\n    }\n  }.bind(this)\n\n  if (this.aborted) return cb()\n\n  if (depth > this.maxDepth) return cb()\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === \"string\") {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      prefix = pattern.join(\"/\")\n      this._stat(prefix, function (exists, isDir) {\n        // either it's there, or it isn't.\n        // nothing more to do, either way.\n        if (exists) {\n          if (prefix && isAbsolute(prefix) && !this.nomount) {\n            if (prefix.charAt(0) === \"/\") {\n              prefix = path.join(this.root, prefix)\n            } else {\n              prefix = path.resolve(this.root, prefix)\n            }\n          }\n\n          if (process.platform === \"win32\")\n            prefix = prefix.replace(/\\\\/g, \"/\")\n\n          this.matches[index] = this.matches[index] || {}\n          this.matches[index][prefix] = true\n          this.emitMatch(prefix)\n        }\n        return cb()\n      })\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's \"absolute\" like /foo/bar,\n      // or \"relative\" like \"../baz\"\n      prefix = pattern.slice(0, n)\n      prefix = prefix.join(\"/\")\n      break\n  }\n\n  // get the list of entries.\n  var read\n  if (prefix === null) read = \".\"\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join(\"/\"))) {\n    if (!prefix || !isAbsolute(prefix)) {\n      prefix = path.join(\"/\", prefix)\n    }\n    read = prefix = path.resolve(prefix)\n\n    // if (process.platform === \"win32\")\n    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\\\/g, \"/\")\n\n    this.log('absolute: ', prefix, this.root, pattern, read)\n  } else {\n    read = prefix\n  }\n\n  this.log('readdir(%j)', read, this.cwd, this.root)\n\n  return this._readdir(read, function (er, entries) {\n    if (er) {\n      // not a directory!\n      // this means that, whatever else comes after this, it can never match\n      return cb()\n    }\n\n    // globstar is special\n    if (pattern[n] === minimatch.GLOBSTAR) {\n      // test without the globstar, and with every child both below\n      // and replacing the globstar.\n      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]\n      entries.forEach(function (e) {\n        if (e.charAt(0) === \".\" && !this.dot) return\n        // instead of the globstar\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))\n        // below the globstar\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))\n      }, this)\n\n      s = s.filter(function (pattern) {\n        var key = gsKey(pattern)\n        var seen = !this._globstars[key]\n        this._globstars[key] = true\n        return seen\n      }, this)\n\n      if (!s.length)\n        return cb()\n\n      // now asyncForEach over this\n      var l = s.length\n      , errState = null\n      s.forEach(function (gsPattern) {\n        this._process(gsPattern, depth + 1, index, function (er) {\n          if (errState) return\n          if (er) return cb(errState = er)\n          if (--l <= 0) return cb()\n        })\n      }, this)\n\n      return\n    }\n\n    // not a globstar\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    var pn = pattern[n]\n    var rawGlob = pattern[n]._glob\n    , dotOk = this.dot || rawGlob.charAt(0) === \".\"\n\n    entries = entries.filter(function (e) {\n      return (e.charAt(0) !== \".\" || dotOk) &&\n             e.match(pattern[n])\n    })\n\n    // If n === pattern.length - 1, then there's no need for the extra stat\n    // *unless* the user has specified \"mark\" or \"stat\" explicitly.\n    // We know that they exist, since the readdir returned them.\n    if (n === pattern.length - 1 &&\n        !this.mark &&\n        !this.stat) {\n      entries.forEach(function (e) {\n        if (prefix) {\n          if (prefix !== \"/\") e = prefix + \"/\" + e\n          else e = prefix + e\n        }\n        if (e.charAt(0) === \"/\" && !this.nomount) {\n          e = path.join(this.root, e)\n        }\n\n        if (process.platform === \"win32\")\n          e = e.replace(/\\\\/g, \"/\")\n\n        this.matches[index] = this.matches[index] || {}\n        this.matches[index][e] = true\n        this.emitMatch(e)\n      }, this)\n      return cb.call(this)\n    }\n\n\n    // now test all the remaining entries as stand-ins for that part\n    // of the pattern.\n    var l = entries.length\n    , errState = null\n    if (l === 0) return cb() // no matches possible\n    entries.forEach(function (e) {\n      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))\n      this._process(p, depth + 1, index, function (er) {\n        if (errState) return\n        if (er) return cb(errState = er)\n        if (--l === 0) return cb.call(this)\n      })\n    }, this)\n  })\n\n}\n\nfunction gsKey (pattern) {\n  return '**' + pattern.map(function (p) {\n    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)\n  }).join('/')\n}\n\nGlob.prototype._stat = function (f, cb) {\n  assert(this instanceof Glob)\n  var abs = f\n  if (f.charAt(0) === \"/\") {\n    abs = path.join(this.root, f)\n  } else if (this.changedCwd) {\n    abs = path.resolve(this.cwd, f)\n  }\n\n  if (f.length > this.maxLength) {\n    var er = new Error(\"Path name too long\")\n    er.code = \"ENAMETOOLONG\"\n    er.path = f\n    return this._afterStat(f, abs, cb, er)\n  }\n\n  this.log('stat', [this.cwd, f, '=', abs])\n\n  if (!this.stat && this.cache.hasOwnProperty(f)) {\n    var exists = this.cache[f]\n    , isDir = exists && (Array.isArray(exists) || exists === 2)\n    if (this.sync) return cb.call(this, !!exists, isDir)\n    return process.nextTick(cb.bind(this, !!exists, isDir))\n  }\n\n  var stat = this.statCache[abs]\n  if (this.sync || stat) {\n    var er\n    try {\n      stat = fs.statSync(abs)\n    } catch (e) {\n      er = e\n    }\n    this._afterStat(f, abs, cb, er, stat)\n  } else {\n    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))\n  }\n}\n\nGlob.prototype._afterStat = function (f, abs, cb, er, stat) {\n  var exists\n  assert(this instanceof Glob)\n\n  if (abs.slice(-1) === \"/\" && stat && !stat.isDirectory()) {\n    this.log(\"should be ENOTDIR, fake it\")\n\n    er = new Error(\"ENOTDIR, not a directory '\" + abs + \"'\")\n    er.path = abs\n    er.code = \"ENOTDIR\"\n    stat = null\n  }\n\n  var emit = !this.statCache[abs]\n  this.statCache[abs] = stat\n\n  if (er || !stat) {\n    exists = false\n  } else {\n    exists = stat.isDirectory() ? 2 : 1\n    if (emit)\n      this.emit('stat', f, stat)\n  }\n  this.cache[f] = this.cache[f] || exists\n  cb.call(this, !!exists, exists === 2)\n}\n\nGlob.prototype._readdir = function (f, cb) {\n  assert(this instanceof Glob)\n  var abs = f\n  if (f.charAt(0) === \"/\") {\n    abs = path.join(this.root, f)\n  } else if (isAbsolute(f)) {\n    abs = f\n  } else if (this.changedCwd) {\n    abs = path.resolve(this.cwd, f)\n  }\n\n  if (f.length > this.maxLength) {\n    var er = new Error(\"Path name too long\")\n    er.code = \"ENAMETOOLONG\"\n    er.path = f\n    return this._afterReaddir(f, abs, cb, er)\n  }\n\n  this.log('readdir', [this.cwd, f, abs])\n  if (this.cache.hasOwnProperty(f)) {\n    var c = this.cache[f]\n    if (Array.isArray(c)) {\n      if (this.sync) return cb.call(this, null, c)\n      return process.nextTick(cb.bind(this, null, c))\n    }\n\n    if (!c || c === 1) {\n      // either ENOENT or ENOTDIR\n      var code = c ? \"ENOTDIR\" : \"ENOENT\"\n      , er = new Error((c ? \"Not a directory\" : \"Not found\") + \": \" + f)\n      er.path = f\n      er.code = code\n      this.log(f, er)\n      if (this.sync) return cb.call(this, er)\n      return process.nextTick(cb.bind(this, er))\n    }\n\n    // at this point, c === 2, meaning it's a dir, but we haven't\n    // had to read it yet, or c === true, meaning it's *something*\n    // but we don't have any idea what.  Need to read it, either way.\n  }\n\n  if (this.sync) {\n    var er, entries\n    try {\n      entries = fs.readdirSync(abs)\n    } catch (e) {\n      er = e\n    }\n    return this._afterReaddir(f, abs, cb, er, entries)\n  }\n\n  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))\n}\n\nGlob.prototype._afterReaddir = function (f, abs, cb, er, entries) {\n  assert(this instanceof Glob)\n  if (entries && !er) {\n    this.cache[f] = entries\n    // if we haven't asked to stat everything for suresies, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.  This also gets us one step\n    // further into ELOOP territory.\n    if (!this.mark && !this.stat) {\n      entries.forEach(function (e) {\n        if (f === \"/\") e = f + e\n        else e = f + \"/\" + e\n        this.cache[e] = true\n      }, this)\n    }\n\n    return cb.call(this, er, entries)\n  }\n\n  // now handle errors, and cache the information\n  if (er) switch (er.code) {\n    case \"ENOTDIR\": // totally normal. means it *does* exist.\n      this.cache[f] = 1\n      return cb.call(this, er)\n    case \"ENOENT\": // not terribly unusual\n    case \"ELOOP\":\n    case \"ENAMETOOLONG\":\n    case \"UNKNOWN\":\n      this.cache[f] = false\n      return cb.call(this, er)\n    default: // some unusual error.  Treat as failure.\n      this.cache[f] = false\n      if (this.strict) this.emit(\"error\", er)\n      if (!this.silent) console.error(\"glob error\", er)\n      return cb.call(this, er)\n  }\n}\n\nvar isAbsolute = process.platform === \"win32\" ? absWin : absUnix\n\nfunction absWin (p) {\n  if (absUnix(p)) return true\n  // pull off the device/UNC bit from a windows path.\n  // from node's lib/path.js\n  var splitDeviceRe =\n      /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/\n    , result = splitDeviceRe.exec(p)\n    , device = result[1] || ''\n    , isUnc = device && device.charAt(1) !== ':'\n    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute\n\n  return isAbsolute\n}\n\nfunction absUnix (p) {\n  return p.charAt(0) === \"/\" || p === \"\"\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"supports-color\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/supports-color/index.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';\nvar argv = process.argv;\n\nmodule.exports = (function () {\n\tif (argv.indexOf('--no-color') !== -1 ||\n\t\targv.indexOf('--no-colors') !== -1 ||\n\t\targv.indexOf('--color=false') !== -1) {\n\t\treturn false;\n\t}\n\n\tif (argv.indexOf('--color') !== -1 ||\n\t\targv.indexOf('--colors') !== -1 ||\n\t\targv.indexOf('--color=true') !== -1 ||\n\t\targv.indexOf('--color=always') !== -1) {\n\t\treturn true;\n\t}\n\n\tif (process.stdout && !process.stdout.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn true;\n\t}\n\n\tif ('COLORTERM' in process.env) {\n\t\treturn true;\n\t}\n\n\tif (process.env.TERM === 'dumb') {\n\t\treturn false;\n\t}\n\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n})();\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"escape-string-regexp\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/practicalmeteor_mocha/node_modules/escape-string-regexp/index.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".coffee\"\n  ]\n});\nrequire(\"./node_modules/meteor/practicalmeteor:mocha/meteor/src/server/autoupdate.js\");\nvar exports = require(\"./node_modules/meteor/practicalmeteor:mocha/meteor/src/index.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:mocha'] = exports, {\n  runTests: runTests\n});\n\n})();\n","servePath":"/packages/practicalmeteor_mocha.js","sourceMap":{"version":3,"sources":["packages/practicalmeteor:mocha/meteor/src/server/autoupdate.js","packages/practicalmeteor:mocha/meteor/src/index.js","/packages/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/BaseReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/MeteorPublishReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/MirrorReporter.coffee","/packages/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee","packages/practicalmeteor:mocha/meteor/src/reporters/html.js","packages/practicalmeteor:mocha/meteor/src/reporters/index.js","packages/practicalmeteor:mocha/meteor/src/setup/index.js","packages/practicalmeteor:mocha/meteor/src/setup/setupMochaClient.js","packages/practicalmeteor:mocha/lib/ms.js","packages/practicalmeteor:mocha/lib/utils.js","packages/practicalmeteor:mocha/lib/browser/progress.js","packages/practicalmeteor:mocha/lib/reporters/base.js"],"names":["Autoupdate","module","watch","require","v","Random","autoupdateVersion","id","export","runTests","MochaRunner","BaseReporter","ClientServerBaseReporter","HtmlReporter","before","after","beforeEach","afterEach","describe","xdescribe","it","xit","specify","xspecify","xcontext","context","hideOtherCSS","hideApp","runEverywhere","global","Base","utils","Progress","escapeRe","escape","Date","setTimeout","setInterval","clearTimeout","clearInterval","exports","HTML","runner","options","call","elementIdPrefix","statsTemplate","self","stats","stat","fragment","items","getElementsByTagName","passes","passesLink","failures","failuresLink","duration","canvas","report","stack","progress","ctx","root","document","getElementById","getContext","ratio","window","devicePixelRatio","style","width","height","scale","error","on","unhide","name","test","className","replace","trim","hideSuitesWithout","appendChild","size","suite","url","suiteURL","el","title","unshift","createElement","shift","body","fn","toString","type","emit","percent","tests","total","update","draw","ms","start","text","toFixed","state","testURL","speed","pending","stackString","message","err","indexOfMessage","indexOf","substr","length","sourceURL","line","undefined","htmlMessage","h2","pre","display","clean","makeUrl","s","search","location","pathname","encodeURIComponent","prototype","fullTitle","msg","html","args","arguments","div","i","innerHTML","_","String","firstChild","classname","suites","getElementsByClassName","els","contents","textContent","innerText","event","addEventListener","attachEvent","HTML_REPORTER","CONSOLE_REPORTER","XUNIT_REPORTER","REPORTERS","reporters","ConsoleReporter","XunitReporter","mochaInstance","setupMochaClient","Meteor","isClient","isServer","mocha","module1","meteorInstall","exportDefault","process","browser","node_modules","r","e","isatty","m","h","d","y","val","parse","longFormat","shortFormat","str","match","exec","n","parseFloat","toLowerCase","Math","round","plural","floor","ceil","basename","debug","exists","existsSync","glob","join","readdirSync","statSync","watchFile","ignore","inherits","forEach","arr","scope","l","isString","obj","map","result","push","reduce","rval","filter","ret","keys","Object","has","hasOwnProperty","key","files","interval","file","curr","prev","mtime","isArray","Array","Buffer","toJSON","slice","ignored","path","dir","ext","re","RegExp","isDirectory","slug","spaces","tabs","parseQuery","qs","split","pair","decodeURIComponent","highlight","js","highlightTags","code","len","emptyRepresentation","value","isBuffer","stringify","jsonStringify","json","data","prop","canonicalize","object","depth","_stringify","space","end","repeat","Infinity","sDate","isNaN","getTime","toISOString","JSON","canonicalizedObj","withStack","pop","item","sort","lookupFiles","extensions","recursive","sync","Error","isFile","concat","undefinedError","getError","stackTraceFilter","slash","is","node","cwd","href","isMochaInternal","isNodeInternal","list","fontSize","font","_size","_text","_fontSize","family","_font","min","half","x","rad","angle","PI","clearRect","strokeStyle","beginPath","arc","stroke","w","measureText","fillText","tty","diff","supportsColor","useColors","env","MOCHA_COLORS","inlineDiffs","colors","pass","fail","checkmark","fast","medium","slow","green","light","symbols","ok","dot","platform","color","stdout","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","console","log","fmt","inspect","index","actual","expected","uncaught","showDiff","sameType","inlineDiff","unifiedDiff","epilogue","pad","errorDiff","lines","indent","cleanUp","escapeInvisibles","colorLines","notBlank","createPatch","splice","added","removed","objToString","a","b"],"mappings":"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","file":"/packages/practicalmeteor_mocha.js","sourcesContent":["import {Autoupdate} from \"meteor/autoupdate\"\nimport {Random} from \"meteor/random\"\n// autoupdate normally won't reload on server-only changes, but when\n// running tests in the browser it's nice to have server changes cause\n// the tests to reload.  Setting the auto update version to a\n// different value when the server restarts accomplishes this.\nAutoupdate.autoupdateVersion = Random.id();\n","import \"./setup\"\nimport MochaRunner  from \"./lib/MochaRunner\"\nimport BaseReporter from \"./reporters/BaseReporter\"\nimport ClientServerBaseReporter from \"./reporters/ClientServerBaseReporter\"\nimport HtmlReporter from \"./reporters/HtmlReporter\"\nimport {hideOtherCSS, hideApp} from 'meteor/tmeasday:test-reporter-helpers';\n\nexport const runTests = () => {\n  hideApp('.mocha-wrapper');\n  hideOtherCSS();\n  MochaRunner.runEverywhere()\n};\n\nlet { before, after, beforeEach, afterEach,\n      describe, xdescribe, it, xit, specify,\n      xspecify, xcontext, context } = global;\n\nexport {MochaRunner}\nexport {BaseReporter, ClientServerBaseReporter, HtmlReporter}\nexport { before, after, beforeEach, afterEach,\ndescribe, xdescribe, it, xit, specify,\nxspecify, xcontext, context };\n","{_}                   = require(\"underscore\")\nTest                  = require(\"mocha/lib/test\")\nSuite                 = require(\"mocha/lib/suite\")\nutils                 = require(\"mocha/lib/utils\")\n{Mongo}               = require(\"meteor/mongo\")\n{Mocha}               = require(\"meteor/practicalmeteor:mocha-core\")\n{EventEmitter}        = require(\"events\")\n{ObjectLogger}        = require(\"meteor/practicalmeteor:loglevel\")\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\")\nlog = new ObjectLogger('MochaRunner', 'info')\n\nclass MochaRunner extends EventEmitter\n\n  @instance: null\n\n  @get: ->\n    MochaRunner.instance ?= new MochaRunner()\n\n  VERSION: \"2.4.5_6\"\n  serverRunEvents: null\n  publishers: {}\n\n\n  constructor: ->\n    try\n      log.enter 'constructor'\n      @utils = utils;\n      @serverRunEvents = new Mongo.Collection('mochaServerRunEvents')\n      if Meteor.isServer\n        Meteor.methods({\n          \"mocha/runServerTests\": @runServerTests.bind(@)\n        })\n        @publish()\n\n    finally\n      log.return()\n\n\n  publish: ->\n    try\n      log.enter(\"publish\")\n      self = @\n      Meteor.publish 'mochaServerRunEvents', (runId)->\n        try\n          log.enter 'publish.mochaServerRunEvents'\n          check(runId, String);\n          expect(@ready).to.be.a('function')\n          self.publishers[runId] ?= @\n          @ready()\n          # You can't return any other value but a Cursor, otherwise it will throw an exception\n          return undefined\n        catch ex\n          log.error ex.stack if ex.stack?\n          throw new Meteor.Error('unknown-error', (if ex.message? then ex.message else undefined), (if ex.stack? then ex.stack else undefined))\n        finally\n          log.return()\n    finally\n      log.return()\n\n\n  runServerTests: (runId, grep)=>\n    try\n      log.enter(\"runServerTests\", runId)\n      check(runId, String);\n      check(grep, Match.Optional(Match.OneOf(null, String)));\n      expect(runId).to.be.a(\"string\")\n      expect(@publishers[runId], \"publisher\").to.be.an(\"object\")\n      expect(Meteor.isServer).to.be.true\n      mochaRunner = new Mocha()\n      @_addTestsToMochaRunner(mocha.suite, mochaRunner.suite)\n\n      mochaRunner.reporter(MeteorPublishReporter, {\n        grep: @escapeGrep(grep)\n        publisher: @publishers[runId]\n      })\n\n      log.info \"Starting server side tests with run id #{runId}\"\n      mochaRunner.run (failures)->\n        log.warn 'failures:', failures\n\n    finally\n      log.return()\n\n\n  # Recursive function that starts with global suites and adds all sub suites within each global suite\n  _addTestsToMochaRunner: (fromSuite, toSuite)->\n    try\n      log.enter(\"_addTestToMochaRunner\")\n\n      addHooks = (hookName)->\n        for hook in fromSuite[\"_#{hookName}\"]\n          toSuite[hookName](hook.title, hook.fn)\n        log.debug(\"Hook #{hookName} for '#{fromSuite.fullTitle()}' added.\")\n\n      addHooks(\"beforeAll\")\n      addHooks(\"afterAll\")\n      addHooks(\"beforeEach\")\n      addHooks(\"afterEach\")\n\n      for test in fromSuite.tests\n        test = new Test(test.title, test.fn)\n        toSuite.addTest(test)\n        log.debug(\"Tests for '#{fromSuite.fullTitle()}' added.\")\n\n      for suite in fromSuite.suites\n        newSuite = Suite.create(toSuite, suite.title)\n        newSuite.timeout(suite.timeout())\n        log.debug(\"Suite #{newSuite.fullTitle()}  added to '#{fromSuite.fullTitle()}'.\")\n        @_addTestsToMochaRunner(suite, newSuite)\n\n    finally\n      log.return()\n\n\n  runEverywhere: ->\n    try\n      log.enter 'runEverywhere'\n      expect(Meteor.isClient).to.be.true\n\n      @runId = Random.id()\n      @serverRunSubscriptionHandle = Meteor.subscribe 'mochaServerRunEvents', @runId, {\n        onReady: _.bind(@onServerRunSubscriptionReady, @)\n        onError: _.bind(@onServerRunSubscriptionError, @)\n      }\n\n    finally\n      log.return()\n\n\n  setReporter: (@reporter)->\n\n  escapeGrep: (grep = '')->\n    try\n      log.enter(\"escapeGrep\", grep)\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n      grep.replace(matchOperatorsRe,  '\\\\$&')\n      return new RegExp(grep)\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionReady: =>\n    try\n      log.enter 'onServerRunSubscriptionReady'\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\")\n      { REPORTERS, reporters} = require(\"../reporters\")\n      query = utils.parseQuery(location.search || '');\n\n      Meteor.call \"mocha/runServerTests\", @runId,  query.grep, (err)->\n        log.debug \"tests started\"\n        log.error(err) if err\n\n      Tracker.autorun =>\n        event = @serverRunEvents.findOne({event: \"run mocha\"})\n        if event?.data.reporter? and _.contains(REPORTERS, event.data.reporter)\n          reporter = reporters[event.data.reporter]\n          @setReporter reporter\n\n        if event?.data.runOrder is \"serial\"\n          reporter = new ClientServerReporter(null, {runOrder: \"serial\"})\n        else if event?.data.runOrder is \"parallel\"\n          mocha.reporter(ClientServerReporter)\n          mocha.run(->)\n\n\n\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionError: (meteorError)->\n    try\n      log.enter 'onServerRunSubscriptionError'\n      log.error meteorError\n    finally\n      log.return()\n\n\nmodule.exports = MochaRunner.get()\n","#/**\n# * Initialize a new `Base` reporter.\n# *\n# * All other reporters generally\n# * inherit from this reporter, providing\n# * stats such as test duration, number\n# * of tests passed / failed etc.\n#*\n#* @param {Runner} runner\n#* @api public\n#*/\n\nclass BaseReporter\n\n  constructor: (@runner, @options)->\n    expect(@runner).to.be.an 'object'\n    expect(@options).to.be.an 'object'\n    @stats = { total: @runner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }\n    @failures = []\n\n    @runner.stats = @stats\n\n    @runner.on 'start', =>\n      @stats.start = new Date\n\n    @runner.on 'suite', (suite)=>\n      @stats.suites++ if not suite.root\n\n    @runner.on 'test end', (test)=>\n      @stats.tests++\n\n    @runner.on 'pass', (test)=>\n      medium = test.slow() / 2\n      if test.duration > test.slow()\n        test.speed = 'slow'\n      else if test.duration > medium\n        test.speed = 'medium'\n      else\n        test.speed = 'fast'\n      @stats.passes++\n\n    @runner.on 'fail', (test, err)=>\n      @stats.failures++;\n      test.err = err\n      @failures.push(test)\n\n    @runner.on 'end', =>\n      @stats.end = new Date\n      @stats.duration = @stats.end - @stats.start\n\n    @runner.on 'pending', =>\n      @stats.pending++\n\n\nmodule.exports = BaseReporter\n","MochaRunner = require(\"../lib/MochaRunner\")\n#/**\n# * All other reporters generally\n# * inherit from this reporter, providing\n# * stats such as test duration, number\n# * of tests passed / failed etc.\n#*\n#* @param {Runner} clientRunner\n#* @param {Runner} serverRunner\n#* @api public\n#*/\n\nclass ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    expect(@clientRunner).to.be.an 'object'\n    expect(@serverRunner).to.be.an 'object'\n    expect(@options).to.be.an 'object'\n\n    @clientStats = {total: @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @serverStats = {total: @serverRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @stats = {total: @serverRunner.total + @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @failures = []\n\n    @clientRunner.stats = @clientStats\n    @serverRunner.stats = @serverStats\n\n    @registerRunnerEvents(\"server\")\n    @registerRunnerEvents(\"client\")\n\n    # Exposes global variables to indicate when tests are done. For example spacejam use this global vars\n    MochaRunner.on \"end all\", =>\n      window.TEST_STATUS = {FAILURES: @stats.failures, DONE: true}\n      window.DONE = true\n      window.FAILURES = @stats.failures\n\n  registerRunnerEvents: (where)->\n\n    @[\"#{where}Runner\"].on 'start', =>\n      start = new Date()\n      @[where+\"Stats\"].start = start\n      # The start time will be the first of the runners that started running\n      @stats.start ?= start\n      ###\n        The total and other stats of the server runner are sent with the 'start' event,\n        so we need to update the total of the stats.\n        Also when running in 'serial' mode (server test first and then client tests),\n        clientRunner.total is undefined because client starts running after server tests end.\n      ###\n      @clientStats.total = @clientRunner.total\n      @serverStats.total = @serverRunner.total\n      @stats.total = @clientStats.total + @serverStats.total\n\n\n    @[\"#{where}Runner\"].on 'suite', (suite)=>\n      if not suite.root\n        @stats.suites++\n        @[where+\"Stats\"].suites++\n\n    @[\"#{where}Runner\"].on 'test end', (test)=>\n      @stats.tests++\n\n    @[\"#{where}Runner\"].on 'pass', (test)=>\n      medium = test.slow() / 2\n\n      if test.duration > test.slow()\n        test.speed = 'slow'\n      else if test.duration > medium\n        test.speed = 'medium'\n      else\n        test.speed = 'fast'\n\n      @[where+\"Stats\"].passes++\n      @stats.passes++\n\n    @[\"#{where}Runner\"].on 'fail', (test, err)=>\n      test.err ?= err\n      @failures.push(test)\n\n      @stats.failures++;\n      @[where+\"Stats\"].failures++;\n\n\n    @[\"#{where}Runner\"].on 'end', =>\n      end = new Date()\n\n      @stats.end = end\n      @[where+\"Stats\"].end = end\n\n      @stats.duration = @stats.end - @stats.start\n      @[where+\"Stats\"].duration = @[where+\"Stats\"].end - @[where+\"Stats\"].start\n\n    @[\"#{where}Runner\"].on 'pending', =>\n      @stats.pending++\n      @[where+\"Stats\"].pending++\n\n\nmodule.exports = ClientServerBaseReporter\n","{_}             = require(\"underscore\")\nMochaRunner     = require(\"./../lib/MochaRunner\")\nMirrorReporter  = require('./MirrorReporter')\n{ObjectLogger}  = require(\"meteor/practicalmeteor:loglevel\")\n{EventEmitter}  = require(\"events\")\n\nlog = new ObjectLogger('ClientServerReporter', 'info')\n\nclass ClientServerReporter\n\n\n  constructor: (@clientRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @serverRunnerProxy = new EventEmitter()\n\n      if @options.runOrder is \"serial\"\n        @clientRunner = new EventEmitter()\n        @runTestsSerially(@clientRunner, @serverRunnerProxy)\n\n      if not MochaRunner.reporter\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\")\n        return\n\n      @reporter = new MochaRunner.reporter(@clientRunner, @serverRunnerProxy, @options)\n\n      # Exposes global states of tests\n      @clientRunner.on \"start\", ->\n        window.mochaIsRunning = true\n\n      @clientRunner.on \"end\", =>\n        window.mochaIsRunning = false\n        window.mochaIsDone = true\n\n        MochaRunner.emit(\"end client\")\n        @clientTestsEnded = true\n        if @serverTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      @serverRunnerProxy.on 'end', =>\n        @serverTestsEnded = true\n        MochaRunner.emit(\"end server\")\n        if @clientTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      MochaRunner.serverRunEvents.find().observe({\n        added: _.bind(@onServerRunnerEvent, @)\n      })\n\n    finally\n      log.return()\n\n\n  runTestsSerially: (clientRunner, serverRunnerProxy)=>\n    try\n      log.enter(\"runTestsSerially\",)\n      serverRunnerProxy.on \"end\", =>\n        mocha.reporter(MirrorReporter, {\n          clientRunner: clientRunner\n        })\n        mocha.run(->)\n\n    finally\n      log.return()\n\n\n  onServerRunnerEvent: (doc)->\n    try\n      log.enter('onServerRunnerEvent')\n      expect(doc).to.be.an('object')\n      expect(doc.event).to.be.a('string')\n      if doc.event is \"run mocha\"\n        return\n      expect(doc.data).to.be.an('object')\n\n      # Required by the standard mocha reporters\n      doc.data.fullTitle = -> return doc.data._fullTitle\n      doc.data.slow = -> return doc.data._slow\n      doc.data.err?.toString = -> \"Error: \" + @message\n\n      if doc.data.parent\n        doc.data.parent.fullTitle = -> return doc.data.parent._fullTitle\n        doc.data.parent.slow = -> return doc.data.parent._slow\n\n\n      if doc.event is 'start'\n        @serverRunnerProxy.stats = doc.data\n        @serverRunnerProxy.total = doc.data.total\n\n      @serverRunnerProxy.emit(doc.event, doc.data, doc.data.err)\n\n    catch ex\n      log.error ex\n    finally\n      log.return()\n\n\nmodule.exports = ClientServerReporter\n","MochaRunner               = require(\"../lib/MochaRunner\")\n{ ObjectLogger }          = require(\"meteor/practicalmeteor:loglevel\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\n\nlog = new ObjectLogger('ConsoleReporter', 'info')\n\n\nclass ConsoleReporter extends  ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    try\n      log.enter('constructor')\n      super(@clientRunner, @serverRunner, @options)\n      MochaRunner.on \"end all\", => @finishAndPrintTestsSummary()\n\n    finally\n      log.return()\n\n  ###\n    Overwriting from ClientServerBaseReporter\n  ###\n  registerRunnerEvents: (where)->\n    try\n      log.enter(\"registerRunnerEvents\")\n      # Call super.registerRunnerEvents to register events from ClientServerBaseReporter first\n      super(where)\n\n      @[\"#{where}Runner\"].on \"start\", => @printReporterHeader(where)\n      @[\"#{where}Runner\"].on 'test end', (test)=> @printTest(test, where)\n\n      # Log for errors with hooks\n      @[\"#{where}Runner\"].on \"fail\", (hook)=> @printTest(hook, where) if hook.type is 'hook'\n\n    finally\n      log.return()\n\n\n  printReporterHeader: (where)=>\n    try\n      log.enter(\"printReporterHeader\", where)\n      return if @options.runOrder isnt 'serial'\n      # i.e client = Client\n      where = where[0].toUpperCase() + where.substr(1)\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"------------------ #{where} tests ------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\n  printTest: (test, where)->\n    try\n      log.enter(\"prinTest\", test)\n      state = test.state or (if test.pending then \"pending\")\n\n      # Since the test are running in parallel we don't need\n      # to specify where they are client or   server tests.\n      if @options.runOrder is 'serial'\n        where = \"\"\n      else\n        # Get first chart 's' or 'c' for client/server\n        where = where[0].toUpperCase() + \": \"\n\n      console.log(\"#{where}#{test.fullTitle()} : #{state}\")\n\n      if test.state is \"failed\"\n        console.log(\"  \" + (test.err.stack || test.err))\n\n      console.log(\"\")\n    finally\n      log.return()\n\n\n  finishAndPrintTestsSummary: ()=>\n    try\n      log.enter(\"finishAndPrintTestsSummary\")\n      return if not @clientStats?.total? or not @serverStats?.total?\n\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"---------------------RESULTS----------------------\")\n      console.log(\"PASSED:\", @stats.passes)\n      console.log(\"FAILED:\", @stats.failures)\n      console.log(\"SKIPPED:\", @stats.pending)\n      console.log(\"TOTAL:\", @stats.total)\n      console.log(\"--------------------------------------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\nmodule.exports = ConsoleReporter\n\n","{ObjectLogger}            = require(\"meteor/practicalmeteor:loglevel\")\nMochaHtmlReporter         = require(\"./html\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\nMochaRunner = require(\"../lib/MochaRunner\")\n\nlog = new ObjectLogger('HtmlReporter', 'info')\n\nclass HtmlReporter extends ClientServerBaseReporter\n\n  constructor: (@clientRunner, @serverRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @addReporterHtml()\n\n      @reporter = new MochaHtmlReporter(@clientRunner)\n      @serverReporter = new MochaHtmlReporter(@serverRunner, {\n        elementIdPrefix: 'server-'\n      })\n      super(@clientRunner, @serverRunner, @options)\n    finally\n      log.return()\n\n  ###\n    Adds the html required by the mocha HTML reporter to the body of the html\n    document. We modified the mocha HTML reporter to be able to display 2 reporters\n    at the same time, one for client tests and one for server tests.\n    TODO: Create a single meteor reactive reporter.\n  ###\n  addReporterHtml: ()=>\n    try\n      log.enter(\"addReporterHtml\")\n      div = document.createElement('div')\n      div.className = 'mocha-wrapper'\n\n      div.innerHTML = '<div class=\"content\">\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Client tests</h1>\n\n          <div id=\"mocha\" class=\"mocha\"></div>\n        </div>\n\n        <div class=\"divider\"></div>\n\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Server tests</h1>\n\n          <div id=\"server-mocha\" class=\"mocha\"></div>\n        </div>\n      </div>'\n\n      document.body.appendChild(div)\n    finally\n      log.return()\n\n\n\nmodule.exports = HtmlReporter\n","{_}            = require(\"underscore\")\nBaseReporter   = require(\"./BaseReporter\")\n{ObjectLogger} = require(\"meteor/practicalmeteor:loglevel\")\n\nlog = new ObjectLogger('MeteorPublishReporter', 'info')\n\nclass MeteorPublishReporter extends BaseReporter\n\n  @publisher: null \n\n  constructor: (runner, options)->\n    try\n      log.enter 'constructor', arguments\n      expect(options.reporterOptions, 'options.reporterOptions').to.be.an('object')\n\n      # Update runner tests\n      runner.grep(options.reporterOptions.grep)\n\n      super(runner, options)\n\n#      @publisher = practical.mocha.MeteorPublishReporter.publisher\n      @publisher = options.reporterOptions.publisher\n      expect(@publisher, '@publisher').to.be.an('object')\n      expect(@publisher.ready, '@publisher.ready').to.be.a('function')\n      expect(@publisher.added, '@publisher.added').to.be.a('function')\n      expect(@publisher.onStop, '@publisher.onStop').to.be.a('function')\n\n\n      @publisher.onStop =>\n        @stopped = true\n      @stopped = false\n      @sequence = 0\n\n      # Make sure we always run within a Fiber\n      @added = Meteor.bindEnvironment(@added, null, @)\n\n      {REPORTERS, HTML_REPORTER} = require(\"./index\")\n      mochaReporter = process.env.MOCHA_REPORTER || HTML_REPORTER\n      if mochaReporter and not _.contains(REPORTERS, mochaReporter)\n        log.info \"Can't find '#{mochaReporter}' reporter. Using '#{HTML_REPORTER}' instead.\"\n        mochaReporter = HTML_REPORTER\n# \n#      # Specify how to run tests 'serial' or 'parallel'\n#      # Running in 'serial' will start server tests first and then client tests\n      @added 'run mocha', { reporter: mochaReporter,   runOrder: process.env.MOCHA_RUN_ORDER || 'parallel' }\n\n      @runner.on 'start', =>\n        try\n          log.enter 'onStart', arguments\n#          @added 'start', {total: @stats.total}\n          @added 'start', @stats\n        finally\n          log.return()\n\n      @runner.on 'suite', (suite)=>\n        try\n          log.enter 'onSuite', arguments\n#          log.info \"suite:\", suite.title\n#          @added 'suite', {title: suite.title, _fullTitle: suite.fullTitle(), root: suite.root}\n\n          @added 'suite', @cleanSuite(suite)\n        finally\n          log.return()\n\n      @runner.on 'suite end', (suite)=>\n        try\n          log.enter 'onSuiteEnd', arguments\n          @added 'suite end', @cleanSuite(suite)\n        finally\n          log.return()\n\n      @runner.on 'test end', (test)=>\n        try\n          log.enter 'onTestEnd', arguments\n          @added 'test end', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'pass', (test)=>\n        try\n          log.enter 'onPass', arguments\n          @added 'pass', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'fail', (test, error)=>\n        try\n          log.enter 'onFail', arguments\n          @added 'fail', @cleanTest(test)\n        finally\n          log.return()\n\n      @runner.on 'end', =>\n        try\n          log.enter 'onEnd', arguments\n          @added 'end', @stats\n        finally\n          log.return()\n\n      @runner.on 'pending', (test)=>\n        try\n          log.enter 'onPending', arguments\n          log.debug \"test\", test\n          @added 'pending', @cleanTest(test)\n        finally\n          log.return()\n    finally\n      log.return()\n\n\n  added: (event, data)=>\n    try\n      log.enter 'added', arguments\n#      log.info event, data\n      return if @stopped is true\n      @sequence++\n      doc =\n        _id: \"#{@sequence}\"\n        event: event\n        data: data\n      @publisher.added('mochaServerRunEvents', doc._id, doc)\n    catch ex\n      log.error \"Can't send report data to client.\"\n      log.error \"Error:\", (ex.stack || ex.message)\n      log.error \"Document:\", doc\n    finally\n      log.return()\n\n\n  ###*\n  # Return a plain-object representation of `test`\n  # free of cyclic properties etc.\n  #\n  # @param {Object} test\n  # @return {Object}\n  # @api private\n  ###\n  cleanTest: (test)->\n    try\n      log.enter(\"cleanTest\", arguments)\n\n      properties = [\"title\", \"type\", \"state\",\"speed\", \"pending\",\n        \"duration\", \"async\", \"sync\", \"_timeout\", \"_slow\", \"body\"]\n      return  _.extend(_.pick(test, properties),{\n        _fullTitle: test.fullTitle()\n        parent: @cleanSuite(test.parent)\n        # So we can show the server side test code in the reporter. This property is null ff the test or suite is pending\n        fn: test.fn?.toString()\n        err: @errorJSON(test.err)\n        isServer: true\n      })\n    catch ex\n      log.error(ex)\n\n    finally\n      log.return()\n\n\n  cleanSuite: (suite)->\n    try\n      log.enter(\"cleanSuite\", arguments)\n      return _.extend(_.pick(suite, [\"title\", \"root\", \"pending\"]),{\n        _fullTitle: suite.fullTitle()\n        isServer: true\n      })\n    catch ex\n      log.error(ex)\n    finally\n      log.return()\n\n  ###*\n  # Transform `error` into a JSON object.\n  # @param {Error} err\n  # @return {Object}\n  ###\n\n  errorJSON: (err) =>\n    return if not err\n    ###\n      Only picking the defaults properties define by ECMAScript to avoid problems\n      with custom error that may have properties that can't be stringify such as functions.\n      See https://goo.gl/bsZh3B and https://goo.gl/AFp6KB\n    ###\n    return _.pick(err, [\"name\", \"message\", \"stack\"])\n\n\n\nmodule.exports = MeteorPublishReporter\n","{ObjectLogger}  = require(\"meteor/practicalmeteor:loglevel\")\nlog = new ObjectLogger('MirrorReporter', 'info')\n\nclass MirrorReporter\n\n  constructor:(@mochaReporter, options)->\n\n    clientRunner = options.reporterOptions?.clientRunner\n    expect(clientRunner, \"clientRunner\").to.be.ok\n\n    # The in order to calculate the progress\n    clientRunner.total = @mochaReporter.total\n\n    @mochaReporter.on 'start', =>\n      try\n        log.enter 'onStart', arguments\n        clientRunner.emit.call(clientRunner, 'start')\n      finally\n        log.return()\n\n    @mochaReporter.on 'suite', (suite)=>\n      try\n        log.enter 'onSuite', arguments\n        clientRunner.emit.call(clientRunner, 'suite',suite)\n      finally\n        log.return()\n\n    @mochaReporter.on 'suite end', (suite)=>\n      try\n        log.enter 'onSuiteEnd', arguments\n        clientRunner.emit.call(clientRunner, 'suite end',suite)\n      finally\n        log.return()\n\n    @mochaReporter.on 'test end', (test)=>\n      try\n        log.enter 'onTestEnd', arguments\n        clientRunner.emit.call(clientRunner, 'test end', test)\n      finally\n        log.return()\n\n    @mochaReporter.on 'pass', (test)=>\n      try\n        log.enter 'onPass', arguments\n        clientRunner.emit.call(clientRunner, 'pass', test)\n      finally\n        log.return()\n\n    @mochaReporter.on 'fail', (test, error)=>\n      try\n        log.enter 'onFail', arguments\n        clientRunner.emit.call(clientRunner, 'fail', test, error)\n      finally\n        log.return()\n\n    @mochaReporter.on 'end', =>\n      try\n        log.enter 'onEnd', arguments\n        clientRunner.emit.call(clientRunner, 'end')\n      finally\n        log.return()\n\n    @mochaReporter.on 'pending', (test)=>\n      try\n        log.enter 'onPending', arguments\n        clientRunner.emit.call(clientRunner, 'pending', test)\n\n      finally\n        log.return()\n\n\nmodule.exports = MirrorReporter\n","MochaRunner     = require(\"../lib/MochaRunner\")\nConsoleReporter     = require(\"./ConsoleReporter\")\n\nclass XUnitReporter extends ConsoleReporter\n\n  @VERSION: \"0.1.0\"\n  xUnitPrefix: \"##_meteor_magic##xunit: \"\n\n  constructor:(@clientRunner, @serverRunner, @options)->\n\n    @clientTests = []\n    @serverTests = []\n\n    # ConsoleReporter exposes global variables that indicates when the tests has finished,\n    # so we register the event to print the test suite before ConsoleReporter register its event\n    MochaRunner.on \"end all\", => @printTestSuite()\n\n    super(@clientRunner, @serverRunner, @options)\n\n\n  ###\n    Overwrite from ConsoleReporter\n  ###\n  registerRunnerEvents:(where)->\n\n    super(where)\n\n    @[where + \"Runner\"].on 'pending', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'pass', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'fail', (test) =>\n      @[where+\"Tests\"].push test\n\n\n  printTestSuite: ->\n\n    testSuite = {\n      name: 'Mocha Tests'\n      tests: @stats.total\n      failures: @stats.failures\n      errors: @stats.failures\n      timestamp: (new Date).toUTCString()\n      time: @stats.duration/ 1000 or 0\n      skipped: @stats.pending\n    }\n\n    @write @createTag('testsuite', testSuite, false)\n\n    @clientTests.forEach (test) =>\n      @printTestCase test, \"Client\"\n\n    @serverTests.forEach (test) =>\n      @printTestCase test, \"Server\"\n\n    @write '</testsuite>'\n\n\n  ###*\n  # HTML tag helper.\n  #\n  # @param name\n  # @param attrs\n  # @param close\n  # @param content\n  # @return {string}\n  ###\n  createTag: (name, attrs = {}, close, content) ->\n    end = if close then '/>' else '>'\n    pairs = []\n    tag = undefined\n\n    for key of attrs\n      if Object.prototype.hasOwnProperty.call(attrs, key)\n        pairs.push key + '=\"' + @escape(attrs[key]) + '\"'\n\n    tag = '<' + name + (if pairs.length then ' ' + pairs.join(' ') else '') + end\n\n    if content\n      tag += content + '</' + name + end\n\n    return tag\n\n  ###*\n  # Return cdata escaped CDATA `str`.\n  ###\n\n  cdata: (str) ->\n    '<![CDATA[' + @escape(str) + ']]>'\n\n  ###*\n  # Override done to close the stream (if it's a file).\n  #\n  # @param failures\n  # @param {Function} fn\n  ###\n\n  done:(failures, fn) ->\n      fn failures\n\n  ###*\n  # Write out the given line.\n  #\n  # @param {string} line\n  ###\n\n  write:(line) ->\n    console.log @xUnitPrefix + line\n\n  ###*\n  # Output tag for the given `test.`\n  #\n  # @param {Test} test\n  ###\n\n  printTestCase:(test, where) ->\n    attrs =\n      classname: \"#{where} #{test.parent.fullTitle()}\"\n      name: test.title\n      time: test.duration / 1000 or 0\n\n    if test.state == 'failed'\n      err = test.err\n      stack = @escapeStack(err.stack)\n      @write @createTag('testcase', attrs, false, @createTag('failure', {}, false, @cdata(@escape(err.message) + '\\n' + stack)))\n    else if test.pending\n      @write @createTag('testcase', attrs, false, @createTag('skipped', {}, true))\n    else\n      @write @createTag('testcase', attrs, true)\n    return\n\n\n  ###*\n  # Escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} html\n  # @return {string}\n  ###\n\n  escape: (html) ->\n    String(html)\n      .replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace />/g, '&gt;'\n\n\n  ###*\n  # For each line add the @xUnitPrefix and escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} stack\n  # @return {string}\n  ###\n  escapeStack: (stack = \"\")->\n\n    return stack.split(\"\\n\")\n      .map( (s) => @xUnitPrefix + @escape(s))\n      .join(\"\\n\")\n\n\nmodule.exports = XUnitReporter","/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\nvar Base = require('../../../lib/reporters/base');\nvar utils = require('../../../lib/utils');\nvar Progress = require('../../../lib/browser/progress');\nvar escapeRe = require('escape-string-regexp');\nvar escape = utils.escape;\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTML(runner, options) {\n  Base.call(this, runner);\n  options = options || {};\n  options.elementIdPrefix = options.elementIdPrefix || \"\";\n\n  /**\n   * Stats template.\n   */\n  var statsTemplate = '<ul id=\"'+options.elementIdPrefix+'mocha-stats\"' +\n    ' class=\"mocha-stats\">'\n    + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\n    + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'\n    + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'\n    + '<li class=\"duration\">duration: <em>0</em>s</li>'\n    + '</ul>';\n\n\n  var self = this\n    , stats = this.stats\n    , stat = fragment(statsTemplate)\n    , items = stat.getElementsByTagName('li')\n    , passes = items[1].getElementsByTagName('em')[0]\n    , passesLink = items[1].getElementsByTagName('a')[0]\n    , failures = items[2].getElementsByTagName('em')[0]\n    , failuresLink = items[2].getElementsByTagName('a')[0]\n    , duration = items[3].getElementsByTagName('em')[0]\n    , canvas = stat.getElementsByTagName('canvas')[0]\n    , report = fragment('<ul id=\"'+options.elementIdPrefix+'mocha-report\"' +\n      ' class=\"mocha-report\"></ul>')\n    , stack = [report]\n    , progress\n    , ctx\n    , root = document.getElementById(options.elementIdPrefix+'mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress();\n  }\n\n  if (!root) {\n    return error(options.elementIdPrefix+'mocha div missing, add it to your document');\n  }\n\n  // pass toggle\n  on(passesLink, 'click', function() {\n    unhide();\n    var name = (/pass/).test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test pass');\n    }\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function() {\n    unhide();\n    var name = (/fail/).test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test fail');\n    }\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) {\n    progress.size(40);\n  }\n\n  runner.on('suite', function(suite) {\n    if (suite.root) {\n      return;\n    }\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function(suite) {\n    if (suite.root) {\n      return;\n    }\n    stack.shift();\n  });\n\n  runner.on('fail', function(test) {\n    test.body = test.body || test.fn.toString();\n    // For type = 'test' its possible that the test failed due to multiple\n    // done() calls. So report the issue here.\n    if (test.type === 'hook') {\n      runner.emit('test end', test);\n    }\n  });\n\n  runner.on('test end', function(test) {\n    // TODO: add to stats\n    var percent = stats.tests / this.total * 100 | 0;\n    if (progress) {\n      progress.update(percent).draw(ctx);\n    }\n\n    // update stats\n    var ms = new Date() - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n\n    // test\n    var el;\n    if (test.state === 'passed') {\n      var url = self.testURL(test);\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    } else {\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline\n      var message = test.err.toString();\n\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n      // check for the result of the stringifying.\n      if (message === '[object Error]') {\n        message = test.err.message;\n      }\n\n      if (test.err.stack) {\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);\n        if (indexOfMessage === -1) {\n          stackString = test.err.stack;\n        } else {\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);\n        }\n      } else if (test.err.sourceURL && test.err.line !== undefined) {\n        // Safari doesn't give you a stack. Let's at least provide a source line.\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';\n      }\n\n      stackString = stackString || '';\n\n      if (test.err.htmlMessage && stackString) {\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));\n      } else {\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));\n      }\n    }\n\n    // toggle code\n    // TODO: defer\n    if (!test.pending) {\n      var h2 = el.getElementsByTagName('h2')[0];\n\n      on(h2, 'click', function() {\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';\n      });\n\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body));\n      el.appendChild(pre);\n      pre.style.display = 'none';\n    }\n\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) {\n      stack[0].appendChild(el);\n    }\n  });\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n *\n * @param {string} s\n * @return {string} A new URL.\n */\nfunction makeUrl(s) {\n  var search = window.location.search;\n\n  // Remove previous grep query parameter if present\n  if (search) {\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');\n  }\n\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));\n}\n\n/**\n * Provide suite URL.\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function(suite) {\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL.\n *\n * @param {Object} [test]\n */\nHTML.prototype.testURL = function(test) {\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Display error `msg`.\n *\n * @param {string} msg\n */\nfunction error(msg) {\n  document.body.appendChild(fragment('<div class=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n *\n * @param {string} html\n */\nfunction fragment(html) {\n  var args = arguments;\n  var div = document.createElement('div');\n  var i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n      // no default\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n *\n * @param {text} classname\n */\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (!els.length) {\n      suites[i].className += ' hidden';\n    }\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set an element's text contents.\n *\n * @param {HTMLElement} el\n * @param {string} contents\n */\nfunction text(el, contents) {\n  if (el.textContent) {\n    el.textContent = contents;\n  } else {\n    el.innerText = contents;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n","import ConsoleReporter from \"./ConsoleReporter\"\nimport XunitReporter from \"./XunitReporter\"\nimport  HtmlReporter from \"./HtmlReporter\"\n\n\nexport const HTML_REPORTER = 'html';\nexport const CONSOLE_REPORTER = 'console';\nexport const XUNIT_REPORTER = 'xunit';\nexport const REPORTERS = [HTML_REPORTER, CONSOLE_REPORTER, XUNIT_REPORTER];\nlet reporters = { };\nreporters[HTML_REPORTER] = HtmlReporter;\nreporters[CONSOLE_REPORTER] = ConsoleReporter;\nreporters[XUNIT_REPORTER] = XunitReporter;\nexport { reporters }\n","import { mochaInstance } from \"meteor/practicalmeteor:mocha-core\"\nimport setupMochaClient from \"./setupMochaClient\"\n\nif(Meteor.isClient){\n  setupMochaClient()\n}\nif (Meteor.isServer){\n  global.mocha = mochaInstance;\n}","import {meteorInstall} from \"meteor/modules\"\n\n// Here we are creating stubs packages to be availabe on the client side.\n// This must be called before require('mocha')\n// See an example from https://goo.gl/us9YVR\n\nexport default ()=>{\n\n  process.browser = true;\n  \n  require(\"meteor-node-stubs\");\n\n  meteorInstall({\n    node_modules: {\n      \"tty.js\": function (r, e, module) {\n        module.exports = { isatty: ()=>{ return false}}\n      }\n    }\n  });\n\n  meteorInstall({\n    node_modules: {\n      \"constants.js\": function (r, e, module) {\n        module.exports = {\n          test: {'test':'test'}\n        }\n      }\n    }\n  });\n\n\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @api public\n * @param {string|number} val\n * @param {Object} options\n * @return {string|number}\n */\nmodule.exports = function(val, options) {\n  options = options || {};\n  if (typeof val === 'string') {\n    return parse(val);\n  }\n  // https://github.com/mochajs/mocha/pull/1035\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @api private\n * @param {string} str\n * @return {number}\n */\nfunction parse(str) {\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n    default:\n      // No default case\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction shortFormat(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n *\n * @api private\n * @param {number} ms\n * @param {number} n\n * @param {string} name\n */\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar basename = require('path').basename;\nvar debug = require('debug')('mocha:watch');\nvar exists = require('fs').existsSync || require('path').existsSync;\nvar glob = require('glob');\nvar join = require('path').join;\nvar readdirSync = require('fs').readdirSync;\nvar statSync = require('fs').statSync;\nvar watchFile = require('fs').watchFile;\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\nexports.inherits = require('util').inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @api private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n */\nexports.forEach = function(arr, fn, scope) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    fn.call(scope, arr[i], i);\n  }\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @api private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function(obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n * @return {Array}\n */\nexports.map = function(arr, fn, scope) {\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    result.push(fn.call(scope, arr[i], i, arr));\n  }\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Object} obj to find index of\n * @param {number} start\n * @return {number}\n */\nexports.indexOf = function(arr, obj, start) {\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} val Initial value.\n * @return {*}\n */\nexports.reduce = function(arr, fn, val) {\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.filter = function(arr, fn) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) {\n      ret.push(val);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Array} keys\n */\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {\n  var keys = [];\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @api private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function(files, fn) {\n  var options = { interval: 100 };\n  files.forEach(function(file) {\n    debug('file %s', file);\n    watchFile(file, options, function(curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Array.isArray (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Boolean}\n */\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexports.isArray = isArray;\n\n/**\n * Buffer.prototype.toJSON polyfill.\n *\n * @type {Function}\n */\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {\n    return Array.prototype.slice.call(this, 0);\n  };\n}\n\n/**\n * Ignored files.\n *\n * @api private\n * @param {string} path\n * @return {boolean}\n */\nfunction ignored(path) {\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @api private\n * @param {string} dir\n * @param {string[]} [ext=['.js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function(dir, ext, ret) {\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  readdirSync(dir)\n    .filter(ignored)\n    .forEach(function(path) {\n      path = join(dir, path);\n      if (statSync(path).isDirectory()) {\n        exports.files(path, ext, ret);\n      } else if (path.match(re)) {\n        ret.push(path);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function(str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\)\\s*\\{|\\(.*\\) *=> *\\{?/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.trim = function(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @api private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function(qs) {\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {\n    var i = pair.indexOf('=');\n    var key = pair.slice(0, i);\n    var val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @api private\n * @param {string} js\n * @return {string}\n */\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @api private\n * @param {string} name\n */\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @api private\n * @param {*} value The value to inspect.\n * @param {string} [type] The type of the value, if known.\n * @returns {string}\n */\nfunction emptyRepresentation(value, type) {\n  type = type || exports.type(value);\n\n  switch (type) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @api private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string}\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n */\nexports.type = function type(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString.call(value)\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\n    .toLowerCase();\n};\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @api private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function(value) {\n  var type = exports.type(value);\n\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {\n    if (type !== 'buffer') {\n      return jsonStringify(value);\n    }\n    var json = value.toJSON();\n    // Based on the toJSON result\n    return jsonStringify(json.data && json.type ? json.data : json, 2)\n      .replace(/,(\\n|$)/g, '$1');\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, type);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @api private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify(object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = isArray(object) ? '[' : '{';\n  var end = isArray(object) ? ']' : '}';\n  var length = object.length || exports.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat(s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify(val) {\n    switch (exports.type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'number':\n        val = val === 0 && (1 / val) === -Infinity // `-0`\n          ? '-0'\n          : val.toString();\n        break;\n      case 'date':\n        var sDate = isNaN(val.getTime())        // Invalid date\n          ? val.toString()\n          : val.toISOString();\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val = (val === '[Function]' || val === '[Circular]')\n          ? val\n          : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!object.hasOwnProperty(i)) {\n      continue; // not my business\n    }\n    --length;\n    str += '\\n ' + repeat(' ', space)\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key\n      + _stringify(object[i])                     // value\n      + (length ? ',' : '');                     // comma\n  }\n\n  return str\n    // [], {}\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);\n}\n\n/**\n * Test if a value is a buffer.\n *\n * @api private\n * @param {*} value The value to test.\n * @return {boolean} True if `value` is a buffer, otherwise false\n */\nexports.isBuffer = function(value) {\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);\n};\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @api private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function(value, stack) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  var type = exports.type(value);\n  function withStack(value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (exports.indexOf(stack, value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (type) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function() {\n        canonicalizedObj = exports.map(value, function(item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, type);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function() {\n        exports.forEach(exports.keys(value).sort(), function(key) {\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n        });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value + '';\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Lookup file names at the given `path`.\n *\n * @api public\n * @param {string} path Base path to start searching from.\n * @param {string[]} extensions File extensions to look for.\n * @param {boolean} recursive Whether or not to recurse into subdirectories.\n * @return {string[]} An array of paths.\n */\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) {\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      }\n      return files;\n    }\n  }\n\n  try {\n    var stat = statSync(path);\n    if (stat.isFile()) {\n      return path;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  readdirSync(path).forEach(function(file) {\n    file = join(path, file);\n    try {\n      var stat = statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {\n      return;\n    }\n    files.push(file);\n  });\n\n  return files;\n};\n\n/**\n * Generate an undefined error with a message warning the user.\n *\n * @return {Error}\n */\n\nexports.undefinedError = function() {\n  return new Error('Caught undefined error, did you throw without specifying what?');\n};\n\n/**\n * Generate an undefined error if `err` is not defined.\n *\n * @param {Error} err\n * @return {Error}\n */\n\nexports.getError = function(err) {\n  return err || exports.undefinedError();\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function() {\n  // TODO: Replace with `process.browser`\n  var slash = '/';\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };\n  var cwd = is.node\n      ? process.cwd() + slash\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n\n  function isMochaInternal(line) {\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))\n      || (~line.indexOf('components' + slash + 'mocha' + slash))\n      || (~line.indexOf(slash + 'mocha.js'));\n  }\n\n  function isNodeInternal(line) {\n    return (~line.indexOf('(timers.js:'))\n      || (~line.indexOf('(events.js:'))\n      || (~line.indexOf('(node.js:'))\n      || (~line.indexOf('(module.js:'))\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))\n      || false;\n  }\n\n  return function(stack) {\n    stack = stack.split('\\n');\n\n    stack = exports.reduce(stack, function(list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      list.push(line.replace(cwd, ''));\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n","/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function(size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @api public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function(text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function(size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function(family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function(n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function(ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n","/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar ms = require('../ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Save timer references to avoid Sinon interfering.\n * See: https://github.com/mochajs/mocha/issues/237\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {string} type\n * @param {string} str\n * @return {string}\n * @api private\n */\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures) {\n  console.log();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message) {\n      message = err.message;\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = stack.indexOf(message);\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function() {\n    stats.start = new Date();\n  });\n\n  runner.on('suite', function(suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function() {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n\n  runner.on('pending', function() {\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @api private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} Diff\n */\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between two strings.\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} The diff.\n */\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/\\@\\@/)) {\n      return null;\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n    + colorLines('diff added', '+ expected') + ' '\n    + colorLines('diff removed', '- actual')\n    + '\\n\\n'\n    + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @api private\n * @param {Error} err\n * @param {string} type\n * @param {boolean} escape\n * @return {string}\n */\nfunction errorDiff(err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @api private\n * @param {string} line\n * @return {string}\n */\nfunction escapeInvisibles(line) {\n  return line.replace(/\\t/g, '<tab>')\n    .replace(/\\r/g, '<CR>')\n    .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @api private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check that a / b have the same type.\n *\n * @api private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n"]}}]