[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nECMAScript = Package.ecmascript.ECMAScript;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\nSymbol = Package['ecmascript-runtime-server'].Symbol;\nMap = Package['ecmascript-runtime-server'].Map;\nSet = Package['ecmascript-runtime-server'].Set;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"notes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/notes.js                                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                         //\n                                                                                                  //\nvar _extends3 = _interopRequireDefault(_extends2);                                                //\n                                                                                                  //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n                                                                                                  //\nmodule.export({                                                                                   // 1\n  Notes: function () {                                                                            // 1\n    return Notes;                                                                                 // 1\n  }                                                                                               // 1\n});                                                                                               // 1\nvar Mongo = void 0;                                                                               // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                           // 1\n  Mongo: function (v) {                                                                           // 1\n    Mongo = v;                                                                                    // 1\n  }                                                                                               // 1\n}, 0);                                                                                            // 1\nvar Meteor = void 0;                                                                              // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                          // 1\n  Meteor: function (v) {                                                                          // 1\n    Meteor = v;                                                                                   // 1\n  }                                                                                               // 1\n}, 1);                                                                                            // 1\nvar moment = void 0;                                                                              // 1\nmodule.watch(require(\"moment\"), {                                                                 // 1\n  \"default\": function (v) {                                                                       // 1\n    moment = v;                                                                                   // 1\n  }                                                                                               // 1\n}, 2);                                                                                            // 1\nvar SimpleSchema = void 0;                                                                        // 1\nmodule.watch(require(\"simpl-schema\"), {                                                           // 1\n  \"default\": function (v) {                                                                       // 1\n    SimpleSchema = v;                                                                             // 1\n  }                                                                                               // 1\n}, 3);                                                                                            // 1\nvar Notes = new Mongo.Collection('notes');                                                        // 6\n                                                                                                  //\nif (Meteor.isServer) {                                                                            // 8\n  Meteor.publish('notes', function () {                                                           // 9\n    return Notes.find({                                                                           // 10\n      userId: this.userId                                                                         // 10\n    });                                                                                           // 10\n  });                                                                                             // 11\n}                                                                                                 // 12\n                                                                                                  //\nMeteor.methods({                                                                                  // 14\n  'notes.insert': function () {                                                                   // 15\n    if (!this.userId) {                                                                           // 16\n      throw new Meteor.Error('not-authorized');                                                   // 17\n    }                                                                                             // 18\n                                                                                                  //\n    return Notes.insert({                                                                         // 20\n      title: '',                                                                                  // 21\n      body: '',                                                                                   // 22\n      userId: this.userId,                                                                        // 23\n      updatedAt: moment().valueOf()                                                               // 24\n    });                                                                                           // 20\n  },                                                                                              // 26\n  'notes.remove': function (_id) {                                                                // 27\n    if (!this.userId) {                                                                           // 28\n      throw new Meteor.Error('not-authorized');                                                   // 29\n    }                                                                                             // 30\n                                                                                                  //\n    new SimpleSchema({                                                                            // 32\n      _id: {                                                                                      // 33\n        type: String,                                                                             // 34\n        min: 1                                                                                    // 35\n      }                                                                                           // 33\n    }).validate({                                                                                 // 32\n      _id: _id                                                                                    // 37\n    }); //ensures that note._id's userId is equal to the current userId                           // 37\n                                                                                                  //\n    Notes.remove({                                                                                // 39\n      _id: _id,                                                                                   // 39\n      userId: this.userId                                                                         // 39\n    });                                                                                           // 39\n  },                                                                                              // 40\n  'notes.update': function (_id, updates) {                                                       // 41\n    if (!this.userId) {                                                                           // 42\n      throw new Meteor.Error('not-authorized');                                                   // 43\n    }                                                                                             // 44\n                                                                                                  //\n    new SimpleSchema({                                                                            // 46\n      _id: {                                                                                      // 47\n        type: String,                                                                             // 48\n        min: 1                                                                                    // 49\n      },                                                                                          // 47\n      title: {                                                                                    // 51\n        type: String,                                                                             // 52\n        optional: true                                                                            // 53\n      },                                                                                          // 51\n      body: {                                                                                     // 55\n        type: String,                                                                             // 56\n        optional: true                                                                            // 57\n      }                                                                                           // 55\n    }).validate((0, _extends3.default)({                                                          // 46\n      _id: _id                                                                                    // 60\n    }, updates));                                                                                 // 46\n    Notes.update({                                                                                // 64\n      _id: _id,                                                                                   // 65\n      userId: this.userId                                                                         // 66\n    }, {                                                                                          // 64\n      $set: (0, _extends3.default)({                                                              // 68\n        updatedAt: moment().valueOf()                                                             // 69\n      }, updates)                                                                                 // 68\n    });                                                                                           // 67\n  }                                                                                               // 73\n});                                                                                               // 14\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notes.test.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/notes.test.js                                                                      //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar Meteor = void 0;                                                                              // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                          // 1\n  Meteor: function (v) {                                                                          // 1\n    Meteor = v;                                                                                   // 1\n  }                                                                                               // 1\n}, 0);                                                                                            // 1\nvar expect = void 0;                                                                              // 1\nmodule.watch(require(\"expect\"), {                                                                 // 1\n  \"default\": function (v) {                                                                       // 1\n    expect = v;                                                                                   // 1\n  }                                                                                               // 1\n}, 1);                                                                                            // 1\nvar Notes = void 0;                                                                               // 1\nmodule.watch(require(\"./notes\"), {                                                                // 1\n  Notes: function (v) {                                                                           // 1\n    Notes = v;                                                                                    // 1\n  }                                                                                               // 1\n}, 2);                                                                                            // 1\n                                                                                                  //\nif (Meteor.isServer) {                                                                            // 6\n  describe('notes', function () {                                                                 // 7\n    var noteOne = {                                                                               // 8\n      _id: 'testNoteId1',                                                                         // 9\n      title: 'My Title',                                                                          // 10\n      body: 'My body for note',                                                                   // 11\n      updatedAt: 0,                                                                               // 12\n      userId: 'testUserId1'                                                                       // 13\n    };                                                                                            // 8\n    var noteTwo = {                                                                               // 15\n      _id: 'testNoteId2',                                                                         // 16\n      title: 'Things to Buy',                                                                     // 17\n      body: 'Couch',                                                                              // 18\n      updatedAt: 0,                                                                               // 19\n      userId: 'testUserId2'                                                                       // 20\n    };                                                                                            // 15\n    beforeEach(function () {                                                                      // 22\n      Notes.remove({});                                                                           // 23\n      Notes.insert(noteOne);                                                                      // 24\n      Notes.insert(noteTwo);                                                                      // 25\n    });                                                                                           // 26\n    it('should insert new note', function () {                                                    // 28\n      var userId = 'testid';                                                                      // 29\n                                                                                                  //\n      var _id = Meteor.server.method_handlers['notes.insert'].apply({                             // 30\n        userId: userId                                                                            // 30\n      });                                                                                         // 30\n                                                                                                  //\n      expect(Notes.findOne({                                                                      // 32\n        _id: _id,                                                                                 // 32\n        userId: userId                                                                            // 32\n      })).toExist();                                                                              // 32\n    });                                                                                           // 33\n    it('should not insert note if not authenticated', function () {                               // 35\n      expect(function () {                                                                        // 36\n        Meteor.server.method_handlers['notes.insert']();                                          // 37\n      }).toThrow();                                                                               // 38\n    });                                                                                           // 39\n    it('should remove note', function () {                                                        // 41\n      Meteor.server.method_handlers['notes.remove'].apply({                                       // 42\n        userId: noteOne.userId                                                                    // 42\n      }, [noteOne._id]);                                                                          // 42\n      expect(Notes.findOne({                                                                      // 44\n        _id: noteOne._id                                                                          // 44\n      })).toNotExist();                                                                           // 44\n    });                                                                                           // 45\n    it('should not remove note if unauthenticated', function () {                                 // 47\n      expect(function () {                                                                        // 48\n        Meteor.server.method_handlers['notes.remove'].apply({}, [noteOne._id]);                   // 49\n      }).toThrow();                                                                               // 50\n    });                                                                                           // 51\n    it('should not remove note if invalid _id', function () {                                     // 53\n      expect(function () {                                                                        // 54\n        Meteor.server.method_handlers['notes.remove'].apply({                                     // 55\n          userId: noteOne.userId                                                                  // 55\n        });                                                                                       // 55\n      }).toThrow();                                                                               // 56\n    });                                                                                           // 57\n    it('should update note', function () {                                                        // 59\n      var title = 'This is an updated title';                                                     // 60\n      Meteor.server.method_handlers['notes.update'].apply({                                       // 62\n        userId: noteOne.userId                                                                    // 63\n      }, [noteOne._id, {                                                                          // 62\n        title: title                                                                              // 66\n      }]);                                                                                        // 66\n      var note = Notes.findOne(noteOne._id);                                                      // 69\n      expect(note.updatedAt).toBeGreaterThan(0);                                                  // 71\n      expect(note).toInclude({                                                                    // 72\n        title: title,                                                                             // 73\n        body: noteOne.body                                                                        // 74\n      });                                                                                         // 72\n    });                                                                                           // 76\n    it('should throw error if extra updates provided', function () {                              // 78\n      expect(function () {                                                                        // 79\n        Meteor.server.method_handlers['notes.update'].apply({                                     // 80\n          userId: noteOne.userId                                                                  // 81\n        }, [noteOne._id, {                                                                        // 80\n          title: 'new title',                                                                     // 84\n          name: 'Matt'                                                                            // 84\n        }]);                                                                                      // 84\n      }).toThrow();                                                                               // 86\n    });                                                                                           // 87\n    it('should not update note if user was not creator', function () {                            // 89\n      var title = 'This is an updated title';                                                     // 90\n      Meteor.server.method_handlers['notes.update'].apply({                                       // 92\n        userId: 'testid'                                                                          // 93\n      }, [noteOne._id, {                                                                          // 92\n        title: title                                                                              // 96\n      }]);                                                                                        // 96\n      var note = Notes.findOne(noteOne._id);                                                      // 99\n      expect(note).toInclude(noteOne);                                                            // 101\n    });                                                                                           // 102\n    it('should not update note if unauthenticated', function () {                                 // 104\n      expect(function () {                                                                        // 105\n        Meteor.server.method_handlers['notes.update'].apply({}, [noteOne._id]);                   // 106\n      }).toThrow();                                                                               // 107\n    });                                                                                           // 108\n    it('should not update note if invalid _id', function () {                                     // 110\n      expect(function () {                                                                        // 111\n        Meteor.server.method_handlers['notes.update'].apply({                                     // 112\n          userId: noteOne.userId                                                                  // 112\n        });                                                                                       // 112\n      }).toThrow();                                                                               // 113\n    });                                                                                           // 114\n    it('should return a users notes', function () {                                               // 116\n      var res = Meteor.server.publish_handlers.notes.apply({                                      // 117\n        userId: noteOne.userId                                                                    // 117\n      });                                                                                         // 117\n      var notes = res.fetch();                                                                    // 118\n      expect(notes.length).toBe(1);                                                               // 120\n      expect(notes[0]).toEqual(noteOne);                                                          // 121\n    });                                                                                           // 122\n    it('should return no notes for user that has none', function () {                             // 124\n      var res = Meteor.server.publish_handlers.notes.apply({                                      // 125\n        userId: 'testid'                                                                          // 125\n      });                                                                                         // 125\n      var notes = res.fetch();                                                                    // 126\n      expect(notes.length).toBe(0);                                                               // 128\n    });                                                                                           // 129\n  });                                                                                             // 130\n}                                                                                                 // 131\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/users.js                                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nmodule.export({                                                                                   // 1\n\tvalidateNewUser: function () {                                                                   // 1\n\t\treturn validateNewUser;                                                                         // 1\n\t}                                                                                                // 1\n});                                                                                               // 1\nvar Meteor = void 0;                                                                              // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                          // 1\n\tMeteor: function (v) {                                                                           // 1\n\t\tMeteor = v;                                                                                     // 1\n\t}                                                                                                // 1\n}, 0);                                                                                            // 1\nvar SimpleSchema = void 0;                                                                        // 1\nmodule.watch(require(\"simpl-schema\"), {                                                           // 1\n\t\"default\": function (v) {                                                                        // 1\n\t\tSimpleSchema = v;                                                                               // 1\n\t}                                                                                                // 1\n}, 1);                                                                                            // 1\nvar Accounts = void 0;                                                                            // 1\nmodule.watch(require(\"meteor/accounts-base\"), {                                                   // 1\n\tAccounts: function (v) {                                                                         // 1\n\t\tAccounts = v;                                                                                   // 1\n\t}                                                                                                // 1\n}, 2);                                                                                            // 1\n                                                                                                  //\nvar validateNewUser = function (user) {                                                           // 5\n\tvar email = user.emails[0].address;                                                              // 6\n\tnew SimpleSchema({                                                                               // 8\n\t\temail: {                                                                                        // 9\n\t\t\ttype: String,                                                                                  // 10\n\t\t\tregEx: SimpleSchema.RegEx.Email                                                                // 11\n\t\t}                                                                                               // 9\n\t}).validate({                                                                                    // 8\n\t\temail: email                                                                                    // 13\n\t});                                                                                              // 13\n\treturn true;                                                                                     // 16\n};                                                                                                // 17\n                                                                                                  //\nif (Meteor.isServer) {                                                                            // 19\n\tAccounts.validateNewUser(validateNewUser);                                                       // 20\n}                                                                                                 // 21\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.test.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/users.test.js                                                                      //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar Meteor = void 0;                                                                              // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                          // 1\n\tMeteor: function (v) {                                                                           // 1\n\t\tMeteor = v;                                                                                     // 1\n\t}                                                                                                // 1\n}, 0);                                                                                            // 1\nvar expect = void 0;                                                                              // 1\nmodule.watch(require(\"expect\"), {                                                                 // 1\n\t\"default\": function (v) {                                                                        // 1\n\t\texpect = v;                                                                                     // 1\n\t}                                                                                                // 1\n}, 1);                                                                                            // 1\nvar validateNewUser = void 0;                                                                     // 1\nmodule.watch(require(\"./users\"), {                                                                // 1\n\tvalidateNewUser: function (v) {                                                                  // 1\n\t\tvalidateNewUser = v;                                                                            // 1\n\t}                                                                                                // 1\n}, 2);                                                                                            // 1\n                                                                                                  //\nif (Meteor.isServer) {                                                                            // 6\n\tdescribe('users', function () {                                                                  // 7\n\t\tit('should allow valid email address', function () {                                            // 9\n\t\t\tvar testUser = {                                                                               // 10\n\t\t\t\temails: [{                                                                                    // 11\n\t\t\t\t\taddress: 'Test@example.com'                                                                  // 13\n\t\t\t\t}]                                                                                            // 12\n\t\t\t};                                                                                             // 10\n\t\t\tvar res = validateNewUser(testUser);                                                           // 17\n\t\t\texpect(res).toBe(true);                                                                        // 19\n\t\t});                                                                                             // 20\n\t\tit('should reject invalid email', function () {                                                 // 22\n\t\t\tvar testUser = {                                                                               // 23\n\t\t\t\temails: [{                                                                                    // 24\n\t\t\t\t\taddress: 'Test'                                                                              // 26\n\t\t\t\t}]                                                                                            // 25\n\t\t\t};                                                                                             // 23\n\t\t\texpect(function () {                                                                           // 31\n\t\t\t\tvalidateNewUser(testUser);                                                                    // 32\n\t\t\t}).toThrow();                                                                                  // 33\n\t\t});                                                                                             // 34\n\t\tit('should update user');                                                                       // 36\n\t\tit('should throw error if extra updates provided');                                             // 37\n\t\tit('should not update user if not correct user');                                               // 38\n\t\tit('should not update user if unauthenticated');                                                // 39\n\t});                                                                                              // 40\n}                                                                                                 // 41\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ui\":{\"PrivateHeader.test.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/ui/PrivateHeader.test.js                                                               //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\n                                                                                                  //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./imports/api/notes.test.js\");\nrequire(\"./imports/api/users.test.js\");\nrequire(\"./imports/ui/PrivateHeader.test.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/notes.js","imports/api/notes.test.js","imports/api/users.js","imports/api/users.test.js"],"names":["module","export","Notes","Mongo","watch","require","v","Meteor","moment","SimpleSchema","Collection","isServer","publish","find","userId","methods","Error","insert","title","body","updatedAt","valueOf","_id","type","String","min","validate","remove","updates","optional","update","$set","expect","describe","noteOne","noteTwo","beforeEach","it","server","method_handlers","apply","findOne","toExist","toThrow","toNotExist","note","toBeGreaterThan","toInclude","name","res","publish_handlers","notes","fetch","length","toBe","toEqual","validateNewUser","Accounts","user","email","emails","address","regEx","RegEx","Email","testUser"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\nimport SimpleSchema from 'simpl-schema';\n\nexport const Notes = new Mongo.Collection('notes');\n\nif (Meteor.isServer) {\n  Meteor.publish('notes', function () {\n    return Notes.find({ userId: this.userId });\n  });\n}\n\nMeteor.methods({\n  'notes.insert'() {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    return Notes.insert({\n      title: '',\n      body: '',\n      userId: this.userId,\n      updatedAt: moment().valueOf()\n    });\n  },\n  'notes.remove'(_id) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      }\n    }).validate({ _id });\n    //ensures that note._id's userId is equal to the current userId\n    Notes.remove({ _id, userId: this.userId });\n  },\n  'notes.update'(_id, updates) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      },\n      title: {\n        type: String,\n        optional: true\n      },\n      body: {\n        type: String,\n        optional: true\n      }\n    }).validate({\n      _id,\n      ...updates\n    });\n\n    Notes.update({\n      _id,\n      userId: this.userId\n    }, {\n      $set: {\n        updatedAt: moment().valueOf(),\n        ...updates\n      }\n    });\n  }\n});\n","import { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { Notes } from './notes';\n\nif (Meteor.isServer) {\n  describe('notes', function () {\n    const noteOne = {\n      _id: 'testNoteId1',\n      title: 'My Title',\n      body: 'My body for note',\n      updatedAt: 0,\n      userId: 'testUserId1'\n    };\n    const noteTwo = {\n      _id: 'testNoteId2',\n      title: 'Things to Buy',\n      body: 'Couch',\n      updatedAt: 0,\n      userId: 'testUserId2'\n    };\n    beforeEach(function () {\n      Notes.remove({});\n      Notes.insert(noteOne);\n      Notes.insert(noteTwo);\n    });\n\n    it('should insert new note', function () {\n      const userId = 'testid';\n      const _id = Meteor.server.method_handlers['notes.insert'].apply({ userId });\n\n      expect(Notes.findOne({ _id, userId })).toExist();\n    });\n\n    it('should not insert note if not authenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId }, [noteOne._id]);\n\n      expect(Notes.findOne({ _id: noteOne._id})).toNotExist();\n    });\n\n    it('should not remove note if unauthenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({}, [noteOne._id]);\n      }).toThrow();\n    });\n\n    it('should not remove note if invalid _id', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId });\n      }).toThrow();\n    });\n\n    it('should update note', function () {\n      const title = 'This is an updated title';\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: noteOne.userId\n      }, [\n        noteOne._id,\n        { title }\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note.updatedAt).toBeGreaterThan(0);\n      expect(note).toInclude({\n        title,\n        body: noteOne.body\n      });\n    });\n\n    it('should throw error if extra updates provided', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.update'].apply({\n          userId: noteOne.userId\n        }, [\n          noteOne._id,\n          { title: 'new title', name: 'Matt'}\n        ]);\n      }).toThrow();\n    });\n\n    it('should not update note if user was not creator', function () {\n      const title = 'This is an updated title';\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: 'testid'\n      }, [\n        noteOne._id,\n        { title }\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note).toInclude(noteOne);\n    });\n\n    it('should not update note if unauthenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.update'].apply({}, [noteOne._id]);\n      }).toThrow();\n    });\n\n    it('should not update note if invalid _id', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.update'].apply({ userId: noteOne.userId });\n      }).toThrow();\n    });\n\n    it('should return a users notes', function () {\n      const res = Meteor.server.publish_handlers.notes.apply({ userId: noteOne.userId });\n      const notes = res.fetch();\n\n      expect(notes.length).toBe(1);\n      expect(notes[0]).toEqual(noteOne);\n    });\n\n    it('should return no notes for user that has none', function () {\n      const res = Meteor.server.publish_handlers.notes.apply({ userId: 'testid' });\n      const notes = res.fetch();\n\n      expect(notes.length).toBe(0);\n    });\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport const validateNewUser = (user) => {\n\tconst email = user.emails[0].address;\n\n\tnew SimpleSchema({\n\t\temail: {\n\t\t\ttype: String,\n\t\t\tregEx: SimpleSchema.RegEx.Email\n\t\t}\n\t}).validate({ email });\n\n\n\treturn true;\n};\n\nif (Meteor.isServer) {\n\tAccounts.validateNewUser(validateNewUser);\n}\n","import { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { validateNewUser } from './users';\n\nif (Meteor.isServer) {\n\tdescribe('users', function() {\n\n\t\tit('should allow valid email address', function() {\n\t\t\tconst testUser = {\n\t\t\t\temails: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: 'Test@example.com'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t\tconst res = validateNewUser(testUser);\n\n\t\t\texpect(res).toBe(true);\n\t\t});\n\n\t\tit('should reject invalid email', function () {\n\t\t\tconst testUser = {\n\t\t\t\temails: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: 'Test'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\texpect(() => {\n\t\t\t\tvalidateNewUser(testUser);\n\t\t\t}).toThrow();\n\t\t});\n\n\t\tit('should update user');\n\t\tit('should throw error if extra updates provided');\n\t\tit('should not update user if not correct user');\n\t\tit('should not update user if unauthenticated');\n\t});\n}\n"]}}]