[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\n\n/* Package-scope variables */\nvar Loglevel, log, __coffeescriptShare, loglevel, ObjectLogger;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/practicalmeteor_loglevel/packages/practicalmeteor_loglevel.js                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n(function () {                                                                                             // 1\n                                                                                                           // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                  //     // 4\n// packages/practicalmeteor:loglevel/loglevel-1.2.0.js                                              //     // 5\n//                                                                                                  //     // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                    //     // 8\n/*! loglevel - v1.2.0 - https://github.com/pimterry/loglevel - (c) 2014 Tim Perry - licensed MIT */ // 1   // 9\n                                                                                                    // 2   // 10\nLoglevel = function (options) {                                                                     // 3   // 11\n    var self = {};                                                                                  // 4   // 12\n    if(options && options.prefix) {                                                                 // 5   // 13\n        self.prefix = options.prefix;                                                               // 6   // 14\n    } else {                                                                                        // 7   // 15\n        self.prefix = '';                                                                           // 8   // 16\n    }                                                                                               // 9   // 17\n    if(options && options.level) {                                                                  // 10  // 18\n        self.level = options.level;                                                                 // 11  // 19\n    } else {                                                                                        // 12  // 20\n        self.level = 'info';                                                                        // 13  // 21\n    }                                                                                               // 14  // 22\n    var noop = function() {};                                                                       // 15  // 23\n    var undefinedType = \"undefined\";                                                                // 16  // 24\n                                                                                                    // 17  // 25\n    function realMethod(methodName) {                                                               // 18  // 26\n        if (typeof console === undefinedType) {                                                     // 19  // 27\n            return false; // We can't build a real method without a console to log to               // 20  // 28\n        } else if (console[methodName] !== undefined) {                                             // 21  // 29\n            return bindMethod(console, methodName);                                                 // 22  // 30\n        } else if (console.log !== undefined) {                                                     // 23  // 31\n            return bindMethod(console, 'log');                                                      // 24  // 32\n        } else {                                                                                    // 25  // 33\n            return noop;                                                                            // 26  // 34\n        }                                                                                           // 27  // 35\n    }                                                                                               // 28  // 36\n                                                                                                    // 29  // 37\n    function bindMethod(obj, methodName) {                                                          // 30  // 38\n        var method = obj[methodName];                                                               // 31  // 39\n        if (typeof method.bind === 'function') {                                                    // 32  // 40\n            return method.bind(obj, self.prefix);                                                   // 33  // 41\n        } else {                                                                                    // 34  // 42\n            try {                                                                                   // 35  // 43\n                return Function.prototype.bind.call(method, obj, self.prefix);                      // 36  // 44\n            } catch (e) {                                                                           // 37  // 45\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping                       // 38  // 46\n                return function() {                                                                 // 39  // 47\n                    return Function.prototype.apply.apply(method, [obj, arguments]);                // 40  // 48\n                };                                                                                  // 41  // 49\n            }                                                                                       // 42  // 50\n        }                                                                                           // 43  // 51\n    }                                                                                               // 44  // 52\n                                                                                                    // 45  // 53\n    function enableLoggingWhenConsoleArrives(methodName, level) {                                   // 46  // 54\n        return function () {                                                                        // 47  // 55\n            if (typeof console !== undefinedType) {                                                 // 48  // 56\n                replaceLoggingMethods(level);                                                       // 49  // 57\n                self[methodName].apply(self, arguments);                                            // 50  // 58\n            }                                                                                       // 51  // 59\n        };                                                                                          // 52  // 60\n    }                                                                                               // 53  // 61\n                                                                                                    // 54  // 62\n    var logMethods = [                                                                              // 55  // 63\n        \"trace\",                                                                                    // 56  // 64\n        \"fine\",                                                                                     // 57  // 65\n        \"debug\",                                                                                    // 58  // 66\n        \"info\",                                                                                     // 59  // 67\n        \"warn\",                                                                                     // 60  // 68\n        \"error\"                                                                                     // 61  // 69\n    ];                                                                                              // 62  // 70\n                                                                                                    // 63  // 71\n    function replaceLoggingMethods(level) {                                                         // 64  // 72\n        for (var i = 0; i < logMethods.length; i++) {                                               // 65  // 73\n            var methodName = logMethods[i];                                                         // 66  // 74\n            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);          // 67  // 75\n        }                                                                                           // 68  // 76\n    }                                                                                               // 69  // 77\n                                                                                                    // 70  // 78\n    function persistLevelIfPossible(levelNum) {                                                     // 71  // 79\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();                           // 72  // 80\n                                                                                                    // 73  // 81\n        // Use localStorage if available                                                            // 74  // 82\n        try {                                                                                       // 75  // 83\n            window.localStorage['loglevel'] = levelName;                                            // 76  // 84\n            return;                                                                                 // 77  // 85\n        } catch (ignore) {}                                                                         // 78  // 86\n                                                                                                    // 79  // 87\n        // Use session cookie as fallback                                                           // 80  // 88\n        try {                                                                                       // 81  // 89\n            window.document.cookie = \"loglevel=\" + levelName + \";\";                                 // 82  // 90\n        } catch (ignore) {}                                                                         // 83  // 91\n    }                                                                                               // 84  // 92\n                                                                                                    // 85  // 93\n    function loadPersistedLevel() {                                                                 // 86  // 94\n        var storedLevel;                                                                            // 87  // 95\n                                                                                                    // 88  // 96\n        try {                                                                                       // 89  // 97\n            storedLevel = window.localStorage['loglevel'];                                          // 90  // 98\n        } catch (ignore) {}                                                                         // 91  // 99\n                                                                                                    // 92  // 100\n        if (typeof storedLevel === undefinedType) {                                                 // 93  // 101\n            try {                                                                                   // 94  // 102\n                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];                   // 95  // 103\n            } catch (ignore) {}                                                                     // 96  // 104\n        }                                                                                           // 97  // 105\n                                                                                                    // 98  // 106\n        if (self.levels[storedLevel] === undefined) {                                               // 99  // 107\n            storedLevel = \"WARN\";                                                                   // 100\n        }                                                                                           // 101\n                                                                                                    // 102\n        self.setLevel(self.levels[storedLevel]);                                                    // 103\n    }                                                                                               // 104\n                                                                                                    // 105\n    /*                                                                                              // 106\n     *                                                                                              // 107\n     * Public API                                                                                   // 108\n     *                                                                                              // 109\n     */                                                                                             // 110\n                                                                                                    // 111\n    self.levels = { \"TRACE\": 0, \"FINE\": 1, \"DEBUG\": 2, \"INFO\": 3, \"WARN\": 4,                        // 112\n        \"ERROR\": 5, \"SILENT\": 6};                                                                   // 113\n                                                                                                    // 114\n    self.methodFactory = function (methodName, level) {                                             // 115\n        return realMethod(methodName) ||                                                            // 116\n            enableLoggingWhenConsoleArrives(methodName, level);                                     // 117\n    };                                                                                              // 118\n                                                                                                    // 119\n    self.setLevel = function (level) {                                                              // 120\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {          // 121\n            level = self.levels[level.toUpperCase()];                                               // 122\n        }                                                                                           // 123\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {               // 124\n            //persistLevelIfPossible(level);                                                        // 125\n            self.level = level;                                                                     // 126\n            replaceLoggingMethods(level);                                                           // 127\n            if (typeof console === undefinedType && level < self.levels.SILENT) {                   // 128\n                return \"No console available for logging\";                                          // 129\n            }                                                                                       // 130\n        } else {                                                                                    // 131\n            throw \"log.setLevel() called with invalid level: \" + level;                             // 132\n        }                                                                                           // 133\n    };                                                                                              // 134\n                                                                                                    // 135\n    self.enableAll = function() {                                                                   // 136\n        self.setLevel(self.levels.TRACE);                                                           // 137\n    };                                                                                              // 138\n                                                                                                    // 139\n    self.disableAll = function() {                                                                  // 140\n        self.setLevel(self.levels.SILENT);                                                          // 141\n    };                                                                                              // 142\n                                                                                                    // 143\n    // Grab the current global log variable in case of overwrite                                    // 144\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;                          // 145\n    self.noConflict = function() {                                                                  // 146\n        if (typeof window !== undefinedType &&                                                      // 147\n            window.log === self) {                                                                  // 148\n            window.log = _log;                                                                      // 149\n        }                                                                                           // 150\n                                                                                                    // 151\n        return self;                                                                                // 152\n    };                                                                                              // 153\n                                                                                                    // 154\n    self.setPrefix = function(prefix) {                                                             // 155\n        if(typeof prefix === undefinedType || prefix === null) {                                    // 156\n            prefix = '';                                                                            // 157\n        }                                                                                           // 158\n        self.prefix = prefix;                                                                       // 159\n        self.setLevel(self.level);                                                                  // 160\n    };                                                                                              // 161\n                                                                                                    // 162\n    //loadPersistedLevel();                                                                         // 163\n    self.setLevel(self.level);                                                                      // 164\n    return self;                                                                                    // 165\n};                                                                                                  // 166\n                                                                                                    // 167\nlog = Loglevel({prefix: 'practicalmeteor:loglevel:'});                                              // 168\n                                                                                                    // 169\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 178\n                                                                                                           // 179\n}).call(this);                                                                                             // 180\n                                                                                                           // 181\n                                                                                                           // 182\n                                                                                                           // 183\n                                                                                                           // 184\n                                                                                                           // 185\n                                                                                                           // 186\n(function () {                                                                                             // 187\n                                                                                                           // 188\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 189\n//                                                                                                  //     // 190\n// packages/practicalmeteor:loglevel/LoggerFactory.coffee.js                                        //     // 191\n//                                                                                                  //     // 192\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 193\n                                                                                                    //     // 194\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                           // 196\n                                                                                                           // 197\nif (this.practical == null) {                                                                              // 198\n  this.practical = {};                                                                                     // 199\n}                                                                                                          // 200\n                                                                                                           // 201\npractical.LoggerFactory = (function() {                                                                    // 202\n  var instance;                                                                                            // 203\n                                                                                                           // 204\n  function LoggerFactory() {}                                                                              // 205\n                                                                                                           // 206\n  instance = null;                                                                                         // 207\n                                                                                                           // 208\n  LoggerFactory.get = function() {                                                                         // 209\n    return instance != null ? instance : instance = new practical.LoggerFactory();                         // 210\n  };                                                                                                       // 211\n                                                                                                           // 212\n  LoggerFactory.prototype._getSettingsLoglevel = function(namespace, defaultLevel) {                       // 213\n    var globalLevel, level;                                                                                // 214\n    if (namespace == null) {                                                                               // 215\n      namespace = '';                                                                                      // 216\n    }                                                                                                      // 217\n    if (defaultLevel == null) {                                                                            // 218\n      defaultLevel = 'info';                                                                               // 219\n    }                                                                                                      // 220\n    expect(namespace).to.be.a('string');                                                                   // 221\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);                                       // 222\n    globalLevel = this._getNamespaceLoglevel('global');                                                    // 223\n    if (globalLevel != null) {                                                                             // 224\n      return globalLevel;                                                                                  // 225\n    }                                                                                                      // 226\n    if (namespace.length > 0) {                                                                            // 227\n      level = this._getNamespaceLoglevel(namespace);                                                       // 228\n    }                                                                                                      // 229\n    if (level == null) {                                                                                   // 230\n      level = this._getNamespaceLoglevel('default');                                                       // 231\n    }                                                                                                      // 232\n    return level != null ? level : level = defaultLevel;                                                   // 233\n  };                                                                                                       // 234\n                                                                                                           // 235\n  LoggerFactory.prototype._getNamespaceLoglevel = function(namespace) {                                    // 236\n    var level, serverLevel, _ref, _ref1, _ref2, _ref3, _ref4;                                              // 237\n    expect(namespace).to.be.a('string').that.has.length.above(0);                                          // 238\n    level = (_ref = Meteor.settings) != null ? (_ref1 = _ref[\"public\"]) != null ? (_ref2 = _ref1.loglevel) != null ? _ref2[namespace] : void 0 : void 0 : void 0;\n    if (Meteor.isServer) {                                                                                 // 240\n      serverLevel = (_ref3 = Meteor.settings) != null ? (_ref4 = _ref3.loglevel) != null ? _ref4[namespace] : void 0 : void 0;\n      if (serverLevel != null) {                                                                           // 242\n        level = serverLevel;                                                                               // 243\n      }                                                                                                    // 244\n    }                                                                                                      // 245\n    return level;                                                                                          // 246\n  };                                                                                                       // 247\n                                                                                                           // 248\n  LoggerFactory.prototype.createLogger = function(namespace, defaultLevel) {                               // 249\n    var options;                                                                                           // 250\n    if (namespace == null) {                                                                               // 251\n      namespace = '';                                                                                      // 252\n    }                                                                                                      // 253\n    if (defaultLevel == null) {                                                                            // 254\n      defaultLevel = 'info';                                                                               // 255\n    }                                                                                                      // 256\n    log.debug('LoggerFactory.createLogger()', arguments);                                                  // 257\n    expect(namespace).to.be.a('string');                                                                   // 258\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);                                       // 259\n    expect(Loglevel).to.be.a('function');                                                                  // 260\n    options = {};                                                                                          // 261\n    if (namespace.length > 0) {                                                                            // 262\n      options.prefix = namespace + ':';                                                                    // 263\n    }                                                                                                      // 264\n    options.level = this._getSettingsLoglevel(namespace, defaultLevel);                                    // 265\n    return Loglevel(options);                                                                              // 266\n  };                                                                                                       // 267\n                                                                                                           // 268\n  LoggerFactory.prototype.createPackageLogger = function(packageName, defaultLevel) {                      // 269\n    if (defaultLevel == null) {                                                                            // 270\n      defaultLevel = 'info';                                                                               // 271\n    }                                                                                                      // 272\n    return this.createLogger(packageName, defaultLevel);                                                   // 273\n  };                                                                                                       // 274\n                                                                                                           // 275\n  LoggerFactory.prototype.createAppLogger = function(appName, defaultLevel) {                              // 276\n    if (appName == null) {                                                                                 // 277\n      appName = 'app';                                                                                     // 278\n    }                                                                                                      // 279\n    if (defaultLevel == null) {                                                                            // 280\n      defaultLevel = 'info';                                                                               // 281\n    }                                                                                                      // 282\n    return this.createLogger(appName, defaultLevel);                                                       // 283\n  };                                                                                                       // 284\n                                                                                                           // 285\n  return LoggerFactory;                                                                                    // 286\n                                                                                                           // 287\n})();                                                                                                      // 288\n                                                                                                           // 289\nloglevel = practical.LoggerFactory.get();                                                                  // 290\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 291\n                                                                                                           // 292\n}).call(this);                                                                                             // 293\n                                                                                                           // 294\n                                                                                                           // 295\n                                                                                                           // 296\n                                                                                                           // 297\n                                                                                                           // 298\n                                                                                                           // 299\n(function () {                                                                                             // 300\n                                                                                                           // 301\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 302\n//                                                                                                  //     // 303\n// packages/practicalmeteor:loglevel/ObjectLogger.coffee.js                                         //     // 304\n//                                                                                                  //     // 305\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 306\n                                                                                                    //     // 307\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar                                                                                                        // 309\n  __slice = [].slice;                                                                                      // 310\n                                                                                                           // 311\nObjectLogger = (function() {                                                                               // 312\n  function ObjectLogger(className, defaultLevel) {                                                         // 313\n    this.className = className;                                                                            // 314\n    this.defaultLevel = defaultLevel != null ? defaultLevel : 'info';                                      // 315\n    this.log = loglevel.createLogger(this.className, this.defaultLevel);                                   // 316\n    this.callStack = [];                                                                                   // 317\n    this.log.enter = this.bindMethod(this.enter, 'debug');                                                 // 318\n    this.log.fineEnter = this.bindMethod(this.enter, 'fine');                                              // 319\n    this.log[\"return\"] = this.bindMethod(this[\"return\"], 'debug');                                         // 320\n    this.log.fineReturn = this.bindMethod(this[\"return\"], 'fine');                                         // 321\n    return this.log;                                                                                       // 322\n  }                                                                                                        // 323\n                                                                                                           // 324\n  ObjectLogger.prototype.enter = function() {                                                              // 325\n    var args, level, methodName;                                                                           // 326\n    level = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];                  // 327\n    if (args.length === 0) {                                                                               // 328\n      throw new Error('ObjectLogger: No method name provided to enter');                                   // 329\n    }                                                                                                      // 330\n    methodName = args.shift();                                                                             // 331\n    this.callStack.unshift(methodName);                                                                    // 332\n    this.log.setPrefix(\"\" + this.className + \".\" + methodName + \":\");                                      // 333\n    args.unshift('ENTER');                                                                                 // 334\n    return this.log[level].apply(this.log, args);                                                          // 335\n  };                                                                                                       // 336\n                                                                                                           // 337\n  ObjectLogger.prototype[\"return\"] = function(level) {                                                     // 338\n    var methodName;                                                                                        // 339\n    this.log[level].call(this.log, 'RETURN');                                                              // 340\n    this.callStack.shift();                                                                                // 341\n    if (this.callStack.length > 0) {                                                                       // 342\n      methodName = this.callStack[0];                                                                      // 343\n      return this.log.setPrefix(\"\" + this.className + \".\" + methodName + \":\");                             // 344\n    }                                                                                                      // 345\n  };                                                                                                       // 346\n                                                                                                           // 347\n  ObjectLogger.prototype.bindMethod = function(method, level) {                                            // 348\n    var e;                                                                                                 // 349\n    if (typeof method.bind === 'function') {                                                               // 350\n      return method.bind(this, level);                                                                     // 351\n    } else {                                                                                               // 352\n      try {                                                                                                // 353\n        return Function.prototype.bind.call(method, this, level);                                          // 354\n      } catch (_error) {                                                                                   // 355\n        e = _error;                                                                                        // 356\n        return (function(_this) {                                                                          // 357\n          return function() {                                                                              // 358\n            var args;                                                                                      // 359\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];                                // 360\n            args.unshift(level);                                                                           // 361\n            return Function.prototype.apply.apply(method, [_this, args]);                                  // 362\n          };                                                                                               // 363\n        })(this);                                                                                          // 364\n      }                                                                                                    // 365\n    }                                                                                                      // 366\n  };                                                                                                       // 367\n                                                                                                           // 368\n  return ObjectLogger;                                                                                     // 369\n                                                                                                           // 370\n})();                                                                                                      // 371\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 372\n                                                                                                           // 373\n}).call(this);                                                                                             // 374\n                                                                                                           // 375\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:loglevel'] = {}, {\n  loglevel: loglevel,\n  ObjectLogger: ObjectLogger\n});\n\n})();\n","servePath":"/packages/practicalmeteor_loglevel.js"}]