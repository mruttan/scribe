{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, ConsoleReporter, MochaRunner, ObjectLogger, log,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nMochaRunner = require(\"../lib/MochaRunner\");\n\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;\n\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");\n\nlog = new ObjectLogger('ConsoleReporter', 'info');\n\nConsoleReporter = (function(superClass) {\n  extend(ConsoleReporter, superClass);\n\n  function ConsoleReporter(clientRunner, serverRunner, options) {\n    this.clientRunner = clientRunner;\n    this.serverRunner = serverRunner;\n    this.options = options;\n    this.finishAndPrintTestsSummary = bind(this.finishAndPrintTestsSummary, this);\n    this.printReporterHeader = bind(this.printReporterHeader, this);\n    try {\n      log.enter('constructor');\n      ConsoleReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);\n      MochaRunner.on(\"end all\", (function(_this) {\n        return function() {\n          return _this.finishAndPrintTestsSummary();\n        };\n      })(this));\n    } finally {\n      log[\"return\"]();\n    }\n  }\n\n\n  /*\n    Overwriting from ClientServerBaseReporter\n   */\n\n  ConsoleReporter.prototype.registerRunnerEvents = function(where) {\n    try {\n      log.enter(\"registerRunnerEvents\");\n      ConsoleReporter.__super__.registerRunnerEvents.call(this, where);\n      this[where + \"Runner\"].on(\"start\", (function(_this) {\n        return function() {\n          return _this.printReporterHeader(where);\n        };\n      })(this));\n      this[where + \"Runner\"].on('test end', (function(_this) {\n        return function(test) {\n          return _this.printTest(test, where);\n        };\n      })(this));\n      return this[where + \"Runner\"].on(\"fail\", (function(_this) {\n        return function(hook) {\n          if (hook.type === 'hook') {\n            return _this.printTest(hook, where);\n          }\n        };\n      })(this));\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  ConsoleReporter.prototype.printReporterHeader = function(where) {\n    try {\n      log.enter(\"printReporterHeader\", where);\n      if (this.options.runOrder !== 'serial') {\n        return;\n      }\n      where = where[0].toUpperCase() + where.substr(1);\n      console.log(\"\\n--------------------------------------------------\");\n      console.log(\"------------------ \" + where + \" tests ------------------\");\n      return console.log(\"--------------------------------------------------\\n\");\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  ConsoleReporter.prototype.printTest = function(test, where) {\n    var state;\n    try {\n      log.enter(\"prinTest\", test);\n      state = test.state || (test.pending ? \"pending\" : void 0);\n      if (this.options.runOrder === 'serial') {\n        where = \"\";\n      } else {\n        where = where[0].toUpperCase() + \": \";\n      }\n      console.log(\"\" + where + (test.fullTitle()) + \" : \" + state);\n      if (test.state === \"failed\") {\n        console.log(\"  \" + (test.err.stack || test.err));\n      }\n      return console.log(\"\");\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  ConsoleReporter.prototype.finishAndPrintTestsSummary = function() {\n    var ref, ref1;\n    try {\n      log.enter(\"finishAndPrintTestsSummary\");\n      if ((((ref = this.clientStats) != null ? ref.total : void 0) == null) || (((ref1 = this.serverStats) != null ? ref1.total : void 0) == null)) {\n        return;\n      }\n      console.log(\"\\n--------------------------------------------------\");\n      console.log(\"---------------------RESULTS----------------------\");\n      console.log(\"PASSED:\", this.stats.passes);\n      console.log(\"FAILED:\", this.stats.failures);\n      console.log(\"SKIPPED:\", this.stats.pending);\n      console.log(\"TOTAL:\", this.stats.total);\n      console.log(\"--------------------------------------------------\");\n      return console.log(\"--------------------------------------------------\\n\");\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  return ConsoleReporter;\n\n})(ClientServerBaseReporter);\n\nmodule.exports = ConsoleReporter;\n","sourceMap":{"version":3,"file":"/meteor/src/reporters/ConsoleReporter.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/reporters/ConsoleReporter.coffee"],"names":[],"mappings":"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","sourcesContent":["MochaRunner               = require(\"../lib/MochaRunner\")\n{ ObjectLogger }          = require(\"meteor/practicalmeteor:loglevel\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\n\nlog = new ObjectLogger('ConsoleReporter', 'info')\n\n\nclass ConsoleReporter extends  ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    try\n      log.enter('constructor')\n      super(@clientRunner, @serverRunner, @options)\n      MochaRunner.on \"end all\", => @finishAndPrintTestsSummary()\n\n    finally\n      log.return()\n\n  ###\n    Overwriting from ClientServerBaseReporter\n  ###\n  registerRunnerEvents: (where)->\n    try\n      log.enter(\"registerRunnerEvents\")\n      # Call super.registerRunnerEvents to register events from ClientServerBaseReporter first\n      super(where)\n\n      @[\"#{where}Runner\"].on \"start\", => @printReporterHeader(where)\n      @[\"#{where}Runner\"].on 'test end', (test)=> @printTest(test, where)\n\n      # Log for errors with hooks\n      @[\"#{where}Runner\"].on \"fail\", (hook)=> @printTest(hook, where) if hook.type is 'hook'\n\n    finally\n      log.return()\n\n\n  printReporterHeader: (where)=>\n    try\n      log.enter(\"printReporterHeader\", where)\n      return if @options.runOrder isnt 'serial'\n      # i.e client = Client\n      where = where[0].toUpperCase() + where.substr(1)\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"------------------ #{where} tests ------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\n  printTest: (test, where)->\n    try\n      log.enter(\"prinTest\", test)\n      state = test.state or (if test.pending then \"pending\")\n\n      # Since the test are running in parallel we don't need\n      # to specify where they are client or   server tests.\n      if @options.runOrder is 'serial'\n        where = \"\"\n      else\n        # Get first chart 's' or 'c' for client/server\n        where = where[0].toUpperCase() + \": \"\n\n      console.log(\"#{where}#{test.fullTitle()} : #{state}\")\n\n      if test.state is \"failed\"\n        console.log(\"  \" + (test.err.stack || test.err))\n\n      console.log(\"\")\n    finally\n      log.return()\n\n\n  finishAndPrintTestsSummary: ()=>\n    try\n      log.enter(\"finishAndPrintTestsSummary\")\n      return if not @clientStats?.total? or not @serverStats?.total?\n\n      console.log(\"\\n--------------------------------------------------\")\n      console.log(\"---------------------RESULTS----------------------\")\n      console.log(\"PASSED:\", @stats.passes)\n      console.log(\"FAILED:\", @stats.failures)\n      console.log(\"SKIPPED:\", @stats.pending)\n      console.log(\"TOTAL:\", @stats.total)\n      console.log(\"--------------------------------------------------\")\n      console.log(\"--------------------------------------------------\\n\")\n    finally\n      log.return()\n\n\nmodule.exports = ConsoleReporter\n\n"]}}