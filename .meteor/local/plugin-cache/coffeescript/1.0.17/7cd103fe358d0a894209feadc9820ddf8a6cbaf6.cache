{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ConsoleReporter, MochaRunner, XUnitReporter,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nMochaRunner = require(\"../lib/MochaRunner\");\n\nConsoleReporter = require(\"./ConsoleReporter\");\n\nXUnitReporter = (function(superClass) {\n  extend(XUnitReporter, superClass);\n\n  XUnitReporter.VERSION = \"0.1.0\";\n\n  XUnitReporter.prototype.xUnitPrefix = \"##_meteor_magic##xunit: \";\n\n  function XUnitReporter(clientRunner, serverRunner, options) {\n    this.clientRunner = clientRunner;\n    this.serverRunner = serverRunner;\n    this.options = options;\n    this.clientTests = [];\n    this.serverTests = [];\n    MochaRunner.on(\"end all\", (function(_this) {\n      return function() {\n        return _this.printTestSuite();\n      };\n    })(this));\n    XUnitReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);\n  }\n\n\n  /*\n    Overwrite from ConsoleReporter\n   */\n\n  XUnitReporter.prototype.registerRunnerEvents = function(where) {\n    XUnitReporter.__super__.registerRunnerEvents.call(this, where);\n    this[where + \"Runner\"].on('pending', (function(_this) {\n      return function(test) {\n        return _this[where + \"Tests\"].push(test);\n      };\n    })(this));\n    this[where + \"Runner\"].on('pass', (function(_this) {\n      return function(test) {\n        return _this[where + \"Tests\"].push(test);\n      };\n    })(this));\n    return this[where + \"Runner\"].on('fail', (function(_this) {\n      return function(test) {\n        return _this[where + \"Tests\"].push(test);\n      };\n    })(this));\n  };\n\n  XUnitReporter.prototype.printTestSuite = function() {\n    var testSuite;\n    testSuite = {\n      name: 'Mocha Tests',\n      tests: this.stats.total,\n      failures: this.stats.failures,\n      errors: this.stats.failures,\n      timestamp: (new Date).toUTCString(),\n      time: this.stats.duration / 1000 || 0,\n      skipped: this.stats.pending\n    };\n    this.write(this.createTag('testsuite', testSuite, false));\n    this.clientTests.forEach((function(_this) {\n      return function(test) {\n        return _this.printTestCase(test, \"Client\");\n      };\n    })(this));\n    this.serverTests.forEach((function(_this) {\n      return function(test) {\n        return _this.printTestCase(test, \"Server\");\n      };\n    })(this));\n    return this.write('</testsuite>');\n  };\n\n\n  /**\n   * HTML tag helper.\n  #\n   * @param name\n   * @param attrs\n   * @param close\n   * @param content\n   * @return {string}\n   */\n\n  XUnitReporter.prototype.createTag = function(name, attrs, close, content) {\n    var end, key, pairs, tag;\n    if (attrs == null) {\n      attrs = {};\n    }\n    end = close ? '/>' : '>';\n    pairs = [];\n    tag = void 0;\n    for (key in attrs) {\n      if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n        pairs.push(key + '=\"' + this.escape(attrs[key]) + '\"');\n      }\n    }\n    tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n    if (content) {\n      tag += content + '</' + name + end;\n    }\n    return tag;\n  };\n\n\n  /**\n   * Return cdata escaped CDATA `str`.\n   */\n\n  XUnitReporter.prototype.cdata = function(str) {\n    return '<![CDATA[' + this.escape(str) + ']]>';\n  };\n\n\n  /**\n   * Override done to close the stream (if it's a file).\n  #\n   * @param failures\n   * @param {Function} fn\n   */\n\n  XUnitReporter.prototype.done = function(failures, fn) {\n    return fn(failures);\n  };\n\n\n  /**\n   * Write out the given line.\n  #\n   * @param {string} line\n   */\n\n  XUnitReporter.prototype.write = function(line) {\n    return console.log(this.xUnitPrefix + line);\n  };\n\n\n  /**\n   * Output tag for the given `test.`\n  #\n   * @param {Test} test\n   */\n\n  XUnitReporter.prototype.printTestCase = function(test, where) {\n    var attrs, err, stack;\n    attrs = {\n      classname: where + \" \" + (test.parent.fullTitle()),\n      name: test.title,\n      time: test.duration / 1000 || 0\n    };\n    if (test.state === 'failed') {\n      err = test.err;\n      stack = this.escapeStack(err.stack);\n      this.write(this.createTag('testcase', attrs, false, this.createTag('failure', {}, false, this.cdata(this.escape(err.message) + '\\n' + stack))));\n    } else if (test.pending) {\n      this.write(this.createTag('testcase', attrs, false, this.createTag('skipped', {}, true)));\n    } else {\n      this.write(this.createTag('testcase', attrs, true));\n    }\n  };\n\n\n  /**\n   * Escape special characters in the given string of html.\n  #\n   * @api private\n   * @param  {string} html\n   * @return {string}\n   */\n\n  XUnitReporter.prototype.escape = function(html) {\n    return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  };\n\n\n  /**\n   * For each line add the @xUnitPrefix and escape special characters in the given string of html.\n  #\n   * @api private\n   * @param  {string} stack\n   * @return {string}\n   */\n\n  XUnitReporter.prototype.escapeStack = function(stack) {\n    if (stack == null) {\n      stack = \"\";\n    }\n    return stack.split(\"\\n\").map((function(_this) {\n      return function(s) {\n        return _this.xUnitPrefix + _this.escape(s);\n      };\n    })(this)).join(\"\\n\");\n  };\n\n  return XUnitReporter;\n\n})(ConsoleReporter);\n\nmodule.exports = XUnitReporter;\n","sourceMap":{"version":3,"file":"/meteor/src/reporters/XunitReporter.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/reporters/XunitReporter.coffee"],"names":[],"mappings":"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","sourcesContent":["MochaRunner     = require(\"../lib/MochaRunner\")\nConsoleReporter     = require(\"./ConsoleReporter\")\n\nclass XUnitReporter extends ConsoleReporter\n\n  @VERSION: \"0.1.0\"\n  xUnitPrefix: \"##_meteor_magic##xunit: \"\n\n  constructor:(@clientRunner, @serverRunner, @options)->\n\n    @clientTests = []\n    @serverTests = []\n\n    # ConsoleReporter exposes global variables that indicates when the tests has finished,\n    # so we register the event to print the test suite before ConsoleReporter register its event\n    MochaRunner.on \"end all\", => @printTestSuite()\n\n    super(@clientRunner, @serverRunner, @options)\n\n\n  ###\n    Overwrite from ConsoleReporter\n  ###\n  registerRunnerEvents:(where)->\n\n    super(where)\n\n    @[where + \"Runner\"].on 'pending', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'pass', (test) =>\n      @[where+\"Tests\"].push test\n\n    @[where + \"Runner\"].on 'fail', (test) =>\n      @[where+\"Tests\"].push test\n\n\n  printTestSuite: ->\n\n    testSuite = {\n      name: 'Mocha Tests'\n      tests: @stats.total\n      failures: @stats.failures\n      errors: @stats.failures\n      timestamp: (new Date).toUTCString()\n      time: @stats.duration/ 1000 or 0\n      skipped: @stats.pending\n    }\n\n    @write @createTag('testsuite', testSuite, false)\n\n    @clientTests.forEach (test) =>\n      @printTestCase test, \"Client\"\n\n    @serverTests.forEach (test) =>\n      @printTestCase test, \"Server\"\n\n    @write '</testsuite>'\n\n\n  ###*\n  # HTML tag helper.\n  #\n  # @param name\n  # @param attrs\n  # @param close\n  # @param content\n  # @return {string}\n  ###\n  createTag: (name, attrs = {}, close, content) ->\n    end = if close then '/>' else '>'\n    pairs = []\n    tag = undefined\n\n    for key of attrs\n      if Object.prototype.hasOwnProperty.call(attrs, key)\n        pairs.push key + '=\"' + @escape(attrs[key]) + '\"'\n\n    tag = '<' + name + (if pairs.length then ' ' + pairs.join(' ') else '') + end\n\n    if content\n      tag += content + '</' + name + end\n\n    return tag\n\n  ###*\n  # Return cdata escaped CDATA `str`.\n  ###\n\n  cdata: (str) ->\n    '<![CDATA[' + @escape(str) + ']]>'\n\n  ###*\n  # Override done to close the stream (if it's a file).\n  #\n  # @param failures\n  # @param {Function} fn\n  ###\n\n  done:(failures, fn) ->\n      fn failures\n\n  ###*\n  # Write out the given line.\n  #\n  # @param {string} line\n  ###\n\n  write:(line) ->\n    console.log @xUnitPrefix + line\n\n  ###*\n  # Output tag for the given `test.`\n  #\n  # @param {Test} test\n  ###\n\n  printTestCase:(test, where) ->\n    attrs =\n      classname: \"#{where} #{test.parent.fullTitle()}\"\n      name: test.title\n      time: test.duration / 1000 or 0\n\n    if test.state == 'failed'\n      err = test.err\n      stack = @escapeStack(err.stack)\n      @write @createTag('testcase', attrs, false, @createTag('failure', {}, false, @cdata(@escape(err.message) + '\\n' + stack)))\n    else if test.pending\n      @write @createTag('testcase', attrs, false, @createTag('skipped', {}, true))\n    else\n      @write @createTag('testcase', attrs, true)\n    return\n\n\n  ###*\n  # Escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} html\n  # @return {string}\n  ###\n\n  escape: (html) ->\n    String(html)\n      .replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace />/g, '&gt;'\n\n\n  ###*\n  # For each line add the @xUnitPrefix and escape special characters in the given string of html.\n  #\n  # @api private\n  # @param  {string} stack\n  # @return {string}\n  ###\n  escapeStack: (stack = \"\")->\n\n    return stack.split(\"\\n\")\n      .map( (s) => @xUnitPrefix + @escape(s))\n      .join(\"\\n\")\n\n\nmodule.exports = XUnitReporter"]}}