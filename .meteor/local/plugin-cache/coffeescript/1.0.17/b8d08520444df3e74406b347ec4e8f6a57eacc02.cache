{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, MochaRunner;\n\nMochaRunner = require(\"../lib/MochaRunner\");\n\nClientServerBaseReporter = (function() {\n  function ClientServerBaseReporter(clientRunner, serverRunner, options) {\n    this.clientRunner = clientRunner;\n    this.serverRunner = serverRunner;\n    this.options = options;\n    expect(this.clientRunner).to.be.an('object');\n    expect(this.serverRunner).to.be.an('object');\n    expect(this.options).to.be.an('object');\n    this.clientStats = {\n      total: this.clientRunner.total,\n      suites: 0,\n      tests: 0,\n      passes: 0,\n      pending: 0,\n      failures: 0\n    };\n    this.serverStats = {\n      total: this.serverRunner.total,\n      suites: 0,\n      tests: 0,\n      passes: 0,\n      pending: 0,\n      failures: 0\n    };\n    this.stats = {\n      total: this.serverRunner.total + this.clientRunner.total,\n      suites: 0,\n      tests: 0,\n      passes: 0,\n      pending: 0,\n      failures: 0\n    };\n    this.failures = [];\n    this.clientRunner.stats = this.clientStats;\n    this.serverRunner.stats = this.serverStats;\n    this.registerRunnerEvents(\"server\");\n    this.registerRunnerEvents(\"client\");\n    MochaRunner.on(\"end all\", (function(_this) {\n      return function() {\n        window.TEST_STATUS = {\n          FAILURES: _this.stats.failures,\n          DONE: true\n        };\n        window.DONE = true;\n        return window.FAILURES = _this.stats.failures;\n      };\n    })(this));\n  }\n\n  ClientServerBaseReporter.prototype.registerRunnerEvents = function(where) {\n    this[where + \"Runner\"].on('start', (function(_this) {\n      return function() {\n        var base, start;\n        start = new Date();\n        _this[where + \"Stats\"].start = start;\n        if ((base = _this.stats).start == null) {\n          base.start = start;\n        }\n\n        /*\n          The total and other stats of the server runner are sent with the 'start' event,\n          so we need to update the total of the stats.\n          Also when running in 'serial' mode (server test first and then client tests),\n          clientRunner.total is undefined because client starts running after server tests end.\n         */\n        _this.clientStats.total = _this.clientRunner.total;\n        _this.serverStats.total = _this.serverRunner.total;\n        return _this.stats.total = _this.clientStats.total + _this.serverStats.total;\n      };\n    })(this));\n    this[where + \"Runner\"].on('suite', (function(_this) {\n      return function(suite) {\n        if (!suite.root) {\n          _this.stats.suites++;\n          return _this[where + \"Stats\"].suites++;\n        }\n      };\n    })(this));\n    this[where + \"Runner\"].on('test end', (function(_this) {\n      return function(test) {\n        return _this.stats.tests++;\n      };\n    })(this));\n    this[where + \"Runner\"].on('pass', (function(_this) {\n      return function(test) {\n        var medium;\n        medium = test.slow() / 2;\n        if (test.duration > test.slow()) {\n          test.speed = 'slow';\n        } else if (test.duration > medium) {\n          test.speed = 'medium';\n        } else {\n          test.speed = 'fast';\n        }\n        _this[where + \"Stats\"].passes++;\n        return _this.stats.passes++;\n      };\n    })(this));\n    this[where + \"Runner\"].on('fail', (function(_this) {\n      return function(test, err) {\n        if (test.err == null) {\n          test.err = err;\n        }\n        _this.failures.push(test);\n        _this.stats.failures++;\n        return _this[where + \"Stats\"].failures++;\n      };\n    })(this));\n    this[where + \"Runner\"].on('end', (function(_this) {\n      return function() {\n        var end;\n        end = new Date();\n        _this.stats.end = end;\n        _this[where + \"Stats\"].end = end;\n        _this.stats.duration = _this.stats.end - _this.stats.start;\n        return _this[where + \"Stats\"].duration = _this[where + \"Stats\"].end - _this[where + \"Stats\"].start;\n      };\n    })(this));\n    return this[where + \"Runner\"].on('pending', (function(_this) {\n      return function() {\n        _this.stats.pending++;\n        return _this[where + \"Stats\"].pending++;\n      };\n    })(this));\n  };\n\n  return ClientServerBaseReporter;\n\n})();\n\nmodule.exports = ClientServerBaseReporter;\n","sourceMap":{"version":3,"file":"/meteor/src/reporters/ClientServerBaseReporter.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerBaseReporter.coffee"],"names":[],"mappings":"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","sourcesContent":["MochaRunner = require(\"../lib/MochaRunner\")\n#/**\n# * All other reporters generally\n# * inherit from this reporter, providing\n# * stats such as test duration, number\n# * of tests passed / failed etc.\n#*\n#* @param {Runner} clientRunner\n#* @param {Runner} serverRunner\n#* @api public\n#*/\n\nclass ClientServerBaseReporter\n\n\n  constructor: (@clientRunner, @serverRunner, @options)->\n    expect(@clientRunner).to.be.an 'object'\n    expect(@serverRunner).to.be.an 'object'\n    expect(@options).to.be.an 'object'\n\n    @clientStats = {total: @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @serverStats = {total: @serverRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @stats = {total: @serverRunner.total + @clientRunner.total, suites: 0, tests: 0, passes: 0, pending: 0, failures: 0}\n    @failures = []\n\n    @clientRunner.stats = @clientStats\n    @serverRunner.stats = @serverStats\n\n    @registerRunnerEvents(\"server\")\n    @registerRunnerEvents(\"client\")\n\n    # Exposes global variables to indicate when tests are done. For example spacejam use this global vars\n    MochaRunner.on \"end all\", =>\n      window.TEST_STATUS = {FAILURES: @stats.failures, DONE: true}\n      window.DONE = true\n      window.FAILURES = @stats.failures\n\n  registerRunnerEvents: (where)->\n\n    @[\"#{where}Runner\"].on 'start', =>\n      start = new Date()\n      @[where+\"Stats\"].start = start\n      # The start time will be the first of the runners that started running\n      @stats.start ?= start\n      ###\n        The total and other stats of the server runner are sent with the 'start' event,\n        so we need to update the total of the stats.\n        Also when running in 'serial' mode (server test first and then client tests),\n        clientRunner.total is undefined because client starts running after server tests end.\n      ###\n      @clientStats.total = @clientRunner.total\n      @serverStats.total = @serverRunner.total\n      @stats.total = @clientStats.total + @serverStats.total\n\n\n    @[\"#{where}Runner\"].on 'suite', (suite)=>\n      if not suite.root\n        @stats.suites++\n        @[where+\"Stats\"].suites++\n\n    @[\"#{where}Runner\"].on 'test end', (test)=>\n      @stats.tests++\n\n    @[\"#{where}Runner\"].on 'pass', (test)=>\n      medium = test.slow() / 2\n\n      if test.duration > test.slow()\n        test.speed = 'slow'\n      else if test.duration > medium\n        test.speed = 'medium'\n      else\n        test.speed = 'fast'\n\n      @[where+\"Stats\"].passes++\n      @stats.passes++\n\n    @[\"#{where}Runner\"].on 'fail', (test, err)=>\n      test.err ?= err\n      @failures.push(test)\n\n      @stats.failures++;\n      @[where+\"Stats\"].failures++;\n\n\n    @[\"#{where}Runner\"].on 'end', =>\n      end = new Date()\n\n      @stats.end = end\n      @[where+\"Stats\"].end = end\n\n      @stats.duration = @stats.end - @stats.start\n      @[where+\"Stats\"].duration = @[where+\"Stats\"].end - @[where+\"Stats\"].start\n\n    @[\"#{where}Runner\"].on 'pending', =>\n      @stats.pending++\n      @[where+\"Stats\"].pending++\n\n\nmodule.exports = ClientServerBaseReporter\n"]}}