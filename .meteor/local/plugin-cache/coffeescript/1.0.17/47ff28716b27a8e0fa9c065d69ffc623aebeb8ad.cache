{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar EventEmitter, MeteorPublishReporter, Mocha, MochaRunner, Mongo, ObjectLogger, Suite, Test, _, log, utils,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\n_ = require(\"underscore\")._;\n\nTest = require(\"mocha/lib/test\");\n\nSuite = require(\"mocha/lib/suite\");\n\nutils = require(\"mocha/lib/utils\");\n\nMongo = require(\"meteor/mongo\").Mongo;\n\nMocha = require(\"meteor/practicalmeteor:mocha-core\").Mocha;\n\nEventEmitter = require(\"events\").EventEmitter;\n\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;\n\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\");\n\nlog = new ObjectLogger('MochaRunner', 'info');\n\nMochaRunner = (function(superClass) {\n  extend(MochaRunner, superClass);\n\n  MochaRunner.instance = null;\n\n  MochaRunner.get = function() {\n    return MochaRunner.instance != null ? MochaRunner.instance : MochaRunner.instance = new MochaRunner();\n  };\n\n  MochaRunner.prototype.VERSION = \"2.4.5_6\";\n\n  MochaRunner.prototype.serverRunEvents = null;\n\n  MochaRunner.prototype.publishers = {};\n\n  function MochaRunner() {\n    this.onServerRunSubscriptionReady = bind(this.onServerRunSubscriptionReady, this);\n    this.runServerTests = bind(this.runServerTests, this);\n    try {\n      log.enter('constructor');\n      this.utils = utils;\n      this.serverRunEvents = new Mongo.Collection('mochaServerRunEvents');\n      if (Meteor.isServer) {\n        Meteor.methods({\n          \"mocha/runServerTests\": this.runServerTests.bind(this)\n        });\n        this.publish();\n      }\n    } finally {\n      log[\"return\"]();\n    }\n  }\n\n  MochaRunner.prototype.publish = function() {\n    var self;\n    try {\n      log.enter(\"publish\");\n      self = this;\n      return Meteor.publish('mochaServerRunEvents', function(runId) {\n        var base, ex;\n        try {\n          log.enter('publish.mochaServerRunEvents');\n          check(runId, String);\n          expect(this.ready).to.be.a('function');\n          if ((base = self.publishers)[runId] == null) {\n            base[runId] = this;\n          }\n          this.ready();\n          return void 0;\n        } catch (_error) {\n          ex = _error;\n          if (ex.stack != null) {\n            log.error(ex.stack);\n          }\n          throw new Meteor.Error('unknown-error', (ex.message != null ? ex.message : void 0), (ex.stack != null ? ex.stack : void 0));\n        } finally {\n          log[\"return\"]();\n        }\n      });\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype.runServerTests = function(runId, grep) {\n    var mochaRunner;\n    try {\n      log.enter(\"runServerTests\", runId);\n      check(runId, String);\n      check(grep, Match.Optional(Match.OneOf(null, String)));\n      expect(runId).to.be.a(\"string\");\n      expect(this.publishers[runId], \"publisher\").to.be.an(\"object\");\n      expect(Meteor.isServer).to.be[\"true\"];\n      mochaRunner = new Mocha();\n      this._addTestsToMochaRunner(mocha.suite, mochaRunner.suite);\n      mochaRunner.reporter(MeteorPublishReporter, {\n        grep: this.escapeGrep(grep),\n        publisher: this.publishers[runId]\n      });\n      log.info(\"Starting server side tests with run id \" + runId);\n      return mochaRunner.run(function(failures) {\n        return log.warn('failures:', failures);\n      });\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype._addTestsToMochaRunner = function(fromSuite, toSuite) {\n    var addHooks, i, j, len, len1, newSuite, ref, ref1, results, suite, test;\n    try {\n      log.enter(\"_addTestToMochaRunner\");\n      addHooks = function(hookName) {\n        var hook, i, len, ref;\n        ref = fromSuite[\"_\" + hookName];\n        for (i = 0, len = ref.length; i < len; i++) {\n          hook = ref[i];\n          toSuite[hookName](hook.title, hook.fn);\n        }\n        return log.debug(\"Hook \" + hookName + \" for '\" + (fromSuite.fullTitle()) + \"' added.\");\n      };\n      addHooks(\"beforeAll\");\n      addHooks(\"afterAll\");\n      addHooks(\"beforeEach\");\n      addHooks(\"afterEach\");\n      ref = fromSuite.tests;\n      for (i = 0, len = ref.length; i < len; i++) {\n        test = ref[i];\n        test = new Test(test.title, test.fn);\n        toSuite.addTest(test);\n        log.debug(\"Tests for '\" + (fromSuite.fullTitle()) + \"' added.\");\n      }\n      ref1 = fromSuite.suites;\n      results = [];\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        suite = ref1[j];\n        newSuite = Suite.create(toSuite, suite.title);\n        newSuite.timeout(suite.timeout());\n        log.debug(\"Suite \" + (newSuite.fullTitle()) + \"  added to '\" + (fromSuite.fullTitle()) + \"'.\");\n        results.push(this._addTestsToMochaRunner(suite, newSuite));\n      }\n      return results;\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype.runEverywhere = function() {\n    try {\n      log.enter('runEverywhere');\n      expect(Meteor.isClient).to.be[\"true\"];\n      this.runId = Random.id();\n      return this.serverRunSubscriptionHandle = Meteor.subscribe('mochaServerRunEvents', this.runId, {\n        onReady: _.bind(this.onServerRunSubscriptionReady, this),\n        onError: _.bind(this.onServerRunSubscriptionError, this)\n      });\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype.setReporter = function(reporter1) {\n    this.reporter = reporter1;\n  };\n\n  MochaRunner.prototype.escapeGrep = function(grep) {\n    var matchOperatorsRe;\n    if (grep == null) {\n      grep = '';\n    }\n    try {\n      log.enter(\"escapeGrep\", grep);\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n      grep.replace(matchOperatorsRe, '\\\\$&');\n      return new RegExp(grep);\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype.onServerRunSubscriptionReady = function() {\n    var ClientServerReporter, REPORTERS, query, ref, reporters;\n    try {\n      log.enter('onServerRunSubscriptionReady');\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\");\n      ref = require(\"../reporters\"), REPORTERS = ref.REPORTERS, reporters = ref.reporters;\n      query = utils.parseQuery(location.search || '');\n      Meteor.call(\"mocha/runServerTests\", this.runId, query.grep, function(err) {\n        log.debug(\"tests started\");\n        if (err) {\n          return log.error(err);\n        }\n      });\n      return Tracker.autorun((function(_this) {\n        return function() {\n          var event, reporter;\n          event = _this.serverRunEvents.findOne({\n            event: \"run mocha\"\n          });\n          if (((event != null ? event.data.reporter : void 0) != null) && _.contains(REPORTERS, event.data.reporter)) {\n            reporter = reporters[event.data.reporter];\n            _this.setReporter(reporter);\n          }\n          if ((event != null ? event.data.runOrder : void 0) === \"serial\") {\n            return reporter = new ClientServerReporter(null, {\n              runOrder: \"serial\"\n            });\n          } else if ((event != null ? event.data.runOrder : void 0) === \"parallel\") {\n            mocha.reporter(ClientServerReporter);\n            return mocha.run(function() {});\n          }\n        };\n      })(this));\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  MochaRunner.prototype.onServerRunSubscriptionError = function(meteorError) {\n    try {\n      log.enter('onServerRunSubscriptionError');\n      return log.error(meteorError);\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  return MochaRunner;\n\n})(EventEmitter);\n\nmodule.exports = MochaRunner.get();\n","sourceMap":{"version":3,"file":"/meteor/src/lib/MochaRunner.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/lib/MochaRunner.coffee"],"names":[],"mappings":"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","sourcesContent":["{_}                   = require(\"underscore\")\nTest                  = require(\"mocha/lib/test\")\nSuite                 = require(\"mocha/lib/suite\")\nutils                 = require(\"mocha/lib/utils\")\n{Mongo}               = require(\"meteor/mongo\")\n{Mocha}               = require(\"meteor/practicalmeteor:mocha-core\")\n{EventEmitter}        = require(\"events\")\n{ObjectLogger}        = require(\"meteor/practicalmeteor:loglevel\")\nMeteorPublishReporter = require(\"./../reporters/MeteorPublishReporter\")\nlog = new ObjectLogger('MochaRunner', 'info')\n\nclass MochaRunner extends EventEmitter\n\n  @instance: null\n\n  @get: ->\n    MochaRunner.instance ?= new MochaRunner()\n\n  VERSION: \"2.4.5_6\"\n  serverRunEvents: null\n  publishers: {}\n\n\n  constructor: ->\n    try\n      log.enter 'constructor'\n      @utils = utils;\n      @serverRunEvents = new Mongo.Collection('mochaServerRunEvents')\n      if Meteor.isServer\n        Meteor.methods({\n          \"mocha/runServerTests\": @runServerTests.bind(@)\n        })\n        @publish()\n\n    finally\n      log.return()\n\n\n  publish: ->\n    try\n      log.enter(\"publish\")\n      self = @\n      Meteor.publish 'mochaServerRunEvents', (runId)->\n        try\n          log.enter 'publish.mochaServerRunEvents'\n          check(runId, String);\n          expect(@ready).to.be.a('function')\n          self.publishers[runId] ?= @\n          @ready()\n          # You can't return any other value but a Cursor, otherwise it will throw an exception\n          return undefined\n        catch ex\n          log.error ex.stack if ex.stack?\n          throw new Meteor.Error('unknown-error', (if ex.message? then ex.message else undefined), (if ex.stack? then ex.stack else undefined))\n        finally\n          log.return()\n    finally\n      log.return()\n\n\n  runServerTests: (runId, grep)=>\n    try\n      log.enter(\"runServerTests\", runId)\n      check(runId, String);\n      check(grep, Match.Optional(Match.OneOf(null, String)));\n      expect(runId).to.be.a(\"string\")\n      expect(@publishers[runId], \"publisher\").to.be.an(\"object\")\n      expect(Meteor.isServer).to.be.true\n      mochaRunner = new Mocha()\n      @_addTestsToMochaRunner(mocha.suite, mochaRunner.suite)\n\n      mochaRunner.reporter(MeteorPublishReporter, {\n        grep: @escapeGrep(grep)\n        publisher: @publishers[runId]\n      })\n\n      log.info \"Starting server side tests with run id #{runId}\"\n      mochaRunner.run (failures)->\n        log.warn 'failures:', failures\n\n    finally\n      log.return()\n\n\n  # Recursive function that starts with global suites and adds all sub suites within each global suite\n  _addTestsToMochaRunner: (fromSuite, toSuite)->\n    try\n      log.enter(\"_addTestToMochaRunner\")\n\n      addHooks = (hookName)->\n        for hook in fromSuite[\"_#{hookName}\"]\n          toSuite[hookName](hook.title, hook.fn)\n        log.debug(\"Hook #{hookName} for '#{fromSuite.fullTitle()}' added.\")\n\n      addHooks(\"beforeAll\")\n      addHooks(\"afterAll\")\n      addHooks(\"beforeEach\")\n      addHooks(\"afterEach\")\n\n      for test in fromSuite.tests\n        test = new Test(test.title, test.fn)\n        toSuite.addTest(test)\n        log.debug(\"Tests for '#{fromSuite.fullTitle()}' added.\")\n\n      for suite in fromSuite.suites\n        newSuite = Suite.create(toSuite, suite.title)\n        newSuite.timeout(suite.timeout())\n        log.debug(\"Suite #{newSuite.fullTitle()}  added to '#{fromSuite.fullTitle()}'.\")\n        @_addTestsToMochaRunner(suite, newSuite)\n\n    finally\n      log.return()\n\n\n  runEverywhere: ->\n    try\n      log.enter 'runEverywhere'\n      expect(Meteor.isClient).to.be.true\n\n      @runId = Random.id()\n      @serverRunSubscriptionHandle = Meteor.subscribe 'mochaServerRunEvents', @runId, {\n        onReady: _.bind(@onServerRunSubscriptionReady, @)\n        onError: _.bind(@onServerRunSubscriptionError, @)\n      }\n\n    finally\n      log.return()\n\n\n  setReporter: (@reporter)->\n\n  escapeGrep: (grep = '')->\n    try\n      log.enter(\"escapeGrep\", grep)\n      matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n      grep.replace(matchOperatorsRe,  '\\\\$&')\n      return new RegExp(grep)\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionReady: =>\n    try\n      log.enter 'onServerRunSubscriptionReady'\n      ClientServerReporter = require(\"./../reporters/ClientServerReporter\")\n      { REPORTERS, reporters} = require(\"../reporters\")\n      query = utils.parseQuery(location.search || '');\n\n      Meteor.call \"mocha/runServerTests\", @runId,  query.grep, (err)->\n        log.debug \"tests started\"\n        log.error(err) if err\n\n      Tracker.autorun =>\n        event = @serverRunEvents.findOne({event: \"run mocha\"})\n        if event?.data.reporter? and _.contains(REPORTERS, event.data.reporter)\n          reporter = reporters[event.data.reporter]\n          @setReporter reporter\n\n        if event?.data.runOrder is \"serial\"\n          reporter = new ClientServerReporter(null, {runOrder: \"serial\"})\n        else if event?.data.runOrder is \"parallel\"\n          mocha.reporter(ClientServerReporter)\n          mocha.run(->)\n\n\n\n    finally\n      log.return()\n\n\n  onServerRunSubscriptionError: (meteorError)->\n    try\n      log.enter 'onServerRunSubscriptionError'\n      log.error meteorError\n    finally\n      log.return()\n\n\nmodule.exports = MochaRunner.get()\n"]}}