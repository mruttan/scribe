{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerBaseReporter, HtmlReporter, MochaHtmlReporter, MochaRunner, ObjectLogger, log,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;\n\nMochaHtmlReporter = require(\"./html\");\n\nClientServerBaseReporter = require(\"./ClientServerBaseReporter\");\n\nMochaRunner = require(\"../lib/MochaRunner\");\n\nlog = new ObjectLogger('HtmlReporter', 'info');\n\nHtmlReporter = (function(superClass) {\n  extend(HtmlReporter, superClass);\n\n  function HtmlReporter(clientRunner, serverRunner, options) {\n    this.clientRunner = clientRunner;\n    this.serverRunner = serverRunner;\n    this.options = options != null ? options : {};\n    this.addReporterHtml = bind(this.addReporterHtml, this);\n    try {\n      log.enter('constructor');\n      this.addReporterHtml();\n      this.reporter = new MochaHtmlReporter(this.clientRunner);\n      this.serverReporter = new MochaHtmlReporter(this.serverRunner, {\n        elementIdPrefix: 'server-'\n      });\n      HtmlReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);\n    } finally {\n      log[\"return\"]();\n    }\n  }\n\n\n  /*\n    Adds the html required by the mocha HTML reporter to the body of the html\n    document. We modified the mocha HTML reporter to be able to display 2 reporters\n    at the same time, one for client tests and one for server tests.\n    TODO: Create a single meteor reactive reporter.\n   */\n\n  HtmlReporter.prototype.addReporterHtml = function() {\n    var div;\n    try {\n      log.enter(\"addReporterHtml\");\n      div = document.createElement('div');\n      div.className = 'mocha-wrapper';\n      div.innerHTML = '<div class=\"content\"> <div class=\"test-wrapper\"> <h1 class=\"title\">Client tests</h1> <div id=\"mocha\" class=\"mocha\"></div> </div> <div class=\"divider\"></div> <div class=\"test-wrapper\"> <h1 class=\"title\">Server tests</h1> <div id=\"server-mocha\" class=\"mocha\"></div> </div> </div>';\n      return document.body.appendChild(div);\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  return HtmlReporter;\n\n})(ClientServerBaseReporter);\n\nmodule.exports = HtmlReporter;\n","sourceMap":{"version":3,"file":"/meteor/src/reporters/HtmlReporter.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/reporters/HtmlReporter.coffee"],"names":[],"mappings":";AAAA,IAAA,yFAAA;EAAA;;6BAAA;;AAAA,eAA4B,OAAA,CAAQ,iCAAR,EAA3B,YAAD,CAAA;;AAAA,iBACA,GAA4B,OAAA,CAAQ,QAAR,CAD5B,CAAA;;AAAA,wBAEA,GAA4B,OAAA,CAAQ,4BAAR,CAF5B,CAAA;;AAAA,WAGA,GAAc,OAAA,CAAQ,oBAAR,CAHd,CAAA;;AAAA,GAKA,GAAU,IAAA,YAAA,CAAa,cAAb,EAA6B,MAA7B,CALV,CAAA;;AAAA;AASE,kCAAA,CAAA;;AAAa,EAAA,sBAAC,YAAD,EAAgB,YAAhB,EAA+B,OAA/B,GAAA;AACX,IADY,IAAC,CAAA,eAAD,YACZ,CAAA;AAAA,IAD2B,IAAC,CAAA,eAAD,YAC3B,CAAA;AAAA,IAD0C,IAAC,CAAA,4BAAD,UAAW,EACrD,CAAA;AAAA,2DAAA,CAAA;AAAA;AACE,MAAA,GAAG,CAAC,KAAJ,CAAU,aAAV,CAAA,CAAA;AAAA,MACA,IAAC,CAAA,eAAD,CAAA,CADA,CAAA;AAAA,MAGA,IAAC,CAAA,QAAD,GAAgB,IAAA,iBAAA,CAAkB,IAAC,CAAA,YAAnB,CAHhB,CAAA;AAAA,MAIA,IAAC,CAAA,cAAD,GAAsB,IAAA,iBAAA,CAAkB,IAAC,CAAA,YAAnB,EAAiC;AAAA,QACrD,eAAA,EAAiB,SADoC;OAAjC,CAJtB,CAAA;AAAA,MAOA,8CAAM,IAAC,CAAA,YAAP,EAAqB,IAAC,CAAA,YAAtB,EAAoC,IAAC,CAAA,OAArC,CAPA,CADF;KAAA;AAUE,MAAA,GAAG,CAAC,QAAD,CAAH,CAAA,CAAA,CAVF;KADW;EAAA,CAAb;;AAaA;AAAA;;;;;KAbA;;AAAA,yBAmBA,eAAA,GAAiB,SAAA,GAAA;AACf,QAAA,GAAA;AAAA;AACE,MAAA,GAAG,CAAC,KAAJ,CAAU,iBAAV,CAAA,CAAA;AAAA,MACA,GAAA,GAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADN,CAAA;AAAA,MAEA,GAAG,CAAC,SAAJ,GAAgB,eAFhB,CAAA;AAAA,MAIA,GAAG,CAAC,SAAJ,GAAgB,uRAJhB,CAAA;aAoBA,QAAQ,CAAC,IAAI,CAAC,WAAd,CAA0B,GAA1B,EArBF;KAAA;AAuBE,MAAA,GAAG,CAAC,QAAD,CAAH,CAAA,CAAA,CAvBF;KADe;EAAA,CAnBjB,CAAA;;sBAAA;;GAFyB,yBAP3B,CAAA;;AAAA,MAwDM,CAAC,OAAP,GAAiB,YAxDjB,CAAA","sourcesContent":["{ObjectLogger}            = require(\"meteor/practicalmeteor:loglevel\")\nMochaHtmlReporter         = require(\"./html\")\nClientServerBaseReporter  = require(\"./ClientServerBaseReporter\")\nMochaRunner = require(\"../lib/MochaRunner\")\n\nlog = new ObjectLogger('HtmlReporter', 'info')\n\nclass HtmlReporter extends ClientServerBaseReporter\n\n  constructor: (@clientRunner, @serverRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @addReporterHtml()\n\n      @reporter = new MochaHtmlReporter(@clientRunner)\n      @serverReporter = new MochaHtmlReporter(@serverRunner, {\n        elementIdPrefix: 'server-'\n      })\n      super(@clientRunner, @serverRunner, @options)\n    finally\n      log.return()\n\n  ###\n    Adds the html required by the mocha HTML reporter to the body of the html\n    document. We modified the mocha HTML reporter to be able to display 2 reporters\n    at the same time, one for client tests and one for server tests.\n    TODO: Create a single meteor reactive reporter.\n  ###\n  addReporterHtml: ()=>\n    try\n      log.enter(\"addReporterHtml\")\n      div = document.createElement('div')\n      div.className = 'mocha-wrapper'\n\n      div.innerHTML = '<div class=\"content\">\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Client tests</h1>\n\n          <div id=\"mocha\" class=\"mocha\"></div>\n        </div>\n\n        <div class=\"divider\"></div>\n\n        <div class=\"test-wrapper\">\n          <h1 class=\"title\">Server tests</h1>\n\n          <div id=\"server-mocha\" class=\"mocha\"></div>\n        </div>\n      </div>'\n\n      document.body.appendChild(div)\n    finally\n      log.return()\n\n\n\nmodule.exports = HtmlReporter\n"]}}