{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ClientServerReporter, EventEmitter, MirrorReporter, MochaRunner, ObjectLogger, _, log,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n_ = require(\"underscore\")._;\n\nMochaRunner = require(\"./../lib/MochaRunner\");\n\nMirrorReporter = require('./MirrorReporter');\n\nObjectLogger = require(\"meteor/practicalmeteor:loglevel\").ObjectLogger;\n\nEventEmitter = require(\"events\").EventEmitter;\n\nlog = new ObjectLogger('ClientServerReporter', 'info');\n\nClientServerReporter = (function() {\n  function ClientServerReporter(clientRunner1, options) {\n    this.clientRunner = clientRunner1;\n    this.options = options != null ? options : {};\n    this.runTestsSerially = bind(this.runTestsSerially, this);\n    try {\n      log.enter('constructor');\n      this.serverRunnerProxy = new EventEmitter();\n      if (this.options.runOrder === \"serial\") {\n        this.clientRunner = new EventEmitter();\n        this.runTestsSerially(this.clientRunner, this.serverRunnerProxy);\n      }\n      if (!MochaRunner.reporter) {\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\");\n        return;\n      }\n      this.reporter = new MochaRunner.reporter(this.clientRunner, this.serverRunnerProxy, this.options);\n      this.clientRunner.on(\"start\", function() {\n        return window.mochaIsRunning = true;\n      });\n      this.clientRunner.on(\"end\", (function(_this) {\n        return function() {\n          window.mochaIsRunning = false;\n          window.mochaIsDone = true;\n          MochaRunner.emit(\"end client\");\n          _this.clientTestsEnded = true;\n          if (_this.serverTestsEnded) {\n            return MochaRunner.emit(\"end all\");\n          }\n        };\n      })(this));\n      this.serverRunnerProxy.on('end', (function(_this) {\n        return function() {\n          _this.serverTestsEnded = true;\n          MochaRunner.emit(\"end server\");\n          if (_this.clientTestsEnded) {\n            return MochaRunner.emit(\"end all\");\n          }\n        };\n      })(this));\n      MochaRunner.serverRunEvents.find().observe({\n        added: _.bind(this.onServerRunnerEvent, this)\n      });\n    } finally {\n      log[\"return\"]();\n    }\n  }\n\n  ClientServerReporter.prototype.runTestsSerially = function(clientRunner, serverRunnerProxy) {\n    try {\n      log.enter(\"runTestsSerially\");\n      return serverRunnerProxy.on(\"end\", (function(_this) {\n        return function() {\n          mocha.reporter(MirrorReporter, {\n            clientRunner: clientRunner\n          });\n          return mocha.run(function() {});\n        };\n      })(this));\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  ClientServerReporter.prototype.onServerRunnerEvent = function(doc) {\n    var ex, ref;\n    try {\n      log.enter('onServerRunnerEvent');\n      expect(doc).to.be.an('object');\n      expect(doc.event).to.be.a('string');\n      if (doc.event === \"run mocha\") {\n        return;\n      }\n      expect(doc.data).to.be.an('object');\n      doc.data.fullTitle = function() {\n        return doc.data._fullTitle;\n      };\n      doc.data.slow = function() {\n        return doc.data._slow;\n      };\n      if ((ref = doc.data.err) != null) {\n        ref.toString = function() {\n          return \"Error: \" + this.message;\n        };\n      }\n      if (doc.data.parent) {\n        doc.data.parent.fullTitle = function() {\n          return doc.data.parent._fullTitle;\n        };\n        doc.data.parent.slow = function() {\n          return doc.data.parent._slow;\n        };\n      }\n      if (doc.event === 'start') {\n        this.serverRunnerProxy.stats = doc.data;\n        this.serverRunnerProxy.total = doc.data.total;\n      }\n      return this.serverRunnerProxy.emit(doc.event, doc.data, doc.data.err);\n    } catch (_error) {\n      ex = _error;\n      return log.error(ex);\n    } finally {\n      log[\"return\"]();\n    }\n  };\n\n  return ClientServerReporter;\n\n})();\n\nmodule.exports = ClientServerReporter;\n","sourceMap":{"version":3,"file":"/meteor/src/reporters/ClientServerReporter.coffee.js","sourceRoot":"","sources":["/packages/practicalmeteor_mocha/meteor/src/reporters/ClientServerReporter.coffee"],"names":[],"mappings":"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","sourcesContent":["{_}             = require(\"underscore\")\nMochaRunner     = require(\"./../lib/MochaRunner\")\nMirrorReporter  = require('./MirrorReporter')\n{ObjectLogger}  = require(\"meteor/practicalmeteor:loglevel\")\n{EventEmitter}  = require(\"events\")\n\nlog = new ObjectLogger('ClientServerReporter', 'info')\n\nclass ClientServerReporter\n\n\n  constructor: (@clientRunner, @options = {})->\n    try\n      log.enter('constructor')\n      @serverRunnerProxy = new EventEmitter()\n\n      if @options.runOrder is \"serial\"\n        @clientRunner = new EventEmitter()\n        @runTestsSerially(@clientRunner, @serverRunnerProxy)\n\n      if not MochaRunner.reporter\n        log.info(\"Missing reporter to run tests. Use MochaRunner.setReporter(reporter) to set one.\")\n        return\n\n      @reporter = new MochaRunner.reporter(@clientRunner, @serverRunnerProxy, @options)\n\n      # Exposes global states of tests\n      @clientRunner.on \"start\", ->\n        window.mochaIsRunning = true\n\n      @clientRunner.on \"end\", =>\n        window.mochaIsRunning = false\n        window.mochaIsDone = true\n\n        MochaRunner.emit(\"end client\")\n        @clientTestsEnded = true\n        if @serverTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      @serverRunnerProxy.on 'end', =>\n        @serverTestsEnded = true\n        MochaRunner.emit(\"end server\")\n        if @clientTestsEnded\n          MochaRunner.emit(\"end all\")\n\n      MochaRunner.serverRunEvents.find().observe({\n        added: _.bind(@onServerRunnerEvent, @)\n      })\n\n    finally\n      log.return()\n\n\n  runTestsSerially: (clientRunner, serverRunnerProxy)=>\n    try\n      log.enter(\"runTestsSerially\",)\n      serverRunnerProxy.on \"end\", =>\n        mocha.reporter(MirrorReporter, {\n          clientRunner: clientRunner\n        })\n        mocha.run(->)\n\n    finally\n      log.return()\n\n\n  onServerRunnerEvent: (doc)->\n    try\n      log.enter('onServerRunnerEvent')\n      expect(doc).to.be.an('object')\n      expect(doc.event).to.be.a('string')\n      if doc.event is \"run mocha\"\n        return\n      expect(doc.data).to.be.an('object')\n\n      # Required by the standard mocha reporters\n      doc.data.fullTitle = -> return doc.data._fullTitle\n      doc.data.slow = -> return doc.data._slow\n      doc.data.err?.toString = -> \"Error: \" + @message\n\n      if doc.data.parent\n        doc.data.parent.fullTitle = -> return doc.data.parent._fullTitle\n        doc.data.parent.slow = -> return doc.data.parent._slow\n\n\n      if doc.event is 'start'\n        @serverRunnerProxy.stats = doc.data\n        @serverRunnerProxy.total = doc.data.total\n\n      @serverRunnerProxy.emit(doc.event, doc.data, doc.data.err)\n\n    catch ex\n      log.error ex\n    finally\n      log.return()\n\n\nmodule.exports = ClientServerReporter\n"]}}