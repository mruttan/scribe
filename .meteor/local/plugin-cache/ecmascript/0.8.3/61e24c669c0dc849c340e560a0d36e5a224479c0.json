{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/integration/uncaught.js","filenameRelative":"packages/practicalmeteor:mocha/test/integration/uncaught.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/integration/uncaught.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/integration/uncaught.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"uncaught"},"ignored":false,"code":"var assert = require('assert');\n\nvar run = require('./helpers').runMochaJSON;\n\nvar args = [];\ndescribe('uncaught exceptions', function () {\n  this.timeout(1000);\n  it('handles uncaught exceptions from hooks', function (done) {\n    run('uncaught.hook.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n      assert.equal(res.failures[0].fullTitle, 'uncaught \"before each\" hook');\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n  it('handles uncaught exceptions from async specs', function (done) {\n    run('uncaught.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 2);\n      assert.equal(res.failures[0].title, 'fails exactly once when a global error is thrown first');\n      assert.equal(res.failures[1].title, 'fails exactly once when a global error is thrown second');\n      assert.equal(res.code, 2);\n      done();\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/integration/uncaught.js"],"names":["assert","require","run","runMochaJSON","args","describe","timeout","it","done","err","res","equal","stats","pending","passes","failures","fullTitle","code","title"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AACA,IAAIC,MAASD,QAAQ,WAAR,EAAqBE,YAAlC;;AACA,IAAIC,OAAS,EAAb;AAEAC,SAAS,qBAAT,EAAgC,YAAW;AACzC,OAAKC,OAAL,CAAa,IAAb;AAEAC,KAAG,wCAAH,EAA6C,UAASC,IAAT,EAAe;AAC1DN,QAAI,kBAAJ,EAAwBE,IAAxB,EAA8B,UAASK,GAAT,EAAcC,GAAd,EAAmB;AAC/CV,aAAO,CAACS,GAAR;AACAT,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUC,OAAvB,EAAgC,CAAhC;AACAb,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUE,MAAvB,EAA+B,CAA/B;AACAd,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUG,QAAvB,EAAiC,CAAjC;AAEAf,aAAOW,KAAP,CAAaD,IAAIK,QAAJ,CAAa,CAAb,EAAgBC,SAA7B,EACE,6BADF;AAEAhB,aAAOW,KAAP,CAAaD,IAAIO,IAAjB,EAAuB,CAAvB;AACAT;AACD,KAVD;AAWD,GAZD;AAcAD,KAAG,8CAAH,EAAmD,UAASC,IAAT,EAAe;AAChEN,QAAI,aAAJ,EAAmBE,IAAnB,EAAyB,UAASK,GAAT,EAAcC,GAAd,EAAmB;AAC1CV,aAAO,CAACS,GAAR;AACAT,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUC,OAAvB,EAAgC,CAAhC;AACAb,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUE,MAAvB,EAA+B,CAA/B;AACAd,aAAOW,KAAP,CAAaD,IAAIE,KAAJ,CAAUG,QAAvB,EAAiC,CAAjC;AAEAf,aAAOW,KAAP,CAAaD,IAAIK,QAAJ,CAAa,CAAb,EAAgBG,KAA7B,EACE,wDADF;AAEAlB,aAAOW,KAAP,CAAaD,IAAIK,QAAJ,CAAa,CAAb,EAAgBG,KAA7B,EACE,yDADF;AAEAlB,aAAOW,KAAP,CAAaD,IAAIO,IAAjB,EAAuB,CAAvB;AACAT;AACD,KAZD;AAaD,GAdD;AAeD,CAhCD","file":"packages/practicalmeteor:mocha/test/integration/uncaught.js.map","sourcesContent":["var assert = require('assert');\nvar run    = require('./helpers').runMochaJSON;\nvar args   = [];\n\ndescribe('uncaught exceptions', function() {\n  this.timeout(1000);\n\n  it('handles uncaught exceptions from hooks', function(done) {\n    run('uncaught.hook.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n\n      assert.equal(res.failures[0].fullTitle,\n        'uncaught \"before each\" hook');\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('handles uncaught exceptions from async specs', function(done) {\n    run('uncaught.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 2);\n\n      assert.equal(res.failures[0].title,\n        'fails exactly once when a global error is thrown first');\n      assert.equal(res.failures[1].title,\n        'fails exactly once when a global error is thrown second');\n      assert.equal(res.code, 2);\n      done();\n    });\n  });\n});\n"]},"hash":"61e24c669c0dc849c340e560a0d36e5a224479c0"}
