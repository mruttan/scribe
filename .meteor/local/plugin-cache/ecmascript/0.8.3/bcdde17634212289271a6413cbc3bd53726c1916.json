{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/lib/interfaces/tdd.js","filenameRelative":"packages/practicalmeteor:mocha/lib/interfaces/tdd.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/lib/interfaces/tdd.js.map","sourceFileName":"packages/practicalmeteor:mocha/lib/interfaces/tdd.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tdd"},"ignored":false,"code":"/**\n * Module dependencies.\n */var Suite = require('../suite');\n\nvar Test = require('../test');\n\nvar escapeRe = require('escape-string-regexp'); /**\n                                                 * TDD-style interface:\n                                                 *\n                                                 *      suite('Array', function() {\n                                                 *        suite('#indexOf()', function() {\n                                                 *          suiteSetup(function() {\n                                                 *\n                                                 *          });\n                                                 *\n                                                 *          test('should return -1 when not present', function() {\n                                                 *\n                                                 *          });\n                                                 *\n                                                 *          test('should return the index when present', function() {\n                                                 *\n                                                 *          });\n                                                 *\n                                                 *          suiteTeardown(function() {\n                                                 *\n                                                 *          });\n                                                 *        });\n                                                 *      });\n                                                 *\n                                                 * @param {Suite} suite Root suite.\n                                                 */\n\nmodule.exports = function (suite) {\n  var suites = [suite];\n  suite.on('pre-require', function (context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite); /**\n                                                                      * Describe a \"suite\" with the given `title` and callback `fn` containing\n                                                                      * nested suites and/or tests.\n                                                                      */\n\n    context.suite = function (title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    }; /**\n        * Pending suite.\n        */\n\n    context.suite.skip = function (title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    }; /**\n        * Exclusive test-case.\n        */\n\n    context.suite.only = function (title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    }; /**\n        * Describe a specification or test-case with the given `title` and\n        * callback `fn` acting as a thunk.\n        */\n\n    context.test = function (title, fn) {\n      var suite = suites[0];\n\n      if (suite.pending) {\n        fn = null;\n      }\n\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    }; /**\n        * Exclusive test-case.\n        */\n\n    context.test.only = function (title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};","map":{"version":3,"sources":["packages/practicalmeteor:mocha/lib/interfaces/tdd.js"],"names":["Suite","require","Test","escapeRe","module","exports","suite","suites","on","context","file","mocha","common","setup","beforeEach","teardown","afterEach","suiteSetup","before","suiteTeardown","after","run","options","delay","runWithSuite","title","fn","create","unshift","call","shift","skip","pending","only","grep","fullTitle","test","addTest","reString","RegExp","retries"],"mappings":"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","file":"packages/practicalmeteor:mocha/lib/interfaces/tdd.js.map","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function(title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function(title, fn) {\n      var suite = suites[0];\n      if (suite.pending) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n"]},"hash":"bcdde17634212289271a6413cbc3bd53726c1916"}
