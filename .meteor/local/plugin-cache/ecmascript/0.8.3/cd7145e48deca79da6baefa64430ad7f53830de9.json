{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/lib/browser/events.js","filenameRelative":"packages/practicalmeteor:mocha/lib/browser/events.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/lib/browser/events.js.map","sourceFileName":"packages/practicalmeteor:mocha/lib/browser/events.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"events"},"ignored":false,"code":"/**\n * Module exports.\n */exports.EventEmitter = EventEmitter; /**\n                                         * Object#hasOwnProperty reference.\n                                         */\nvar objToString = Object.prototype.toString; /**\n                                              * Check if a value is an array.\n                                              *\n                                              * @api private\n                                              * @param {*} val The value to test.\n                                              * @return {boolean} true if the value is a boolean, otherwise false.\n                                              */\n\nfunction isArray(val) {\n  return objToString.call(val) === '[object Array]';\n} /**\n   * Event emitter constructor.\n   *\n   * @api public\n   */\n\nfunction EventEmitter() {} /**\n                            * Add a listener.\n                            *\n                            * @api public\n                            * @param {string} name Event name.\n                            * @param {Function} fn Event handler.\n                            * @return {EventEmitter} Emitter instance.\n                            */\n\nEventEmitter.prototype.on = function (name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on; /**\n                                                                 * Adds a volatile listener.\n                                                                 *\n                                                                 * @api public\n                                                                 * @param {string} name Event name.\n                                                                 * @param {Function} fn Event handler.\n                                                                 * @return {EventEmitter} Emitter instance.\n                                                                 */\n\nEventEmitter.prototype.once = function (name, fn) {\n  var self = this;\n\n  function on() {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  }\n\n  on.listener = fn;\n  this.on(name, on);\n  return this;\n}; /**\n    * Remove a listener.\n    *\n    * @api public\n    * @param {string} name Event name.\n    * @param {Function} fn Event handler.\n    * @return {EventEmitter} Emitter instance.\n    */\n\nEventEmitter.prototype.removeListener = function (name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || list[i].listener && list[i].listener === fn) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || list.listener && list.listener === fn) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n}; /**\n    * Remove all listeners for an event.\n    *\n    * @api public\n    * @param {string} name Event name.\n    * @return {EventEmitter} Emitter instance.\n    */\n\nEventEmitter.prototype.removeAllListeners = function (name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n}; /**\n    * Get all listeners for a given event.\n    *\n    * @api public\n    * @param {string} name Event name.\n    * @return {EventEmitter} Emitter instance.\n    */\n\nEventEmitter.prototype.listeners = function (name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n}; /**\n    * Emit an event.\n    *\n    * @api public\n    * @param {string} name Event name.\n    * @return {boolean} true if at least one handler was invoked, else false.\n    */\n\nEventEmitter.prototype.emit = function (name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (typeof handler === 'function') {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["packages/practicalmeteor:mocha/lib/browser/events.js"],"names":["exports","EventEmitter","objToString","Object","prototype","toString","isArray","val","call","on","name","fn","$events","push","addListener","once","self","removeListener","apply","arguments","listener","list","pos","i","l","length","splice","removeAllListeners","undefined","listeners","emit","handler","args","Array","slice"],"mappings":"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","file":"packages/practicalmeteor:mocha/lib/browser/events.js.map","sourcesContent":["/**\n * Module exports.\n */\n\nexports.EventEmitter = EventEmitter;\n\n/**\n * Object#hasOwnProperty reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check if a value is an array.\n *\n * @api private\n * @param {*} val The value to test.\n * @return {boolean} true if the value is a boolean, otherwise false.\n */\nfunction isArray(val) {\n  return objToString.call(val) === '[object Array]';\n}\n\n/**\n * Event emitter constructor.\n *\n * @api public\n */\nfunction EventEmitter() {}\n\n/**\n * Add a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.on = function(name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n/**\n * Adds a volatile listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.once = function(name, fn) {\n  var self = this;\n\n  function on() {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  }\n\n  on.listener = fn;\n  this.on(name, on);\n\n  return this;\n};\n\n/**\n * Remove a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeListener = function(name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || (list.listener && list.listener === fn)) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners for an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeAllListeners = function(name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n};\n\n/**\n * Get all listeners for a given event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.listeners = function(name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n};\n\n/**\n * Emit an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {boolean} true if at least one handler was invoked, else false.\n */\nEventEmitter.prototype.emit = function(name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (typeof handler === 'function') {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n"]},"hash":"cd7145e48deca79da6baefa64430ad7f53830de9"}
