{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/runnable.js","filenameRelative":"packages/practicalmeteor:mocha/test/runnable.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/runnable.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/runnable.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"runnable"},"ignored":false,"code":"var mocha = require('../'),\n    utils = mocha.utils,\n    Runnable = mocha.Runnable,\n    EventEmitter = require('events').EventEmitter;\n\ndescribe('Runnable(title, fn)', function () {\n  // For every test we poison the global time-related methods.\n  // runnable.js etc. should keep its own local copy, in order to fix GH-237.\n  // NB: we can't poison global.Date because the normal implementation of\n  // global.setTimeout uses it [1] so if the runnable.js keeps a copy of\n  // global.setTimeout (like it's supposed to), that will blow up.\n  // [1]: https://github.com/joyent/node/blob/7fc835afe362ebd30a0dbec81d3360bd24525222/lib/timers.js#L74\n  var setTimeout = global.setTimeout,\n      setInterval = global.setInterval,\n      clearTimeout = global.clearTimeout,\n      clearInterval = global.clearInterval;\n\n  function poisonPill() {\n    throw new Error(\"Don't use global time-related stuff.\");\n  }\n\n  beforeEach(function () {\n    global.setTimeout = global.setInterval = global.clearTimeout = global.clearInterval = poisonPill;\n  });\n  afterEach(function () {\n    global.setTimeout = setTimeout;\n    global.setInterval = setInterval;\n    global.clearTimeout = clearTimeout;\n    global.clearInterval = clearInterval;\n  });\n  describe('#timeout(ms)', function () {\n    it('should set the timeout', function () {\n      var run = new Runnable();\n      run.timeout(1000);\n      run.timeout().should.equal(1000);\n    });\n  });\n  describe('#enableTimeouts(enabled)', function () {\n    it('should set enabled', function () {\n      var run = new Runnable();\n      run.enableTimeouts(false);\n      run.enableTimeouts().should.equal(false);\n    });\n  });\n  describe('#slow(ms)', function () {\n    it('should set the slow threshold', function () {\n      var run = new Runnable();\n      run.slow(100);\n      run.slow().should.equal(100);\n    });\n  });\n  describe('.title', function () {\n    it('should be present', function () {\n      new Runnable('foo').title.should.equal('foo');\n    });\n  });\n  describe('when arity >= 1', function () {\n    it('should be .async', function () {\n      var run = new Runnable('foo', function (done) {});\n      run.async.should.equal(1);\n      run.sync.should.be.false();\n    });\n  });\n  describe('when arity == 0', function () {\n    it('should be .sync', function () {\n      var run = new Runnable('foo', function () {});\n      run.async.should.be.equal(0);\n      run.sync.should.be.true();\n    });\n  });\n  describe('#globals', function () {\n    it('should allow for whitelisting globals', function (done) {\n      var test = new Runnable('foo', function () {});\n      test.async.should.be.equal(0);\n      test.sync.should.be.true();\n      test.globals(['foobar']);\n      test.run(done);\n    });\n  });\n  describe('#retries(n)', function () {\n    it('should set the number of retries', function () {\n      var run = new Runnable();\n      run.retries(1);\n      run.retries().should.equal(1);\n    });\n  });\n  describe('.run(fn)', function () {\n    describe('when .pending', function () {\n      it('should not invoke the callback', function (done) {\n        var test = new Runnable('foo', function () {\n          throw new Error('should not be called');\n        });\n        test.pending = true;\n        test.run(done);\n      });\n    });\n    describe('when sync', function () {\n      describe('without error', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function () {\n            ++calls;\n          });\n          test.run(function (err) {\n            calls.should.equal(1);\n            test.duration.should.be.type('number');\n            done(err);\n          });\n        });\n      });\n      describe('when an exception is thrown', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function () {\n            ++calls;\n            throw new Error('fail');\n          });\n          test.run(function (err) {\n            calls.should.equal(1);\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n      });\n      describe('when an exception is thrown and is allowed to remain uncaught', function () {\n        it('throws an error when it is allowed', function (done) {\n          var test = new Runnable('foo', function () {\n            throw new Error('fail');\n          });\n          test.allowUncaught = true;\n\n          function fail() {\n            test.run(function (err) {});\n          }\n\n          fail.should.throw('fail');\n          done();\n        });\n      });\n    });\n    describe('when timeouts are disabled', function () {\n      it('should not error with timeout', function (done) {\n        var test = new Runnable('foo', function (done) {\n          setTimeout(process.nextTick.bind(undefined, done), 2);\n        });\n        test.timeout(1);\n        test.enableTimeouts(false);\n        test.run(done);\n      });\n    });\n    describe('when async', function () {\n      describe('without error', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            process.nextTick(done);\n          });\n          test.run(done);\n        });\n      });\n      describe('when the callback is invoked several times', function () {\n        describe('without an error', function () {\n          it('should emit a single \"error\" event', function (done) {\n            var calls = 0;\n            var errCalls = 0;\n            var test = new Runnable('foo', function (done) {\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n            test.on('error', function (err) {\n              ++errCalls;\n              err.message.should.equal('done() called multiple times');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n            test.run(function () {\n              ++calls;\n            });\n          });\n        });\n        describe('with an error', function () {\n          it('should emit a single \"error\" event', function (done) {\n            var calls = 0;\n            var errCalls = 0;\n            var test = new Runnable('foo', function (done) {\n              done(new Error('fail'));\n              process.nextTick(done);\n              done(new Error('fail'));\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n            test.on('error', function (err) {\n              ++errCalls;\n              err.message.should.equal('fail');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n            test.run(function () {\n              ++calls;\n            });\n          });\n        });\n      });\n      describe('when an exception is thrown', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n          test.run(function (err) {\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n        it('should not throw its own exception if passed a non-object', function (done) {\n          var test = new Runnable('foo', function (done) {\n            throw null;\n            process.nextTick(done);\n          });\n          test.run(function (err) {\n            err.message.should.equal(utils.undefinedError().message);\n            done();\n          });\n        });\n      });\n      describe('when an exception is thrown and is allowed to remain uncaught', function () {\n        it('throws an error when it is allowed', function (done) {\n          var test = new Runnable('foo', function (done) {\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n          test.allowUncaught = true;\n\n          function fail() {\n            test.run(function (err) {});\n          }\n\n          fail.should.throw('fail');\n          done();\n        });\n      });\n      describe('when an error is passed', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            done(new Error('fail'));\n          });\n          test.run(function (err) {\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n      });\n      describe('when done() is invoked with a non-Error object', function () {\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function (done) {\n            done({\n              error: 'Test error'\n            });\n          });\n          test.run(function (err) {\n            err.message.should.equal('done() invoked with non-Error: {\"error\":\"Test error\"}');\n            done();\n          });\n        });\n      });\n      describe('when done() is invoked with a string', function () {\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function (done) {\n            done('Test error');\n          });\n          test.run(function (err) {\n            err.message.should.equal('done() invoked with non-Error: Test error');\n            done();\n          });\n        });\n      });\n      it('should allow updating the timeout', function (done) {\n        var callCount = 0;\n\n        var increment = function () {\n          callCount++;\n        };\n\n        var test = new Runnable('foo', function (done) {\n          setTimeout(increment, 1);\n          setTimeout(increment, 100);\n        });\n        test.timeout(10);\n        test.run(function (err) {\n          err.should.be.ok();\n          callCount.should.equal(1);\n          done();\n        });\n      });\n      it('should allow a timeout of 0');\n    });\n    describe('when fn returns a promise', function () {\n      describe('when the promise is fulfilled with no value', function () {\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(fulfilled);\n          }\n        };\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return fulfilledPromise;\n          });\n          test.run(done);\n        });\n      });\n      describe('when the promise is fulfilled with a value', function () {\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              fulfilled({});\n            });\n          }\n        };\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return fulfilledPromise;\n          });\n          test.run(done);\n        });\n      });\n      describe('when the promise is rejected', function () {\n        var expectedErr = new Error('fail');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected(expectedErr);\n            });\n          }\n        };\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return rejectedPromise;\n          });\n          test.run(function (err) {\n            err.should.equal(expectedErr);\n            done();\n          });\n        });\n      });\n      describe('when the promise is rejected without a reason', function () {\n        var expectedErr = new Error('Promise rejected with no or falsy reason');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected();\n            });\n          }\n        };\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return rejectedPromise;\n          });\n          test.run(function (err) {\n            err.should.eql(expectedErr);\n            done();\n          });\n        });\n      });\n      describe('when the promise takes too long to settle', function () {\n        var foreverPendingPromise = {\n          then: function () {}\n        };\n        it('should give the timeout error', function (done) {\n          var test = new Runnable('foo', function () {\n            return foreverPendingPromise;\n          });\n          test.timeout(10);\n          test.run(function (err) {\n            err.should.be.ok();\n            done();\n          });\n        });\n      });\n    });\n    describe('when fn returns a non-promise', function () {\n      it('should invoke the callback', function (done) {\n        var test = new Runnable('foo', function () {\n          return {\n            then: \"i ran my tests\"\n          };\n        });\n        test.run(done);\n      });\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/runnable.js"],"names":["mocha","require","utils","Runnable","EventEmitter","describe","setTimeout","global","setInterval","clearTimeout","clearInterval","poisonPill","Error","beforeEach","afterEach","it","run","timeout","should","equal","enableTimeouts","slow","title","done","async","sync","be","false","true","test","globals","retries","pending","calls","err","duration","type","message","allowUncaught","fail","throw","process","nextTick","bind","undefined","errCalls","on","undefinedError","error","callCount","increment","ok","fulfilledPromise","then","fulfilled","rejected","expectedErr","rejectedPromise","eql","foreverPendingPromise"],"mappings":"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","file":"packages/practicalmeteor:mocha/test/runnable.js.map","sourcesContent":["var mocha = require('../')\n  , utils = mocha.utils\n  , Runnable = mocha.Runnable\n  , EventEmitter = require('events').EventEmitter;\n\ndescribe('Runnable(title, fn)', function(){\n  // For every test we poison the global time-related methods.\n  // runnable.js etc. should keep its own local copy, in order to fix GH-237.\n  // NB: we can't poison global.Date because the normal implementation of\n  // global.setTimeout uses it [1] so if the runnable.js keeps a copy of\n  // global.setTimeout (like it's supposed to), that will blow up.\n  // [1]: https://github.com/joyent/node/blob/7fc835afe362ebd30a0dbec81d3360bd24525222/lib/timers.js#L74\n  var setTimeout = global.setTimeout\n    , setInterval = global.setInterval\n    , clearTimeout = global.clearTimeout\n    , clearInterval = global.clearInterval;\n\n  function poisonPill() {\n    throw new Error(\"Don't use global time-related stuff.\");\n  }\n\n  beforeEach(function(){\n    global.setTimeout =\n    global.setInterval =\n    global.clearTimeout =\n    global.clearInterval = poisonPill;\n  })\n\n  afterEach(function(){\n    global.setTimeout = setTimeout;\n    global.setInterval = setInterval;\n    global.clearTimeout = clearTimeout;\n    global.clearInterval = clearInterval;\n  })\n\n  describe('#timeout(ms)', function(){\n    it('should set the timeout', function(){\n      var run = new Runnable;\n      run.timeout(1000)\n      run.timeout().should.equal(1000);\n    })\n  })\n\n  describe('#enableTimeouts(enabled)', function(){\n    it('should set enabled', function(){\n      var run = new Runnable;\n      run.enableTimeouts(false);\n      run.enableTimeouts().should.equal(false);\n    });\n  });\n\n  describe('#slow(ms)', function(){\n    it('should set the slow threshold', function(){\n      var run = new Runnable;\n      run.slow(100)\n      run.slow().should.equal(100);\n    })\n  })\n\n  describe('.title', function(){\n    it('should be present', function(){\n      new Runnable('foo').title.should.equal('foo');\n    })\n  })\n\n  describe('when arity >= 1', function(){\n    it('should be .async', function(){\n      var run = new Runnable('foo', function(done){});\n      run.async.should.equal(1);\n      run.sync.should.be.false();\n    })\n  })\n\n  describe('when arity == 0', function(){\n    it('should be .sync', function(){\n      var run = new Runnable('foo', function(){});\n      run.async.should.be.equal(0);\n      run.sync.should.be.true();\n    })\n  })\n\n  describe('#globals', function(){\n    it('should allow for whitelisting globals', function(done){\n      var test = new Runnable('foo', function(){});\n      test.async.should.be.equal(0);\n      test.sync.should.be.true();\n      test.globals(['foobar']);\n      test.run(done);\n    })\n  })\n\n  describe('#retries(n)', function(){\n    it('should set the number of retries', function(){\n      var run = new Runnable;\n      run.retries(1);\n      run.retries().should.equal(1);\n    })\n  })\n\n  describe('.run(fn)', function(){\n    describe('when .pending', function(){\n      it('should not invoke the callback', function(done){\n        var test = new Runnable('foo', function(){\n          throw new Error('should not be called');\n        });\n\n        test.pending = true;\n        test.run(done);\n      })\n    })\n\n    describe('when sync', function(){\n      describe('without error', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(){\n            ++calls;\n          });\n\n          test.run(function(err){\n            calls.should.equal(1);\n            test.duration.should.be.type('number');\n            done(err);\n          })\n        })\n      })\n\n      describe('when an exception is thrown', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(){\n            ++calls;\n            throw new Error('fail');\n          });\n\n          test.run(function(err){\n            calls.should.equal(1);\n            err.message.should.equal('fail');\n            done();\n          })\n        })\n      })\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function(){\n        it('throws an error when it is allowed', function(done) {\n          var test = new Runnable('foo', function(){\n            throw new Error('fail');\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function(err) {});\n          }\n          fail.should.throw('fail');\n          done();\n        })\n      })\n    })\n\n    describe('when timeouts are disabled', function() {\n      it('should not error with timeout', function(done) {\n        var test = new Runnable('foo', function(done){\n          setTimeout(process.nextTick.bind(undefined, done), 2);\n        });\n        test.timeout(1);\n        test.enableTimeouts(false);\n        test.run(done);\n      });\n    });\n\n    describe('when async', function(){\n      describe('without error', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            process.nextTick(done);\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the callback is invoked several times', function(){\n        describe('without an error', function(){\n          it('should emit a single \"error\" event', function(done){\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function(done){\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function(err){\n              ++errCalls;\n              err.message.should.equal('done() called multiple times');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function(){\n              ++calls;\n            });\n          })\n        })\n\n        describe('with an error', function(){\n          it('should emit a single \"error\" event', function(done){\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function(done){\n              done(new Error('fail'));\n              process.nextTick(done);\n              done(new Error('fail'));\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function(err){\n              ++errCalls;\n              err.message.should.equal('fail');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function(){\n              ++calls;\n            });\n          })\n        })\n      })\n\n      describe('when an exception is thrown', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n\n          test.run(function(err){\n            err.message.should.equal('fail');\n            done();\n          });\n        })\n\n        it('should not throw its own exception if passed a non-object', function (done) {\n          var test = new Runnable('foo', function(done) {\n            throw null;\n            process.nextTick(done);\n          });\n\n          test.run(function(err) {\n            err.message.should.equal(utils.undefinedError().message);\n            done();\n          })\n        });\n      })\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function(){\n        it('throws an error when it is allowed', function(done) {\n          var test = new Runnable('foo', function(done){\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function(err) {});\n          }\n          fail.should.throw('fail');\n          done();\n        })\n      })\n\n      describe('when an error is passed', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            done(new Error('fail'));\n          });\n\n          test.run(function(err){\n            err.message.should.equal('fail');\n            done();\n          });\n        })\n      })\n\n      describe('when done() is invoked with a non-Error object', function(){\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(done){\n            done({ error: 'Test error' });\n          });\n\n          test.run(function(err){\n            err.message.should.equal('done() invoked with non-Error: {\"error\":\"Test error\"}');\n            done();\n          });\n        })\n      })\n\n      describe('when done() is invoked with a string', function(){\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(done){\n            done('Test error');\n          });\n\n          test.run(function(err){\n            err.message.should.equal('done() invoked with non-Error: Test error');\n            done();\n          });\n        })\n      })\n\n      it('should allow updating the timeout', function(done){\n        var callCount = 0;\n        var increment = function() {\n          callCount++;\n        };\n        var test = new Runnable('foo', function(done){\n          setTimeout(increment, 1);\n          setTimeout(increment, 100);\n        });\n        test.timeout(10);\n        test.run(function(err){\n          err.should.be.ok();\n          callCount.should.equal(1);\n          done();\n        });\n      })\n\n      it('should allow a timeout of 0')\n    })\n\n    describe('when fn returns a promise', function(){\n      describe('when the promise is fulfilled with no value', function(){\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(fulfilled);\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the promise is fulfilled with a value', function(){\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              fulfilled({});\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the promise is rejected', function(){\n        var expectedErr = new Error('fail');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected(expectedErr);\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return rejectedPromise;\n          });\n\n          test.run(function(err){\n            err.should.equal(expectedErr);\n            done();\n          });\n        })\n      })\n\n      describe('when the promise is rejected without a reason', function(){\n        var expectedErr = new Error('Promise rejected with no or falsy reason');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected();\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return rejectedPromise;\n          });\n\n          test.run(function(err){\n            err.should.eql(expectedErr);\n            done();\n          });\n        })\n      })\n\n      describe('when the promise takes too long to settle', function(){\n        var foreverPendingPromise = {\n          then: function () { }\n        };\n\n        it('should give the timeout error', function(done){\n          var test = new Runnable('foo', function(){\n            return foreverPendingPromise;\n          });\n\n          test.timeout(10);\n          test.run(function(err){\n            err.should.be.ok();\n            done();\n          });\n        })\n      })\n    })\n\n    describe('when fn returns a non-promise', function(){\n      it('should invoke the callback', function(done){\n        var test = new Runnable('foo', function(){\n          return { then: \"i ran my tests\" };\n        });\n\n        test.run(done);\n      })\n    })\n  })\n})\n"]},"hash":"44bd5b2db9c9a9579343b9d20aa8f7be27dc8724"}
