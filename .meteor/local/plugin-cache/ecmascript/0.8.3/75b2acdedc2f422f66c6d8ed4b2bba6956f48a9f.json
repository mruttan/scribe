{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"expect","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"expect"}]},{"source":"./notes","imported":["Notes"],"specifiers":[{"kind":"named","imported":"Notes","local":"Notes"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/api/notes.test.js","filenameRelative":"imports/api/notes.test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/notes.test.js.map","sourceFileName":"imports/api/notes.test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notes.test"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar expect = void 0;\nmodule.watch(require(\"expect\"), {\n  \"default\": function (v) {\n    expect = v;\n  }\n}, 1);\nvar Notes = void 0;\nmodule.watch(require(\"./notes\"), {\n  Notes: function (v) {\n    Notes = v;\n  }\n}, 2);\n\nif (Meteor.isServer) {\n  describe('notes', function () {\n    beforeEach(function () {\n      Notes.remove({});\n      Notes.insert({\n        _id: 'testNoteId1',\n        title: 'My Title',\n        body: 'My body for note',\n        updatedAt: 0,\n        userId: 'testUserId1'\n      });\n    });\n    it('should insert new note', function () {\n      var userId = 'testid';\n\n      var _id = Meteor.server.method_handlers['notes.insert'].apply({\n        userId: userId\n      });\n\n      expect(Notes.findOne({\n        _id: _id,\n        userId: userId\n      })).toExist();\n    });\n    it('should not insert note if not authenticated', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({\n        userId: 'testUserId1'\n      }, ['testNoteId1']);\n      expect(Notes.findOne({\n        _id: 'testNoteId1'\n      })).toNotExist();\n    });\n    it('should not remove note if undefined', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.remove'].apply({}, ['testNoteId1']);\n      }).toThrow();\n    });\n    it('should not remove note if invalid _id', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.remove'].apply({\n          userId: 'testUserId1'\n        });\n      }).toThrow();\n    });\n  });\n}","map":{"version":3,"sources":["imports/api/notes.test.js"],"names":["Meteor","module","watch","require","v","expect","Notes","isServer","describe","beforeEach","remove","insert","_id","title","body","updatedAt","userId","it","server","method_handlers","apply","findOne","toExist","toThrow","toNotExist"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,QAAD,YAAQI,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,eAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAAA,uBAASC,CAAT,EAAW;AAACC,aAAOD,CAAP;AAAS;AAArB,CAA/B,EAAsD,CAAtD;AAAyD,IAAIE,cAAJ;AAAUL,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb,EAAgC;AAACG,OAAD,YAAOF,CAAP,EAAS;AAACE,YAAMF,CAAN;AAAQ;AAAlB,CAAhC,EAAoD,CAApD;;AAKxJ,IAAIJ,OAAOO,QAAX,EAAqB;AACnBC,WAAS,OAAT,EAAkB,YAAY;AAE5BC,eAAW,YAAY;AACrBH,YAAMI,MAAN,CAAa,EAAb;AACAJ,YAAMK,MAAN,CAAa;AACXC,aAAK,aADM;AAEXC,eAAO,UAFI;AAGXC,cAAM,kBAHK;AAIXC,mBAAW,CAJA;AAKXC,gBAAQ;AALG,OAAb;AAOD,KATD;AAWAC,OAAG,wBAAH,EAA6B,YAAY;AACvC,UAAMD,SAAS,QAAf;;AACA,UAAMJ,MAAMZ,OAAOkB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEJ;AAAF,OAApD,CAAZ;;AAEAX,aAAOC,MAAMe,OAAN,CAAc;AAAET,gBAAF;AAAOI;AAAP,OAAd,CAAP,EAAuCM,OAAvC;AACD,KALD;AAOAL,OAAG,6CAAH,EAAkD,YAAY;AAC5DZ,aAAO,YAAM;AACXL,eAAOkB,MAAP,CAAcC,eAAd,CAA8B,cAA9B;AACD,OAFD,EAEGI,OAFH;AAGD,KAJD;AAMAN,OAAG,oBAAH,EAAyB,YAAY;AACnCjB,aAAOkB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEJ,gBAAQ;AAAV,OAApD,EAA+E,CAAC,aAAD,CAA/E;AAEAX,aAAOC,MAAMe,OAAN,CAAc;AAAET,aAAK;AAAP,OAAd,CAAP,EAA6CY,UAA7C;AACD,KAJD;AAMAP,OAAG,qCAAH,EAA0C,YAAY;AACpDZ,aAAO,YAAM;AACXL,eAAOkB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD,EAApD,EAAwD,CAAC,aAAD,CAAxD;AACD,OAFD,EAEGG,OAFH;AAGD,KAJD;AAMAN,OAAG,uCAAH,EAA4C,YAAY;AACtDZ,aAAO,YAAM;AACXL,eAAOkB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEJ,kBAAQ;AAAV,SAApD;AACD,OAFD,EAEGO,OAFH;AAGD,KAJD;AAMD,GA5CD;AA6CD","file":"imports/api/notes.test.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { Notes } from './notes';\n\nif (Meteor.isServer) {\n  describe('notes', function () {\n\n    beforeEach(function () {\n      Notes.remove({});\n      Notes.insert({\n        _id: 'testNoteId1',\n        title: 'My Title',\n        body: 'My body for note',\n        updatedAt: 0,\n        userId: 'testUserId1'\n      });\n    });\n\n    it('should insert new note', function () {\n      const userId = 'testid';\n      const _id = Meteor.server.method_handlers['notes.insert'].apply({ userId });\n\n      expect(Notes.findOne({ _id, userId })).toExist();\n    });\n\n    it('should not insert note if not authenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({ userId: 'testUserId1' }, ['testNoteId1']);\n\n      expect(Notes.findOne({ _id: 'testNoteId1'})).toNotExist();\n    });\n\n    it('should not remove note if undefined', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({}, ['testNoteId1']);\n      }).toThrow();\n    });\n\n    it('should not remove note if invalid _id', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({ userId: 'testUserId1' });\n      }).toThrow();\n    });\n\n  });\n}\n"]},"hash":"75b2acdedc2f422f66c6d8ed4b2bba6956f48a9f"}
