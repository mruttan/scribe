{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/lib/reporters/progress.js","filenameRelative":"packages/practicalmeteor:mocha/lib/reporters/progress.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/lib/reporters/progress.js.map","sourceFileName":"packages/practicalmeteor:mocha/lib/reporters/progress.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"progress"},"ignored":false,"code":"/**\n * Module dependencies.\n */var Base = require('./base');\n\nvar inherits = require('../utils').inherits;\n\nvar color = Base.color;\nvar cursor = Base.cursor; /**\n                           * Expose `Progress`.\n                           */\nexports = module.exports = Progress; /**\n                                      * General progress bar color.\n                                      */\nBase.colors.progress = 90; /**\n                            * Initialize a new `Progress` bar test reporter.\n                            *\n                            * @api public\n                            * @param {Runner} runner\n                            * @param {Object} options\n                            */\n\nfunction Progress(runner, options) {\n  Base.call(this, runner);\n  var self = this;\n  var width = Base.window.width * .50 | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1; // default chars\n\n  options = options || {};\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false; // tests started\n\n  runner.on('start', function () {\n    console.log();\n    cursor.hide();\n  }); // tests complete\n\n  runner.on('test end', function () {\n    complete++;\n    var percent = complete / total;\n    var n = width * percent | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n\n    lastN = n;\n    cursor.CR();\n    process.stdout.write(\"\\x1B[J\");\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  }); // tests are complete, output some stats\n  // and the failures if any\n\n  runner.on('end', function () {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n} /**\n   * Inherit from `Base.prototype`.\n   */\n\ninherits(Progress, Base);","map":{"version":3,"sources":["packages/practicalmeteor:mocha/lib/reporters/progress.js"],"names":["Base","require","inherits","color","cursor","exports","module","Progress","colors","progress","runner","options","call","self","width","window","total","complete","lastN","open","incomplete","symbols","dot","close","verbose","on","console","log","hide","percent","n","i","CR","process","stdout","write","Array","join","show","epilogue"],"mappings":"AAAA;;GAIA,IAAIA,OAAOC,QAAQ,QAAR,CAAX;;AACA,IAAIC,WAAWD,QAAQ,UAAR,EAAoBC,QAAnC;;AACA,IAAIC,QAAQH,KAAKG,KAAjB;AACA,IAAIC,SAASJ,KAAKI,MAAlB,C,CAEA;;;AAIAC,UAAUC,OAAOD,OAAP,GAAiBE,QAA3B,C,CAEA;;;AAIAP,KAAKQ,MAAL,CAAYC,QAAZ,GAAuB,EAAvB,C,CAEA;;;;;;;;AAOA,SAASF,QAAT,CAAkBG,MAAlB,EAA0BC,OAA1B,EAAmC;AACjCX,OAAKY,IAAL,CAAU,IAAV,EAAgBF,MAAhB;AAEA,MAAIG,OAAO,IAAX;AACA,MAAIC,QAAQd,KAAKe,MAAL,CAAYD,KAAZ,GAAoB,GAApB,GAA0B,CAAtC;AACA,MAAIE,QAAQN,OAAOM,KAAnB;AACA,MAAIC,WAAW,CAAf;AACA,MAAIC,QAAQ,CAAC,CAAb,CAPiC,CASjC;;AACAP,YAAUA,WAAW,EAArB;AACAA,UAAQQ,IAAR,GAAeR,QAAQQ,IAAR,IAAgB,GAA/B;AACAR,UAAQM,QAAR,GAAmBN,QAAQM,QAAR,IAAoB,GAAvC;AACAN,UAAQS,UAAR,GAAqBT,QAAQS,UAAR,IAAsBpB,KAAKqB,OAAL,CAAaC,GAAxD;AACAX,UAAQY,KAAR,GAAgBZ,QAAQY,KAAR,IAAiB,GAAjC;AACAZ,UAAQa,OAAR,GAAkB,KAAlB,CAfiC,CAiBjC;;AACAd,SAAOe,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5BC,YAAQC,GAAR;AACAvB,WAAOwB,IAAP;AACD,GAHD,EAlBiC,CAuBjC;;AACAlB,SAAOe,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC/BR;AAEA,QAAIY,UAAUZ,WAAWD,KAAzB;AACA,QAAIc,IAAIhB,QAAQe,OAAR,GAAkB,CAA1B;AACA,QAAIE,IAAIjB,QAAQgB,CAAhB;;AAEA,QAAIA,MAAMZ,KAAN,IAAe,CAACP,QAAQa,OAA5B,EAAqC;AACnC;AACA;AACD;;AACDN,YAAQY,CAAR;AAEA1B,WAAO4B,EAAP;AACAC,YAAQC,MAAR,CAAeC,KAAf,CAAqB,QAArB;AACAF,YAAQC,MAAR,CAAeC,KAAf,CAAqBhC,MAAM,UAAN,EAAkB,OAAOQ,QAAQQ,IAAjC,CAArB;AACAc,YAAQC,MAAR,CAAeC,KAAf,CAAqBC,MAAMN,CAAN,EAASO,IAAT,CAAc1B,QAAQM,QAAtB,CAArB;AACAgB,YAAQC,MAAR,CAAeC,KAAf,CAAqBC,MAAML,CAAN,EAASM,IAAT,CAAc1B,QAAQS,UAAtB,CAArB;AACAa,YAAQC,MAAR,CAAeC,KAAf,CAAqBhC,MAAM,UAAN,EAAkBQ,QAAQY,KAA1B,CAArB;;AACA,QAAIZ,QAAQa,OAAZ,EAAqB;AACnBS,cAAQC,MAAR,CAAeC,KAAf,CAAqBhC,MAAM,UAAN,EAAkB,MAAMc,QAAN,GAAiB,MAAjB,GAA0BD,KAA5C,CAArB;AACD;AACF,GAtBD,EAxBiC,CAgDjC;AACA;;AACAN,SAAOe,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1BrB,WAAOkC,IAAP;AACAZ,YAAQC,GAAR;AACAd,SAAK0B,QAAL;AACD,GAJD;AAKD,C,CAED;;;;AAGArC,SAASK,QAAT,EAAmBP,IAAnB","file":"packages/practicalmeteor:mocha/lib/reporters/progress.js.map","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Initialize a new `Progress` bar test reporter.\n *\n * @api public\n * @param {Runner} runner\n * @param {Object} options\n */\nfunction Progress(runner, options) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * .50 | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1;\n\n  // default chars\n  options = options || {};\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false;\n\n  // tests started\n  runner.on('start', function() {\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on('test end', function() {\n    complete++;\n\n    var percent = complete / total;\n    var n = width * percent | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.on('end', function() {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Progress, Base);\n"]},"hash":"bb6a5f8a10aa98bed71eff93fb1f41f013c78eed"}
