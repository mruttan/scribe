{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/lib/browser/progress.js","filenameRelative":"packages/practicalmeteor:mocha/lib/browser/progress.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/lib/browser/progress.js.map","sourceFileName":"packages/practicalmeteor:mocha/lib/browser/progress.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"progress"},"ignored":false,"code":"/**\n * Expose `Progress`.\n */module.exports = Progress; /**\n                               * Initialize a new `Progress` indicator.\n                               */\n\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n} /**\n   * Set progress size to `size`.\n   *\n   * @api public\n   * @param {number} size\n   * @return {Progress} Progress instance.\n   */\n\nProgress.prototype.size = function (size) {\n  this._size = size;\n  return this;\n}; /**\n    * Set text to `text`.\n    *\n    * @api public\n    * @param {string} text\n    * @return {Progress} Progress instance.\n    */\n\nProgress.prototype.text = function (text) {\n  this._text = text;\n  return this;\n}; /**\n    * Set font size to `size`.\n    *\n    * @api public\n    * @param {number} size\n    * @return {Progress} Progress instance.\n    */\n\nProgress.prototype.fontSize = function (size) {\n  this._fontSize = size;\n  return this;\n}; /**\n    * Set font to `family`.\n    *\n    * @param {string} family\n    * @return {Progress} Progress instance.\n    */\n\nProgress.prototype.font = function (family) {\n  this._font = family;\n  return this;\n}; /**\n    * Update percentage to `n`.\n    *\n    * @param {number} n\n    * @return {Progress} Progress instance.\n    */\n\nProgress.prototype.update = function (n) {\n  this.percent = n;\n  return this;\n}; /**\n    * Draw on `ctx`.\n    *\n    * @param {CanvasRenderingContext2d} ctx\n    * @return {Progress} Progress instance.\n    */\n\nProgress.prototype.draw = function (ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n    ctx.font = fontSize + 'px ' + this._font;\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size); // outer circle\n\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke(); // inner circle\n\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke(); // text\n\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {// don't fail if we can't render progress\n  }\n\n  return this;\n};","map":{"version":3,"sources":["packages/practicalmeteor:mocha/lib/browser/progress.js"],"names":["module","exports","Progress","percent","size","fontSize","font","prototype","_size","text","_text","_fontSize","family","_font","update","n","draw","ctx","Math","min","half","x","y","rad","angle","PI","clearRect","strokeStyle","beginPath","arc","stroke","w","measureText","width","fillText","err"],"mappings":"AAAA;;GAIAA,OAAOC,OAAP,GAAiBC,QAAjB,C,CAEA;;;;AAGA,SAASA,QAAT,GAAoB;AAClB,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,IAAL,CAAU,CAAV;AACA,OAAKC,QAAL,CAAc,EAAd;AACA,OAAKC,IAAL,CAAU,8BAAV;AACD,C,CAED;;;;;;;;AAOAJ,SAASK,SAAT,CAAmBH,IAAnB,GAA0B,UAASA,IAAT,EAAe;AACvC,OAAKI,KAAL,GAAaJ,IAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;;AAOAF,SAASK,SAAT,CAAmBE,IAAnB,GAA0B,UAASA,IAAT,EAAe;AACvC,OAAKC,KAAL,GAAaD,IAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;;AAOAP,SAASK,SAAT,CAAmBF,QAAnB,GAA8B,UAASD,IAAT,EAAe;AAC3C,OAAKO,SAAL,GAAiBP,IAAjB;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMAF,SAASK,SAAT,CAAmBD,IAAnB,GAA0B,UAASM,MAAT,EAAiB;AACzC,OAAKC,KAAL,GAAaD,MAAb;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMAV,SAASK,SAAT,CAAmBO,MAAnB,GAA4B,UAASC,CAAT,EAAY;AACtC,OAAKZ,OAAL,GAAeY,CAAf;AACA,SAAO,IAAP;AACD,CAHD,C,CAKA;;;;;;;AAMAb,SAASK,SAAT,CAAmBS,IAAnB,GAA0B,UAASC,GAAT,EAAc;AACtC,MAAI;AACF,QAAId,UAAUe,KAAKC,GAAL,CAAS,KAAKhB,OAAd,EAAuB,GAAvB,CAAd;AACA,QAAIC,OAAO,KAAKI,KAAhB;AACA,QAAIY,OAAOhB,OAAO,CAAlB;AACA,QAAIiB,IAAID,IAAR;AACA,QAAIE,IAAIF,IAAR;AACA,QAAIG,MAAMH,OAAO,CAAjB;AACA,QAAIf,WAAW,KAAKM,SAApB;AAEAM,QAAIX,IAAJ,GAAWD,WAAW,KAAX,GAAmB,KAAKQ,KAAnC;AAEA,QAAIW,QAAQN,KAAKO,EAAL,GAAU,CAAV,IAAetB,UAAU,GAAzB,CAAZ;AACAc,QAAIS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBtB,IAApB,EAA0BA,IAA1B,EAZE,CAcF;;AACAa,QAAIU,WAAJ,GAAkB,SAAlB;AACAV,QAAIW,SAAJ;AACAX,QAAIY,GAAJ,CAAQR,CAAR,EAAWC,CAAX,EAAcC,GAAd,EAAmB,CAAnB,EAAsBC,KAAtB,EAA6B,KAA7B;AACAP,QAAIa,MAAJ,GAlBE,CAoBF;;AACAb,QAAIU,WAAJ,GAAkB,MAAlB;AACAV,QAAIW,SAAJ;AACAX,QAAIY,GAAJ,CAAQR,CAAR,EAAWC,CAAX,EAAcC,MAAM,CAApB,EAAuB,CAAvB,EAA0BC,KAA1B,EAAiC,IAAjC;AACAP,QAAIa,MAAJ,GAxBE,CA0BF;;AACA,QAAIrB,OAAO,KAAKC,KAAL,IAAc,CAACP,UAAU,CAAX,IAAgB,GAAzC;AACA,QAAI4B,IAAId,IAAIe,WAAJ,CAAgBvB,IAAhB,EAAsBwB,KAA9B;AAEAhB,QAAIiB,QAAJ,CAAazB,IAAb,EAAmBY,IAAIU,IAAI,CAAR,GAAY,CAA/B,EAAkCT,IAAIjB,WAAW,CAAf,GAAmB,CAArD;AACD,GA/BD,CA+BE,OAAO8B,GAAP,EAAY,CACZ;AACD;;AACD,SAAO,IAAP;AACD,CApCD","file":"packages/practicalmeteor:mocha/lib/browser/progress.js.map","sourcesContent":["/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function(size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @api public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function(text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function(size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function(family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function(n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function(ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n"]},"hash":"660dec744841e2939993972d4c181a327fdd2a2a"}
