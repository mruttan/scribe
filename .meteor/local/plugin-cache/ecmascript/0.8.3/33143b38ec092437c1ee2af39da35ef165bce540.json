{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/integration/retries.js","filenameRelative":"packages/practicalmeteor:mocha/test/integration/retries.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/integration/retries.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/integration/retries.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"retries"},"ignored":false,"code":"var assert = require('assert');\n\nvar helpers = require('./helpers');\n\nvar args = [];\ndescribe('retries', function () {\n  this.timeout(2000);\n  it('are ran in correct order', function (done) {\n    helpers.runMocha('retries/hooks.js', args, function (err, res) {\n      var lines, expected;\n      assert(!err);\n      lines = res.output.split(/[\\n․]+/).map(function (line) {\n        return line.trim();\n      }).filter(function (line) {\n        return line.length;\n      }).slice(0, -1);\n      expected = ['before', 'before each 0', 'TEST 0', 'after each 1', 'before each 1', 'TEST 1', 'after each 2', 'before each 2', 'TEST 2', 'after each 3', 'before each 3', 'TEST 3', 'after each 4', 'before each 4', 'TEST 4', 'after each 5', 'after'];\n      expected.forEach(function (line, i) {\n        assert.equal(lines[i], line);\n      });\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n  it('should exit early if test passes', function (done) {\n    helpers.runMochaJSON('retries/early-pass.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 1);\n      assert.equal(res.stats.failures, 0);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n  it('should let test override', function (done) {\n    helpers.runMochaJSON('retries/nested.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n  it('should not hang w/ async test', function (done) {\n    helpers.runMocha('retries/async.js', args, function (err, res) {\n      var lines, expected;\n      assert(!err);\n      lines = res.output.split(/[\\n․]+/).map(function (line) {\n        return line.trim();\n      }).filter(function (line) {\n        return line.length;\n      }).slice(0, -1);\n      expected = ['before', 'before each 0', 'TEST 0', 'after each 1', 'before each 1', 'TEST 1', 'after each 2', 'before each 2', 'TEST 2', 'after each 3', 'after'];\n      expected.forEach(function (line, i) {\n        assert.equal(lines[i], line);\n      });\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/integration/retries.js"],"names":["assert","require","helpers","args","describe","timeout","it","done","runMocha","err","res","lines","expected","output","split","map","line","trim","filter","length","slice","forEach","i","equal","code","runMochaJSON","stats","passes","failures","tests","currentRetry"],"mappings":"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","file":"packages/practicalmeteor:mocha/test/integration/retries.js.map","sourcesContent":["var assert = require('assert');\nvar helpers = require('./helpers');\nvar args   = [];\n\ndescribe('retries', function() {\n  this.timeout(2000);\n\n  it('are ran in correct order', function(done) {\n    helpers.runMocha('retries/hooks.js', args, function(err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function(line) {\n        return line.trim();\n      }).filter(function(line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = [\n        'before',\n        'before each 0',\n        'TEST 0',\n        'after each 1',\n        'before each 1',\n        'TEST 1',\n        'after each 2',\n        'before each 2',\n        'TEST 2',\n        'after each 3',\n        'before each 3',\n        'TEST 3',\n        'after each 4',\n        'before each 4',\n        'TEST 4',\n        'after each 5',\n        'after'\n      ];\n\n      expected.forEach(function(line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should exit early if test passes', function (done) {\n    helpers.runMochaJSON('retries/early-pass.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 1);\n      assert.equal(res.stats.failures, 0);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n\n  it('should let test override', function (done) {\n    helpers.runMochaJSON('retries/nested.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should not hang w/ async test', function (done) {\n    helpers.runMocha('retries/async.js', args, function(err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function(line) {\n        return line.trim();\n      }).filter(function(line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = [\n        'before',\n        'before each 0',\n        'TEST 0',\n        'after each 1',\n        'before each 1',\n        'TEST 1',\n        'after each 2',\n        'before each 2',\n        'TEST 2',\n        'after each 3',\n        'after'\n      ];\n\n      expected.forEach(function(line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n});\n"]},"hash":"33143b38ec092437c1ee2af39da35ef165bce540"}
