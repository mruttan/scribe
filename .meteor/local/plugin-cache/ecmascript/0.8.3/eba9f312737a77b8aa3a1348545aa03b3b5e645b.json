{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/lib/reporters/base.js","filenameRelative":"packages/practicalmeteor:mocha/lib/reporters/base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/lib/reporters/base.js.map","sourceFileName":"packages/practicalmeteor:mocha/lib/reporters/base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"base"},"ignored":false,"code":"/**\n * Module dependencies.\n */var tty = require('tty');\n\nvar diff = require('diff');\n\nvar ms = require('../ms');\n\nvar utils = require('../utils');\n\nvar supportsColor = process.browser ? null : require('supports-color'); /**\n                                                                         * Expose `Base`.\n                                                                         */\nexports = module.exports = Base; /**\n                                  * Save timer references to avoid Sinon interfering.\n                                  * See: https://github.com/mochajs/mocha/issues/237\n                                  */ /* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval; /* eslint-enable no-unused-vars, no-native-reassign */ /**\n                                                                                                  * Check if both stdio streams are associated with a tty.\n                                                                                                  */\nvar isatty = tty.isatty(1) && tty.isatty(2); /**\n                                              * Enable coloring by default, except in the browser interface.\n                                              */\nexports.useColors = !process.browser && (supportsColor || process.env.MOCHA_COLORS !== undefined); /**\n                                                                                                    * Inline diffs instead of +/-\n                                                                                                    */\nexports.inlineDiffs = false; /**\n                              * Default color map.\n                              */\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n}; /**\n    * Default symbol map.\n    */\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n}; // With node.js on Windows: use symbols available in terminal default fonts\n\nif (process.platform === 'win32') {\n  exports.symbols.ok = \"\\u221A\";\n  exports.symbols.err = \"\\xD7\";\n  exports.symbols.dot = '.';\n} /**\n   * Color `str` with the given `type`,\n   * allowing colors to be disabled,\n   * as well as user-defined color\n   * schemes.\n   *\n   * @param {string} type\n   * @param {string} str\n   * @return {string}\n   * @api private\n   */\n\nvar color = exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n\n  return \"\\x1B[\" + exports.colors[type] + 'm' + str + \"\\x1B[0m\";\n}; /**\n    * Expose term window size, with some defaults for when stderr is not a tty.\n    */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize ? process.stdout.getWindowSize(1)[0] : tty.getWindowSize()[1];\n} /**\n   * Expose some basic cursor interactions that are common among reporters.\n   */\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write(\"\\x1B[?25l\");\n  },\n  show: function () {\n    isatty && process.stdout.write(\"\\x1B[?25h\");\n  },\n  deleteLine: function () {\n    isatty && process.stdout.write(\"\\x1B[2K\");\n  },\n  beginningOfLine: function () {\n    isatty && process.stdout.write(\"\\x1B[0G\");\n  },\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n}; /**\n    * Outut the given `failures` as a list.\n    *\n    * @param {Array} failures\n    * @api public\n    */\n\nexports.list = function (failures) {\n  console.log();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n'); // msg\n\n    var msg;\n    var err = test.err;\n    var message;\n\n    if (err.message) {\n      message = err.message;\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n\n    var stack = err.stack || message;\n    var index = stack.indexOf(message);\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index); // remove msg from stack\n\n      stack = stack.slice(index + 1);\n    } // uncaught\n\n\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    } // explicitly show diff\n\n\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    } // indent stack trace\n\n\n    stack = stack.replace(/^/gm, '  ');\n    console.log(fmt, i + 1, test.fullTitle(), msg, stack);\n  });\n}; /**\n    * Initialize a new `Base` reporter.\n    *\n    * All other reporters generally\n    * inherit from this reporter, providing\n    * stats such as test duration, number\n    * of tests passed / failed etc.\n    *\n    * @param {Runner} runner\n    * @api public\n    */\n\nfunction Base(runner) {\n  var stats = this.stats = {\n    suites: 0,\n    tests: 0,\n    passes: 0,\n    pending: 0,\n    failures: 0\n  };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n\n  this.runner = runner;\n  runner.stats = stats;\n  runner.on('start', function () {\n    stats.start = new Date();\n  });\n  runner.on('suite', function (suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n  runner.on('test end', function () {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n  runner.on('pass', function (test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n  runner.on('fail', function (test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n  runner.on('end', function () {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n  runner.on('pending', function () {\n    stats.pending++;\n  });\n} /**\n   * Output common epilogue used by many of\n   * the bundled reporters.\n   *\n   * @api public\n   */\n\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n  console.log(); // passes\n\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');\n  console.log(fmt, stats.passes || 0, ms(stats.duration)); // pending\n\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n    console.log(fmt, stats.pending);\n  } // failures\n\n\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n    console.log(fmt, stats.failures);\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n}; /**\n    * Pad the given `str` to `len`.\n    *\n    * @api private\n    * @param {string} str\n    * @param {string} len\n    * @return {string}\n    */\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n} /**\n   * Returns an inline diff between 2 strings with coloured ANSI output\n   *\n   * @api private\n   * @param {Error} err with actual/expected\n   * @param {boolean} escape\n   * @return {string} Diff\n   */\n\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape); // linenos\n\n  var lines = msg.split('\\n');\n\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function (str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  } // legend\n\n\n  msg = '\\n' + color('diff removed', 'actual') + ' ' + color('diff added', 'expected') + '\\n\\n' + msg + '\\n'; // indent\n\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n} /**\n   * Returns a unified diff between two strings.\n   *\n   * @api private\n   * @param {Error} err with actual/expected\n   * @param {boolean} escape\n   * @return {string} The diff.\n   */\n\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n\n    if (line.match(/\\@\\@/)) {\n      return null;\n    }\n\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n\n    return indent + line;\n  }\n\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n} /**\n   * Return a character diff for `err`.\n   *\n   * @api private\n   * @param {Error} err\n   * @param {string} type\n   * @param {boolean} escape\n   * @return {string}\n   */\n\nfunction errorDiff(err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function (str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n\n    return str.value;\n  }).join('');\n} /**\n   * Returns a string with all invisible characters in plain text\n   *\n   * @api private\n   * @param {string} line\n   * @return {string}\n   */\n\nfunction escapeInvisibles(line) {\n  return line.replace(/\\t/g, '<tab>').replace(/\\r/g, '<CR>').replace(/\\n/g, '<LF>\\n');\n} /**\n   * Color lines for `str`, using the color `name`.\n   *\n   * @api private\n   * @param {string} name\n   * @param {string} str\n   * @return {string}\n   */\n\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function (str) {\n    return color(name, str);\n  }).join('\\n');\n} /**\n   * Object#toString reference.\n   */\n\nvar objToString = Object.prototype.toString; /**\n                                              * Check that a / b have the same type.\n                                              *\n                                              * @api private\n                                              * @param {Object} a\n                                              * @param {Object} b\n                                              * @return {boolean}\n                                              */\n\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}","map":{"version":3,"sources":["packages/practicalmeteor:mocha/lib/reporters/base.js"],"names":["tty","require","diff","ms","utils","supportsColor","process","browser","exports","module","Base","Date","global","setTimeout","setInterval","clearTimeout","clearInterval","isatty","useColors","env","MOCHA_COLORS","undefined","inlineDiffs","colors","pass","fail","pending","suite","checkmark","fast","medium","slow","green","light","symbols","ok","err","dot","platform","color","type","str","String","window","width","stdout","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","list","failures","console","log","forEach","test","i","fmt","msg","message","inspect","stack","index","indexOf","actual","expected","escape","length","slice","uncaught","showDiff","sameType","isString","stringify","match","inlineDiff","unifiedDiff","replace","fullTitle","runner","stats","suites","tests","passes","on","start","root","duration","speed","push","end","prototype","epilogue","pad","len","Array","join","errorDiff","lines","split","map","indent","cleanUp","line","escapeInvisibles","colorLines","notBlank","createPatch","splice","filter","added","value","removed","name","objToString","Object","toString","a","b","call"],"mappings":"AAAA;;GAIA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AACA,IAAIE,KAAKF,QAAQ,OAAR,CAAT;;AACA,IAAIG,QAAQH,QAAQ,UAAR,CAAZ;;AACA,IAAII,gBAAgBC,QAAQC,OAAR,GAAkB,IAAlB,GAAyBN,QAAQ,gBAAR,CAA7C,C,CAEA;;;AAIAO,UAAUC,OAAOD,OAAP,GAAiBE,IAA3B,C,CAEA;;;qCAKA;AACA,IAAIC,OAAOC,OAAOD,IAAlB;AACA,IAAIE,aAAaD,OAAOC,UAAxB;AACA,IAAIC,cAAcF,OAAOE,WAAzB;AACA,IAAIC,eAAeH,OAAOG,YAA1B;AACA,IAAIC,gBAAgBJ,OAAOI,aAA3B,C,CACA,sD,CAEA;;;AAIA,IAAIC,SAASjB,IAAIiB,MAAJ,CAAW,CAAX,KAAiBjB,IAAIiB,MAAJ,CAAW,CAAX,CAA9B,C,CAEA;;;AAIAT,QAAQU,SAAR,GAAoB,CAACZ,QAAQC,OAAT,KAAqBF,iBAAkBC,QAAQa,GAAR,CAAYC,YAAZ,KAA6BC,SAApE,CAApB,C,CAEA;;;AAIAb,QAAQc,WAAR,GAAsB,KAAtB,C,CAEA;;;AAIAd,QAAQe,MAAR,GAAiB;AACfC,QAAM,EADS;AAEfC,QAAM,EAFS;AAGf,iBAAe,EAHA;AAIf,iBAAe,EAJA;AAKf,mBAAiB,EALF;AAMfC,WAAS,EANM;AAOfC,SAAO,CAPQ;AAQf,iBAAe,CARA;AASf,mBAAiB,EATF;AAUf,iBAAe,EAVA;AAWfC,aAAW,EAXI;AAYfC,QAAM,EAZS;AAafC,UAAQ,EAbO;AAcfC,QAAM,EAdS;AAefC,SAAO,EAfQ;AAgBfC,SAAO,EAhBQ;AAiBf,iBAAe,EAjBA;AAkBf,gBAAc,EAlBC;AAmBf,kBAAgB;AAnBD,CAAjB,C,CAsBA;;;AAIAzB,QAAQ0B,OAAR,GAAkB;AAChBC,MAAI,GADY;AAEhBC,OAAK,GAFW;AAGhBC,OAAK;AAHW,CAAlB,C,CAMA;;AACA,IAAI/B,QAAQgC,QAAR,KAAqB,OAAzB,EAAkC;AAChC9B,UAAQ0B,OAAR,CAAgBC,EAAhB,GAAqB,QAArB;AACA3B,UAAQ0B,OAAR,CAAgBE,GAAhB,GAAsB,MAAtB;AACA5B,UAAQ0B,OAAR,CAAgBG,GAAhB,GAAsB,GAAtB;AACD,C,CAED;;;;;;;;;;;;AAWA,IAAIE,QAAQ/B,QAAQ+B,KAAR,GAAgB,UAASC,IAAT,EAAeC,GAAf,EAAoB;AAC9C,MAAI,CAACjC,QAAQU,SAAb,EAAwB;AACtB,WAAOwB,OAAOD,GAAP,CAAP;AACD;;AACD,SAAO,UAAYjC,QAAQe,MAAR,CAAeiB,IAAf,CAAZ,GAAmC,GAAnC,GAAyCC,GAAzC,GAA+C,SAAtD;AACD,CALD,C,CAOA;;;;AAIAjC,QAAQmC,MAAR,GAAiB;AACfC,SAAO;AADQ,CAAjB;;AAIA,IAAI3B,MAAJ,EAAY;AACVT,UAAQmC,MAAR,CAAeC,KAAf,GAAuBtC,QAAQuC,MAAR,CAAeC,aAAf,GACjBxC,QAAQuC,MAAR,CAAeC,aAAf,CAA6B,CAA7B,EAAgC,CAAhC,CADiB,GAEjB9C,IAAI8C,aAAJ,GAAoB,CAApB,CAFN;AAGD,C,CAED;;;;AAIAtC,QAAQuC,MAAR,GAAiB;AACfC,QAAM,YAAW;AACf/B,cAAUX,QAAQuC,MAAR,CAAeI,KAAf,CAAqB,WAArB,CAAV;AACD,GAHc;AAKfC,QAAM,YAAW;AACfjC,cAAUX,QAAQuC,MAAR,CAAeI,KAAf,CAAqB,WAArB,CAAV;AACD,GAPc;AASfE,cAAY,YAAW;AACrBlC,cAAUX,QAAQuC,MAAR,CAAeI,KAAf,CAAqB,SAArB,CAAV;AACD,GAXc;AAafG,mBAAiB,YAAW;AAC1BnC,cAAUX,QAAQuC,MAAR,CAAeI,KAAf,CAAqB,SAArB,CAAV;AACD,GAfc;AAiBfI,MAAI,YAAW;AACb,QAAIpC,MAAJ,EAAY;AACVT,cAAQuC,MAAR,CAAeI,UAAf;AACA3C,cAAQuC,MAAR,CAAeK,eAAf;AACD,KAHD,MAGO;AACL9C,cAAQuC,MAAR,CAAeI,KAAf,CAAqB,IAArB;AACD;AACF;AAxBc,CAAjB,C,CA2BA;;;;;;;AAOAzC,QAAQ8C,IAAR,GAAe,UAASC,QAAT,EAAmB;AAChCC,UAAQC,GAAR;AACAF,WAASG,OAAT,CAAiB,UAASC,IAAT,EAAeC,CAAf,EAAkB;AACjC;AACA,QAAIC,MAAMtB,MAAM,aAAN,EAAqB,aAArB,IACNA,MAAM,eAAN,EAAuB,SAAvB,CADM,GAENA,MAAM,aAAN,EAAqB,QAArB,CAFJ,CAFiC,CAMjC;;AACA,QAAIuB,GAAJ;AACA,QAAI1B,MAAMuB,KAAKvB,GAAf;AACA,QAAI2B,OAAJ;;AACA,QAAI3B,IAAI2B,OAAR,EAAiB;AACfA,gBAAU3B,IAAI2B,OAAd;AACD,KAFD,MAEO,IAAI,OAAO3B,IAAI4B,OAAX,KAAuB,UAA3B,EAAuC;AAC5CD,gBAAU3B,IAAI4B,OAAJ,KAAgB,EAA1B;AACD,KAFM,MAEA;AACLD,gBAAU,EAAV;AACD;;AACD,QAAIE,QAAQ7B,IAAI6B,KAAJ,IAAaF,OAAzB;AACA,QAAIG,QAAQD,MAAME,OAAN,CAAcJ,OAAd,CAAZ;AACA,QAAIK,SAAShC,IAAIgC,MAAjB;AACA,QAAIC,WAAWjC,IAAIiC,QAAnB;AACA,QAAIC,SAAS,IAAb;;AAEA,QAAIJ,UAAU,CAAC,CAAf,EAAkB;AAChBJ,YAAMC,OAAN;AACD,KAFD,MAEO;AACLG,eAASH,QAAQQ,MAAjB;AACAT,YAAMG,MAAMO,KAAN,CAAY,CAAZ,EAAeN,KAAf,CAAN,CAFK,CAGL;;AACAD,cAAQA,MAAMO,KAAN,CAAYN,QAAQ,CAApB,CAAR;AACD,KA9BgC,CAgCjC;;;AACA,QAAI9B,IAAIqC,QAAR,EAAkB;AAChBX,YAAM,cAAcA,GAApB;AACD,KAnCgC,CAoCjC;;;AACA,QAAI1B,IAAIsC,QAAJ,KAAiB,KAAjB,IAA0BC,SAASP,MAAT,EAAiBC,QAAjB,CAA1B,IAAwDA,aAAahD,SAAzE,EAAoF;AAClFiD,eAAS,KAAT;;AACA,UAAI,EAAElE,MAAMwE,QAAN,CAAeR,MAAf,KAA0BhE,MAAMwE,QAAN,CAAeP,QAAf,CAA5B,CAAJ,EAA2D;AACzDjC,YAAIgC,MAAJ,GAAaA,SAAShE,MAAMyE,SAAN,CAAgBT,MAAhB,CAAtB;AACAhC,YAAIiC,QAAJ,GAAeA,WAAWjE,MAAMyE,SAAN,CAAgBR,QAAhB,CAA1B;AACD;;AAEDR,YAAMtB,MAAM,aAAN,EAAqB,eAArB,IAAwCA,MAAM,aAAN,EAAqB,QAArB,CAA9C;AACA,UAAIuC,QAAQf,QAAQe,KAAR,CAAc,oBAAd,CAAZ;AACAhB,YAAM,aAAavB,MAAM,eAAN,EAAuBuC,QAAQA,MAAM,CAAN,CAAR,GAAmBhB,GAA1C,CAAnB;;AAEA,UAAItD,QAAQc,WAAZ,EAAyB;AACvBwC,eAAOiB,WAAW3C,GAAX,EAAgBkC,MAAhB,CAAP;AACD,OAFD,MAEO;AACLR,eAAOkB,YAAY5C,GAAZ,EAAiBkC,MAAjB,CAAP;AACD;AACF,KArDgC,CAuDjC;;;AACAL,YAAQA,MAAMgB,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR;AAEAzB,YAAQC,GAAR,CAAYI,GAAZ,EAAkBD,IAAI,CAAtB,EAA0BD,KAAKuB,SAAL,EAA1B,EAA4CpB,GAA5C,EAAiDG,KAAjD;AACD,GA3DD;AA4DD,CA9DD,C,CAgEA;;;;;;;;;;;;AAYA,SAASvD,IAAT,CAAcyE,MAAd,EAAsB;AACpB,MAAIC,QAAQ,KAAKA,KAAL,GAAa;AAAEC,YAAQ,CAAV;AAAaC,WAAO,CAApB;AAAuBC,YAAQ,CAA/B;AAAkC7D,aAAS,CAA3C;AAA8C6B,cAAU;AAAxD,GAAzB;AACA,MAAIA,WAAW,KAAKA,QAAL,GAAgB,EAA/B;;AAEA,MAAI,CAAC4B,MAAL,EAAa;AACX;AACD;;AACD,OAAKA,MAAL,GAAcA,MAAd;AAEAA,SAAOC,KAAP,GAAeA,KAAf;AAEAD,SAAOK,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5BJ,UAAMK,KAAN,GAAc,IAAI9E,IAAJ,EAAd;AACD,GAFD;AAIAwE,SAAOK,EAAP,CAAU,OAAV,EAAmB,UAAS7D,KAAT,EAAgB;AACjCyD,UAAMC,MAAN,GAAeD,MAAMC,MAAN,IAAgB,CAA/B;AACA1D,UAAM+D,IAAN,IAAcN,MAAMC,MAAN,EAAd;AACD,GAHD;AAKAF,SAAOK,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC/BJ,UAAME,KAAN,GAAcF,MAAME,KAAN,IAAe,CAA7B;AACAF,UAAME,KAAN;AACD,GAHD;AAKAH,SAAOK,EAAP,CAAU,MAAV,EAAkB,UAAS7B,IAAT,EAAe;AAC/ByB,UAAMG,MAAN,GAAeH,MAAMG,MAAN,IAAgB,CAA/B;;AAEA,QAAI5B,KAAKgC,QAAL,GAAgBhC,KAAK5B,IAAL,EAApB,EAAiC;AAC/B4B,WAAKiC,KAAL,GAAa,MAAb;AACD,KAFD,MAEO,IAAIjC,KAAKgC,QAAL,GAAgBhC,KAAK5B,IAAL,KAAc,CAAlC,EAAqC;AAC1C4B,WAAKiC,KAAL,GAAa,QAAb;AACD,KAFM,MAEA;AACLjC,WAAKiC,KAAL,GAAa,MAAb;AACD;;AAEDR,UAAMG,MAAN;AACD,GAZD;AAcAJ,SAAOK,EAAP,CAAU,MAAV,EAAkB,UAAS7B,IAAT,EAAevB,GAAf,EAAoB;AACpCgD,UAAM7B,QAAN,GAAiB6B,MAAM7B,QAAN,IAAkB,CAAnC;AACA6B,UAAM7B,QAAN;AACAI,SAAKvB,GAAL,GAAWA,GAAX;AACAmB,aAASsC,IAAT,CAAclC,IAAd;AACD,GALD;AAOAwB,SAAOK,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1BJ,UAAMU,GAAN,GAAY,IAAInF,IAAJ,EAAZ;AACAyE,UAAMO,QAAN,GAAiB,IAAIhF,IAAJ,KAAayE,MAAMK,KAApC;AACD,GAHD;AAKAN,SAAOK,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC9BJ,UAAM1D,OAAN;AACD,GAFD;AAGD,C,CAED;;;;;;;AAMAhB,KAAKqF,SAAL,CAAeC,QAAf,GAA0B,YAAW;AACnC,MAAIZ,QAAQ,KAAKA,KAAjB;AACA,MAAIvB,GAAJ;AAEAL,UAAQC,GAAR,GAJmC,CAMnC;;AACAI,QAAMtB,MAAM,aAAN,EAAqB,GAArB,IACFA,MAAM,OAAN,EAAe,aAAf,CADE,GAEFA,MAAM,OAAN,EAAe,OAAf,CAFJ;AAIAiB,UAAQC,GAAR,CAAYI,GAAZ,EACEuB,MAAMG,MAAN,IAAgB,CADlB,EAEEpF,GAAGiF,MAAMO,QAAT,CAFF,EAXmC,CAenC;;AACA,MAAIP,MAAM1D,OAAV,EAAmB;AACjBmC,UAAMtB,MAAM,SAAN,EAAiB,GAAjB,IACFA,MAAM,SAAN,EAAiB,aAAjB,CADJ;AAGAiB,YAAQC,GAAR,CAAYI,GAAZ,EAAiBuB,MAAM1D,OAAvB;AACD,GArBkC,CAuBnC;;;AACA,MAAI0D,MAAM7B,QAAV,EAAoB;AAClBM,UAAMtB,MAAM,MAAN,EAAc,cAAd,CAAN;AAEAiB,YAAQC,GAAR,CAAYI,GAAZ,EAAiBuB,MAAM7B,QAAvB;AAEA7C,SAAK4C,IAAL,CAAU,KAAKC,QAAf;AACAC,YAAQC,GAAR;AACD;;AAEDD,UAAQC,GAAR;AACD,CAlCD,C,CAoCA;;;;;;;;;AAQA,SAASwC,GAAT,CAAaxD,GAAb,EAAkByD,GAAlB,EAAuB;AACrBzD,QAAMC,OAAOD,GAAP,CAAN;AACA,SAAO0D,MAAMD,MAAMzD,IAAI8B,MAAV,GAAmB,CAAzB,EAA4B6B,IAA5B,CAAiC,GAAjC,IAAwC3D,GAA/C;AACD,C,CAED;;;;;;;;;AAQA,SAASsC,UAAT,CAAoB3C,GAApB,EAAyBkC,MAAzB,EAAiC;AAC/B,MAAIR,MAAMuC,UAAUjE,GAAV,EAAe,gBAAf,EAAiCkC,MAAjC,CAAV,CAD+B,CAG/B;;AACA,MAAIgC,QAAQxC,IAAIyC,KAAJ,CAAU,IAAV,CAAZ;;AACA,MAAID,MAAM/B,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAI3B,QAAQF,OAAO4D,MAAM/B,MAAb,EAAqBA,MAAjC;AACAT,UAAMwC,MAAME,GAAN,CAAU,UAAS/D,GAAT,EAAcmB,CAAd,EAAiB;AAC/B,aAAOqC,IAAI,EAAErC,CAAN,EAAShB,KAAT,IAAkB,IAAlB,GAAyB,GAAzB,GAA+BH,GAAtC;AACD,KAFK,EAEH2D,IAFG,CAEE,IAFF,CAAN;AAGD,GAV8B,CAY/B;;;AACAtC,QAAM,OACFvB,MAAM,cAAN,EAAsB,QAAtB,CADE,GAEF,GAFE,GAGFA,MAAM,YAAN,EAAoB,UAApB,CAHE,GAIF,MAJE,GAKFuB,GALE,GAMF,IANJ,CAb+B,CAqB/B;;AACAA,QAAMA,IAAImB,OAAJ,CAAY,KAAZ,EAAmB,QAAnB,CAAN;AACA,SAAOnB,GAAP;AACD,C,CAED;;;;;;;;;AAQA,SAASkB,WAAT,CAAqB5C,GAArB,EAA0BkC,MAA1B,EAAkC;AAChC,MAAImC,SAAS,QAAb;;AACA,WAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,QAAIrC,MAAJ,EAAY;AACVqC,aAAOC,iBAAiBD,IAAjB,CAAP;AACD;;AACD,QAAIA,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,aAAOF,SAASI,WAAW,YAAX,EAAyBF,IAAzB,CAAhB;AACD;;AACD,QAAIA,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,aAAOF,SAASI,WAAW,cAAX,EAA2BF,IAA3B,CAAhB;AACD;;AACD,QAAIA,KAAK7B,KAAL,CAAW,MAAX,CAAJ,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,QAAI6B,KAAK7B,KAAL,CAAW,eAAX,CAAJ,EAAiC;AAC/B,aAAO,IAAP;AACD;;AACD,WAAO2B,SAASE,IAAhB;AACD;;AACD,WAASG,QAAT,CAAkBH,IAAlB,EAAwB;AACtB,WAAO,OAAOA,IAAP,KAAgB,WAAhB,IAA+BA,SAAS,IAA/C;AACD;;AACD,MAAI7C,MAAM5D,KAAK6G,WAAL,CAAiB,QAAjB,EAA2B3E,IAAIgC,MAA/B,EAAuChC,IAAIiC,QAA3C,CAAV;AACA,MAAIiC,QAAQxC,IAAIyC,KAAJ,CAAU,IAAV,EAAgBS,MAAhB,CAAuB,CAAvB,CAAZ;AACA,SAAO,aACHH,WAAW,YAAX,EAAyB,YAAzB,CADG,GACsC,GADtC,GAEHA,WAAW,cAAX,EAA2B,UAA3B,CAFG,GAGH,MAHG,GAIHP,MAAME,GAAN,CAAUE,OAAV,EAAmBO,MAAnB,CAA0BH,QAA1B,EAAoCV,IAApC,CAAyC,IAAzC,CAJJ;AAKD,C,CAED;;;;;;;;;;AASA,SAASC,SAAT,CAAmBjE,GAAnB,EAAwBI,IAAxB,EAA8B8B,MAA9B,EAAsC;AACpC,MAAIF,SAASE,SAASsC,iBAAiBxE,IAAIgC,MAArB,CAAT,GAAwChC,IAAIgC,MAAzD;AACA,MAAIC,WAAWC,SAASsC,iBAAiBxE,IAAIiC,QAArB,CAAT,GAA0CjC,IAAIiC,QAA7D;AACA,SAAOnE,KAAK,SAASsC,IAAd,EAAoB4B,MAApB,EAA4BC,QAA5B,EAAsCmC,GAAtC,CAA0C,UAAS/D,GAAT,EAAc;AAC7D,QAAIA,IAAIyE,KAAR,EAAe;AACb,aAAOL,WAAW,YAAX,EAAyBpE,IAAI0E,KAA7B,CAAP;AACD;;AACD,QAAI1E,IAAI2E,OAAR,EAAiB;AACf,aAAOP,WAAW,cAAX,EAA2BpE,IAAI0E,KAA/B,CAAP;AACD;;AACD,WAAO1E,IAAI0E,KAAX;AACD,GARM,EAQJf,IARI,CAQC,EARD,CAAP;AASD,C,CAED;;;;;;;;AAOA,SAASQ,gBAAT,CAA0BD,IAA1B,EAAgC;AAC9B,SAAOA,KAAK1B,OAAL,CAAa,KAAb,EAAoB,OAApB,EACJA,OADI,CACI,KADJ,EACW,MADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,QAFX,CAAP;AAGD,C,CAED;;;;;;;;;AAQA,SAAS4B,UAAT,CAAoBQ,IAApB,EAA0B5E,GAA1B,EAA+B;AAC7B,SAAOA,IAAI8D,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,UAAS/D,GAAT,EAAc;AACvC,WAAOF,MAAM8E,IAAN,EAAY5E,GAAZ,CAAP;AACD,GAFM,EAEJ2D,IAFI,CAEC,IAFD,CAAP;AAGD,C,CAED;;;;AAGA,IAAIkB,cAAcC,OAAOxB,SAAP,CAAiByB,QAAnC,C,CAEA;;;;;;;;;AAQA,SAAS7C,QAAT,CAAkB8C,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,SAAOJ,YAAYK,IAAZ,CAAiBF,CAAjB,MAAwBH,YAAYK,IAAZ,CAAiBD,CAAjB,CAA/B;AACD","file":"packages/practicalmeteor:mocha/lib/reporters/base.js.map","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar ms = require('../ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Save timer references to avoid Sinon interfering.\n * See: https://github.com/mochajs/mocha/issues/237\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {string} type\n * @param {string} str\n * @return {string}\n * @api private\n */\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures) {\n  console.log();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message) {\n      message = err.message;\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = stack.indexOf(message);\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function() {\n    stats.start = new Date();\n  });\n\n  runner.on('suite', function(suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function() {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n\n  runner.on('pending', function() {\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @api private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} Diff\n */\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between two strings.\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} The diff.\n */\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/\\@\\@/)) {\n      return null;\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n    + colorLines('diff added', '+ expected') + ' '\n    + colorLines('diff removed', '- actual')\n    + '\\n\\n'\n    + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @api private\n * @param {Error} err\n * @param {string} type\n * @param {boolean} escape\n * @return {string}\n */\nfunction errorDiff(err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @api private\n * @param {string} line\n * @return {string}\n */\nfunction escapeInvisibles(line) {\n  return line.replace(/\\t/g, '<tab>')\n    .replace(/\\r/g, '<CR>')\n    .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @api private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check that a / b have the same type.\n *\n * @api private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n"]},"hash":"eba9f312737a77b8aa3a1348545aa03b3b5e645b"}
