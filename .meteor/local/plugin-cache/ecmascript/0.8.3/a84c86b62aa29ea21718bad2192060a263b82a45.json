{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/integration/regression.js","filenameRelative":"packages/practicalmeteor:mocha/test/integration/regression.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/integration/regression.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/integration/regression.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"regression"},"ignored":false,"code":"var assert = require('assert');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar run = require('./helpers').runMocha;\n\ndescribe('regressions', function () {\n  this.timeout(1000);\n  it('issue-1327: should run all 3 specs exactly once', function (done) {\n    var args = [];\n    run('regression/issue-1327.js', args, function (err, res) {\n      var occurences = function (str) {\n        var pattern = new RegExp(str, 'g');\n        return (res.output.match(pattern) || []).length;\n      };\n\n      assert(!err);\n      assert.equal(occurences('testbody1'), 1);\n      assert.equal(occurences('testbody2'), 1);\n      assert.equal(occurences('testbody3'), 1);\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n  it('should not duplicate mocha.opts args in process.argv', function () {\n    var processArgv = process.argv.join('');\n    var mochaOpts = fs.readFileSync(path.join(__dirname, '..', 'mocha.opts'), 'utf-8').split(/[\\s]+/).join('');\n    assert.notEqual(processArgv.indexOf(mochaOpts), -1, 'process.argv missing mocha.opts');\n    assert.equal(processArgv.indexOf(mochaOpts), processArgv.lastIndexOf(mochaOpts), 'process.argv contains duplicated mocha.opts');\n  });\n  it('issue-1794: Can\\'t --require custom UI and use it', function (done) {\n    var simpleUiPath = path.join(__dirname, 'fixtures', 'regression', '1794', 'simple-ui.js');\n    var args = ['--require', simpleUiPath, '--ui', 'simple-ui'];\n    run('regression/1794/issue-1794.js', args, function (err, res) {\n      assert.equal(res.code, 0, 'Custom UI should be loaded');\n      done();\n    });\n  });\n  it('issue-1991: Declarations do not get cleaned up unless you set them to `null` - Memory Leak', function (done) {\n    // on a modern MBP takes ±5 seconds on node 4.0, but on older laptops with node 0.12 ±40 seconds.\n    // Could easily take longer on even weaker machines (Travis-CI containers for example).\n    this.timeout(120000);\n    run('regression/issue-1991.js', [], function (err, res) {\n      assert.equal(/process out of memory/.test(res.output), false, 'fixture\\'s process out of memory!');\n      assert.equal(res.code, 0, 'Runnable fn (it/before[Each]/after[Each]) references should be deleted to avoid memory leaks');\n      done();\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/integration/regression.js"],"names":["assert","require","fs","path","run","runMocha","describe","timeout","it","done","args","err","res","occurences","str","pattern","RegExp","output","match","length","equal","code","processArgv","process","argv","join","mochaOpts","readFileSync","__dirname","split","notEqual","indexOf","lastIndexOf","simpleUiPath","test"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AACA,IAAIC,KAASD,QAAQ,IAAR,CAAb;;AACA,IAAIE,OAASF,QAAQ,MAAR,CAAb;;AACA,IAAIG,MAASH,QAAQ,WAAR,EAAqBI,QAAlC;;AAEAC,SAAS,aAAT,EAAwB,YAAW;AACjC,OAAKC,OAAL,CAAa,IAAb;AAEAC,KAAG,iDAAH,EAAsD,UAASC,IAAT,EAAe;AACnE,QAAIC,OAAO,EAAX;AACAN,QAAI,0BAAJ,EAAgCM,IAAhC,EAAsC,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACvD,UAAIC,aAAa,UAASC,GAAT,EAAc;AAC7B,YAAIC,UAAU,IAAIC,MAAJ,CAAWF,GAAX,EAAgB,GAAhB,CAAd;AACA,eAAO,CAACF,IAAIK,MAAJ,CAAWC,KAAX,CAAiBH,OAAjB,KAA6B,EAA9B,EAAkCI,MAAzC;AACD,OAHD;;AAKAnB,aAAO,CAACW,GAAR;AACAX,aAAOoB,KAAP,CAAaP,WAAW,WAAX,CAAb,EAAsC,CAAtC;AACAb,aAAOoB,KAAP,CAAaP,WAAW,WAAX,CAAb,EAAsC,CAAtC;AACAb,aAAOoB,KAAP,CAAaP,WAAW,WAAX,CAAb,EAAsC,CAAtC;AAEAb,aAAOoB,KAAP,CAAaR,IAAIS,IAAjB,EAAuB,CAAvB;AACAZ;AACD,KAbD;AAcD,GAhBD;AAkBAD,KAAG,sDAAH,EAA2D,YAAW;AACpE,QAAIc,cAAcC,QAAQC,IAAR,CAAaC,IAAb,CAAkB,EAAlB,CAAlB;AACA,QAAIC,YAAYxB,GAAGyB,YAAH,CAAgBxB,KAAKsB,IAAL,CAAUG,SAAV,EAAqB,IAArB,EAA2B,YAA3B,CAAhB,EAA0D,OAA1D,EAAmEC,KAAnE,CAAyE,OAAzE,EAAkFJ,IAAlF,CAAuF,EAAvF,CAAhB;AACAzB,WAAO8B,QAAP,CAAgBR,YAAYS,OAAZ,CAAoBL,SAApB,CAAhB,EAAgD,CAAC,CAAjD,EAAoD,iCAApD;AACA1B,WAAOoB,KAAP,CAAaE,YAAYS,OAAZ,CAAoBL,SAApB,CAAb,EAA6CJ,YAAYU,WAAZ,CAAwBN,SAAxB,CAA7C,EAAiF,6CAAjF;AACD,GALD;AAOAlB,KAAG,mDAAH,EAAwD,UAASC,IAAT,EAAe;AACrE,QAAIwB,eAAe9B,KAAKsB,IAAL,CAAUG,SAAV,EAAqB,UAArB,EAAiC,YAAjC,EAA+C,MAA/C,EAAuD,cAAvD,CAAnB;AACA,QAAIlB,OAAO,CAAC,WAAD,EAAcuB,YAAd,EAA4B,MAA5B,EAAoC,WAApC,CAAX;AACA7B,QAAI,+BAAJ,EAAqCM,IAArC,EAA2C,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC5DZ,aAAOoB,KAAP,CAAaR,IAAIS,IAAjB,EAAuB,CAAvB,EAA0B,4BAA1B;AACAZ;AACD,KAHD;AAID,GAPD;AASAD,KAAG,4FAAH,EAAiG,UAASC,IAAT,EAAe;AAC9G;AACA;AACA,SAAKF,OAAL,CAAa,MAAb;AACAH,QAAI,0BAAJ,EAAgC,EAAhC,EAAoC,UAASO,GAAT,EAAcC,GAAd,EAAmB;AACrDZ,aAAOoB,KAAP,CAAa,wBAAwBc,IAAxB,CAA6BtB,IAAIK,MAAjC,CAAb,EAAuD,KAAvD,EAA8D,mCAA9D;AACAjB,aAAOoB,KAAP,CAAaR,IAAIS,IAAjB,EAAuB,CAAvB,EAA0B,8FAA1B;AACAZ;AACD,KAJD;AAKD,GATD;AAUD,CA/CD","file":"packages/practicalmeteor:mocha/test/integration/regression.js.map","sourcesContent":["var assert = require('assert');\nvar fs     = require('fs');\nvar path   = require('path');\nvar run    = require('./helpers').runMocha;\n\ndescribe('regressions', function() {\n  this.timeout(1000);\n\n  it('issue-1327: should run all 3 specs exactly once', function(done) {\n    var args = [];\n    run('regression/issue-1327.js', args, function(err, res) {\n      var occurences = function(str) {\n        var pattern = new RegExp(str, 'g');\n        return (res.output.match(pattern) || []).length;\n      };\n\n      assert(!err);\n      assert.equal(occurences('testbody1'), 1);\n      assert.equal(occurences('testbody2'), 1);\n      assert.equal(occurences('testbody3'), 1);\n\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should not duplicate mocha.opts args in process.argv', function() {\n    var processArgv = process.argv.join('');\n    var mochaOpts = fs.readFileSync(path.join(__dirname, '..', 'mocha.opts'), 'utf-8').split(/[\\s]+/).join('');\n    assert.notEqual(processArgv.indexOf(mochaOpts), -1, 'process.argv missing mocha.opts');\n    assert.equal(processArgv.indexOf(mochaOpts), processArgv.lastIndexOf(mochaOpts), 'process.argv contains duplicated mocha.opts');\n  });\n\n  it('issue-1794: Can\\'t --require custom UI and use it', function(done) {\n    var simpleUiPath = path.join(__dirname, 'fixtures', 'regression', '1794', 'simple-ui.js');\n    var args = ['--require', simpleUiPath, '--ui', 'simple-ui'];\n    run('regression/1794/issue-1794.js', args, function(err, res) {\n      assert.equal(res.code, 0, 'Custom UI should be loaded');\n      done();\n    });\n  });\n\n  it('issue-1991: Declarations do not get cleaned up unless you set them to `null` - Memory Leak', function(done) {\n    // on a modern MBP takes ±5 seconds on node 4.0, but on older laptops with node 0.12 ±40 seconds.\n    // Could easily take longer on even weaker machines (Travis-CI containers for example).\n    this.timeout(120000);\n    run('regression/issue-1991.js', [], function(err, res) {\n      assert.equal(/process out of memory/.test(res.output), false, 'fixture\\'s process out of memory!');\n      assert.equal(res.code, 0, 'Runnable fn (it/before[Each]/after[Each]) references should be deleted to avoid memory leaks');\n      done();\n    });\n  })\n});\n"]},"hash":"a84c86b62aa29ea21718bad2192060a263b82a45"}
