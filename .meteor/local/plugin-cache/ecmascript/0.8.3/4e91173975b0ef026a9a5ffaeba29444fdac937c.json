{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/http.meta.2.js","filenameRelative":"packages/practicalmeteor:mocha/test/http.meta.2.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/http.meta.2.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/http.meta.2.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"http.meta.2"},"ignored":false,"code":"var http = require('http');\n\nvar PORT = 8899;\nvar server = http.createServer(function (req, res) {\n  var accept = req.headers.accept || '',\n      json = ~accept.indexOf('json');\n\n  switch (req.url) {\n    case '/':\n      res.end('hello');\n      break;\n\n    case '/users':\n      if (json) {\n        res.end('[\"tobi\",\"loki\",\"jane\"]');\n      } else {\n        res.end('tobi, loki, jane');\n      }\n\n      break;\n  }\n});\n\nfunction get(url) {\n  var fields,\n      expected,\n      header = {};\n\n  function request(done) {\n    http.get({\n      path: url,\n      port: PORT,\n      headers: header\n    }, function (res) {\n      var buf = '';\n      res.should.have.property('statusCode', 200);\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        buf += chunk;\n      });\n      res.on('end', function () {\n        buf.should.equal(expected);\n        done();\n      });\n    });\n  }\n\n  return {\n    set: function (field, val) {\n      header[field] = val;\n      return this;\n    },\n    should: {\n      respond: function (body) {\n        fields = Object.keys(header).map(function (field) {\n          return field + ': ' + header[field];\n        }).join(', ');\n        expected = body;\n        describe('GET ' + url, function () {\n          this.timeout(500);\n\n          if (fields) {\n            describe('when given ' + fields, function () {\n              it('should respond with \"' + body + '\"', request);\n            });\n          } else {\n            it('should respond with \"' + body + '\"', request);\n          }\n        });\n      }\n    }\n  };\n}\n\ndescribe('http server', function () {\n  before(function (done) {\n    server.listen(PORT, done);\n  });\n  after(function () {\n    server.close();\n  });\n  get('/').should.respond('hello');\n  get('/users').should.respond('tobi, loki, jane');\n  get('/users').set('Accept', 'application/json').should.respond('[\"tobi\",\"loki\",\"jane\"]');\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/http.meta.2.js"],"names":["http","require","PORT","server","createServer","req","res","accept","headers","json","indexOf","url","end","get","fields","expected","header","request","done","path","port","buf","should","have","property","setEncoding","on","chunk","equal","set","field","val","respond","body","Object","keys","map","join","describe","timeout","it","before","listen","after","close"],"mappings":"AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,OAAO,IAAX;AAEA,IAAIC,SAASH,KAAKI,YAAL,CAAkB,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC/C,MAAIC,SAASF,IAAIG,OAAJ,CAAYD,MAAZ,IAAsB,EAAnC;AAAA,MACIE,OAAO,CAACF,OAAOG,OAAP,CAAe,MAAf,CADZ;;AAGA,UAAQL,IAAIM,GAAZ;AACE,SAAK,GAAL;AACEL,UAAIM,GAAJ,CAAQ,OAAR;AACA;;AACF,SAAK,QAAL;AACE,UAAIH,IAAJ,EAAU;AACRH,YAAIM,GAAJ,CAAQ,wBAAR;AACD,OAFD,MAEO;AACLN,YAAIM,GAAJ,CAAQ,kBAAR;AACD;;AACD;AAVJ;AAYD,CAhBY,CAAb;;AAkBA,SAASC,GAAT,CAAaF,GAAb,EAAkB;AAChB,MAAIG,MAAJ;AAAA,MACIC,QADJ;AAAA,MAEIC,SAAS,EAFb;;AAIA,WAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrBlB,SAAKa,GAAL,CAAS;AAAEM,YAAMR,GAAR;AAAaS,YAAMlB,IAAnB;AAAyBM,eAASQ;AAAlC,KAAT,EAAqD,UAASV,GAAT,EAAa;AAChE,UAAIe,MAAM,EAAV;AACAf,UAAIgB,MAAJ,CAAWC,IAAX,CAAgBC,QAAhB,CAAyB,YAAzB,EAAuC,GAAvC;AACAlB,UAAImB,WAAJ,CAAgB,MAAhB;AACAnB,UAAIoB,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAe;AAAEN,eAAOM,KAAP;AAAc,OAA9C;AACArB,UAAIoB,EAAJ,CAAO,KAAP,EAAc,YAAU;AACtBL,YAAIC,MAAJ,CAAWM,KAAX,CAAiBb,QAAjB;AACAG;AACD,OAHD;AAID,KATD;AAUD;;AAED,SAAO;AACLW,SAAK,UAASC,KAAT,EAAgBC,GAAhB,EAAoB;AACvBf,aAAOc,KAAP,IAAgBC,GAAhB;AACA,aAAO,IAAP;AACD,KAJI;AAMLT,YAAQ;AACNU,eAAS,UAASC,IAAT,EAAc;AACrBnB,iBAASoB,OAAOC,IAAP,CAAYnB,MAAZ,EAAoBoB,GAApB,CAAwB,UAASN,KAAT,EAAe;AAC9C,iBAAOA,QAAQ,IAAR,GAAed,OAAOc,KAAP,CAAtB;AACD,SAFQ,EAENO,IAFM,CAED,IAFC,CAAT;AAIAtB,mBAAWkB,IAAX;AACAK,iBAAS,SAAS3B,GAAlB,EAAuB,YAAU;AAC/B,eAAK4B,OAAL,CAAa,GAAb;;AACA,cAAIzB,MAAJ,EAAY;AACVwB,qBAAS,gBAAgBxB,MAAzB,EAAiC,YAAU;AACzC0B,iBAAG,0BAA0BP,IAA1B,GAAiC,GAApC,EAAyChB,OAAzC;AACD,aAFD;AAGD,WAJD,MAIO;AACLuB,eAAG,0BAA0BP,IAA1B,GAAiC,GAApC,EAAyChB,OAAzC;AACD;AACF,SATD;AAUD;AAjBK;AANH,GAAP;AA0BD;;AAEDqB,SAAS,aAAT,EAAwB,YAAU;AAEhCG,SAAO,UAASvB,IAAT,EAAe;AACpBf,WAAOuC,MAAP,CAAcxC,IAAd,EAAoBgB,IAApB;AACD,GAFD;AAIAyB,QAAM,YAAW;AACfxC,WAAOyC,KAAP;AACD,GAFD;AAIA/B,MAAI,GAAJ,EACGS,MADH,CAEGU,OAFH,CAEW,OAFX;AAIAnB,MAAI,QAAJ,EACGS,MADH,CAEGU,OAFH,CAEW,kBAFX;AAIAnB,MAAI,QAAJ,EACGgB,GADH,CACO,QADP,EACiB,kBADjB,EAEGP,MAFH,CAGGU,OAHH,CAGW,wBAHX;AAID,CAtBD","file":"packages/practicalmeteor:mocha/test/http.meta.2.js.map","sourcesContent":["var http = require('http');\n\nvar PORT = 8899;\n\nvar server = http.createServer(function(req, res){\n  var accept = req.headers.accept || ''\n    , json = ~accept.indexOf('json');\n\n  switch (req.url) {\n    case '/':\n      res.end('hello');\n      break;\n    case '/users':\n      if (json) {\n        res.end('[\"tobi\",\"loki\",\"jane\"]');\n      } else {\n        res.end('tobi, loki, jane');\n      }\n      break;\n  }\n})\n\nfunction get(url) {\n  var fields\n    , expected\n    , header = {};\n\n  function request(done) {\n    http.get({ path: url, port: PORT, headers: header }, function(res){\n      var buf = '';\n      res.should.have.property('statusCode', 200);\n      res.setEncoding('utf8');\n      res.on('data', function(chunk){ buf += chunk });\n      res.on('end', function(){\n        buf.should.equal(expected);\n        done();\n      });\n    })\n  }\n\n  return {\n    set: function(field, val){\n      header[field] = val;\n      return this;\n    },\n\n    should: {\n      respond: function(body){\n        fields = Object.keys(header).map(function(field){\n          return field + ': ' + header[field];\n        }).join(', ');\n\n        expected = body;\n        describe('GET ' + url, function(){\n          this.timeout(500);\n          if (fields) {\n            describe('when given ' + fields, function(){\n              it('should respond with \"' + body + '\"', request);\n            });\n          } else {\n            it('should respond with \"' + body + '\"', request);\n          }\n        });\n      }\n    }\n  };\n}\n\ndescribe('http server', function(){\n\n  before(function(done) {\n    server.listen(PORT, done);\n  });\n\n  after(function() {\n    server.close();\n  });\n\n  get('/')\n    .should\n    .respond('hello')\n\n  get('/users')\n    .should\n    .respond('tobi, loki, jane')\n\n  get('/users')\n    .set('Accept', 'application/json')\n    .should\n    .respond('[\"tobi\",\"loki\",\"jane\"]')\n})\n"]},"hash":"4e91173975b0ef026a9a5ffaeba29444fdac937c"}
