{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]}],"exports":{"exported":["Notes"],"specifiers":[{"kind":"local","local":"Notes","exported":"Notes"}]}}},"options":{"filename":"imports/api/notes.js","filenameRelative":"imports/api/notes.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/notes.js.map","sourceFileName":"imports/api/notes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notes"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Notes: function () {\n    return Notes;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar moment = void 0;\nmodule.watch(require(\"moment\"), {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 2);\nvar SimpleSchema = void 0;\nmodule.watch(require(\"simpl-schema\"), {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 3);\nvar Notes = new Mongo.Collection('notes');\nMeteor.methods({\n  'notes.insert': function () {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    return Notes.insert({\n      title: '',\n      body: '',\n      userId: this.userId,\n      updatedAt: moment().valueOf()\n    });\n  },\n  'notes.remove': function (_id) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      }\n    }).validate({\n      _id: _id\n    }); //ensures that note._id's userId is equal to the current userId\n\n    Notes.remove({\n      _id: _id,\n      userId: this.userId\n    });\n  },\n  'notes.update': function (_id, updates) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      },\n      title: {\n        type: String,\n        optional: true\n      },\n      body: {\n        type: String,\n        optional: true\n      }\n    }).validate((0, _extends3.default)({\n      _id: _id\n    }, updates));\n    Notes.update({\n      _id: _id,\n      userId: this.userId\n    }, {\n      $set: (0, _extends3.default)({\n        updatedAt: moment().valueOf()\n      }, updates)\n    });\n  }\n});","map":{"version":3,"sources":["imports/api/notes.js"],"names":["module","export","Notes","Mongo","watch","require","v","Meteor","moment","SimpleSchema","Collection","methods","userId","Error","insert","title","body","updatedAt","valueOf","_id","type","String","min","validate","remove","updates","optional","update","$set"],"mappings":";;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAiC,IAAIC,cAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,OAAD,YAAOG,CAAP,EAAS;AAACH,YAAMG,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,eAAJ;AAAWP,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,QAAD,YAAQD,CAAR,EAAU;AAACC,aAAOD,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,eAAJ;AAAWR,OAAOI,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAAA,uBAASC,CAAT,EAAW;AAACE,aAAOF,CAAP;AAAS;AAArB,CAA/B,EAAsD,CAAtD;AAAyD,IAAIG,qBAAJ;AAAiBT,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAA,uBAASC,CAAT,EAAW;AAACG,mBAAaH,CAAb;AAAe;AAA3B,CAArC,EAAkE,CAAlE;AAK/P,IAAMJ,QAAQ,IAAIC,MAAMO,UAAV,CAAqB,OAArB,CAAd;AAEPH,OAAOI,OAAP,CAAe;AACb,gBADa,cACI;AACf,QAAI,CAAC,KAAKC,MAAV,EAAkB;AAChB,YAAM,IAAIL,OAAOM,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,WAAOX,MAAMY,MAAN,CAAa;AAClBC,aAAO,EADW;AAElBC,YAAM,EAFY;AAGlBJ,cAAQ,KAAKA,MAHK;AAIlBK,iBAAWT,SAASU,OAAT;AAJO,KAAb,CAAP;AAMD,GAZY;AAab,gBAba,YAaEC,GAbF,EAaO;AAClB,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAChB,YAAM,IAAIL,OAAOM,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,QAAIJ,YAAJ,CAAiB;AACfU,WAAK;AACHC,cAAMC,MADH;AAEHC,aAAK;AAFF;AADU,KAAjB,EAKGC,QALH,CAKY;AAAEJ;AAAF,KALZ,EALkB,CAWlB;;AACAjB,UAAMsB,MAAN,CAAa;AAAEL,cAAF;AAAOP,cAAQ,KAAKA;AAApB,KAAb;AACD,GA1BY;AA2Bb,gBA3Ba,YA2BEO,GA3BF,EA2BOM,OA3BP,EA2BgB;AAC3B,QAAI,CAAC,KAAKb,MAAV,EAAkB;AAChB,YAAM,IAAIL,OAAOM,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,QAAIJ,YAAJ,CAAiB;AACfU,WAAK;AACHC,cAAMC,MADH;AAEHC,aAAK;AAFF,OADU;AAKfP,aAAO;AACLK,cAAMC,MADD;AAELK,kBAAU;AAFL,OALQ;AASfV,YAAM;AACJI,cAAMC,MADF;AAEJK,kBAAU;AAFN;AATS,KAAjB,EAaGH,QAbH;AAcEJ;AAdF,OAeKM,OAfL;AAkBAvB,UAAMyB,MAAN,CAAa;AACXR,cADW;AAEXP,cAAQ,KAAKA;AAFF,KAAb,EAGG;AACDgB;AACEX,mBAAWT,SAASU,OAAT;AADb,SAEKO,OAFL;AADC,KAHH;AASD;AA3DY,CAAf","file":"imports/api/notes.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\nimport SimpleSchema from 'simpl-schema';\n\nexport const Notes = new Mongo.Collection('notes');\n\nMeteor.methods({\n  'notes.insert'() {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    return Notes.insert({\n      title: '',\n      body: '',\n      userId: this.userId,\n      updatedAt: moment().valueOf()\n    });\n  },\n  'notes.remove'(_id) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      }\n    }).validate({ _id });\n    //ensures that note._id's userId is equal to the current userId\n    Notes.remove({ _id, userId: this.userId });\n  },\n  'notes.update'(_id, updates) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    new SimpleSchema({\n      _id: {\n        type: String,\n        min: 1\n      },\n      title: {\n        type: String,\n        optional: true\n      },\n      body: {\n        type: String,\n        optional: true\n      }\n    }).validate({\n      _id,\n      ...updates\n    });\n\n    Notes.update({\n      _id,\n      userId: this.userId\n    }, {\n      $set: {\n        updatedAt: moment().valueOf(),\n        ...updates\n      }\n    });\n  }\n});\n"]},"hash":"2a7177c122349c0956df3a82decdc829487c8d87"}
