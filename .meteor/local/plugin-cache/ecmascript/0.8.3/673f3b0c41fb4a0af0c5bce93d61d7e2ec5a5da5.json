{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"expect","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"expect"}]},{"source":"enzyme","imported":["mount"],"specifiers":[{"kind":"named","imported":"mount","local":"mount"}]},{"source":"./Editor","imported":["Editor"],"specifiers":[{"kind":"named","imported":"Editor","local":"Editor"}]},{"source":"../fixtures/fixtures","imported":["notes"],"specifiers":[{"kind":"named","imported":"notes","local":"notes"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/ui/Editor.test.js","filenameRelative":"imports/ui/Editor.test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/ui/Editor.test.js.map","sourceFileName":"imports/ui/Editor.test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Editor.test"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n\tMeteor: function (v) {\n\t\tMeteor = v;\n\t}\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n\t\"default\": function (v) {\n\t\tReact = v;\n\t}\n}, 1);\nvar expect = void 0;\nmodule.watch(require(\"expect\"), {\n\t\"default\": function (v) {\n\t\texpect = v;\n\t}\n}, 2);\nvar mount = void 0;\nmodule.watch(require(\"enzyme\"), {\n\tmount: function (v) {\n\t\tmount = v;\n\t}\n}, 3);\nvar Editor = void 0;\nmodule.watch(require(\"./Editor\"), {\n\tEditor: function (v) {\n\t\tEditor = v;\n\t}\n}, 4);\nvar notes = void 0;\nmodule.watch(require(\"../fixtures/fixtures\"), {\n\tnotes: function (v) {\n\t\tnotes = v;\n\t}\n}, 5);\n\nif (Meteor.isClient) {\n\tdescribe('Editor', function () {\n\t\tvar browserHistory = void 0;\n\t\tvar call = void 0;\n\t\tbeforeEach(function () {\n\t\t\tcall = expect.createSpy();\n\t\t\tbrowserHistory = {\n\t\t\t\tpush: expect.createSpy()\n\t\t\t};\n\t\t});\n\t\tit('should render pick note message', function () {\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call\n\t\t\t}));\n\t\t\texpect(wrapper.find('p').text()).toBe('Pick or create a note to get started.');\n\t\t});\n\t\tit('should render not found message', function () {\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call,\n\t\t\t\tselectedNoteId: notes[0]._id\n\t\t\t}));\n\t\t\texpect(wrapper.find('p').text()).toBe('Note not found.');\n\t\t});\n\t\tit('should remove note', function () {\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call,\n\t\t\t\tselectedNoteId: notes[0]._id,\n\t\t\t\tnote: notes[0]\n\t\t\t}));\n\t\t\twrapper.find('button').simulate('click');\n\t\t\texpect(browserHistory.push).toHaveBeenCalledWith('/dashboard');\n\t\t\texpect(call).toHaveBeenCalledWith('notes.remove', notes[0]._id);\n\t\t});\n\t\tit('should update the note body on textarea change', function () {\n\t\t\tvar newBody = 'This is my new body text';\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call,\n\t\t\t\tselectedNoteId: notes[0]._id,\n\t\t\t\tnote: notes[0]\n\t\t\t})); //'change' uses a change event defined above passing in 'value'\n\n\t\t\twrapper.find('textarea').simulate('change', {\n\t\t\t\ttarget: {\n\t\t\t\t\tvalue: newBody\n\t\t\t\t}\n\t\t\t});\n\t\t\texpect(wrapper.state('body')).toBe(newBody);\n\t\t\texpect(call).toHaveBeenCalledWith('notes.update', notes[0]._id, {\n\t\t\t\tbody: newBody\n\t\t\t});\n\t\t});\n\t\tit('should update the note title on input change', function () {\n\t\t\tvar newTitle = 'This is my new title text';\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call,\n\t\t\t\tselectedNoteId: notes[0]._id,\n\t\t\t\tnote: notes[0]\n\t\t\t}));\n\t\t\twrapper.find('input').simulate('change', {\n\t\t\t\ttarget: {\n\t\t\t\t\tvalue: newTitle\n\t\t\t\t}\n\t\t\t});\n\t\t\texpect(wrapper.state('title')).toBe(newTitle);\n\t\t\texpect(call).toHaveBeenCalledWith('notes.update', notes[0]._id, {\n\t\t\t\ttitle: newTitle\n\t\t\t});\n\t\t});\n\t\tit('should set state for new note', function () {\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call\n\t\t\t}));\n\t\t\twrapper.setProps({\n\t\t\t\tselectedNoteId: notes[0]._id,\n\t\t\t\tnote: notes[0]\n\t\t\t});\n\t\t\texpect(wrapper.state('title')).toBe(notes[0].title);\n\t\t\texpect(wrapper.state('body')).toBe(notes[0].body);\n\t\t});\n\t\tit('should not set state if note prop not provided', function () {\n\t\t\tvar wrapper = mount(React.createElement(Editor, {\n\t\t\t\tbrowserHistory: browserHistory,\n\t\t\t\tcall: call\n\t\t\t}));\n\t\t\twrapper.setProps({\n\t\t\t\tselectedNoteId: notes[0]._id\n\t\t\t});\n\t\t\texpect(wrapper.state('title')).toBe('');\n\t\t\texpect(wrapper.state('body')).toBe('');\n\t\t});\n\t});\n}","map":{"version":3,"sources":["imports/ui/Editor.test.js"],"names":["Meteor","module","watch","require","v","React","expect","mount","Editor","notes","isClient","describe","browserHistory","call","beforeEach","createSpy","push","it","wrapper","find","text","toBe","_id","simulate","toHaveBeenCalledWith","newBody","target","value","state","body","newTitle","title","setProps","selectedNoteId","note"],"mappings":"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","file":"imports/ui/Editor.test.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport expect from 'expect';\nimport { mount } from 'enzyme';\n\nimport { Editor } from './Editor';\nimport { notes } from '../fixtures/fixtures';\n\nif (Meteor.isClient) {\n\tdescribe('Editor', function () {\n\t\tlet browserHistory;\n\t\tlet call;\n\n\t\tbeforeEach(function () {\n\t\t\tcall = expect.createSpy();\n\t\t\tbrowserHistory = {\n\t\t\t\tpush: expect.createSpy()\n\t\t\t};\n\t\t});\n\n\t\tit('should render pick note message', function () {\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call}/>);\n\t\t\texpect(wrapper.find('p').text()).toBe('Pick or create a note to get started.');\n\t\t});\n\n\t\tit('should render not found message', function () {\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call} selectedNoteId={notes[0]._id}/>);\n\t\t\texpect(wrapper.find('p').text()).toBe('Note not found.');\n\t\t});\n\n\t\tit('should remove note', function () {\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call} selectedNoteId={notes[0]._id} note={notes[0]}/>);\n\n\t\t\twrapper.find('button').simulate('click');\n\n\t\t\texpect(browserHistory.push).toHaveBeenCalledWith('/dashboard');\n\t\t\texpect(call).toHaveBeenCalledWith('notes.remove', notes[0]._id);\n\t\t});\n\n\t\tit('should update the note body on textarea change', function () {\n\t\t\tconst newBody = 'This is my new body text';\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call} selectedNoteId={notes[0]._id} note={notes[0]}/>);\n      //'change' uses a change event defined above passing in 'value'\n\t\t\twrapper.find('textarea').simulate('change', {\n\t\t\t\ttarget: {\n\t\t\t\t\tvalue: newBody\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texpect(wrapper.state('body')).toBe(newBody);\n\t\t\texpect(call).toHaveBeenCalledWith('notes.update', notes[0]._id, { body: newBody });\n\t\t});\n\n\t\tit('should update the note title on input change', function () {\n\t\t\tconst newTitle = 'This is my new title text';\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call} selectedNoteId={notes[0]._id} note={notes[0]}/>);\n\n\t\t\twrapper.find('input').simulate('change', {\n\t\t\t\ttarget: {\n\t\t\t\t\tvalue: newTitle\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texpect(wrapper.state('title')).toBe(newTitle);\n\t\t\texpect(call).toHaveBeenCalledWith('notes.update', notes[0]._id, { title: newTitle });\n\t\t});\n\n\t\tit('should set state for new note', function () {\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call}/>);\n\n\t\t\twrapper.setProps({\n\t\t\t\tselectedNoteId: notes[0]._id,\n\t\t\t\tnote: notes[0]\n\t\t\t});\n\n\t\t\texpect(wrapper.state('title')).toBe(notes[0].title);\n\t\t\texpect(wrapper.state('body')).toBe(notes[0].body);\n\t\t});\n\n\t\tit('should not set state if note prop not provided', function () {\n\t\t\tconst wrapper = mount(<Editor browserHistory={browserHistory} call={call}/>);\n\n\t\t\twrapper.setProps({\n\t\t\t\tselectedNoteId: notes[0]._id\n\t\t\t});\n\n\t\t\texpect(wrapper.state('title')).toBe('');\n\t\t\texpect(wrapper.state('body')).toBe('');\n\t\t});\n\n\t});\n}\n"]},"hash":"673f3b0c41fb4a0af0c5bce93d61d7e2ec5a5da5"}
