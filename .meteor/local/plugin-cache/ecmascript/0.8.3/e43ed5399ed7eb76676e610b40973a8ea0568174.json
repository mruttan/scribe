{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/acceptance/globals.js","filenameRelative":"packages/practicalmeteor:mocha/test/acceptance/globals.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/acceptance/globals.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/acceptance/globals.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"globals"},"ignored":false,"code":"describe('global leaks', function () {\n  before(function () {// uncomment to test\n    // foo = 'hey';\n    // bar = 'hey';\n  });\n  beforeEach(function () {// uncomment to test\n    // foo = 'bar'\n  });\n  it('should cause tests to fail', function () {// uncomment to test\n    // foo = 'bar';\n    // bar = 'baz';\n    // baz = 'raz';\n  });\n  it('should pass when accepted', function () {\n    global.okGlobalA = 1;\n    global.okGlobalB = 1;\n    global.okGlobalC = 1;\n  });\n  it('should pass with wildcard', function () {\n    global.callback123 = 'foo';\n    global.callback345 = 'bar';\n  });\n  it('should pass when prefixed \"mocha-\"', function () {\n    // Opera and IE do this for HTML element IDs anyway\n    // but to sure we can assert this in any browser, simulate it.\n    global['mocha-example'] = {\n      nodeType: 1\n    };\n  });\n  afterEach(function () {// uncomment to test\n    // foo = 'bar'\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/acceptance/globals.js"],"names":["describe","before","beforeEach","it","global","okGlobalA","okGlobalB","okGlobalC","callback123","callback345","nodeType","afterEach"],"mappings":"AAAAA,SAAS,cAAT,EAAyB,YAAU;AACjCC,SAAO,YAAU,CACf;AACA;AACA;AACD,GAJD;AAMAC,aAAW,YAAU,CACnB;AACA;AACD,GAHD;AAKAC,KAAG,4BAAH,EAAiC,YAAU,CACzC;AACA;AACA;AACA;AACD,GALD;AAOAA,KAAG,2BAAH,EAAgC,YAAU;AACxCC,WAAOC,SAAP,GAAmB,CAAnB;AACAD,WAAOE,SAAP,GAAmB,CAAnB;AACAF,WAAOG,SAAP,GAAmB,CAAnB;AACD,GAJD;AAMAJ,KAAG,2BAAH,EAAgC,YAAU;AACxCC,WAAOI,WAAP,GAAqB,KAArB;AACAJ,WAAOK,WAAP,GAAqB,KAArB;AACD,GAHD;AAKAN,KAAG,oCAAH,EAAyC,YAAU;AACjD;AACA;AACAC,WAAO,eAAP,IAA0B;AAAEM,gBAAU;AAAZ,KAA1B;AACD,GAJD;AAMAC,YAAU,YAAU,CAClB;AACA;AACD,GAHD;AAID,CAxCD","file":"packages/practicalmeteor:mocha/test/acceptance/globals.js.map","sourcesContent":["describe('global leaks', function(){\n  before(function(){\n    // uncomment to test\n    // foo = 'hey';\n    // bar = 'hey';\n  })\n\n  beforeEach(function(){\n    // uncomment to test\n    // foo = 'bar'\n  });\n\n  it('should cause tests to fail', function(){\n    // uncomment to test\n    // foo = 'bar';\n    // bar = 'baz';\n    // baz = 'raz';\n  });\n\n  it('should pass when accepted', function(){\n    global.okGlobalA = 1;\n    global.okGlobalB = 1;\n    global.okGlobalC = 1;\n  })\n\n  it('should pass with wildcard', function(){\n    global.callback123 = 'foo';\n    global.callback345 = 'bar';\n  });\n\n  it('should pass when prefixed \"mocha-\"', function(){\n    // Opera and IE do this for HTML element IDs anyway\n    // but to sure we can assert this in any browser, simulate it.\n    global['mocha-example'] = { nodeType: 1 };\n  });\n\n  afterEach(function(){\n    // uncomment to test\n    // foo = 'bar'\n  });\n});\n"]},"hash":"e43ed5399ed7eb76676e610b40973a8ea0568174"}
