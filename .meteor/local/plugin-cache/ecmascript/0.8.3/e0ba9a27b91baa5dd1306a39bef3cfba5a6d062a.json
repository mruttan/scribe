{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"expect","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"expect"}]},{"source":"enzyme","imported":["mount"],"specifiers":[{"kind":"named","imported":"mount","local":"mount"}]},{"source":"./Signup","imported":["Signup"],"specifiers":[{"kind":"named","imported":"Signup","local":"Signup"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/ui/Signup.test.js","filenameRelative":"imports/ui/Signup.test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/ui/Signup.test.js.map","sourceFileName":"imports/ui/Signup.test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Signup.test"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n\t\tMeteor: function (v) {\n\t\t\t\tMeteor = v;\n\t\t}\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n\t\t\"default\": function (v) {\n\t\t\t\tReact = v;\n\t\t}\n}, 1);\nvar expect = void 0;\nmodule.watch(require(\"expect\"), {\n\t\t\"default\": function (v) {\n\t\t\t\texpect = v;\n\t\t}\n}, 2);\nvar mount = void 0;\nmodule.watch(require(\"enzyme\"), {\n\t\tmount: function (v) {\n\t\t\t\tmount = v;\n\t\t}\n}, 3);\nvar Signup = void 0;\nmodule.watch(require(\"./Signup\"), {\n\t\tSignup: function (v) {\n\t\t\t\tSignup = v;\n\t\t}\n}, 4);\n\nif (Meteor.isClient) {\n\t\tdescribe('Signup', function () {\n\t\t\t\tit('should show error messages', function () {\n\t\t\t\t\t\tvar error = 'This is not working';\n\t\t\t\t\t\tvar wrapper = mount(React.createElement(Signup, {\n\t\t\t\t\t\t\t\tcreateUser: function () {}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\twrapper.setState({\n\t\t\t\t\t\t\t\terror: error\n\t\t\t\t\t\t});\n\t\t\t\t\t\texpect(wrapper.find('p').text()).toBe(error);\n\t\t\t\t\t\twrapper.setState({\n\t\t\t\t\t\t\t\terror: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t\texpect(wrapper.find('p').length).toBe(0);\n\t\t\t\t});\n\t\t\t\tit('should call createUser with the form data', function () {\n\t\t\t\t\t\tvar email = 'matt@test.com';\n\t\t\t\t\t\tvar password = 'password123';\n\t\t\t\t\t\tvar spy = expect.createSpy();\n\t\t\t\t\t\tvar wrapper = mount(React.createElement(Signup, {\n\t\t\t\t\t\t\t\tcreateUser: spy\n\t\t\t\t\t\t}));\n\t\t\t\t\t\twrapper.ref('email').node.value = email;\n\t\t\t\t\t\twrapper.ref('password').node.value = password;\n\t\t\t\t\t\twrapper.find('form').simulate('submit'); //place debugger after spy gets called and call spy in devtools to see\n\t\t\t\t\t\t//everything spy is made up of, it is an object with arrays of data\n\n\t\t\t\t\t\texpect(spy.calls[0].arguments[0]).toEqual({\n\t\t\t\t\t\t\t\temail: email,\n\t\t\t\t\t\t\t\tpassword: password\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tit('should set error if short password', function () {\n\t\t\t\t\t\tvar email = 'matt@test.com';\n\t\t\t\t\t\tvar password = '123                    ';\n\t\t\t\t\t\tvar spy = expect.createSpy();\n\t\t\t\t\t\tvar wrapper = mount(React.createElement(Signup, {\n\t\t\t\t\t\t\t\tcreateUser: spy\n\t\t\t\t\t\t}));\n\t\t\t\t\t\twrapper.ref('email').node.value = email;\n\t\t\t\t\t\twrapper.ref('password').node.value = password;\n\t\t\t\t\t\twrapper.find('form').simulate('submit');\n\t\t\t\t\t\texpect(wrapper.state('error').length).toBeGreaterThan(0);\n\t\t\t\t});\n\t\t\t\tit('should set createUser callback errors', function () {\n\t\t\t\t\t\tvar password = 'password123!';\n\t\t\t\t\t\tvar reason = 'This is why it failed';\n\t\t\t\t\t\tvar spy = expect.createSpy();\n\t\t\t\t\t\tvar wrapper = mount(React.createElement(Signup, {\n\t\t\t\t\t\t\t\tcreateUser: spy\n\t\t\t\t\t\t}));\n\t\t\t\t\t\twrapper.ref('password').node.value = password;\n\t\t\t\t\t\twrapper.find('form').simulate('submit');\n\t\t\t\t\t\tspy.calls[0].arguments[1]({\n\t\t\t\t\t\t\t\treason: reason\n\t\t\t\t\t\t});\n\t\t\t\t\t\texpect(wrapper.state('error')).toBe(reason);\n\t\t\t\t\t\tspy.calls[0].arguments[1]();\n\t\t\t\t\t\texpect(wrapper.state('error').length).toBe(0);\n\t\t\t\t});\n\t\t});\n}","map":{"version":3,"sources":["imports/ui/Signup.test.js"],"names":["Meteor","module","watch","require","v","React","expect","mount","Signup","isClient","describe","it","error","wrapper","setState","find","text","toBe","length","email","password","spy","createSpy","ref","node","value","simulate","calls","arguments","toEqual","state","toBeGreaterThan","reason"],"mappings":"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","file":"imports/ui/Signup.test.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport expect from 'expect';\nimport { mount } from 'enzyme';\n\nimport { Signup } from './Signup';\n\nif (Meteor.isClient) {\n  describe('Signup', function () {\n\n    it('should show error messages', function () {\n      const error = 'This is not working';\n      const wrapper = mount( <Signup createUser={() => {}}/> );\n\n      wrapper.setState({ error });\n      expect(wrapper.find('p').text()).toBe(error);\n\n      wrapper.setState({ error: '' });\n      expect(wrapper.find('p').length).toBe(0);\n    });\n\n    it('should call createUser with the form data', function () {\n\t\t\tconst email = 'matt@test.com';\n\t\t\tconst password = 'password123'\n\t\t\tconst spy = expect.createSpy();\n\t\t\tconst wrapper = mount(<Signup createUser={spy}/>);\n\n\t\t\twrapper.ref('email').node.value = email;\n\t\t\twrapper.ref('password').node.value = password;\n\t\t\twrapper.find('form').simulate('submit');\n\n      //place debugger after spy gets called and call spy in devtools to see\n      //everything spy is made up of, it is an object with arrays of data\n\t\t\texpect(spy.calls[0].arguments[0]).toEqual({ email, password });\n\t\t});\n\n    it('should set error if short password',  function () {\n\t\t\tconst email = 'matt@test.com';\n\t\t\tconst password = '123                    ';\n\t\t\tconst spy = expect.createSpy();\n\t\t\tconst wrapper = mount(<Signup createUser={spy}/>);\n\n\t\t\twrapper.ref('email').node.value = email;\n\t\t\twrapper.ref('password').node.value = password;\n\t\t\twrapper.find('form').simulate('submit');\n\n\t\t\texpect(wrapper.state('error').length).toBeGreaterThan(0);\n\t\t});\n\n\n    it('should set createUser callback errors', function () {\n\t\t\tconst password = 'password123!';\n\t\t\tconst reason = 'This is why it failed';\n\t\t\tconst spy = expect.createSpy();\n\t\t\tconst wrapper = mount(<Signup createUser={spy}/>);\n\n\t\t\twrapper.ref('password').node.value = password;\n\t\t\twrapper.find('form').simulate('submit');\n\n\t\t\tspy.calls[0].arguments[1]({ reason });\n\t\t\texpect(wrapper.state('error')).toBe(reason);\n\n\t\t\tspy.calls[0].arguments[1]();\n\t\t\texpect(wrapper.state('error').length).toBe(0);\n\t\t});\n  });\n}\n"]},"hash":"e0ba9a27b91baa5dd1306a39bef3cfba5a6d062a"}
