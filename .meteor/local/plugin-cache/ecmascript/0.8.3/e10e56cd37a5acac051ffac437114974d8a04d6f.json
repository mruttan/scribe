{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/runner.js","filenameRelative":"packages/practicalmeteor:mocha/test/runner.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/runner.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/runner.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"runner"},"ignored":false,"code":"var mocha = require('../'),\n    Suite = mocha.Suite,\n    Runner = mocha.Runner,\n    Test = mocha.Test;\n\ndescribe('Runner', function () {\n  var suite, runner;\n  beforeEach(function () {\n    suite = new Suite(null, 'root');\n    runner = new Runner(suite);\n  });\n  describe('.grep()', function () {\n    it('should update the runner.total with number of matched tests', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/);\n      newRunner.total.should.equal(2);\n    });\n    it('should update the runner.total with number of matched tests when inverted', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/, true);\n      newRunner.total.should.equal(1);\n    });\n  });\n  describe('.grepTotal()', function () {\n    it('should return the total number of matched tests', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/);\n      runner.grepTotal(suite).should.equal(2);\n    });\n    it('should return the total number of matched tests when inverted', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/, true);\n      runner.grepTotal(suite).should.equal(1);\n    });\n  });\n  describe('.globalProps()', function () {\n    it('should include common non enumerable globals', function () {\n      var props = runner.globalProps();\n      props.should.containEql('setTimeout');\n      props.should.containEql('clearTimeout');\n      props.should.containEql('setInterval');\n      props.should.containEql('clearInterval');\n      props.should.containEql('Date');\n      props.should.containEql('XMLHttpRequest');\n    });\n  });\n  describe('.globals()', function () {\n    it('should default to the known globals', function () {\n      runner.globals().length.should.be.above(16);\n    });\n    it('should white-list globals', function () {\n      runner.globals(['foo', 'bar']);\n      runner.globals().should.containEql('foo');\n      runner.globals().should.containEql('bar');\n    });\n  });\n  describe('.checkGlobals(test)', function () {\n    it('should allow variables that match a wildcard', function (done) {\n      runner.globals(['foo*', 'giz*']);\n      global.foo = 'baz';\n      global.gizmo = 'quux';\n      runner.checkGlobals();\n      delete global.foo;\n      delete global.gizmo;\n      done();\n    });\n    it('should emit \"fail\" when a new global is introduced', function (done) {\n      runner.checkGlobals();\n      global.foo = 'bar';\n      runner.on('fail', function (test, err) {\n        test.should.equal('im a test');\n        err.message.should.equal('global leak detected: foo');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    });\n    it('should emit \"fail\" when a single new disallowed global is introduced after a single extra global is allowed', function (done) {\n      var doneCalled = false;\n      runner.globals('good');\n      global.bad = 1;\n      runner.on('fail', function (test, err) {\n        delete global.bad;\n        done();\n        doneCalled = true;\n      });\n      runner.checkGlobals('test');\n\n      if (!doneCalled) {\n        done(Error(\"Expected test failure did not occur.\"));\n      }\n    });\n    it('should not fail when a new common global is introduced', function () {\n      // verify that the prop isn't enumerable\n      delete global.XMLHttpRequest;\n      global.propertyIsEnumerable('XMLHttpRequest').should.not.be.ok(); // create a new runner and keep a reference to the test.\n\n      var test = new Test('im a test about bears');\n      suite.addTest(test);\n      var newRunner = new Runner(suite); // make the prop enumerable again.\n\n      global.XMLHttpRequest = function () {};\n\n      global.propertyIsEnumerable('XMLHttpRequest').should.be.ok(); // verify the test hasn't failed.\n\n      newRunner.checkGlobals(test);\n      test.should.not.have.key('state'); // clean up our global space.\n\n      delete global.XMLHttpRequest;\n    });\n    it('should pluralize the error message when several are introduced', function (done) {\n      runner.checkGlobals();\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function (test, err) {\n        test.should.equal('im a test');\n        err.message.should.equal('global leaks detected: foo, bar');\n        delete global.foo;\n        delete global.bar;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    });\n    it('should respect per test whitelisted globals', function () {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n      suite.addTest(test);\n      var runner = new Runner(suite);\n      global.foo = 'bar'; // verify the test hasn't failed.\n\n      runner.checkGlobals(test);\n      test.should.not.have.key('state');\n      delete global.foo;\n    });\n    it('should respect per test whitelisted globals but still detect other leaks', function (done) {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n      suite.addTest(test);\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function (test, err) {\n        test.title.should.equal('im a test about lions');\n        err.message.should.equal('global leak detected: bar');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals(test);\n    });\n  });\n  describe('.hook(name, fn)', function () {\n    it('should execute hooks after failed test if suite bail is true', function (done) {\n      runner.fail({});\n      suite.bail(true);\n      suite.afterEach(function () {\n        suite.afterAll(function () {\n          done();\n        });\n      });\n      runner.hook('afterEach', function () {});\n      runner.hook('afterAll', function () {});\n    });\n  });\n  describe('.fail(test, err)', function () {\n    it('should increment .failures', function () {\n      runner.failures.should.equal(0);\n      runner.fail({}, {});\n      runner.failures.should.equal(1);\n      runner.fail({}, {});\n      runner.failures.should.equal(2);\n    });\n    it('should set test.state to \"failed\"', function () {\n      var test = {};\n      runner.fail(test, 'some error');\n      test.state.should.equal('failed');\n    });\n    it('should emit \"fail\"', function (done) {\n      var test = {},\n          err = {};\n      runner.on('fail', function (test, err) {\n        test.should.equal(test);\n        err.should.equal(err);\n        done();\n      });\n      runner.fail(test, err);\n    });\n    it('should emit a helpful message when failed with a string', function (done) {\n      var test = {},\n          err = 'string';\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the string \"string\" was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n    it('should emit a the error when failed with an Error instance', function (done) {\n      var test = {},\n          err = new Error('an error message');\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    });\n    it('should emit the error when failed with an Error-like object', function (done) {\n      var test = {},\n          err = {\n        message: 'an error message'\n      };\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    });\n    it('should emit a helpful message when failed with an Object', function (done) {\n      var test = {},\n          err = {\n        x: 1\n      };\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the object {\\n  \"x\": 1\\n} was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n    it('should emit a helpful message when failed with an Array', function (done) {\n      var test = {},\n          err = [1, 2];\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the array [\\n  1\\n  2\\n] was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n  });\n  describe('.failHook(hook, err)', function () {\n    it('should increment .failures', function () {\n      runner.failures.should.equal(0);\n      runner.failHook({}, {});\n      runner.failures.should.equal(1);\n      runner.failHook({}, {});\n      runner.failures.should.equal(2);\n    });\n    it('should augment hook title with current test title', function () {\n      var hook = {\n        title: '\"before each\" hook',\n        ctx: {\n          currentTest: new Test('should behave')\n        }\n      };\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should behave\"');\n      hook.ctx.currentTest = new Test('should obey');\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should obey\"');\n    });\n    it('should emit \"fail\"', function (done) {\n      var hook = {},\n          err = {};\n      runner.on('fail', function (hook, err) {\n        hook.should.equal(hook);\n        err.should.equal(err);\n        done();\n      });\n      runner.failHook(hook, err);\n    });\n    it('should emit \"end\" if suite bail is true', function (done) {\n      var hook = {},\n          err = {};\n      suite.bail(true);\n      runner.on('end', done);\n      runner.failHook(hook, err);\n    });\n    it('should not emit \"end\" if suite bail is not true', function (done) {\n      var hook = {},\n          err = {};\n      suite.bail(false);\n      runner.on('end', function () {\n        throw new Error('\"end\" was emit, but the bail is false');\n      });\n      runner.failHook(hook, err);\n      done();\n    });\n  });\n  describe('allowUncaught', function () {\n    it('should allow unhandled errors to propagate through', function (done) {\n      var newRunner = new Runner(suite);\n      newRunner.allowUncaught = true;\n      newRunner.test = new Test('failing test', function () {\n        throw new Error('allow unhandled errors');\n      });\n\n      function fail() {\n        newRunner.runTest();\n      }\n\n      fail.should.throw('allow unhandled errors');\n      done();\n    });\n  });\n  describe('stackTrace', function () {\n    var stack = ['AssertionError: foo bar', 'at EventEmitter.<anonymous> (/usr/local/dev/test.js:16:12)', 'at Context.<anonymous> (/usr/local/dev/test.js:19:5)', 'Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:244:7)', 'Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:374:10)', '/usr/local/lib/node_modules/mocha/lib/runner.js:452:12', 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:299:14)', '/usr/local/lib/node_modules/mocha/lib/runner.js:309:7', 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:248:23)', 'Immediate._onImmediate (/usr/local/lib/node_modules/mocha/lib/runner.js:276:5)', 'at processImmediate [as _immediateCallback] (timers.js:321:17)'];\n    describe('shortStackTrace', function () {\n      it('should prettify the stack-trace', function (done) {\n        var hook = {},\n            err = new Error(); // Fake stack-trace\n\n        err.stack = stack.join('\\n');\n        runner.on('fail', function (hook, err) {\n          err.stack.should.equal(stack.slice(0, 3).join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n    describe('longStackTrace', function () {\n      it('should display the full stack-trace', function (done) {\n        var hook = {},\n            err = new Error(); // Fake stack-trace\n\n        err.stack = stack.join('\\n'); // Add --stack-trace option\n\n        runner.fullStackTrace = true;\n        runner.on('fail', function (hook, err) {\n          err.stack.should.equal(stack.join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/runner.js"],"names":["mocha","require","Suite","Runner","Test","describe","suite","runner","beforeEach","it","addTest","newRunner","grep","total","should","equal","grepTotal","props","globalProps","containEql","globals","length","be","above","done","global","foo","gizmo","checkGlobals","on","test","err","message","doneCalled","bad","Error","XMLHttpRequest","propertyIsEnumerable","not","ok","have","key","bar","title","fail","bail","afterEach","afterAll","hook","failures","state","x","failHook","ctx","currentTest","allowUncaught","runTest","throw","stack","join","slice","fullStackTrace"],"mappings":"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","file":"packages/practicalmeteor:mocha/test/runner.js.map","sourcesContent":["var mocha = require('../')\n  , Suite = mocha.Suite\n  , Runner = mocha.Runner\n  , Test = mocha.Test;\n\ndescribe('Runner', function(){\n  var suite, runner;\n\n  beforeEach(function(){\n    suite = new Suite(null, 'root');\n    runner = new Runner(suite);\n  })\n\n  describe('.grep()', function(){\n    it('should update the runner.total with number of matched tests', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/);\n      newRunner.total.should.equal(2);\n    })\n\n    it('should update the runner.total with number of matched tests when inverted', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/, true);\n      newRunner.total.should.equal(1);\n    })\n  })\n\n  describe('.grepTotal()', function(){\n    it('should return the total number of matched tests', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/);\n      runner.grepTotal(suite).should.equal(2);\n    })\n\n    it('should return the total number of matched tests when inverted', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/, true);\n      runner.grepTotal(suite).should.equal(1);\n    })\n  })\n\n  describe('.globalProps()', function(){\n    it('should include common non enumerable globals', function() {\n      var props = runner.globalProps();\n      props.should.containEql('setTimeout');\n      props.should.containEql('clearTimeout');\n      props.should.containEql('setInterval');\n      props.should.containEql('clearInterval');\n      props.should.containEql('Date');\n      props.should.containEql('XMLHttpRequest');\n    });\n  });\n\n  describe('.globals()', function(){\n    it('should default to the known globals', function(){\n      runner.globals().length.should.be.above(16);\n    })\n\n    it('should white-list globals', function(){\n      runner.globals(['foo', 'bar']);\n      runner.globals().should.containEql('foo');\n      runner.globals().should.containEql('bar');\n    })\n  })\n\n  describe('.checkGlobals(test)', function(){\n    it('should allow variables that match a wildcard', function(done) {\n      runner.globals(['foo*', 'giz*']);\n      global.foo = 'baz';\n      global.gizmo = 'quux';\n      runner.checkGlobals();\n      delete global.foo;\n      delete global.gizmo;\n      done()\n    })\n\n    it('should emit \"fail\" when a new global is introduced', function(done){\n      runner.checkGlobals();\n      global.foo = 'bar';\n      runner.on('fail', function(test, err){\n        test.should.equal('im a test');\n        err.message.should.equal('global leak detected: foo');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    })\n\n    it('should emit \"fail\" when a single new disallowed global is introduced after a single extra global is allowed', function(done) {\n      var doneCalled = false;\n      runner.globals('good');\n      global.bad = 1;\n      runner.on('fail', function(test, err) {\n        delete global.bad;\n        done();\n        doneCalled = true;\n      });\n      runner.checkGlobals('test');\n      if (!doneCalled) {\n        done(Error(\"Expected test failure did not occur.\"));\n      }\n    });\n\n    it ('should not fail when a new common global is introduced', function(){\n      // verify that the prop isn't enumerable\n      delete global.XMLHttpRequest;\n      global.propertyIsEnumerable('XMLHttpRequest').should.not.be.ok();\n\n      // create a new runner and keep a reference to the test.\n      var test = new Test('im a test about bears');\n      suite.addTest(test);\n      var newRunner = new Runner(suite);\n\n      // make the prop enumerable again.\n      global.XMLHttpRequest = function() {};\n      global.propertyIsEnumerable('XMLHttpRequest').should.be.ok();\n\n      // verify the test hasn't failed.\n      newRunner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      // clean up our global space.\n      delete global.XMLHttpRequest;\n    });\n\n    it('should pluralize the error message when several are introduced', function(done){\n      runner.checkGlobals();\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function(test, err){\n        test.should.equal('im a test');\n        err.message.should.equal('global leaks detected: foo, bar');\n        delete global.foo;\n        delete global.bar;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    })\n\n    it('should respect per test whitelisted globals', function() {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n      var runner = new Runner(suite);\n\n      global.foo = 'bar';\n\n      // verify the test hasn't failed.\n      runner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      delete global.foo;\n    })\n\n    it('should respect per test whitelisted globals but still detect other leaks', function(done) {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function(test, err){\n        test.title.should.equal('im a test about lions');\n        err.message.should.equal('global leak detected: bar');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals(test);\n    })\n  })\n\n  describe('.hook(name, fn)', function(){\n    it('should execute hooks after failed test if suite bail is true', function(done){\n      runner.fail({});\n      suite.bail(true);\n      suite.afterEach(function(){\n        suite.afterAll(function() {\n          done();\n        })\n      });\n      runner.hook('afterEach', function(){});\n      runner.hook('afterAll', function(){});\n    })\n  })\n\n  describe('.fail(test, err)', function(){\n    it('should increment .failures', function(){\n      runner.failures.should.equal(0);\n      runner.fail({}, {});\n      runner.failures.should.equal(1);\n      runner.fail({}, {});\n      runner.failures.should.equal(2);\n    })\n\n    it('should set test.state to \"failed\"', function(){\n      var test = {};\n      runner.fail(test, 'some error');\n      test.state.should.equal('failed');\n    })\n\n    it('should emit \"fail\"', function(done){\n      var test = {}, err = {};\n      runner.on('fail', function(test, err){\n        test.should.equal(test);\n        err.should.equal(err);\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with a string', function(done){\n      var test = {}, err = 'string';\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the string \"string\" was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a the error when failed with an Error instance', function(done){\n      var test = {}, err = new Error('an error message');\n      runner.on('fail', function(test, err){\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit the error when failed with an Error-like object', function(done){\n      var test = {}, err = {message: 'an error message'};\n      runner.on('fail', function(test, err){\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with an Object', function(done){\n      var test = {}, err = { x: 1 };\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the object {\\n  \"x\": 1\\n} was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with an Array', function(done){\n      var test = {}, err = [1,2];\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the array [\\n  1\\n  2\\n] was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n  })\n\n  describe('.failHook(hook, err)', function(){\n    it('should increment .failures', function(){\n      runner.failures.should.equal(0);\n      runner.failHook({}, {});\n      runner.failures.should.equal(1);\n      runner.failHook({}, {});\n      runner.failures.should.equal(2);\n    })\n\n    it('should augment hook title with current test title', function(){\n      var hook = {\n        title: '\"before each\" hook',\n        ctx: { currentTest: new Test('should behave') }\n      };\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should behave\"');\n\n      hook.ctx.currentTest = new Test('should obey');\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should obey\"');\n    })\n\n    it('should emit \"fail\"', function(done){\n      var hook = {}, err = {};\n      runner.on('fail', function(hook, err){\n        hook.should.equal(hook);\n        err.should.equal(err);\n        done();\n      });\n      runner.failHook(hook, err);\n    })\n\n    it('should emit \"end\" if suite bail is true', function(done){\n      var hook = {}, err = {};\n      suite.bail(true);\n      runner.on('end', done);\n      runner.failHook(hook, err);\n    })\n\n    it('should not emit \"end\" if suite bail is not true', function(done){\n      var hook = {}, err = {};\n      suite.bail(false);\n      runner.on('end', function() { throw new Error('\"end\" was emit, but the bail is false'); });\n      runner.failHook(hook, err);\n      done();\n    })\n  });\n\n  describe('allowUncaught', function() {\n    it('should allow unhandled errors to propagate through', function(done) {\n      var newRunner = new Runner(suite);\n      newRunner.allowUncaught = true;\n      newRunner.test = new Test('failing test', function() {\n        throw new Error('allow unhandled errors');\n      });\n      function fail() {\n        newRunner.runTest();\n      }\n      fail.should.throw('allow unhandled errors');\n      done();\n    });\n  });\n\n  describe('stackTrace', function() {\n    var stack = [ 'AssertionError: foo bar'\n      , 'at EventEmitter.<anonymous> (/usr/local/dev/test.js:16:12)'\n      , 'at Context.<anonymous> (/usr/local/dev/test.js:19:5)'\n      , 'Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:244:7)'\n      , 'Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:374:10)'\n      , '/usr/local/lib/node_modules/mocha/lib/runner.js:452:12'\n      , 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:299:14)'\n      , '/usr/local/lib/node_modules/mocha/lib/runner.js:309:7'\n      , 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:248:23)'\n      , 'Immediate._onImmediate (/usr/local/lib/node_modules/mocha/lib/runner.js:276:5)'\n      , 'at processImmediate [as _immediateCallback] (timers.js:321:17)'];\n\n    describe('shortStackTrace', function() {\n      it('should prettify the stack-trace', function(done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n\n        runner.on('fail', function(hook, err){\n          err.stack.should.equal(stack.slice(0,3).join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n\n    describe('longStackTrace', function() {\n      it('should display the full stack-trace', function(done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n        // Add --stack-trace option\n        runner.fullStackTrace = true;\n\n        runner.on('fail', function(hook, err){\n          err.stack.should.equal(stack.join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n  });\n});\n"]},"hash":"e10e56cd37a5acac051ffac437114974d8a04d6f"}
