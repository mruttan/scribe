{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/reporters/base.js","filenameRelative":"packages/practicalmeteor:mocha/test/reporters/base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/reporters/base.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/reporters/base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"base"},"ignored":false,"code":"var Base = require('../../lib/reporters/base'),\n    Assert = require('assert').AssertionError;\n\nfunction makeTest(err) {\n  return {\n    err: err,\n    fullTitle: function () {\n      return 'test title';\n    }\n  };\n}\n\ndescribe('Base reporter', function () {\n  var stdout, stdoutWrite, useColors;\n  beforeEach(function () {\n    stdout = [];\n    stdoutWrite = process.stdout.write;\n\n    process.stdout.write = function (string) {\n      stdout.push(string);\n    };\n\n    useColors = Base.useColors;\n    Base.useColors = false;\n  });\n  afterEach(function () {\n    process.stdout.write = stdoutWrite;\n    Base.useColors = useColors;\n  });\n  describe('showDiff', function () {\n    it('should show diffs by default', function () {\n      var err = new Assert({\n        actual: 'foo',\n        expected: 'bar'\n      }),\n          errOut;\n      var test = makeTest(err);\n      Base.list([test]);\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n    it('should show diffs if property set to `true`', function () {\n      var err = new Assert({\n        actual: 'foo',\n        expected: 'bar'\n      }),\n          errOut;\n      err.showDiff = true;\n      var test = makeTest(err);\n      Base.list([test]);\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n    it('should not show diffs when showDiff property set to `false`', function () {\n      var err = new Assert({\n        actual: 'foo',\n        expected: 'bar'\n      }),\n          errOut;\n      err.showDiff = false;\n      var test = makeTest(err);\n      Base.list([test]);\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n    it('should not show diffs when expected is not defined', function () {\n      var err = new Error('ouch'),\n          errOut;\n      var test = makeTest(err);\n      Base.list([test]);\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n  });\n  describe('Getting two strings', function () {\n    // Fix regression V1.2.1(see: issue #1241)\n    it('should show strings diff as is', function () {\n      var err = new Error('test'),\n          errOut;\n      err.actual = 'foo\\nbar';\n      err.expected = 'foo\\nbaz';\n      err.showDiff = true;\n      var test = makeTest(err);\n      Base.list([test]);\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\"foo\\\\nbar\"/);\n      errOut.should.match(/foo/).and.match(/bar/);\n      errOut.should.match(/test/);\n      errOut.should.match(/actual/);\n      errOut.should.match(/expected/);\n    });\n  });\n  it('should stringify objects', function () {\n    var err = new Error('test'),\n        errOut;\n    err.actual = {\n      key: \"a1\"\n    };\n    err.expected = {\n      key: \"e1\"\n    };\n    err.showDiff = true;\n    var test = makeTest(err);\n    Base.list([test]);\n    errOut = stdout.join('\\n');\n    errOut.should.match(/\"key\"/);\n    errOut.should.match(/test/);\n    errOut.should.match(/\\- actual/);\n    errOut.should.match(/\\+ expected/);\n  });\n  it('should remove message from stack', function () {\n    var err = {\n      message: 'Error',\n      stack: 'Error\\nfoo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n  it('should use the inspect() property if `message` is not set', function () {\n    var err = {\n      showDiff: false,\n      inspect: function () {\n        return 'an error happened';\n      }\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     an error happened');\n  });\n  it('should not modify stack if it does not contain message', function () {\n    var err = {\n      message: 'Error',\n      stack: 'foo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/reporters/base.js"],"names":["Base","require","Assert","AssertionError","makeTest","err","fullTitle","describe","stdout","stdoutWrite","useColors","beforeEach","process","write","string","push","afterEach","it","actual","expected","errOut","test","list","join","should","match","showDiff","not","Error","and","key","message","stack","trim","equal","inspect"],"mappings":"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","file":"packages/practicalmeteor:mocha/test/reporters/base.js.map","sourcesContent":["var Base   = require('../../lib/reporters/base')\n  , Assert = require('assert').AssertionError;\n\nfunction makeTest(err) {\n  return {\n    err: err,\n    fullTitle: function () {\n      return 'test title';\n    }\n  };\n}\n\ndescribe('Base reporter', function () {\n  var stdout\n    , stdoutWrite\n    , useColors;\n\n  beforeEach(function () {\n    stdout = [];\n    stdoutWrite = process.stdout.write;\n    process.stdout.write = function (string) {\n      stdout.push(string);\n    };\n    useColors = Base.useColors;\n    Base.useColors = false;\n  });\n\n  afterEach(function () {\n    process.stdout.write = stdoutWrite;\n    Base.useColors = useColors;\n  });\n\n  describe('showDiff', function() {\n    it('should show diffs by default', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should show diffs if property set to `true`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      err.showDiff = true;\n      var test = makeTest(err);\n\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when showDiff property set to `false`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      err.showDiff = false;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when expected is not defined', function () {\n      var err = new Error('ouch')\n        , errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n\n  });\n\n  describe('Getting two strings', function() {\n    // Fix regression V1.2.1(see: issue #1241)\n    it('should show strings diff as is', function () {\n      var err = new Error('test'),\n        errOut;\n\n      err.actual = 'foo\\nbar';\n      err.expected = 'foo\\nbaz';\n      err.showDiff = true;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n\n      errOut.should.not.match(/\"foo\\\\nbar\"/);\n      errOut.should.match(/foo/).and.match(/bar/);\n      errOut.should.match(/test/);\n      errOut.should.match(/actual/);\n      errOut.should.match(/expected/);\n    });\n  });\n\n  it('should stringify objects', function () {\n    var err = new Error('test'),\n      errOut;\n\n    err.actual = {key:\"a1\"};\n    err.expected = {key:\"e1\"};\n    err.showDiff = true;\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    errOut = stdout.join('\\n');\n    errOut.should.match(/\"key\"/);\n    errOut.should.match(/test/);\n    errOut.should.match(/\\- actual/);\n    errOut.should.match(/\\+ expected/);\n  });\n\n  it('should remove message from stack', function () {\n    var err = {\n      message: 'Error',\n      stack: 'Error\\nfoo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n\n  it('should use the inspect() property if `message` is not set', function () {\n    var err = {\n      showDiff: false,\n      inspect: function() { return 'an error happened'; },\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     an error happened');\n  });\n\n  it('should not modify stack if it does not contain message', function () {\n    var err = {\n      message: 'Error',\n      stack: 'foo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n\n});\n"]},"hash":"fc167b329f97c0706de991afd0a11516d5343007"}
