{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"expect","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"expect"}]},{"source":"./notes","imported":["Notes"],"specifiers":[{"kind":"named","imported":"Notes","local":"Notes"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/api/notes.test.js","filenameRelative":"imports/api/notes.test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/notes.test.js.map","sourceFileName":"imports/api/notes.test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notes.test"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar expect = void 0;\nmodule.watch(require(\"expect\"), {\n  \"default\": function (v) {\n    expect = v;\n  }\n}, 1);\nvar Notes = void 0;\nmodule.watch(require(\"./notes\"), {\n  Notes: function (v) {\n    Notes = v;\n  }\n}, 2);\n\nif (Meteor.isServer) {\n  describe('notes', function () {\n    var noteOne = {\n      _id: 'testNoteId1',\n      title: 'My Title',\n      body: 'My body for note',\n      updatedAt: 0,\n      userId: 'testUserId1'\n    };\n    beforeEach(function () {\n      Notes.remove({});\n      Notes.insert(noteOne);\n    });\n    it('should insert new note', function () {\n      var userId = 'testid';\n\n      var _id = Meteor.server.method_handlers['notes.insert'].apply({\n        userId: userId\n      });\n\n      expect(Notes.findOne({\n        _id: _id,\n        userId: userId\n      })).toExist();\n    });\n    it('should not insert note if not authenticated', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({\n        userId: noteOne.userId\n      }, [noteOne._id]);\n      expect(Notes.findOne({\n        _id: noteOne._id\n      })).toNotExist();\n    });\n    it('should not remove note if unauthenticated', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.remove'].apply({}, [noteOne._id]);\n      }).toThrow();\n    });\n    it('should not remove note if invalid _id', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.remove'].apply({\n          userId: noteOne.userId\n        });\n      }).toThrow();\n    });\n    it('should update note', function () {\n      var title = 'This is an updated title';\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: noteOne.userId\n      }, [noteOne._id, {\n        title: title\n      }]);\n      var note = Notes.findOne(noteOne._id);\n      expect(note.updatedAt).toBeGreaterThan(0);\n      expect(note).toInclude({\n        title: title,\n        body: noteOne.body\n      });\n    });\n    it('should throw error if extra updates provided', function () {\n      expect(function () {\n        Meteor.server.method_handlers['notes.update'].apply({\n          userId: noteOne.userId\n        }, [noteOne._id, {\n          title: 'new title',\n          name: 'Matt'\n        }]);\n      }).toThrow();\n    });\n    it('should not update note if user was not creator', function () {\n      var title = 'This is an updated title';\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: 'testid'\n      }, [noteOne._id, {\n        title: title\n      }]);\n      var note = Notes.findOne(noteOne._id);\n      expect(note).toInclude(noteOne);\n    });\n  });\n}","map":{"version":3,"sources":["imports/api/notes.test.js"],"names":["Meteor","module","watch","require","v","expect","Notes","isServer","describe","noteOne","_id","title","body","updatedAt","userId","beforeEach","remove","insert","it","server","method_handlers","apply","findOne","toExist","toThrow","toNotExist","note","toBeGreaterThan","toInclude","name"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,QAAD,YAAQI,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,eAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAAA,uBAASC,CAAT,EAAW;AAACC,aAAOD,CAAP;AAAS;AAArB,CAA/B,EAAsD,CAAtD;AAAyD,IAAIE,cAAJ;AAAUL,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb,EAAgC;AAACG,OAAD,YAAOF,CAAP,EAAS;AAACE,YAAMF,CAAN;AAAQ;AAAlB,CAAhC,EAAoD,CAApD;;AAKxJ,IAAIJ,OAAOO,QAAX,EAAqB;AACnBC,WAAS,OAAT,EAAkB,YAAY;AAC5B,QAAMC,UAAU;AACdC,WAAK,aADS;AAEdC,aAAO,UAFO;AAGdC,YAAM,kBAHQ;AAIdC,iBAAW,CAJG;AAKdC,cAAQ;AALM,KAAhB;AAQAC,eAAW,YAAY;AACrBT,YAAMU,MAAN,CAAa,EAAb;AACAV,YAAMW,MAAN,CAAaR,OAAb;AACD,KAHD;AAKAS,OAAG,wBAAH,EAA6B,YAAY;AACvC,UAAMJ,SAAS,QAAf;;AACA,UAAMJ,MAAMV,OAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEP;AAAF,OAApD,CAAZ;;AAEAT,aAAOC,MAAMgB,OAAN,CAAc;AAAEZ,gBAAF;AAAOI;AAAP,OAAd,CAAP,EAAuCS,OAAvC;AACD,KALD;AAOAL,OAAG,6CAAH,EAAkD,YAAY;AAC5Db,aAAO,YAAM;AACXL,eAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B;AACD,OAFD,EAEGI,OAFH;AAGD,KAJD;AAMAN,OAAG,oBAAH,EAAyB,YAAY;AACnClB,aAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEP,gBAAQL,QAAQK;AAAlB,OAApD,EAAgF,CAACL,QAAQC,GAAT,CAAhF;AAEAL,aAAOC,MAAMgB,OAAN,CAAc;AAAEZ,aAAKD,QAAQC;AAAf,OAAd,CAAP,EAA2Ce,UAA3C;AACD,KAJD;AAMAP,OAAG,2CAAH,EAAgD,YAAY;AAC1Db,aAAO,YAAM;AACXL,eAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD,EAApD,EAAwD,CAACZ,QAAQC,GAAT,CAAxD;AACD,OAFD,EAEGc,OAFH;AAGD,KAJD;AAMAN,OAAG,uCAAH,EAA4C,YAAY;AACtDb,aAAO,YAAM;AACXL,eAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAAEP,kBAAQL,QAAQK;AAAlB,SAApD;AACD,OAFD,EAEGU,OAFH;AAGD,KAJD;AAMAN,OAAG,oBAAH,EAAyB,YAAY;AACnC,UAAMP,QAAQ,0BAAd;AAEAX,aAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAClDP,gBAAQL,QAAQK;AADkC,OAApD,EAEG,CACDL,QAAQC,GADP,EAED;AAAEC;AAAF,OAFC,CAFH;AAOA,UAAMe,OAAOpB,MAAMgB,OAAN,CAAcb,QAAQC,GAAtB,CAAb;AAEAL,aAAOqB,KAAKb,SAAZ,EAAuBc,eAAvB,CAAuC,CAAvC;AACAtB,aAAOqB,IAAP,EAAaE,SAAb,CAAuB;AACrBjB,oBADqB;AAErBC,cAAMH,QAAQG;AAFO,OAAvB;AAID,KAjBD;AAmBAM,OAAG,8CAAH,EAAmD,YAAY;AAC7Db,aAAO,YAAM;AACXL,eAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAClDP,kBAAQL,QAAQK;AADkC,SAApD,EAEG,CACDL,QAAQC,GADP,EAED;AAAEC,iBAAO,WAAT;AAAsBkB,gBAAM;AAA5B,SAFC,CAFH;AAMD,OAPD,EAOGL,OAPH;AAQD,KATD;AAWAN,OAAG,gDAAH,EAAqD,YAAY;AAC/D,UAAMP,QAAQ,0BAAd;AAEAX,aAAOmB,MAAP,CAAcC,eAAd,CAA8B,cAA9B,EAA8CC,KAA9C,CAAoD;AAClDP,gBAAQ;AAD0C,OAApD,EAEG,CACDL,QAAQC,GADP,EAED;AAAEC;AAAF,OAFC,CAFH;AAOA,UAAMe,OAAOpB,MAAMgB,OAAN,CAAcb,QAAQC,GAAtB,CAAb;AAEAL,aAAOqB,IAAP,EAAaE,SAAb,CAAuBnB,OAAvB;AACD,KAbD;AAcD,GAzFD;AA0FD","file":"imports/api/notes.test.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { Notes } from './notes';\n\nif (Meteor.isServer) {\n  describe('notes', function () {\n    const noteOne = {\n      _id: 'testNoteId1',\n      title: 'My Title',\n      body: 'My body for note',\n      updatedAt: 0,\n      userId: 'testUserId1'\n    };\n\n    beforeEach(function () {\n      Notes.remove({});\n      Notes.insert(noteOne);\n    });\n\n    it('should insert new note', function () {\n      const userId = 'testid';\n      const _id = Meteor.server.method_handlers['notes.insert'].apply({ userId });\n\n      expect(Notes.findOne({ _id, userId })).toExist();\n    });\n\n    it('should not insert note if not authenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId }, [noteOne._id]);\n\n      expect(Notes.findOne({ _id: noteOne._id})).toNotExist();\n    });\n\n    it('should not remove note if unauthenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({}, [noteOne._id]);\n      }).toThrow();\n    });\n\n    it('should not remove note if invalid _id', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId });\n      }).toThrow();\n    });\n\n    it('should update note', function () {\n      const title = 'This is an updated title';\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: noteOne.userId\n      }, [\n        noteOne._id,\n        { title }\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note.updatedAt).toBeGreaterThan(0);\n      expect(note).toInclude({\n        title,\n        body: noteOne.body\n      });\n    });\n\n    it('should throw error if extra updates provided', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.update'].apply({\n          userId: noteOne.userId\n        }, [\n          noteOne._id,\n          { title: 'new title', name: 'Matt'}\n        ]);\n      }).toThrow();\n    });\n\n    it('should not update note if user was not creator', function () {\n      const title = 'This is an updated title';\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: 'testid'\n      }, [\n        noteOne._id,\n        { title }\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note).toInclude(noteOne);\n    });\n  });\n}\n"]},"hash":"b1a948ad94e028004c4a8bb369f128163743f903"}
