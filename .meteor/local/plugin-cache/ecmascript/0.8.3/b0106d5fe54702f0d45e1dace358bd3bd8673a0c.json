{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/practicalmeteor:mocha/test/browser/array.js","filenameRelative":"packages/practicalmeteor:mocha/test/browser/array.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/practicalmeteor:mocha/test/browser/array.js.map","sourceFileName":"packages/practicalmeteor:mocha/test/browser/array.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"array"},"ignored":false,"code":"describe('Array', function () {\n  describe('#push()', function () {\n    it('should append a value', function () {\n      foo = 'asdf';\n      var arr = [];\n      arr.push('foo');\n      arr.push('bar');\n      arr.push('baz');\n      assert('foo' == arr[0]); // to test indentation\n\n      assert('bar' == arr[1]);\n      assert('baz' == arr[2]);\n    });\n    it('should return the length', function () {\n      var arr = [];\n      assert(1 == arr.push('foo'));\n      assert(2 == arr.push('bar'));\n      assert(3 == arr.push('baz'));\n    });\n  });\n});\ndescribe('Array', function () {\n  describe('#pop()', function () {\n    it('should remove and return the last value', function () {\n      var arr = [1, 2, 3];\n      assert(arr.pop() == 3);\n      assert(arr.pop() == 2);\n      assert(arr.pop() == -1);\n    });\n    it('should adjust .length', function () {\n      var arr = [1, 2, 3];\n      arr.pop();\n      assert(arr.length == 2);\n    });\n  });\n});","map":{"version":3,"sources":["packages/practicalmeteor:mocha/test/browser/array.js"],"names":["describe","it","foo","arr","push","assert","pop","length"],"mappings":"AAAAA,SAAS,OAAT,EAAkB,YAAU;AAC1BA,WAAS,SAAT,EAAoB,YAAU;AAC5BC,OAAG,uBAAH,EAA4B,YAAU;AACpCC,YAAM,MAAN;AACA,UAAIC,MAAM,EAAV;AACAA,UAAIC,IAAJ,CAAS,KAAT;AACAD,UAAIC,IAAJ,CAAS,KAAT;AACAD,UAAIC,IAAJ,CAAS,KAAT;AACEC,aAAO,SAASF,IAAI,CAAJ,CAAhB,EANkC,CAMT;;AACzBE,aAAO,SAASF,IAAI,CAAJ,CAAhB;AACFE,aAAO,SAASF,IAAI,CAAJ,CAAhB;AACD,KATD;AAWAF,OAAG,0BAAH,EAA+B,YAAU;AACvC,UAAIE,MAAM,EAAV;AACAE,aAAO,KAAKF,IAAIC,IAAJ,CAAS,KAAT,CAAZ;AACAC,aAAO,KAAKF,IAAIC,IAAJ,CAAS,KAAT,CAAZ;AACAC,aAAO,KAAKF,IAAIC,IAAJ,CAAS,KAAT,CAAZ;AACD,KALD;AAMD,GAlBD;AAmBD,CApBD;AAsBAJ,SAAS,OAAT,EAAkB,YAAU;AAC1BA,WAAS,QAAT,EAAmB,YAAU;AAC3BC,OAAG,yCAAH,EAA8C,YAAU;AACtD,UAAIE,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV;AACAE,aAAOF,IAAIG,GAAJ,MAAa,CAApB;AACAD,aAAOF,IAAIG,GAAJ,MAAa,CAApB;AACAD,aAAOF,IAAIG,GAAJ,MAAa,CAAC,CAArB;AACD,KALD;AAOAL,OAAG,uBAAH,EAA4B,YAAU;AACpC,UAAIE,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV;AACAA,UAAIG,GAAJ;AACAD,aAAOF,IAAII,MAAJ,IAAc,CAArB;AACD,KAJD;AAKD,GAbD;AAcD,CAfD","file":"packages/practicalmeteor:mocha/test/browser/array.js.map","sourcesContent":["describe('Array', function(){\n  describe('#push()', function(){\n    it('should append a value', function(){\n      foo = 'asdf'\n      var arr = [];\n      arr.push('foo');\n      arr.push('bar');\n      arr.push('baz');\n        assert('foo' == arr[0]); // to test indentation\n        assert('bar' == arr[1]);\n      assert('baz' == arr[2]);\n    })\n\n    it('should return the length', function(){\n      var arr = [];\n      assert(1 == arr.push('foo'));\n      assert(2 == arr.push('bar'));\n      assert(3 == arr.push('baz'));\n    })\n  })\n})\n\ndescribe('Array', function(){\n  describe('#pop()', function(){\n    it('should remove and return the last value', function(){\n      var arr = [1,2,3];\n      assert(arr.pop() == 3);\n      assert(arr.pop() == 2);\n      assert(arr.pop() == -1);\n    })\n\n    it('should adjust .length', function(){\n      var arr = [1,2,3];\n      arr.pop();\n      assert(arr.length == 2);\n    })\n  })\n})\n"]},"hash":"b0106d5fe54702f0d45e1dace358bd3bd8673a0c"}
